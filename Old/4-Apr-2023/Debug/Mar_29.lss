
Mar_29.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  00003b40  00003bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008000a4  008000a4  00003c18  2**0
                  ALLOC
  3 .stab         00004ad0  00000000  00000000  00003c18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000038a3  00000000  00000000  000086e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000bf8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000c0cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c23b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000de84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ed6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000fb1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000fc7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ff09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000106d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__vector_1>
       8:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__vector_2>
       c:	0c 94 75 06 	jmp	0xcea	; 0xcea <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3b       	cpi	r26, 0xB4	; 180
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b1 1c 	call	0x3962	; 0x3962 <main>
      8a:	0c 94 9e 1d 	jmp	0x3b3c	; 0x3b3c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 83 1d 	jmp	0x3b06	; 0x3b06 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 73 1d 	jmp	0x3ae6	; 0x3ae6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8f 1d 	jmp	0x3b1e	; 0x3b1e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 73 1d 	jmp	0x3ae6	; 0x3ae6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8f 1d 	jmp	0x3b1e	; 0x3b1e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 83 1d 	jmp	0x3b06	; 0x3b06 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 73 1d 	jmp	0x3ae6	; 0x3ae6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8f 1d 	jmp	0x3b1e	; 0x3b1e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 73 1d 	jmp	0x3ae6	; 0x3ae6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8f 1d 	jmp	0x3b1e	; 0x3b1e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 73 1d 	jmp	0x3ae6	; 0x3ae6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8f 1d 	jmp	0x3b1e	; 0x3b1e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 77 1d 	jmp	0x3aee	; 0x3aee <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 93 1d 	jmp	0x3b26	; 0x3b26 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Time_0_Init>:
//u32 Desired;
/*void CallBackTimer0(void(*Timer0)(void)){
	VoidNormalTimer0=Timer0;
}*/

void Time_0_Init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
	SET_BIT(TIMSK,0);
     b5c:	a9 e5       	ldi	r26, 0x59	; 89
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e9 e5       	ldi	r30, 0x59	; 89
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	81 60       	ori	r24, 0x01	; 1
     b68:	8c 93       	st	X, r24
	//CLEAR_BIT(TCCR0,7);
	//SET_BIT(TCCR0,1);
	SET_BIT(TCCR0,6);
     b6a:	a3 e5       	ldi	r26, 0x53	; 83
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e3 e5       	ldi	r30, 0x53	; 83
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 64       	ori	r24, 0x40	; 64
     b76:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 60       	ori	r24, 0x08	; 8
     b84:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 62       	ori	r24, 0x20	; 32
     b92:	8c 93       	st	X, r24
	//CLEAR_BIT(TCCR0,5);
}
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <__vector_11>:
void __vector_11 (void)  __attribute__((signal));
void __vector_11 (void)
{
     b9a:	1f 92       	push	r1
     b9c:	0f 92       	push	r0
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	0f 92       	push	r0
     ba2:	11 24       	eor	r1, r1
     ba4:	8f 93       	push	r24
     ba6:	9f 93       	push	r25
     ba8:	af 93       	push	r26
     baa:	bf 93       	push	r27
     bac:	ef 93       	push	r30
     bae:	ff 93       	push	r31
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
	SWCounts = 1/ TOF;
	//t=(SWCounts - (u32)SWCounts);
//	Preload = 256-(t*256);
	*///if(VoidNormalTimer0!=Null){

	count++;
     bb8:	80 91 a4 00 	lds	r24, 0x00A4
     bbc:	90 91 a5 00 	lds	r25, 0x00A5
     bc0:	a0 91 a6 00 	lds	r26, 0x00A6
     bc4:	b0 91 a7 00 	lds	r27, 0x00A7
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	a1 1d       	adc	r26, r1
     bcc:	b1 1d       	adc	r27, r1
     bce:	80 93 a4 00 	sts	0x00A4, r24
     bd2:	90 93 a5 00 	sts	0x00A5, r25
     bd6:	a0 93 a6 00 	sts	0x00A6, r26
     bda:	b0 93 a7 00 	sts	0x00A7, r27
	OCR0=125;
     bde:	ec e5       	ldi	r30, 0x5C	; 92
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	8d e7       	ldi	r24, 0x7D	; 125
     be4:	80 83       	st	Z, r24
		if(count == 0)
     be6:	80 91 a4 00 	lds	r24, 0x00A4
     bea:	90 91 a5 00 	lds	r25, 0x00A5
     bee:	a0 91 a6 00 	lds	r26, 0x00A6
     bf2:	b0 91 a7 00 	lds	r27, 0x00A7
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	a1 05       	cpc	r26, r1
     bfa:	b1 05       	cpc	r27, r1
     bfc:	49 f4       	brne	.+18     	; 0xc10 <__vector_11+0x76>
		{	TOGGLE_BIT(PORTA_ITI,0);
     bfe:	ab e3       	ldi	r26, 0x3B	; 59
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	eb e3       	ldi	r30, 0x3B	; 59
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	90 81       	ld	r25, Z
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	89 27       	eor	r24, r25
     c0c:	8c 93       	st	X, r24
     c0e:	2b c0       	rjmp	.+86     	; 0xc66 <__vector_11+0xcc>
			//SET CALL BACK FUNCTION
			//count = 0;
			//TCNT0 = 90;

		}
		else if(count == 10)
     c10:	80 91 a4 00 	lds	r24, 0x00A4
     c14:	90 91 a5 00 	lds	r25, 0x00A5
     c18:	a0 91 a6 00 	lds	r26, 0x00A6
     c1c:	b0 91 a7 00 	lds	r27, 0x00A7
     c20:	8a 30       	cpi	r24, 0x0A	; 10
     c22:	91 05       	cpc	r25, r1
     c24:	a1 05       	cpc	r26, r1
     c26:	b1 05       	cpc	r27, r1
     c28:	49 f4       	brne	.+18     	; 0xc3c <__vector_11+0xa2>
		{	TOGGLE_BIT(PORTA_ITI,0);
     c2a:	ab e3       	ldi	r26, 0x3B	; 59
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	eb e3       	ldi	r30, 0x3B	; 59
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	90 81       	ld	r25, Z
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	89 27       	eor	r24, r25
     c38:	8c 93       	st	X, r24
     c3a:	15 c0       	rjmp	.+42     	; 0xc66 <__vector_11+0xcc>
			//SET CALL BACK FUNCTION
			//TCNT0 = 90;

		}
		else if(count==20){
     c3c:	80 91 a4 00 	lds	r24, 0x00A4
     c40:	90 91 a5 00 	lds	r25, 0x00A5
     c44:	a0 91 a6 00 	lds	r26, 0x00A6
     c48:	b0 91 a7 00 	lds	r27, 0x00A7
     c4c:	84 31       	cpi	r24, 0x14	; 20
     c4e:	91 05       	cpc	r25, r1
     c50:	a1 05       	cpc	r26, r1
     c52:	b1 05       	cpc	r27, r1
     c54:	41 f4       	brne	.+16     	; 0xc66 <__vector_11+0xcc>
			count=0;
     c56:	10 92 a4 00 	sts	0x00A4, r1
     c5a:	10 92 a5 00 	sts	0x00A5, r1
     c5e:	10 92 a6 00 	sts	0x00A6, r1
     c62:	10 92 a7 00 	sts	0x00A7, r1
		}

}
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	ff 91       	pop	r31
     c6c:	ef 91       	pop	r30
     c6e:	bf 91       	pop	r27
     c70:	af 91       	pop	r26
     c72:	9f 91       	pop	r25
     c74:	8f 91       	pop	r24
     c76:	0f 90       	pop	r0
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	0f 90       	pop	r0
     c7c:	1f 90       	pop	r1
     c7e:	18 95       	reti

00000c80 <INT2_VoidSETINT2>:
 *      Author: Mazen
 */
#include "EXTINT2_Interface.h"
void (*INT2_CallbackAddress)(void)=Null;

void INT2_VoidSETINT2(void){
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
EnableGlobalInterrupt();
     c88:	0e 94 da 07 	call	0xfb4	; 0xfb4 <EnableGlobalInterrupt>
ENABLEINT2_GICR_Reg;
     c8c:	ab e5       	ldi	r26, 0x5B	; 91
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	eb e5       	ldi	r30, 0x5B	; 91
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	80 62       	ori	r24, 0x20	; 32
     c98:	8c 93       	st	X, r24
ENABLEINT2_FALLING_EDGE;
     c9a:	a4 e5       	ldi	r26, 0x54	; 84
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e4 e5       	ldi	r30, 0x54	; 84
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	80 64       	ori	r24, 0x40	; 64
     ca6:	8c 93       	st	X, r24
}
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <INT2_SetCallBack>:
INT2_Err INT2_SetCallBack(void (*INT2CB)(void)){
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <INT2_SetCallBack+0x6>
     cb4:	0f 92       	push	r0
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	9a 83       	std	Y+2, r25	; 0x02
     cbc:	89 83       	std	Y+1, r24	; 0x01
	if(INT2CB!=Null){
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	49 f0       	breq	.+18     	; 0xcd8 <INT2_SetCallBack+0x2a>
	INT2CB=INT2_CallbackAddress;
     cc6:	80 91 a8 00 	lds	r24, 0x00A8
     cca:	90 91 a9 00 	lds	r25, 0x00A9
     cce:	9a 83       	std	Y+2, r25	; 0x02
     cd0:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		return INT2_PTR_NULL;
	}
	return INT2_PTR_OK;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	8b 83       	std	Y+3, r24	; 0x03
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <INT2_SetCallBack+0x2e>
	if(INT2CB!=Null){
	INT2CB=INT2_CallbackAddress;
	}
	else
	{
		return INT2_PTR_NULL;
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	8b 83       	std	Y+3, r24	; 0x03
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return INT2_PTR_OK;
}
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void){
     cea:	1f 92       	push	r1
     cec:	0f 92       	push	r0
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	0f 92       	push	r0
     cf2:	11 24       	eor	r1, r1
     cf4:	2f 93       	push	r18
     cf6:	3f 93       	push	r19
     cf8:	4f 93       	push	r20
     cfa:	5f 93       	push	r21
     cfc:	6f 93       	push	r22
     cfe:	7f 93       	push	r23
     d00:	8f 93       	push	r24
     d02:	9f 93       	push	r25
     d04:	af 93       	push	r26
     d06:	bf 93       	push	r27
     d08:	ef 93       	push	r30
     d0a:	ff 93       	push	r31
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
if(INT2_CallbackAddress!=Null){
     d14:	80 91 a8 00 	lds	r24, 0x00A8
     d18:	90 91 a9 00 	lds	r25, 0x00A9
     d1c:	00 97       	sbiw	r24, 0x00	; 0
     d1e:	29 f0       	breq	.+10     	; 0xd2a <__vector_3+0x40>
	INT2_CallbackAddress();
     d20:	e0 91 a8 00 	lds	r30, 0x00A8
     d24:	f0 91 a9 00 	lds	r31, 0x00A9
     d28:	09 95       	icall
}
else{
//Nothing
}
}
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	ff 91       	pop	r31
     d30:	ef 91       	pop	r30
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	7f 91       	pop	r23
     d3c:	6f 91       	pop	r22
     d3e:	5f 91       	pop	r21
     d40:	4f 91       	pop	r20
     d42:	3f 91       	pop	r19
     d44:	2f 91       	pop	r18
     d46:	0f 90       	pop	r0
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	0f 90       	pop	r0
     d4c:	1f 90       	pop	r1
     d4e:	18 95       	reti

00000d50 <INT1_VoidSETINT1>:
 */
#include "EXTINT1_Interface.h"

void (*INT1_CallbackAddress)(void)=Null;

void INT1_VoidSETINT1(void){
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
	EnableGlobalInterrupt();
     d58:	0e 94 da 07 	call	0xfb4	; 0xfb4 <EnableGlobalInterrupt>
	ENABLEINT1_GICR_Reg;
     d5c:	ab e5       	ldi	r26, 0x5B	; 91
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	eb e5       	ldi	r30, 0x5B	; 91
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	80 68       	ori	r24, 0x80	; 128
     d68:	8c 93       	st	X, r24
#if CaseINT1==INT1_LowLevel
	ENABLEINT1_LOW_LEVEL;
     d6a:	a5 e5       	ldi	r26, 0x55	; 85
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e5 e5       	ldi	r30, 0x55	; 85
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8b 7f       	andi	r24, 0xFB	; 251
     d76:	8c 93       	st	X, r24
     d78:	a5 e5       	ldi	r26, 0x55	; 85
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e5 e5       	ldi	r30, 0x55	; 85
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	87 7f       	andi	r24, 0xF7	; 247
     d84:	8c 93       	st	X, r24
#endif
#if CaseINT1==INT0_AnyLogicalChange
	ENABLEINT1_ANY_LOGIC;
     d86:	a5 e5       	ldi	r26, 0x55	; 85
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e5 e5       	ldi	r30, 0x55	; 85
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	84 60       	ori	r24, 0x04	; 4
     d92:	8c 93       	st	X, r24
     d94:	a5 e5       	ldi	r26, 0x55	; 85
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e5 e5       	ldi	r30, 0x55	; 85
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	87 7f       	andi	r24, 0xF7	; 247
     da0:	8c 93       	st	X, r24
#endif
#if CaseINT1 ==INT1_FallingEdge
	ENABLEINT1_FALLING_EDGE;
     da2:	a5 e5       	ldi	r26, 0x55	; 85
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e5 e5       	ldi	r30, 0x55	; 85
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	8b 7f       	andi	r24, 0xFB	; 251
     dae:	8c 93       	st	X, r24
     db0:	a5 e5       	ldi	r26, 0x55	; 85
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e5 e5       	ldi	r30, 0x55	; 85
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	88 60       	ori	r24, 0x08	; 8
     dbc:	8c 93       	st	X, r24
#endif
#if CaseINT1==INT1_RisingEdge
	ENABLEINT1_RISING_EDGE;
     dbe:	a5 e5       	ldi	r26, 0x55	; 85
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e5 e5       	ldi	r30, 0x55	; 85
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	84 60       	ori	r24, 0x04	; 4
     dca:	8c 93       	st	X, r24
     dcc:	a5 e5       	ldi	r26, 0x55	; 85
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e5 e5       	ldi	r30, 0x55	; 85
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	88 60       	ori	r24, 0x08	; 8
     dd8:	8c 93       	st	X, r24
#endif
}
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <INT1_SetCallBack>:

INT1_Err INT1_SetCallBack(void (*INT1CB)(void)){
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	00 d0       	rcall	.+0      	; 0xde6 <INT1_SetCallBack+0x6>
     de6:	0f 92       	push	r0
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	9a 83       	std	Y+2, r25	; 0x02
     dee:	89 83       	std	Y+1, r24	; 0x01
	if(INT1CB!=Null){
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	9a 81       	ldd	r25, Y+2	; 0x02
     df4:	00 97       	sbiw	r24, 0x00	; 0
     df6:	49 f0       	breq	.+18     	; 0xe0a <INT1_SetCallBack+0x2a>
	INT1CB=INT1_CallbackAddress;
     df8:	80 91 aa 00 	lds	r24, 0x00AA
     dfc:	90 91 ab 00 	lds	r25, 0x00AB
     e00:	9a 83       	std	Y+2, r25	; 0x02
     e02:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
		return INT1_PTR_NULL;
	}
	return INT1_PTR_OK;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	8b 83       	std	Y+3, r24	; 0x03
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <INT1_SetCallBack+0x2e>
INT1_Err INT1_SetCallBack(void (*INT1CB)(void)){
	if(INT1CB!=Null){
	INT1CB=INT1_CallbackAddress;
	}
	else{
		return INT1_PTR_NULL;
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	8b 83       	std	Y+3, r24	; 0x03
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return INT1_PTR_OK;

}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <__vector_2>:

void __vector_2 (void) __attribute__((signal));
void __vector_2(void){
     e1c:	1f 92       	push	r1
     e1e:	0f 92       	push	r0
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	0f 92       	push	r0
     e24:	11 24       	eor	r1, r1
     e26:	2f 93       	push	r18
     e28:	3f 93       	push	r19
     e2a:	4f 93       	push	r20
     e2c:	5f 93       	push	r21
     e2e:	6f 93       	push	r22
     e30:	7f 93       	push	r23
     e32:	8f 93       	push	r24
     e34:	9f 93       	push	r25
     e36:	af 93       	push	r26
     e38:	bf 93       	push	r27
     e3a:	ef 93       	push	r30
     e3c:	ff 93       	push	r31
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
	if(INT1_CallbackAddress!=Null){
     e46:	80 91 aa 00 	lds	r24, 0x00AA
     e4a:	90 91 ab 00 	lds	r25, 0x00AB
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	29 f0       	breq	.+10     	; 0xe5c <__vector_2+0x40>
		INT1_CallbackAddress();
     e52:	e0 91 aa 00 	lds	r30, 0x00AA
     e56:	f0 91 ab 00 	lds	r31, 0x00AB
     e5a:	09 95       	icall
	}
	else{
		//Do Nothing
	}
}
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	ff 91       	pop	r31
     e62:	ef 91       	pop	r30
     e64:	bf 91       	pop	r27
     e66:	af 91       	pop	r26
     e68:	9f 91       	pop	r25
     e6a:	8f 91       	pop	r24
     e6c:	7f 91       	pop	r23
     e6e:	6f 91       	pop	r22
     e70:	5f 91       	pop	r21
     e72:	4f 91       	pop	r20
     e74:	3f 91       	pop	r19
     e76:	2f 91       	pop	r18
     e78:	0f 90       	pop	r0
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	0f 90       	pop	r0
     e7e:	1f 90       	pop	r1
     e80:	18 95       	reti

00000e82 <INT0_VoidSETINT0>:
 */

#include "EXTINT0_Interface.h"
void (*INT0_CallbackAddress)(void)=Null;

void INT0_VoidSETINT0(void){
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	EnableGlobalInterrupt();
     e8a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <EnableGlobalInterrupt>
	ENABLEINT0_GICR_Reg;
     e8e:	ab e5       	ldi	r26, 0x5B	; 91
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e5       	ldi	r30, 0x5B	; 91
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	80 64       	ori	r24, 0x40	; 64
     e9a:	8c 93       	st	X, r24
#if CaseINT0==INT0_LowLevel
	ENABLEINT0_LOW_LEVEL;
     e9c:	a5 e5       	ldi	r26, 0x55	; 85
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e5 e5       	ldi	r30, 0x55	; 85
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8e 7f       	andi	r24, 0xFE	; 254
     ea8:	8c 93       	st	X, r24
     eaa:	a5 e5       	ldi	r26, 0x55	; 85
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e5 e5       	ldi	r30, 0x55	; 85
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8d 7f       	andi	r24, 0xFD	; 253
     eb6:	8c 93       	st	X, r24
#endif
#if CaseINT0==INT0_AnyLogicalChange
	ENABLEINT0_ANY_LOGIC;
     eb8:	a5 e5       	ldi	r26, 0x55	; 85
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e5 e5       	ldi	r30, 0x55	; 85
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	81 60       	ori	r24, 0x01	; 1
     ec4:	8c 93       	st	X, r24
     ec6:	a5 e5       	ldi	r26, 0x55	; 85
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e5 e5       	ldi	r30, 0x55	; 85
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	8d 7f       	andi	r24, 0xFD	; 253
     ed2:	8c 93       	st	X, r24
#endif
#if CaseINT0 ==INT0_FallingEdge
	ENABLEINT0_FALLING_EDGE;
     ed4:	a5 e5       	ldi	r26, 0x55	; 85
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e5 e5       	ldi	r30, 0x55	; 85
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	8e 7f       	andi	r24, 0xFE	; 254
     ee0:	8c 93       	st	X, r24
     ee2:	a5 e5       	ldi	r26, 0x55	; 85
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e5 e5       	ldi	r30, 0x55	; 85
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	82 60       	ori	r24, 0x02	; 2
     eee:	8c 93       	st	X, r24
#endif
#if CaseINT0==INT0_RisingEdge
	ENABLEINT0_RISING_EDGE;
     ef0:	a5 e5       	ldi	r26, 0x55	; 85
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e5 e5       	ldi	r30, 0x55	; 85
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	81 60       	ori	r24, 0x01	; 1
     efc:	8c 93       	st	X, r24
     efe:	a5 e5       	ldi	r26, 0x55	; 85
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e5 e5       	ldi	r30, 0x55	; 85
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	82 60       	ori	r24, 0x02	; 2
     f0a:	8c 93       	st	X, r24
#endif
}
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <INT0_SetCallBack>:

INT0_Err INT0_SetCallBack(void (*INT0CB)(void)){
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	00 d0       	rcall	.+0      	; 0xf18 <INT0_SetCallBack+0x6>
     f18:	0f 92       	push	r0
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	9a 83       	std	Y+2, r25	; 0x02
     f20:	89 83       	std	Y+1, r24	; 0x01
if(INT0CB != Null){
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	9a 81       	ldd	r25, Y+2	; 0x02
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	49 f0       	breq	.+18     	; 0xf3c <INT0_SetCallBack+0x2a>
	INT0CB=INT0_CallbackAddress;
     f2a:	80 91 ac 00 	lds	r24, 0x00AC
     f2e:	90 91 ad 00 	lds	r25, 0x00AD
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
	}
else{
	return INT0_PTR_NULL;
}
return INT0_PTR_OK;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	8b 83       	std	Y+3, r24	; 0x03
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <INT0_SetCallBack+0x2e>
INT0_Err INT0_SetCallBack(void (*INT0CB)(void)){
if(INT0CB != Null){
	INT0CB=INT0_CallbackAddress;
	}
else{
	return INT0_PTR_NULL;
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	8b 83       	std	Y+3, r24	; 0x03
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
}
return INT0_PTR_OK;
}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <__vector_1>:

void __vector_1(void) __attribute__((signal));
void __vector_1(void){
     f4e:	1f 92       	push	r1
     f50:	0f 92       	push	r0
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	0f 92       	push	r0
     f56:	11 24       	eor	r1, r1
     f58:	2f 93       	push	r18
     f5a:	3f 93       	push	r19
     f5c:	4f 93       	push	r20
     f5e:	5f 93       	push	r21
     f60:	6f 93       	push	r22
     f62:	7f 93       	push	r23
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
     f68:	af 93       	push	r26
     f6a:	bf 93       	push	r27
     f6c:	ef 93       	push	r30
     f6e:	ff 93       	push	r31
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62

	if(INT0_CallbackAddress!=Null){
     f78:	80 91 ac 00 	lds	r24, 0x00AC
     f7c:	90 91 ad 00 	lds	r25, 0x00AD
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	29 f0       	breq	.+10     	; 0xf8e <__vector_1+0x40>
		INT0_CallbackAddress();
     f84:	e0 91 ac 00 	lds	r30, 0x00AC
     f88:	f0 91 ad 00 	lds	r31, 0x00AD
     f8c:	09 95       	icall
	}
	else{
		//nothing
	}
}
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	ff 91       	pop	r31
     f94:	ef 91       	pop	r30
     f96:	bf 91       	pop	r27
     f98:	af 91       	pop	r26
     f9a:	9f 91       	pop	r25
     f9c:	8f 91       	pop	r24
     f9e:	7f 91       	pop	r23
     fa0:	6f 91       	pop	r22
     fa2:	5f 91       	pop	r21
     fa4:	4f 91       	pop	r20
     fa6:	3f 91       	pop	r19
     fa8:	2f 91       	pop	r18
     faa:	0f 90       	pop	r0
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	0f 90       	pop	r0
     fb0:	1f 90       	pop	r1
     fb2:	18 95       	reti

00000fb4 <EnableGlobalInterrupt>:
 *
 *  Created on: Apr 4, 2023
 *      Author: Mazen
 */
#include "Global_Interrupt_Enable.h"
void EnableGlobalInterrupt(void){
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	ENABLEINT0_SREG;
     fbc:	af e5       	ldi	r26, 0x5F	; 95
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	ef e5       	ldi	r30, 0x5F	; 95
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	80 68       	ori	r24, 0x80	; 128
     fc8:	8c 93       	st	X, r24
}
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <DIO_ErrStateSetPinDirection>:
 *      Author: Mazen
 */

#include "DIO_Interface.h"

DIO_Err DIO_ErrStateSetPinDirection(PORT_Name port,PIN_Number pin,Direction direction){
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	28 97       	sbiw	r28, 0x08	; 8
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	89 83       	std	Y+1, r24	; 0x01
     fe6:	6a 83       	std	Y+2, r22	; 0x02
     fe8:	4b 83       	std	Y+3, r20	; 0x03
	if(pin>=0 && pin<=7)
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	88 30       	cpi	r24, 0x08	; 8
     fee:	08 f0       	brcs	.+2      	; 0xff2 <DIO_ErrStateSetPinDirection+0x22>
     ff0:	f8 c0       	rjmp	.+496    	; 0x11e2 <DIO_ErrStateSetPinDirection+0x212>
		{
			if(direction == DIO_OUT)
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	09 f0       	breq	.+2      	; 0xffa <DIO_ErrStateSetPinDirection+0x2a>
     ff8:	73 c0       	rjmp	.+230    	; 0x10e0 <DIO_ErrStateSetPinDirection+0x110>
			{
				switch(port)
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	38 87       	std	Y+8, r19	; 0x08
    1002:	2f 83       	std	Y+7, r18	; 0x07
    1004:	8f 81       	ldd	r24, Y+7	; 0x07
    1006:	98 85       	ldd	r25, Y+8	; 0x08
    1008:	82 34       	cpi	r24, 0x42	; 66
    100a:	91 05       	cpc	r25, r1
    100c:	51 f1       	breq	.+84     	; 0x1062 <DIO_ErrStateSetPinDirection+0x92>
    100e:	2f 81       	ldd	r18, Y+7	; 0x07
    1010:	38 85       	ldd	r19, Y+8	; 0x08
    1012:	23 34       	cpi	r18, 0x43	; 67
    1014:	31 05       	cpc	r19, r1
    1016:	34 f4       	brge	.+12     	; 0x1024 <DIO_ErrStateSetPinDirection+0x54>
    1018:	8f 81       	ldd	r24, Y+7	; 0x07
    101a:	98 85       	ldd	r25, Y+8	; 0x08
    101c:	81 34       	cpi	r24, 0x41	; 65
    101e:	91 05       	cpc	r25, r1
    1020:	61 f0       	breq	.+24     	; 0x103a <DIO_ErrStateSetPinDirection+0x6a>
    1022:	5b c0       	rjmp	.+182    	; 0x10da <DIO_ErrStateSetPinDirection+0x10a>
    1024:	2f 81       	ldd	r18, Y+7	; 0x07
    1026:	38 85       	ldd	r19, Y+8	; 0x08
    1028:	23 34       	cpi	r18, 0x43	; 67
    102a:	31 05       	cpc	r19, r1
    102c:	71 f1       	breq	.+92     	; 0x108a <DIO_ErrStateSetPinDirection+0xba>
    102e:	8f 81       	ldd	r24, Y+7	; 0x07
    1030:	98 85       	ldd	r25, Y+8	; 0x08
    1032:	84 34       	cpi	r24, 0x44	; 68
    1034:	91 05       	cpc	r25, r1
    1036:	e9 f1       	breq	.+122    	; 0x10b2 <DIO_ErrStateSetPinDirection+0xe2>
    1038:	50 c0       	rjmp	.+160    	; 0x10da <DIO_ErrStateSetPinDirection+0x10a>
				{
				case 'A': SET_BIT(DDRA_ITI,pin); break;
    103a:	aa e3       	ldi	r26, 0x3A	; 58
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	ea e3       	ldi	r30, 0x3A	; 58
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_ErrStateSetPinDirection+0x88>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_ErrStateSetPinDirection+0x84>
    105c:	84 2b       	or	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	be c0       	rjmp	.+380    	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				case 'B': SET_BIT(DDRB_ITI,pin); break;
    1062:	a7 e3       	ldi	r26, 0x37	; 55
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e7 e3       	ldi	r30, 0x37	; 55
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_ErrStateSetPinDirection+0xb0>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_ErrStateSetPinDirection+0xac>
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	aa c0       	rjmp	.+340    	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				case 'C': SET_BIT(DDRC_ITI,pin); break;
    108a:	a4 e3       	ldi	r26, 0x34	; 52
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e4 e3       	ldi	r30, 0x34	; 52
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <DIO_ErrStateSetPinDirection+0xd8>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <DIO_ErrStateSetPinDirection+0xd4>
    10ac:	84 2b       	or	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	96 c0       	rjmp	.+300    	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				case 'D': SET_BIT(DDRD_ITI,pin); break;
    10b2:	a1 e3       	ldi	r26, 0x31	; 49
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e1 e3       	ldi	r30, 0x31	; 49
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 2e       	mov	r0, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_ErrStateSetPinDirection+0x100>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_ErrStateSetPinDirection+0xfc>
    10d4:	84 2b       	or	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	82 c0       	rjmp	.+260    	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				default: return DIO_ERROR_PORT;
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	83 c0       	rjmp	.+262    	; 0x11e6 <DIO_ErrStateSetPinDirection+0x216>
				}

			}
			else if(direction == DIO_IN)
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	88 23       	and	r24, r24
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <DIO_ErrStateSetPinDirection+0x118>
    10e6:	78 c0       	rjmp	.+240    	; 0x11d8 <DIO_ErrStateSetPinDirection+0x208>
			{
				switch(port)
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	3d 83       	std	Y+5, r19	; 0x05
    10f0:	2c 83       	std	Y+4, r18	; 0x04
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	9d 81       	ldd	r25, Y+5	; 0x05
    10f6:	82 34       	cpi	r24, 0x42	; 66
    10f8:	91 05       	cpc	r25, r1
    10fa:	61 f1       	breq	.+88     	; 0x1154 <DIO_ErrStateSetPinDirection+0x184>
    10fc:	2c 81       	ldd	r18, Y+4	; 0x04
    10fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1100:	23 34       	cpi	r18, 0x43	; 67
    1102:	31 05       	cpc	r19, r1
    1104:	34 f4       	brge	.+12     	; 0x1112 <DIO_ErrStateSetPinDirection+0x142>
    1106:	8c 81       	ldd	r24, Y+4	; 0x04
    1108:	9d 81       	ldd	r25, Y+5	; 0x05
    110a:	81 34       	cpi	r24, 0x41	; 65
    110c:	91 05       	cpc	r25, r1
    110e:	69 f0       	breq	.+26     	; 0x112a <DIO_ErrStateSetPinDirection+0x15a>
    1110:	60 c0       	rjmp	.+192    	; 0x11d2 <DIO_ErrStateSetPinDirection+0x202>
    1112:	2c 81       	ldd	r18, Y+4	; 0x04
    1114:	3d 81       	ldd	r19, Y+5	; 0x05
    1116:	23 34       	cpi	r18, 0x43	; 67
    1118:	31 05       	cpc	r19, r1
    111a:	89 f1       	breq	.+98     	; 0x117e <DIO_ErrStateSetPinDirection+0x1ae>
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	9d 81       	ldd	r25, Y+5	; 0x05
    1120:	84 34       	cpi	r24, 0x44	; 68
    1122:	91 05       	cpc	r25, r1
    1124:	09 f4       	brne	.+2      	; 0x1128 <DIO_ErrStateSetPinDirection+0x158>
    1126:	40 c0       	rjmp	.+128    	; 0x11a8 <DIO_ErrStateSetPinDirection+0x1d8>
    1128:	54 c0       	rjmp	.+168    	; 0x11d2 <DIO_ErrStateSetPinDirection+0x202>
				{
				case 'A': CLEAR_BIT(DDRA_ITI,pin); break;
    112a:	aa e3       	ldi	r26, 0x3A	; 58
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	ea e3       	ldi	r30, 0x3A	; 58
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <DIO_ErrStateSetPinDirection+0x178>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <DIO_ErrStateSetPinDirection+0x174>
    114c:	80 95       	com	r24
    114e:	84 23       	and	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	45 c0       	rjmp	.+138    	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				case 'B': CLEAR_BIT(DDRB_ITI,pin); break;
    1154:	a7 e3       	ldi	r26, 0x37	; 55
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e7 e3       	ldi	r30, 0x37	; 55
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_ErrStateSetPinDirection+0x1a2>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_ErrStateSetPinDirection+0x19e>
    1176:	80 95       	com	r24
    1178:	84 23       	and	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	30 c0       	rjmp	.+96     	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				case 'C': CLEAR_BIT(DDRC_ITI,pin); break;
    117e:	a4 e3       	ldi	r26, 0x34	; 52
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e4 e3       	ldi	r30, 0x34	; 52
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_ErrStateSetPinDirection+0x1cc>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_ErrStateSetPinDirection+0x1c8>
    11a0:	80 95       	com	r24
    11a2:	84 23       	and	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	1b c0       	rjmp	.+54     	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				case 'D': CLEAR_BIT(DDRD_ITI,pin); break;
    11a8:	a1 e3       	ldi	r26, 0x31	; 49
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e1 e3       	ldi	r30, 0x31	; 49
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_ErrStateSetPinDirection+0x1f6>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_ErrStateSetPinDirection+0x1f2>
    11ca:	80 95       	com	r24
    11cc:	84 23       	and	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	06 c0       	rjmp	.+12     	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				default: return DIO_ERROR_PORT;				}
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	9e 83       	std	Y+6, r25	; 0x06
    11d6:	07 c0       	rjmp	.+14     	; 0x11e6 <DIO_ErrStateSetPinDirection+0x216>
			}
			else
				return DIO_ERROR_Direction;
    11d8:	23 e0       	ldi	r18, 0x03	; 3
    11da:	2e 83       	std	Y+6, r18	; 0x06
    11dc:	04 c0       	rjmp	.+8      	; 0x11e6 <DIO_ErrStateSetPinDirection+0x216>
		}
	else
		return DIO_ERROR_PIN;
	return DIO_OK;
    11de:	1e 82       	std	Y+6, r1	; 0x06
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <DIO_ErrStateSetPinDirection+0x216>
			}
			else
				return DIO_ERROR_Direction;
		}
	else
		return DIO_ERROR_PIN;
    11e2:	32 e0       	ldi	r19, 0x02	; 2
    11e4:	3e 83       	std	Y+6, r19	; 0x06
    11e6:	8e 81       	ldd	r24, Y+6	; 0x06
	return DIO_OK;
}
    11e8:	28 96       	adiw	r28, 0x08	; 8
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <DIO_ErrStateSetPinValue>:
DIO_Err DIO_ErrStateSetPinValue(PORT_Name port,PIN_Number pin,Volt val){
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	28 97       	sbiw	r28, 0x08	; 8
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	6a 83       	std	Y+2, r22	; 0x02
    1212:	4b 83       	std	Y+3, r20	; 0x03
	if(pin>=0 && pin<=7)
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	88 30       	cpi	r24, 0x08	; 8
    1218:	08 f0       	brcs	.+2      	; 0x121c <DIO_ErrStateSetPinValue+0x22>
    121a:	f8 c0       	rjmp	.+496    	; 0x140c <DIO_ErrStateSetPinValue+0x212>
			{
				if(val == DIO_HIGH)
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	09 f0       	breq	.+2      	; 0x1224 <DIO_ErrStateSetPinValue+0x2a>
    1222:	73 c0       	rjmp	.+230    	; 0x130a <DIO_ErrStateSetPinValue+0x110>
				{
					switch(port)
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	38 87       	std	Y+8, r19	; 0x08
    122c:	2f 83       	std	Y+7, r18	; 0x07
    122e:	8f 81       	ldd	r24, Y+7	; 0x07
    1230:	98 85       	ldd	r25, Y+8	; 0x08
    1232:	82 34       	cpi	r24, 0x42	; 66
    1234:	91 05       	cpc	r25, r1
    1236:	51 f1       	breq	.+84     	; 0x128c <DIO_ErrStateSetPinValue+0x92>
    1238:	2f 81       	ldd	r18, Y+7	; 0x07
    123a:	38 85       	ldd	r19, Y+8	; 0x08
    123c:	23 34       	cpi	r18, 0x43	; 67
    123e:	31 05       	cpc	r19, r1
    1240:	34 f4       	brge	.+12     	; 0x124e <DIO_ErrStateSetPinValue+0x54>
    1242:	8f 81       	ldd	r24, Y+7	; 0x07
    1244:	98 85       	ldd	r25, Y+8	; 0x08
    1246:	81 34       	cpi	r24, 0x41	; 65
    1248:	91 05       	cpc	r25, r1
    124a:	61 f0       	breq	.+24     	; 0x1264 <DIO_ErrStateSetPinValue+0x6a>
    124c:	5b c0       	rjmp	.+182    	; 0x1304 <DIO_ErrStateSetPinValue+0x10a>
    124e:	2f 81       	ldd	r18, Y+7	; 0x07
    1250:	38 85       	ldd	r19, Y+8	; 0x08
    1252:	23 34       	cpi	r18, 0x43	; 67
    1254:	31 05       	cpc	r19, r1
    1256:	71 f1       	breq	.+92     	; 0x12b4 <DIO_ErrStateSetPinValue+0xba>
    1258:	8f 81       	ldd	r24, Y+7	; 0x07
    125a:	98 85       	ldd	r25, Y+8	; 0x08
    125c:	84 34       	cpi	r24, 0x44	; 68
    125e:	91 05       	cpc	r25, r1
    1260:	e9 f1       	breq	.+122    	; 0x12dc <DIO_ErrStateSetPinValue+0xe2>
    1262:	50 c0       	rjmp	.+160    	; 0x1304 <DIO_ErrStateSetPinValue+0x10a>
					{
					case 'A': SET_BIT(PORTA_ITI,pin); break;
    1264:	ab e3       	ldi	r26, 0x3B	; 59
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	eb e3       	ldi	r30, 0x3B	; 59
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <DIO_ErrStateSetPinValue+0x88>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <DIO_ErrStateSetPinValue+0x84>
    1286:	84 2b       	or	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	be c0       	rjmp	.+380    	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					case 'B': SET_BIT(PORTB_ITI,pin); break;
    128c:	a8 e3       	ldi	r26, 0x38	; 56
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e8 e3       	ldi	r30, 0x38	; 56
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_ErrStateSetPinValue+0xb0>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_ErrStateSetPinValue+0xac>
    12ae:	84 2b       	or	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	aa c0       	rjmp	.+340    	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					case 'C': SET_BIT(PORTC_ITI,pin); break;
    12b4:	a5 e3       	ldi	r26, 0x35	; 53
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e5 e3       	ldi	r30, 0x35	; 53
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_ErrStateSetPinValue+0xd8>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_ErrStateSetPinValue+0xd4>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	96 c0       	rjmp	.+300    	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					case 'D': SET_BIT(PORTD_ITI,pin); break;
    12dc:	a2 e3       	ldi	r26, 0x32	; 50
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e2 e3       	ldi	r30, 0x32	; 50
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_ErrStateSetPinValue+0x100>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_ErrStateSetPinValue+0xfc>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	82 c0       	rjmp	.+260    	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					default: return DIO_ERROR_PORT;
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	9e 83       	std	Y+6, r25	; 0x06
    1308:	83 c0       	rjmp	.+262    	; 0x1410 <DIO_ErrStateSetPinValue+0x216>
					}
				}
				else if(val == DIO_LOW)
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	88 23       	and	r24, r24
    130e:	09 f0       	breq	.+2      	; 0x1312 <DIO_ErrStateSetPinValue+0x118>
    1310:	78 c0       	rjmp	.+240    	; 0x1402 <DIO_ErrStateSetPinValue+0x208>
				{
					switch(port)
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	3d 83       	std	Y+5, r19	; 0x05
    131a:	2c 83       	std	Y+4, r18	; 0x04
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	9d 81       	ldd	r25, Y+5	; 0x05
    1320:	82 34       	cpi	r24, 0x42	; 66
    1322:	91 05       	cpc	r25, r1
    1324:	61 f1       	breq	.+88     	; 0x137e <DIO_ErrStateSetPinValue+0x184>
    1326:	2c 81       	ldd	r18, Y+4	; 0x04
    1328:	3d 81       	ldd	r19, Y+5	; 0x05
    132a:	23 34       	cpi	r18, 0x43	; 67
    132c:	31 05       	cpc	r19, r1
    132e:	34 f4       	brge	.+12     	; 0x133c <DIO_ErrStateSetPinValue+0x142>
    1330:	8c 81       	ldd	r24, Y+4	; 0x04
    1332:	9d 81       	ldd	r25, Y+5	; 0x05
    1334:	81 34       	cpi	r24, 0x41	; 65
    1336:	91 05       	cpc	r25, r1
    1338:	69 f0       	breq	.+26     	; 0x1354 <DIO_ErrStateSetPinValue+0x15a>
    133a:	60 c0       	rjmp	.+192    	; 0x13fc <DIO_ErrStateSetPinValue+0x202>
    133c:	2c 81       	ldd	r18, Y+4	; 0x04
    133e:	3d 81       	ldd	r19, Y+5	; 0x05
    1340:	23 34       	cpi	r18, 0x43	; 67
    1342:	31 05       	cpc	r19, r1
    1344:	89 f1       	breq	.+98     	; 0x13a8 <DIO_ErrStateSetPinValue+0x1ae>
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	84 34       	cpi	r24, 0x44	; 68
    134c:	91 05       	cpc	r25, r1
    134e:	09 f4       	brne	.+2      	; 0x1352 <DIO_ErrStateSetPinValue+0x158>
    1350:	40 c0       	rjmp	.+128    	; 0x13d2 <DIO_ErrStateSetPinValue+0x1d8>
    1352:	54 c0       	rjmp	.+168    	; 0x13fc <DIO_ErrStateSetPinValue+0x202>
					{
					case 'A': CLEAR_BIT(PORTA_ITI,pin); break;
    1354:	ab e3       	ldi	r26, 0x3B	; 59
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	eb e3       	ldi	r30, 0x3B	; 59
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_ErrStateSetPinValue+0x178>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_ErrStateSetPinValue+0x174>
    1376:	80 95       	com	r24
    1378:	84 23       	and	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	45 c0       	rjmp	.+138    	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					case 'B': CLEAR_BIT(PORTB_ITI,pin); break;
    137e:	a8 e3       	ldi	r26, 0x38	; 56
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e8 e3       	ldi	r30, 0x38	; 56
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_ErrStateSetPinValue+0x1a2>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <DIO_ErrStateSetPinValue+0x19e>
    13a0:	80 95       	com	r24
    13a2:	84 23       	and	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	30 c0       	rjmp	.+96     	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					case 'C': CLEAR_BIT(PORTC_ITI,pin); break;
    13a8:	a5 e3       	ldi	r26, 0x35	; 53
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e5 e3       	ldi	r30, 0x35	; 53
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_ErrStateSetPinValue+0x1cc>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_ErrStateSetPinValue+0x1c8>
    13ca:	80 95       	com	r24
    13cc:	84 23       	and	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	1b c0       	rjmp	.+54     	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					case 'D': CLEAR_BIT(PORTD_ITI,pin); break;
    13d2:	a2 e3       	ldi	r26, 0x32	; 50
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e2 e3       	ldi	r30, 0x32	; 50
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_ErrStateSetPinValue+0x1f6>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_ErrStateSetPinValue+0x1f2>
    13f4:	80 95       	com	r24
    13f6:	84 23       	and	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	06 c0       	rjmp	.+12     	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					default: return DIO_ERROR_PORT;					}
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	9e 83       	std	Y+6, r25	; 0x06
    1400:	07 c0       	rjmp	.+14     	; 0x1410 <DIO_ErrStateSetPinValue+0x216>
				}
				else
					return DIO_ERROR_VALUE;
    1402:	24 e0       	ldi	r18, 0x04	; 4
    1404:	2e 83       	std	Y+6, r18	; 0x06
    1406:	04 c0       	rjmp	.+8      	; 0x1410 <DIO_ErrStateSetPinValue+0x216>
			}
		else
			return DIO_ERROR_PIN;
		return DIO_OK;
    1408:	1e 82       	std	Y+6, r1	; 0x06
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_ErrStateSetPinValue+0x216>
				}
				else
					return DIO_ERROR_VALUE;
			}
		else
			return DIO_ERROR_PIN;
    140c:	32 e0       	ldi	r19, 0x02	; 2
    140e:	3e 83       	std	Y+6, r19	; 0x06
    1410:	8e 81       	ldd	r24, Y+6	; 0x06
		return DIO_OK;
}
    1412:	28 96       	adiw	r28, 0x08	; 8
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <DIO_ErrStateReadPinValue>:
DIO_Err DIO_ErrStateReadPinValue(PORT_Name port,PIN_Number pin,u8 *value){
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	27 97       	sbiw	r28, 0x07	; 7
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	6a 83       	std	Y+2, r22	; 0x02
    143c:	5c 83       	std	Y+4, r21	; 0x04
    143e:	4b 83       	std	Y+3, r20	; 0x03
	if(pin>=0 && pin<=7)
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	88 30       	cpi	r24, 0x08	; 8
    1444:	08 f0       	brcs	.+2      	; 0x1448 <DIO_ErrStateReadPinValue+0x24>
    1446:	76 c0       	rjmp	.+236    	; 0x1534 <DIO_ErrStateReadPinValue+0x110>
				{
						switch(port)
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	3f 83       	std	Y+7, r19	; 0x07
    1450:	2e 83       	std	Y+6, r18	; 0x06
    1452:	4e 81       	ldd	r20, Y+6	; 0x06
    1454:	5f 81       	ldd	r21, Y+7	; 0x07
    1456:	42 34       	cpi	r20, 0x42	; 66
    1458:	51 05       	cpc	r21, r1
    145a:	59 f1       	breq	.+86     	; 0x14b2 <DIO_ErrStateReadPinValue+0x8e>
    145c:	8e 81       	ldd	r24, Y+6	; 0x06
    145e:	9f 81       	ldd	r25, Y+7	; 0x07
    1460:	83 34       	cpi	r24, 0x43	; 67
    1462:	91 05       	cpc	r25, r1
    1464:	34 f4       	brge	.+12     	; 0x1472 <DIO_ErrStateReadPinValue+0x4e>
    1466:	2e 81       	ldd	r18, Y+6	; 0x06
    1468:	3f 81       	ldd	r19, Y+7	; 0x07
    146a:	21 34       	cpi	r18, 0x41	; 65
    146c:	31 05       	cpc	r19, r1
    146e:	69 f0       	breq	.+26     	; 0x148a <DIO_ErrStateReadPinValue+0x66>
    1470:	5c c0       	rjmp	.+184    	; 0x152a <DIO_ErrStateReadPinValue+0x106>
    1472:	4e 81       	ldd	r20, Y+6	; 0x06
    1474:	5f 81       	ldd	r21, Y+7	; 0x07
    1476:	43 34       	cpi	r20, 0x43	; 67
    1478:	51 05       	cpc	r21, r1
    147a:	79 f1       	breq	.+94     	; 0x14da <DIO_ErrStateReadPinValue+0xb6>
    147c:	8e 81       	ldd	r24, Y+6	; 0x06
    147e:	9f 81       	ldd	r25, Y+7	; 0x07
    1480:	84 34       	cpi	r24, 0x44	; 68
    1482:	91 05       	cpc	r25, r1
    1484:	09 f4       	brne	.+2      	; 0x1488 <DIO_ErrStateReadPinValue+0x64>
    1486:	3d c0       	rjmp	.+122    	; 0x1502 <DIO_ErrStateReadPinValue+0xde>
    1488:	50 c0       	rjmp	.+160    	; 0x152a <DIO_ErrStateReadPinValue+0x106>
						{
						case 'A':*value= GET_BIT(PINA_ITI,pin); break;
    148a:	e9 e3       	ldi	r30, 0x39	; 57
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	88 2f       	mov	r24, r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	a9 01       	movw	r20, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_ErrStateReadPinValue+0x7e>
    149e:	55 95       	asr	r21
    14a0:	47 95       	ror	r20
    14a2:	8a 95       	dec	r24
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_ErrStateReadPinValue+0x7a>
    14a6:	ca 01       	movw	r24, r20
    14a8:	81 70       	andi	r24, 0x01	; 1
    14aa:	eb 81       	ldd	r30, Y+3	; 0x03
    14ac:	fc 81       	ldd	r31, Y+4	; 0x04
    14ae:	80 83       	st	Z, r24
    14b0:	3f c0       	rjmp	.+126    	; 0x1530 <DIO_ErrStateReadPinValue+0x10c>
						case 'B':*value= GET_BIT(PINB_ITI,pin); break;
    14b2:	e6 e3       	ldi	r30, 0x36	; 54
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	a9 01       	movw	r20, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <DIO_ErrStateReadPinValue+0xa6>
    14c6:	55 95       	asr	r21
    14c8:	47 95       	ror	r20
    14ca:	8a 95       	dec	r24
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <DIO_ErrStateReadPinValue+0xa2>
    14ce:	ca 01       	movw	r24, r20
    14d0:	81 70       	andi	r24, 0x01	; 1
    14d2:	eb 81       	ldd	r30, Y+3	; 0x03
    14d4:	fc 81       	ldd	r31, Y+4	; 0x04
    14d6:	80 83       	st	Z, r24
    14d8:	2b c0       	rjmp	.+86     	; 0x1530 <DIO_ErrStateReadPinValue+0x10c>
						case 'C':*value= GET_BIT(PINC_ITI,pin); break;
    14da:	e3 e3       	ldi	r30, 0x33	; 51
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	88 2f       	mov	r24, r24
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	a9 01       	movw	r20, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <DIO_ErrStateReadPinValue+0xce>
    14ee:	55 95       	asr	r21
    14f0:	47 95       	ror	r20
    14f2:	8a 95       	dec	r24
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <DIO_ErrStateReadPinValue+0xca>
    14f6:	ca 01       	movw	r24, r20
    14f8:	81 70       	andi	r24, 0x01	; 1
    14fa:	eb 81       	ldd	r30, Y+3	; 0x03
    14fc:	fc 81       	ldd	r31, Y+4	; 0x04
    14fe:	80 83       	st	Z, r24
    1500:	17 c0       	rjmp	.+46     	; 0x1530 <DIO_ErrStateReadPinValue+0x10c>
						case 'D':*value= GET_BIT(PIND_ITI,pin); break;
    1502:	e0 e3       	ldi	r30, 0x30	; 48
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a9 01       	movw	r20, r18
    1514:	02 c0       	rjmp	.+4      	; 0x151a <DIO_ErrStateReadPinValue+0xf6>
    1516:	55 95       	asr	r21
    1518:	47 95       	ror	r20
    151a:	8a 95       	dec	r24
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <DIO_ErrStateReadPinValue+0xf2>
    151e:	ca 01       	movw	r24, r20
    1520:	81 70       	andi	r24, 0x01	; 1
    1522:	eb 81       	ldd	r30, Y+3	; 0x03
    1524:	fc 81       	ldd	r31, Y+4	; 0x04
    1526:	80 83       	st	Z, r24
    1528:	03 c0       	rjmp	.+6      	; 0x1530 <DIO_ErrStateReadPinValue+0x10c>
						default: return DIO_ERROR_PORT;
    152a:	51 e0       	ldi	r21, 0x01	; 1
    152c:	5d 83       	std	Y+5, r21	; 0x05
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <DIO_ErrStateReadPinValue+0x114>
						}

				}
			else
				return DIO_ERROR_PIN;
			return DIO_OK;
    1530:	1d 82       	std	Y+5, r1	; 0x05
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <DIO_ErrStateReadPinValue+0x114>
						default: return DIO_ERROR_PORT;
						}

				}
			else
				return DIO_ERROR_PIN;
    1534:	82 e0       	ldi	r24, 0x02	; 2
    1536:	8d 83       	std	Y+5, r24	; 0x05
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
			return DIO_OK;
}
    153a:	27 96       	adiw	r28, 0x07	; 7
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	de bf       	out	0x3e, r29	; 62
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	cd bf       	out	0x3d, r28	; 61
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <DIO_ErrStateSetGroupDirection>:

DIO_Err  DIO_ErrStateSetGroupDirection(PORT_Name port ,Direction direction)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	00 d0       	rcall	.+0      	; 0x1552 <DIO_ErrStateSetGroupDirection+0x6>
    1552:	00 d0       	rcall	.+0      	; 0x1554 <DIO_ErrStateSetGroupDirection+0x8>
    1554:	0f 92       	push	r0
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	89 83       	std	Y+1, r24	; 0x01
    155c:	6a 83       	std	Y+2, r22	; 0x02
	if (direction <= 0xff && direction>=0x00)
	{
		switch(port)
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	3d 83       	std	Y+5, r19	; 0x05
    1566:	2c 83       	std	Y+4, r18	; 0x04
    1568:	8c 81       	ldd	r24, Y+4	; 0x04
    156a:	9d 81       	ldd	r25, Y+5	; 0x05
    156c:	82 34       	cpi	r24, 0x42	; 66
    156e:	91 05       	cpc	r25, r1
    1570:	d9 f0       	breq	.+54     	; 0x15a8 <DIO_ErrStateSetGroupDirection+0x5c>
    1572:	2c 81       	ldd	r18, Y+4	; 0x04
    1574:	3d 81       	ldd	r19, Y+5	; 0x05
    1576:	23 34       	cpi	r18, 0x43	; 67
    1578:	31 05       	cpc	r19, r1
    157a:	34 f4       	brge	.+12     	; 0x1588 <DIO_ErrStateSetGroupDirection+0x3c>
    157c:	8c 81       	ldd	r24, Y+4	; 0x04
    157e:	9d 81       	ldd	r25, Y+5	; 0x05
    1580:	81 34       	cpi	r24, 0x41	; 65
    1582:	91 05       	cpc	r25, r1
    1584:	61 f0       	breq	.+24     	; 0x159e <DIO_ErrStateSetGroupDirection+0x52>
    1586:	1f c0       	rjmp	.+62     	; 0x15c6 <DIO_ErrStateSetGroupDirection+0x7a>
    1588:	2c 81       	ldd	r18, Y+4	; 0x04
    158a:	3d 81       	ldd	r19, Y+5	; 0x05
    158c:	23 34       	cpi	r18, 0x43	; 67
    158e:	31 05       	cpc	r19, r1
    1590:	81 f0       	breq	.+32     	; 0x15b2 <DIO_ErrStateSetGroupDirection+0x66>
    1592:	8c 81       	ldd	r24, Y+4	; 0x04
    1594:	9d 81       	ldd	r25, Y+5	; 0x05
    1596:	84 34       	cpi	r24, 0x44	; 68
    1598:	91 05       	cpc	r25, r1
    159a:	81 f0       	breq	.+32     	; 0x15bc <DIO_ErrStateSetGroupDirection+0x70>
    159c:	14 c0       	rjmp	.+40     	; 0x15c6 <DIO_ErrStateSetGroupDirection+0x7a>
		{
		case 'A': DDRA_ITI =   direction ;break ;
    159e:	ea e3       	ldi	r30, 0x3A	; 58
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	80 83       	st	Z, r24
    15a6:	12 c0       	rjmp	.+36     	; 0x15cc <DIO_ErrStateSetGroupDirection+0x80>
		case 'B': DDRB_ITI =   direction ;break ;
    15a8:	e7 e3       	ldi	r30, 0x37	; 55
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	80 83       	st	Z, r24
    15b0:	0d c0       	rjmp	.+26     	; 0x15cc <DIO_ErrStateSetGroupDirection+0x80>
		case 'C': DDRC_ITI =   direction ;break ;
    15b2:	e4 e3       	ldi	r30, 0x34	; 52
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	80 83       	st	Z, r24
    15ba:	08 c0       	rjmp	.+16     	; 0x15cc <DIO_ErrStateSetGroupDirection+0x80>
		case 'D': DDRD_ITI =   direction ;break ;
    15bc:	e1 e3       	ldi	r30, 0x31	; 49
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	80 83       	st	Z, r24
    15c4:	03 c0       	rjmp	.+6      	; 0x15cc <DIO_ErrStateSetGroupDirection+0x80>
		default :
			return DIO_ERROR_PORT ;
    15c6:	91 e0       	ldi	r25, 0x01	; 1
    15c8:	9b 83       	std	Y+3, r25	; 0x03
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <DIO_ErrStateSetGroupDirection+0x82>
		}
		return DIO_OK ;
    15cc:	1b 82       	std	Y+3, r1	; 0x03
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	else
	{
		return DIO_ERROR_Direction;
	}
}
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <DIO_ErrStateSetPortValue>:
DIO_Err  DIO_ErrStateSetPortValue(PORT_Name port,Volt val)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <DIO_ErrStateSetPortValue+0x6>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <DIO_ErrStateSetPortValue+0x8>
    15e8:	0f 92       	push	r0
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	6a 83       	std	Y+2, r22	; 0x02
	if (val <= 0xff && val>=0x00)
	{
		switch(port)
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	3d 83       	std	Y+5, r19	; 0x05
    15fa:	2c 83       	std	Y+4, r18	; 0x04
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1600:	82 34       	cpi	r24, 0x42	; 66
    1602:	91 05       	cpc	r25, r1
    1604:	d9 f0       	breq	.+54     	; 0x163c <DIO_ErrStateSetPortValue+0x5c>
    1606:	2c 81       	ldd	r18, Y+4	; 0x04
    1608:	3d 81       	ldd	r19, Y+5	; 0x05
    160a:	23 34       	cpi	r18, 0x43	; 67
    160c:	31 05       	cpc	r19, r1
    160e:	34 f4       	brge	.+12     	; 0x161c <DIO_ErrStateSetPortValue+0x3c>
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	9d 81       	ldd	r25, Y+5	; 0x05
    1614:	81 34       	cpi	r24, 0x41	; 65
    1616:	91 05       	cpc	r25, r1
    1618:	61 f0       	breq	.+24     	; 0x1632 <DIO_ErrStateSetPortValue+0x52>
    161a:	1f c0       	rjmp	.+62     	; 0x165a <DIO_ErrStateSetPortValue+0x7a>
    161c:	2c 81       	ldd	r18, Y+4	; 0x04
    161e:	3d 81       	ldd	r19, Y+5	; 0x05
    1620:	23 34       	cpi	r18, 0x43	; 67
    1622:	31 05       	cpc	r19, r1
    1624:	81 f0       	breq	.+32     	; 0x1646 <DIO_ErrStateSetPortValue+0x66>
    1626:	8c 81       	ldd	r24, Y+4	; 0x04
    1628:	9d 81       	ldd	r25, Y+5	; 0x05
    162a:	84 34       	cpi	r24, 0x44	; 68
    162c:	91 05       	cpc	r25, r1
    162e:	81 f0       	breq	.+32     	; 0x1650 <DIO_ErrStateSetPortValue+0x70>
    1630:	14 c0       	rjmp	.+40     	; 0x165a <DIO_ErrStateSetPortValue+0x7a>
		{
		case 'A':  PORTA_ITI =  val ;break ;
    1632:	eb e3       	ldi	r30, 0x3B	; 59
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	80 83       	st	Z, r24
    163a:	12 c0       	rjmp	.+36     	; 0x1660 <DIO_ErrStateSetPortValue+0x80>
		case 'B':  PORTB_ITI =  val ;break ;
    163c:	e8 e3       	ldi	r30, 0x38	; 56
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	80 83       	st	Z, r24
    1644:	0d c0       	rjmp	.+26     	; 0x1660 <DIO_ErrStateSetPortValue+0x80>
		case 'C':  PORTC_ITI =  val ;break ;
    1646:	e5 e3       	ldi	r30, 0x35	; 53
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	80 83       	st	Z, r24
    164e:	08 c0       	rjmp	.+16     	; 0x1660 <DIO_ErrStateSetPortValue+0x80>
		case 'D':  PORTD_ITI =  val ;break ;
    1650:	e2 e3       	ldi	r30, 0x32	; 50
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	80 83       	st	Z, r24
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <DIO_ErrStateSetPortValue+0x80>
		default :
			return DIO_ERROR_PORT ;
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	9b 83       	std	Y+3, r25	; 0x03
    165e:	01 c0       	rjmp	.+2      	; 0x1662 <DIO_ErrStateSetPortValue+0x82>
		}
		return DIO_OK ;
    1660:	1b 82       	std	Y+3, r1	; 0x03
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
	else
	{
		return DIO_ERROR_VALUE;
	}

}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <DIO_ErrStateReadGroupValue>:
DIO_Err  DIO_ErrStateReadGroupValue(PORT_Name port ,u8 *value)/*Mostafa Anwer*/
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <DIO_ErrStateReadGroupValue+0x6>
    167a:	00 d0       	rcall	.+0      	; 0x167c <DIO_ErrStateReadGroupValue+0x8>
    167c:	00 d0       	rcall	.+0      	; 0x167e <DIO_ErrStateReadGroupValue+0xa>
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	7b 83       	std	Y+3, r23	; 0x03
    1686:	6a 83       	std	Y+2, r22	; 0x02
	if(value!=Null)
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	9b 81       	ldd	r25, Y+3	; 0x03
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	09 f4       	brne	.+2      	; 0x1692 <DIO_ErrStateReadGroupValue+0x1e>
    1690:	41 c0       	rjmp	.+130    	; 0x1714 <DIO_ErrStateReadGroupValue+0xa0>
	{
		switch(port)
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	3e 83       	std	Y+6, r19	; 0x06
    169a:	2d 83       	std	Y+5, r18	; 0x05
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
    169e:	9e 81       	ldd	r25, Y+6	; 0x06
    16a0:	82 34       	cpi	r24, 0x42	; 66
    16a2:	91 05       	cpc	r25, r1
    16a4:	e9 f0       	breq	.+58     	; 0x16e0 <DIO_ErrStateReadGroupValue+0x6c>
    16a6:	2d 81       	ldd	r18, Y+5	; 0x05
    16a8:	3e 81       	ldd	r19, Y+6	; 0x06
    16aa:	23 34       	cpi	r18, 0x43	; 67
    16ac:	31 05       	cpc	r19, r1
    16ae:	34 f4       	brge	.+12     	; 0x16bc <DIO_ErrStateReadGroupValue+0x48>
    16b0:	8d 81       	ldd	r24, Y+5	; 0x05
    16b2:	9e 81       	ldd	r25, Y+6	; 0x06
    16b4:	81 34       	cpi	r24, 0x41	; 65
    16b6:	91 05       	cpc	r25, r1
    16b8:	61 f0       	breq	.+24     	; 0x16d2 <DIO_ErrStateReadGroupValue+0x5e>
    16ba:	27 c0       	rjmp	.+78     	; 0x170a <DIO_ErrStateReadGroupValue+0x96>
    16bc:	2d 81       	ldd	r18, Y+5	; 0x05
    16be:	3e 81       	ldd	r19, Y+6	; 0x06
    16c0:	23 34       	cpi	r18, 0x43	; 67
    16c2:	31 05       	cpc	r19, r1
    16c4:	a1 f0       	breq	.+40     	; 0x16ee <DIO_ErrStateReadGroupValue+0x7a>
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ca:	84 34       	cpi	r24, 0x44	; 68
    16cc:	91 05       	cpc	r25, r1
    16ce:	b1 f0       	breq	.+44     	; 0x16fc <DIO_ErrStateReadGroupValue+0x88>
    16d0:	1c c0       	rjmp	.+56     	; 0x170a <DIO_ErrStateReadGroupValue+0x96>
		{
		case 'A':  *value = PINA_ITI ; break ;
    16d2:	e9 e3       	ldi	r30, 0x39	; 57
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	ea 81       	ldd	r30, Y+2	; 0x02
    16da:	fb 81       	ldd	r31, Y+3	; 0x03
    16dc:	80 83       	st	Z, r24
    16de:	18 c0       	rjmp	.+48     	; 0x1710 <DIO_ErrStateReadGroupValue+0x9c>
		case 'B':  *value = PINB_ITI ; break ;
    16e0:	e6 e3       	ldi	r30, 0x36	; 54
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	ea 81       	ldd	r30, Y+2	; 0x02
    16e8:	fb 81       	ldd	r31, Y+3	; 0x03
    16ea:	80 83       	st	Z, r24
    16ec:	11 c0       	rjmp	.+34     	; 0x1710 <DIO_ErrStateReadGroupValue+0x9c>
		case 'C':  *value = PINC_ITI ; break ;
    16ee:	e3 e3       	ldi	r30, 0x33	; 51
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	ea 81       	ldd	r30, Y+2	; 0x02
    16f6:	fb 81       	ldd	r31, Y+3	; 0x03
    16f8:	80 83       	st	Z, r24
    16fa:	0a c0       	rjmp	.+20     	; 0x1710 <DIO_ErrStateReadGroupValue+0x9c>
		case 'D':  *value = PIND_ITI ; break ;
    16fc:	e0 e3       	ldi	r30, 0x30	; 48
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	ea 81       	ldd	r30, Y+2	; 0x02
    1704:	fb 81       	ldd	r31, Y+3	; 0x03
    1706:	80 83       	st	Z, r24
    1708:	03 c0       	rjmp	.+6      	; 0x1710 <DIO_ErrStateReadGroupValue+0x9c>
		default :
			return DIO_ERROR_PORT ;
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	9c 83       	std	Y+4, r25	; 0x04
    170e:	04 c0       	rjmp	.+8      	; 0x1718 <DIO_ErrStateReadGroupValue+0xa4>
		}
		return DIO_OK ;
    1710:	1c 82       	std	Y+4, r1	; 0x04
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <DIO_ErrStateReadGroupValue+0xa4>
	}
	else
	{
		return AddressError;
    1714:	25 e0       	ldi	r18, 0x05	; 5
    1716:	2c 83       	std	Y+4, r18	; 0x04
    1718:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    171a:	26 96       	adiw	r28, 0x06	; 6
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <SW_SwitchErrStateGetState>:
 *  Created on: Mar 24, 2023
 *      Author: hisha
 */

#include "Switch_Interface.h"
SwitchErrState  SW_SwitchErrStateGetState(Switch_Info * Switch ,u8 * Result){
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	29 97       	sbiw	r28, 0x09	; 9
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	9d 83       	std	Y+5, r25	; 0x05
    1742:	8c 83       	std	Y+4, r24	; 0x04
    1744:	7f 83       	std	Y+7, r23	; 0x07
    1746:	6e 83       	std	Y+6, r22	; 0x06
	u8 read_val;
	Result=&read_val;
    1748:	ce 01       	movw	r24, r28
    174a:	03 96       	adiw	r24, 0x03	; 3
    174c:	9f 83       	std	Y+7, r25	; 0x07
    174e:	8e 83       	std	Y+6, r24	; 0x06
	u8 Switch_ErrDirectionReturn;
	u8 Switch_ErrValueReturn;
	if(Switch->ConnectionType==InternalPullUp){
    1750:	ec 81       	ldd	r30, Y+4	; 0x04
    1752:	fd 81       	ldd	r31, Y+5	; 0x05
    1754:	82 81       	ldd	r24, Z+2	; 0x02
    1756:	88 23       	and	r24, r24
    1758:	d1 f5       	brne	.+116    	; 0x17ce <SW_SwitchErrStateGetState+0xa2>
		Switch_ErrDirectionReturn=DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_IN);
    175a:	ec 81       	ldd	r30, Y+4	; 0x04
    175c:	fd 81       	ldd	r31, Y+5	; 0x05
    175e:	80 81       	ld	r24, Z
    1760:	ec 81       	ldd	r30, Y+4	; 0x04
    1762:	fd 81       	ldd	r31, Y+5	; 0x05
    1764:	91 81       	ldd	r25, Z+1	; 0x01
    1766:	69 2f       	mov	r22, r25
    1768:	40 e0       	ldi	r20, 0x00	; 0
    176a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    176e:	8a 83       	std	Y+2, r24	; 0x02
		if(Switch_ErrDirectionReturn==DIO_ERROR_PORT||Switch_ErrDirectionReturn==DIO_ERROR_Direction||Switch_ErrDirectionReturn==DIO_ERROR_PIN){
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	31 f0       	breq	.+12     	; 0x1782 <SW_SwitchErrStateGetState+0x56>
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	83 30       	cpi	r24, 0x03	; 3
    177a:	19 f0       	breq	.+6      	; 0x1782 <SW_SwitchErrStateGetState+0x56>
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	82 30       	cpi	r24, 0x02	; 2
    1780:	11 f4       	brne	.+4      	; 0x1786 <SW_SwitchErrStateGetState+0x5a>
			return Switch_Init_Error;
    1782:	18 86       	std	Y+8, r1	; 0x08
    1784:	79 c0       	rjmp	.+242    	; 0x1878 <SW_SwitchErrStateGetState+0x14c>
		}
		else{
			DIO_ErrStateSetPinValue(Switch->SW_Group,Switch->SW_Pin,DIO_HIGH);
    1786:	ec 81       	ldd	r30, Y+4	; 0x04
    1788:	fd 81       	ldd	r31, Y+5	; 0x05
    178a:	80 81       	ld	r24, Z
    178c:	ec 81       	ldd	r30, Y+4	; 0x04
    178e:	fd 81       	ldd	r31, Y+5	; 0x05
    1790:	91 81       	ldd	r25, Z+1	; 0x01
    1792:	69 2f       	mov	r22, r25
    1794:	41 e0       	ldi	r20, 0x01	; 1
    1796:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
			Switch_ErrValueReturn=DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,&read_val);
    179a:	ec 81       	ldd	r30, Y+4	; 0x04
    179c:	fd 81       	ldd	r31, Y+5	; 0x05
    179e:	80 81       	ld	r24, Z
    17a0:	ec 81       	ldd	r30, Y+4	; 0x04
    17a2:	fd 81       	ldd	r31, Y+5	; 0x05
    17a4:	91 81       	ldd	r25, Z+1	; 0x01
    17a6:	9e 01       	movw	r18, r28
    17a8:	2d 5f       	subi	r18, 0xFD	; 253
    17aa:	3f 4f       	sbci	r19, 0xFF	; 255
    17ac:	69 2f       	mov	r22, r25
    17ae:	a9 01       	movw	r20, r18
    17b0:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_ErrStateReadPinValue>
    17b4:	89 83       	std	Y+1, r24	; 0x01
			if(Switch_ErrValueReturn==DIO_ERROR_PIN||Switch_ErrValueReturn==DIO_ERROR_PORT){
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	82 30       	cpi	r24, 0x02	; 2
    17ba:	19 f0       	breq	.+6      	; 0x17c2 <SW_SwitchErrStateGetState+0x96>
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	81 30       	cpi	r24, 0x01	; 1
    17c0:	19 f4       	brne	.+6      	; 0x17c8 <SW_SwitchErrStateGetState+0x9c>
				return Switch_Value_Error;
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	88 87       	std	Y+8, r24	; 0x08
    17c6:	58 c0       	rjmp	.+176    	; 0x1878 <SW_SwitchErrStateGetState+0x14c>
			}
			else
				return Switch_Ok;
    17c8:	82 e0       	ldi	r24, 0x02	; 2
    17ca:	88 87       	std	Y+8, r24	; 0x08
    17cc:	55 c0       	rjmp	.+170    	; 0x1878 <SW_SwitchErrStateGetState+0x14c>
		}
	}
	else if(Switch->ConnectionType==ExternalPullUp){
    17ce:	ec 81       	ldd	r30, Y+4	; 0x04
    17d0:	fd 81       	ldd	r31, Y+5	; 0x05
    17d2:	82 81       	ldd	r24, Z+2	; 0x02
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	29 f5       	brne	.+74     	; 0x1822 <SW_SwitchErrStateGetState+0xf6>
		Switch_ErrDirectionReturn=DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_IN);
    17d8:	ec 81       	ldd	r30, Y+4	; 0x04
    17da:	fd 81       	ldd	r31, Y+5	; 0x05
    17dc:	80 81       	ld	r24, Z
    17de:	ec 81       	ldd	r30, Y+4	; 0x04
    17e0:	fd 81       	ldd	r31, Y+5	; 0x05
    17e2:	91 81       	ldd	r25, Z+1	; 0x01
    17e4:	69 2f       	mov	r22, r25
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    17ec:	8a 83       	std	Y+2, r24	; 0x02
		Switch_ErrValueReturn=DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,&read_val);
    17ee:	ec 81       	ldd	r30, Y+4	; 0x04
    17f0:	fd 81       	ldd	r31, Y+5	; 0x05
    17f2:	80 81       	ld	r24, Z
    17f4:	ec 81       	ldd	r30, Y+4	; 0x04
    17f6:	fd 81       	ldd	r31, Y+5	; 0x05
    17f8:	91 81       	ldd	r25, Z+1	; 0x01
    17fa:	9e 01       	movw	r18, r28
    17fc:	2d 5f       	subi	r18, 0xFD	; 253
    17fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1800:	69 2f       	mov	r22, r25
    1802:	a9 01       	movw	r20, r18
    1804:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_ErrStateReadPinValue>
    1808:	89 83       	std	Y+1, r24	; 0x01
		if(Switch_ErrValueReturn==DIO_ERROR_PIN||Switch_ErrValueReturn==DIO_ERROR_PORT){
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	82 30       	cpi	r24, 0x02	; 2
    180e:	19 f0       	breq	.+6      	; 0x1816 <SW_SwitchErrStateGetState+0xea>
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	19 f4       	brne	.+6      	; 0x181c <SW_SwitchErrStateGetState+0xf0>
			return Switch_Value_Error;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	88 87       	std	Y+8, r24	; 0x08
    181a:	2e c0       	rjmp	.+92     	; 0x1878 <SW_SwitchErrStateGetState+0x14c>
		}
		else
			return Switch_Ok;
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	88 87       	std	Y+8, r24	; 0x08
    1820:	2b c0       	rjmp	.+86     	; 0x1878 <SW_SwitchErrStateGetState+0x14c>
	}

	else if(Switch->ConnectionType==ExternalPullDown){
    1822:	ec 81       	ldd	r30, Y+4	; 0x04
    1824:	fd 81       	ldd	r31, Y+5	; 0x05
    1826:	82 81       	ldd	r24, Z+2	; 0x02
    1828:	82 30       	cpi	r24, 0x02	; 2
    182a:	29 f5       	brne	.+74     	; 0x1876 <SW_SwitchErrStateGetState+0x14a>
		Switch_ErrDirectionReturn=DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_IN);
    182c:	ec 81       	ldd	r30, Y+4	; 0x04
    182e:	fd 81       	ldd	r31, Y+5	; 0x05
    1830:	80 81       	ld	r24, Z
    1832:	ec 81       	ldd	r30, Y+4	; 0x04
    1834:	fd 81       	ldd	r31, Y+5	; 0x05
    1836:	91 81       	ldd	r25, Z+1	; 0x01
    1838:	69 2f       	mov	r22, r25
    183a:	40 e0       	ldi	r20, 0x00	; 0
    183c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    1840:	8a 83       	std	Y+2, r24	; 0x02
		Switch_ErrValueReturn=DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,&read_val);
    1842:	ec 81       	ldd	r30, Y+4	; 0x04
    1844:	fd 81       	ldd	r31, Y+5	; 0x05
    1846:	80 81       	ld	r24, Z
    1848:	ec 81       	ldd	r30, Y+4	; 0x04
    184a:	fd 81       	ldd	r31, Y+5	; 0x05
    184c:	91 81       	ldd	r25, Z+1	; 0x01
    184e:	9e 01       	movw	r18, r28
    1850:	2d 5f       	subi	r18, 0xFD	; 253
    1852:	3f 4f       	sbci	r19, 0xFF	; 255
    1854:	69 2f       	mov	r22, r25
    1856:	a9 01       	movw	r20, r18
    1858:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_ErrStateReadPinValue>
    185c:	89 83       	std	Y+1, r24	; 0x01
		if(Switch_ErrValueReturn==DIO_ERROR_PIN||Switch_ErrValueReturn==DIO_ERROR_PORT){
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	82 30       	cpi	r24, 0x02	; 2
    1862:	19 f0       	breq	.+6      	; 0x186a <SW_SwitchErrStateGetState+0x13e>
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	19 f4       	brne	.+6      	; 0x1870 <SW_SwitchErrStateGetState+0x144>
			return Switch_Value_Error;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	88 87       	std	Y+8, r24	; 0x08
    186e:	04 c0       	rjmp	.+8      	; 0x1878 <SW_SwitchErrStateGetState+0x14c>
		}
		else
			return Switch_Ok;
    1870:	82 e0       	ldi	r24, 0x02	; 2
    1872:	88 87       	std	Y+8, r24	; 0x08
    1874:	01 c0       	rjmp	.+2      	; 0x1878 <SW_SwitchErrStateGetState+0x14c>
    1876:	02 c0       	rjmp	.+4      	; 0x187c <SW_SwitchErrStateGetState+0x150>
	}

}
    1878:	88 85       	ldd	r24, Y+8	; 0x08
    187a:	89 87       	std	Y+9, r24	; 0x09
    187c:	89 85       	ldd	r24, Y+9	; 0x09
    187e:	29 96       	adiw	r28, 0x09	; 9
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <SevSeg_SevErrStateSetNumber>:
		SevSegCC_6 ,
		SevSegCC_7 ,
		SevSegCC_8 ,
		SevSegCC_9
};
SevErrState SevSeg_SevErrStateSetNumber(u8 INPUT_NUMBER , SevSeg_info * SevenSegment1){
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	00 d0       	rcall	.+0      	; 0x1896 <SevSeg_SevErrStateSetNumber+0x6>
    1896:	00 d0       	rcall	.+0      	; 0x1898 <SevSeg_SevErrStateSetNumber+0x8>
    1898:	00 d0       	rcall	.+0      	; 0x189a <SevSeg_SevErrStateSetNumber+0xa>
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	8b 83       	std	Y+3, r24	; 0x03
    18a0:	7d 83       	std	Y+5, r23	; 0x05
    18a2:	6c 83       	std	Y+4, r22	; 0x04
	u8 ErrStateDirection,ErrStateValue; // anode 1 // cathode 0 Enable
	ErrStateDirection=DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,DIO_OUT);
    18a4:	ec 81       	ldd	r30, Y+4	; 0x04
    18a6:	fd 81       	ldd	r31, Y+5	; 0x05
    18a8:	81 81       	ldd	r24, Z+1	; 0x01
    18aa:	88 2f       	mov	r24, r24
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	61 e0       	ldi	r22, 0x01	; 1
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	0e 94 a6 0a 	call	0x154c	; 0x154c <DIO_ErrStateSetGroupDirection>
    18b6:	8a 83       	std	Y+2, r24	; 0x02
	if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction)
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	19 f0       	breq	.+6      	; 0x18c4 <SevSeg_SevErrStateSetNumber+0x34>
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	83 30       	cpi	r24, 0x03	; 3
    18c2:	19 f4       	brne	.+6      	; 0x18ca <SevSeg_SevErrStateSetNumber+0x3a>
	{
		return Group_ERROR;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	8e 83       	std	Y+6, r24	; 0x06
    18c8:	94 c0       	rjmp	.+296    	; 0x19f2 <SevSeg_SevErrStateSetNumber+0x162>
	}
	else{
		if(SevenSegment1->SevSeg_Type==CA){
    18ca:	ec 81       	ldd	r30, Y+4	; 0x04
    18cc:	fd 81       	ldd	r31, Y+5	; 0x05
    18ce:	80 81       	ld	r24, Z
    18d0:	88 23       	and	r24, r24
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <SevSeg_SevErrStateSetNumber+0x46>
    18d4:	43 c0       	rjmp	.+134    	; 0x195c <SevSeg_SevErrStateSetNumber+0xcc>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    18d6:	ec 81       	ldd	r30, Y+4	; 0x04
    18d8:	fd 81       	ldd	r31, Y+5	; 0x05
    18da:	82 81       	ldd	r24, Z+2	; 0x02
    18dc:	ec 81       	ldd	r30, Y+4	; 0x04
    18de:	fd 81       	ldd	r31, Y+5	; 0x05
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	69 2f       	mov	r22, r25
    18e4:	41 e0       	ldi	r20, 0x01	; 1
    18e6:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    18ea:	8a 83       	std	Y+2, r24	; 0x02
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	81 30       	cpi	r24, 0x01	; 1
    18f0:	31 f0       	breq	.+12     	; 0x18fe <SevSeg_SevErrStateSetNumber+0x6e>
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	83 30       	cpi	r24, 0x03	; 3
    18f6:	19 f0       	breq	.+6      	; 0x18fe <SevSeg_SevErrStateSetNumber+0x6e>
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	82 30       	cpi	r24, 0x02	; 2
    18fc:	19 f4       	brne	.+6      	; 0x1904 <SevSeg_SevErrStateSetNumber+0x74>
				return Group_ERROR;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	8e 83       	std	Y+6, r24	; 0x06
    1902:	77 c0       	rjmp	.+238    	; 0x19f2 <SevSeg_SevErrStateSetNumber+0x162>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
    1904:	ec 81       	ldd	r30, Y+4	; 0x04
    1906:	fd 81       	ldd	r31, Y+5	; 0x05
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	ec 81       	ldd	r30, Y+4	; 0x04
    190c:	fd 81       	ldd	r31, Y+5	; 0x05
    190e:	93 81       	ldd	r25, Z+3	; 0x03
    1910:	69 2f       	mov	r22, r25
    1912:	41 e0       	ldi	r20, 0x01	; 1
    1914:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    1918:	89 83       	std	Y+1, r24	; 0x01
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	31 f0       	breq	.+12     	; 0x192c <SevSeg_SevErrStateSetNumber+0x9c>
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	84 30       	cpi	r24, 0x04	; 4
    1924:	19 f0       	breq	.+6      	; 0x192c <SevSeg_SevErrStateSetNumber+0x9c>
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	82 30       	cpi	r24, 0x02	; 2
    192a:	11 f4       	brne	.+4      	; 0x1930 <SevSeg_SevErrStateSetNumber+0xa0>
					return Number_Error;
    192c:	1e 82       	std	Y+6, r1	; 0x06
    192e:	61 c0       	rjmp	.+194    	; 0x19f2 <SevSeg_SevErrStateSetNumber+0x162>
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[INPUT_NUMBER]);
    1930:	ec 81       	ldd	r30, Y+4	; 0x04
    1932:	fd 81       	ldd	r31, Y+5	; 0x05
    1934:	81 81       	ldd	r24, Z+1	; 0x01
    1936:	48 2f       	mov	r20, r24
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	88 2f       	mov	r24, r24
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	fc 01       	movw	r30, r24
    1942:	e8 59       	subi	r30, 0x98	; 152
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	80 81       	ld	r24, Z
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	ca 01       	movw	r24, r20
    194e:	b9 01       	movw	r22, r18
    1950:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    1954:	89 83       	std	Y+1, r24	; 0x01
					if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((INPUT_NUMBER <0 )&&(INPUT_NUMBER>9))){
						return Number_Error;
					}
					else
						return Seven_OK;
    1956:	82 e0       	ldi	r24, 0x02	; 2
    1958:	8e 83       	std	Y+6, r24	; 0x06
    195a:	4b c0       	rjmp	.+150    	; 0x19f2 <SevSeg_SevErrStateSetNumber+0x162>
				}
			}
		}
		else if(SevenSegment1->SevSeg_Type==CC){
    195c:	ec 81       	ldd	r30, Y+4	; 0x04
    195e:	fd 81       	ldd	r31, Y+5	; 0x05
    1960:	80 81       	ld	r24, Z
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	09 f0       	breq	.+2      	; 0x1968 <SevSeg_SevErrStateSetNumber+0xd8>
    1966:	43 c0       	rjmp	.+134    	; 0x19ee <SevSeg_SevErrStateSetNumber+0x15e>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    1968:	ec 81       	ldd	r30, Y+4	; 0x04
    196a:	fd 81       	ldd	r31, Y+5	; 0x05
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	ec 81       	ldd	r30, Y+4	; 0x04
    1970:	fd 81       	ldd	r31, Y+5	; 0x05
    1972:	93 81       	ldd	r25, Z+3	; 0x03
    1974:	69 2f       	mov	r22, r25
    1976:	41 e0       	ldi	r20, 0x01	; 1
    1978:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    197c:	8a 83       	std	Y+2, r24	; 0x02
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	31 f0       	breq	.+12     	; 0x1990 <SevSeg_SevErrStateSetNumber+0x100>
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	83 30       	cpi	r24, 0x03	; 3
    1988:	19 f0       	breq	.+6      	; 0x1990 <SevSeg_SevErrStateSetNumber+0x100>
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	82 30       	cpi	r24, 0x02	; 2
    198e:	19 f4       	brne	.+6      	; 0x1996 <SevSeg_SevErrStateSetNumber+0x106>
				return Group_ERROR;
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	8e 83       	std	Y+6, r24	; 0x06
    1994:	2e c0       	rjmp	.+92     	; 0x19f2 <SevSeg_SevErrStateSetNumber+0x162>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
    1996:	ec 81       	ldd	r30, Y+4	; 0x04
    1998:	fd 81       	ldd	r31, Y+5	; 0x05
    199a:	82 81       	ldd	r24, Z+2	; 0x02
    199c:	ec 81       	ldd	r30, Y+4	; 0x04
    199e:	fd 81       	ldd	r31, Y+5	; 0x05
    19a0:	93 81       	ldd	r25, Z+3	; 0x03
    19a2:	69 2f       	mov	r22, r25
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    19aa:	89 83       	std	Y+1, r24	; 0x01
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	31 f0       	breq	.+12     	; 0x19be <SevSeg_SevErrStateSetNumber+0x12e>
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	84 30       	cpi	r24, 0x04	; 4
    19b6:	19 f0       	breq	.+6      	; 0x19be <SevSeg_SevErrStateSetNumber+0x12e>
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	82 30       	cpi	r24, 0x02	; 2
    19bc:	11 f4       	brne	.+4      	; 0x19c2 <SevSeg_SevErrStateSetNumber+0x132>
					return Number_Error;
    19be:	1e 82       	std	Y+6, r1	; 0x06
    19c0:	18 c0       	rjmp	.+48     	; 0x19f2 <SevSeg_SevErrStateSetNumber+0x162>
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[INPUT_NUMBER]);
    19c2:	ec 81       	ldd	r30, Y+4	; 0x04
    19c4:	fd 81       	ldd	r31, Y+5	; 0x05
    19c6:	81 81       	ldd	r24, Z+1	; 0x01
    19c8:	48 2f       	mov	r20, r24
    19ca:	50 e0       	ldi	r21, 0x00	; 0
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	88 2f       	mov	r24, r24
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	fc 01       	movw	r30, r24
    19d4:	ee 58       	subi	r30, 0x8E	; 142
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	80 81       	ld	r24, Z
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	ca 01       	movw	r24, r20
    19e0:	b9 01       	movw	r22, r18
    19e2:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    19e6:	89 83       	std	Y+1, r24	; 0x01
					if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((INPUT_NUMBER <0) &&(INPUT_NUMBER>9))){
						return Number_Error;
					}
					else
						return Seven_OK;
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	8e 83       	std	Y+6, r24	; 0x06
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <SevSeg_SevErrStateSetNumber+0x162>
				}
			}
		}
	}
	return Seven_OK;
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	8e 83       	std	Y+6, r24	; 0x06
    19f2:	8e 81       	ldd	r24, Y+6	; 0x06
}
    19f4:	26 96       	adiw	r28, 0x06	; 6
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <SevSeg_SevErrStateDisplayRange>:

SevErrState    SevSeg_SevErrStateDisplayRange(SevSeg_info * SevenSegment1 , u8 Copy_start , u8 Copy_End ){
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	ef 97       	sbiw	r28, 0x3f	; 63
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	9c af       	std	Y+60, r25	; 0x3c
    1a1c:	8b af       	std	Y+59, r24	; 0x3b
    1a1e:	6d af       	std	Y+61, r22	; 0x3d
    1a20:	4e af       	std	Y+62, r20	; 0x3e
	u8 ErrStateDirection,ErrStateValue;
	DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,DIO_OUT);
    1a22:	eb ad       	ldd	r30, Y+59	; 0x3b
    1a24:	fc ad       	ldd	r31, Y+60	; 0x3c
    1a26:	81 81       	ldd	r24, Z+1	; 0x01
    1a28:	88 2f       	mov	r24, r24
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	61 e0       	ldi	r22, 0x01	; 1
    1a2e:	70 e0       	ldi	r23, 0x00	; 0
    1a30:	0e 94 a6 0a 	call	0x154c	; 0x154c <DIO_ErrStateSetGroupDirection>
	if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction)
    1a34:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a36:	81 30       	cpi	r24, 0x01	; 1
    1a38:	19 f0       	breq	.+6      	; 0x1a40 <SevSeg_SevErrStateDisplayRange+0x3a>
    1a3a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a3c:	83 30       	cpi	r24, 0x03	; 3
    1a3e:	19 f4       	brne	.+6      	; 0x1a46 <SevSeg_SevErrStateDisplayRange+0x40>
	{
		return Group_ERROR;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	8f af       	std	Y+63, r24	; 0x3f
    1a44:	67 c2       	rjmp	.+1230   	; 0x1f14 <SevSeg_SevErrStateDisplayRange+0x50e>
	}
	else{
		if(SevenSegment1->SevSeg_Type==CA){
    1a46:	eb ad       	ldd	r30, Y+59	; 0x3b
    1a48:	fc ad       	ldd	r31, Y+60	; 0x3c
    1a4a:	80 81       	ld	r24, Z
    1a4c:	88 23       	and	r24, r24
    1a4e:	09 f0       	breq	.+2      	; 0x1a52 <SevSeg_SevErrStateDisplayRange+0x4c>
    1a50:	2d c1       	rjmp	.+602    	; 0x1cac <SevSeg_SevErrStateDisplayRange+0x2a6>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    1a52:	eb ad       	ldd	r30, Y+59	; 0x3b
    1a54:	fc ad       	ldd	r31, Y+60	; 0x3c
    1a56:	82 81       	ldd	r24, Z+2	; 0x02
    1a58:	eb ad       	ldd	r30, Y+59	; 0x3b
    1a5a:	fc ad       	ldd	r31, Y+60	; 0x3c
    1a5c:	93 81       	ldd	r25, Z+3	; 0x03
    1a5e:	69 2f       	mov	r22, r25
    1a60:	41 e0       	ldi	r20, 0x01	; 1
    1a62:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    1a66:	8a af       	std	Y+58, r24	; 0x3a
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    1a68:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a6a:	81 30       	cpi	r24, 0x01	; 1
    1a6c:	31 f0       	breq	.+12     	; 0x1a7a <SevSeg_SevErrStateDisplayRange+0x74>
    1a6e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a70:	83 30       	cpi	r24, 0x03	; 3
    1a72:	19 f0       	breq	.+6      	; 0x1a7a <SevSeg_SevErrStateDisplayRange+0x74>
    1a74:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a76:	82 30       	cpi	r24, 0x02	; 2
    1a78:	19 f4       	brne	.+6      	; 0x1a80 <SevSeg_SevErrStateDisplayRange+0x7a>
				return Group_ERROR;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	8f af       	std	Y+63, r24	; 0x3f
    1a7e:	4a c2       	rjmp	.+1172   	; 0x1f14 <SevSeg_SevErrStateDisplayRange+0x50e>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
    1a80:	eb ad       	ldd	r30, Y+59	; 0x3b
    1a82:	fc ad       	ldd	r31, Y+60	; 0x3c
    1a84:	82 81       	ldd	r24, Z+2	; 0x02
    1a86:	eb ad       	ldd	r30, Y+59	; 0x3b
    1a88:	fc ad       	ldd	r31, Y+60	; 0x3c
    1a8a:	93 81       	ldd	r25, Z+3	; 0x03
    1a8c:	69 2f       	mov	r22, r25
    1a8e:	41 e0       	ldi	r20, 0x01	; 1
    1a90:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    1a94:	89 af       	std	Y+57, r24	; 0x39
				if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((Copy_start <0) &&(Copy_End>9))){
					return Number_Error;
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[Copy_start]);
    1a96:	eb ad       	ldd	r30, Y+59	; 0x3b
    1a98:	fc ad       	ldd	r31, Y+60	; 0x3c
    1a9a:	81 81       	ldd	r24, Z+1	; 0x01
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	50 e0       	ldi	r21, 0x00	; 0
    1aa0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aa2:	88 2f       	mov	r24, r24
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	e8 59       	subi	r30, 0x98	; 152
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	80 81       	ld	r24, Z
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	ca 01       	movw	r24, r20
    1ab4:	b9 01       	movw	r22, r18
    1ab6:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    1aba:	89 af       	std	Y+57, r24	; 0x39
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	aa ef       	ldi	r26, 0xFA	; 250
    1ac2:	b3 e4       	ldi	r27, 0x43	; 67
    1ac4:	8d ab       	std	Y+53, r24	; 0x35
    1ac6:	9e ab       	std	Y+54, r25	; 0x36
    1ac8:	af ab       	std	Y+55, r26	; 0x37
    1aca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1acc:	6d a9       	ldd	r22, Y+53	; 0x35
    1ace:	7e a9       	ldd	r23, Y+54	; 0x36
    1ad0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ad2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	4a ef       	ldi	r20, 0xFA	; 250
    1ada:	54 e4       	ldi	r21, 0x44	; 68
    1adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	89 ab       	std	Y+49, r24	; 0x31
    1ae6:	9a ab       	std	Y+50, r25	; 0x32
    1ae8:	ab ab       	std	Y+51, r26	; 0x33
    1aea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1aec:	69 a9       	ldd	r22, Y+49	; 0x31
    1aee:	7a a9       	ldd	r23, Y+50	; 0x32
    1af0:	8b a9       	ldd	r24, Y+51	; 0x33
    1af2:	9c a9       	ldd	r25, Y+52	; 0x34
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e8       	ldi	r20, 0x80	; 128
    1afa:	5f e3       	ldi	r21, 0x3F	; 63
    1afc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b00:	88 23       	and	r24, r24
    1b02:	2c f4       	brge	.+10     	; 0x1b0e <SevSeg_SevErrStateDisplayRange+0x108>
		__ticks = 1;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	98 ab       	std	Y+48, r25	; 0x30
    1b0a:	8f a7       	std	Y+47, r24	; 0x2f
    1b0c:	3f c0       	rjmp	.+126    	; 0x1b8c <SevSeg_SevErrStateDisplayRange+0x186>
	else if (__tmp > 65535)
    1b0e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b10:	7a a9       	ldd	r23, Y+50	; 0x32
    1b12:	8b a9       	ldd	r24, Y+51	; 0x33
    1b14:	9c a9       	ldd	r25, Y+52	; 0x34
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	3f ef       	ldi	r19, 0xFF	; 255
    1b1a:	4f e7       	ldi	r20, 0x7F	; 127
    1b1c:	57 e4       	ldi	r21, 0x47	; 71
    1b1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b22:	18 16       	cp	r1, r24
    1b24:	4c f5       	brge	.+82     	; 0x1b78 <SevSeg_SevErrStateDisplayRange+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b26:	6d a9       	ldd	r22, Y+53	; 0x35
    1b28:	7e a9       	ldd	r23, Y+54	; 0x36
    1b2a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b2c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e2       	ldi	r20, 0x20	; 32
    1b34:	51 e4       	ldi	r21, 0x41	; 65
    1b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	98 ab       	std	Y+48, r25	; 0x30
    1b4c:	8f a7       	std	Y+47, r24	; 0x2f
    1b4e:	0f c0       	rjmp	.+30     	; 0x1b6e <SevSeg_SevErrStateDisplayRange+0x168>
    1b50:	88 ec       	ldi	r24, 0xC8	; 200
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9e a7       	std	Y+46, r25	; 0x2e
    1b56:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b58:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b5a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <SevSeg_SevErrStateDisplayRange+0x156>
    1b60:	9e a7       	std	Y+46, r25	; 0x2e
    1b62:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b66:	98 a9       	ldd	r25, Y+48	; 0x30
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	98 ab       	std	Y+48, r25	; 0x30
    1b6c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b70:	98 a9       	ldd	r25, Y+48	; 0x30
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	69 f7       	brne	.-38     	; 0x1b50 <SevSeg_SevErrStateDisplayRange+0x14a>
    1b76:	14 c0       	rjmp	.+40     	; 0x1ba0 <SevSeg_SevErrStateDisplayRange+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b78:	69 a9       	ldd	r22, Y+49	; 0x31
    1b7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	98 ab       	std	Y+48, r25	; 0x30
    1b8a:	8f a7       	std	Y+47, r24	; 0x2f
    1b8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b90:	9c a7       	std	Y+44, r25	; 0x2c
    1b92:	8b a7       	std	Y+43, r24	; 0x2b
    1b94:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b96:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <SevSeg_SevErrStateDisplayRange+0x192>
    1b9c:	9c a7       	std	Y+44, r25	; 0x2c
    1b9e:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(500);
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[Copy_End]);
    1ba0:	eb ad       	ldd	r30, Y+59	; 0x3b
    1ba2:	fc ad       	ldd	r31, Y+60	; 0x3c
    1ba4:	81 81       	ldd	r24, Z+1	; 0x01
    1ba6:	48 2f       	mov	r20, r24
    1ba8:	50 e0       	ldi	r21, 0x00	; 0
    1baa:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	e8 59       	subi	r30, 0x98	; 152
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	80 81       	ld	r24, Z
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	ca 01       	movw	r24, r20
    1bbe:	b9 01       	movw	r22, r18
    1bc0:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    1bc4:	89 af       	std	Y+57, r24	; 0x39
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	aa ef       	ldi	r26, 0xFA	; 250
    1bcc:	b3 e4       	ldi	r27, 0x43	; 67
    1bce:	8f a3       	std	Y+39, r24	; 0x27
    1bd0:	98 a7       	std	Y+40, r25	; 0x28
    1bd2:	a9 a7       	std	Y+41, r26	; 0x29
    1bd4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd6:	6f a1       	ldd	r22, Y+39	; 0x27
    1bd8:	78 a5       	ldd	r23, Y+40	; 0x28
    1bda:	89 a5       	ldd	r24, Y+41	; 0x29
    1bdc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	4a ef       	ldi	r20, 0xFA	; 250
    1be4:	54 e4       	ldi	r21, 0x44	; 68
    1be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	8b a3       	std	Y+35, r24	; 0x23
    1bf0:	9c a3       	std	Y+36, r25	; 0x24
    1bf2:	ad a3       	std	Y+37, r26	; 0x25
    1bf4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bf6:	6b a1       	ldd	r22, Y+35	; 0x23
    1bf8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfa:	8d a1       	ldd	r24, Y+37	; 0x25
    1bfc:	9e a1       	ldd	r25, Y+38	; 0x26
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e8       	ldi	r20, 0x80	; 128
    1c04:	5f e3       	ldi	r21, 0x3F	; 63
    1c06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c0a:	88 23       	and	r24, r24
    1c0c:	2c f4       	brge	.+10     	; 0x1c18 <SevSeg_SevErrStateDisplayRange+0x212>
		__ticks = 1;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	9a a3       	std	Y+34, r25	; 0x22
    1c14:	89 a3       	std	Y+33, r24	; 0x21
    1c16:	3f c0       	rjmp	.+126    	; 0x1c96 <SevSeg_SevErrStateDisplayRange+0x290>
	else if (__tmp > 65535)
    1c18:	6b a1       	ldd	r22, Y+35	; 0x23
    1c1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	3f ef       	ldi	r19, 0xFF	; 255
    1c24:	4f e7       	ldi	r20, 0x7F	; 127
    1c26:	57 e4       	ldi	r21, 0x47	; 71
    1c28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c2c:	18 16       	cp	r1, r24
    1c2e:	4c f5       	brge	.+82     	; 0x1c82 <SevSeg_SevErrStateDisplayRange+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c30:	6f a1       	ldd	r22, Y+39	; 0x27
    1c32:	78 a5       	ldd	r23, Y+40	; 0x28
    1c34:	89 a5       	ldd	r24, Y+41	; 0x29
    1c36:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e2       	ldi	r20, 0x20	; 32
    1c3e:	51 e4       	ldi	r21, 0x41	; 65
    1c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	9a a3       	std	Y+34, r25	; 0x22
    1c56:	89 a3       	std	Y+33, r24	; 0x21
    1c58:	0f c0       	rjmp	.+30     	; 0x1c78 <SevSeg_SevErrStateDisplayRange+0x272>
    1c5a:	88 ec       	ldi	r24, 0xC8	; 200
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	98 a3       	std	Y+32, r25	; 0x20
    1c60:	8f 8f       	std	Y+31, r24	; 0x1f
    1c62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c64:	98 a1       	ldd	r25, Y+32	; 0x20
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <SevSeg_SevErrStateDisplayRange+0x260>
    1c6a:	98 a3       	std	Y+32, r25	; 0x20
    1c6c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c70:	9a a1       	ldd	r25, Y+34	; 0x22
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	9a a3       	std	Y+34, r25	; 0x22
    1c76:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c78:	89 a1       	ldd	r24, Y+33	; 0x21
    1c7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	69 f7       	brne	.-38     	; 0x1c5a <SevSeg_SevErrStateDisplayRange+0x254>
    1c80:	47 c1       	rjmp	.+654    	; 0x1f10 <SevSeg_SevErrStateDisplayRange+0x50a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c82:	6b a1       	ldd	r22, Y+35	; 0x23
    1c84:	7c a1       	ldd	r23, Y+36	; 0x24
    1c86:	8d a1       	ldd	r24, Y+37	; 0x25
    1c88:	9e a1       	ldd	r25, Y+38	; 0x26
    1c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	9a a3       	std	Y+34, r25	; 0x22
    1c94:	89 a3       	std	Y+33, r24	; 0x21
    1c96:	89 a1       	ldd	r24, Y+33	; 0x21
    1c98:	9a a1       	ldd	r25, Y+34	; 0x22
    1c9a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c9c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ca0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	f1 f7       	brne	.-4      	; 0x1ca2 <SevSeg_SevErrStateDisplayRange+0x29c>
    1ca6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ca8:	8d 8f       	std	Y+29, r24	; 0x1d
    1caa:	32 c1       	rjmp	.+612    	; 0x1f10 <SevSeg_SevErrStateDisplayRange+0x50a>
					_delay_ms(500);
				}
			}
		}
		else if(SevenSegment1->SevSeg_Type==CC){
    1cac:	eb ad       	ldd	r30, Y+59	; 0x3b
    1cae:	fc ad       	ldd	r31, Y+60	; 0x3c
    1cb0:	80 81       	ld	r24, Z
    1cb2:	81 30       	cpi	r24, 0x01	; 1
    1cb4:	09 f0       	breq	.+2      	; 0x1cb8 <SevSeg_SevErrStateDisplayRange+0x2b2>
    1cb6:	2c c1       	rjmp	.+600    	; 0x1f10 <SevSeg_SevErrStateDisplayRange+0x50a>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    1cb8:	eb ad       	ldd	r30, Y+59	; 0x3b
    1cba:	fc ad       	ldd	r31, Y+60	; 0x3c
    1cbc:	82 81       	ldd	r24, Z+2	; 0x02
    1cbe:	eb ad       	ldd	r30, Y+59	; 0x3b
    1cc0:	fc ad       	ldd	r31, Y+60	; 0x3c
    1cc2:	93 81       	ldd	r25, Z+3	; 0x03
    1cc4:	69 2f       	mov	r22, r25
    1cc6:	41 e0       	ldi	r20, 0x01	; 1
    1cc8:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    1ccc:	8a af       	std	Y+58, r24	; 0x3a
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    1cce:	8a ad       	ldd	r24, Y+58	; 0x3a
    1cd0:	81 30       	cpi	r24, 0x01	; 1
    1cd2:	31 f0       	breq	.+12     	; 0x1ce0 <SevSeg_SevErrStateDisplayRange+0x2da>
    1cd4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1cd6:	83 30       	cpi	r24, 0x03	; 3
    1cd8:	19 f0       	breq	.+6      	; 0x1ce0 <SevSeg_SevErrStateDisplayRange+0x2da>
    1cda:	8a ad       	ldd	r24, Y+58	; 0x3a
    1cdc:	82 30       	cpi	r24, 0x02	; 2
    1cde:	19 f4       	brne	.+6      	; 0x1ce6 <SevSeg_SevErrStateDisplayRange+0x2e0>
				return Group_ERROR;
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	8f af       	std	Y+63, r24	; 0x3f
    1ce4:	17 c1       	rjmp	.+558    	; 0x1f14 <SevSeg_SevErrStateDisplayRange+0x50e>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
    1ce6:	eb ad       	ldd	r30, Y+59	; 0x3b
    1ce8:	fc ad       	ldd	r31, Y+60	; 0x3c
    1cea:	82 81       	ldd	r24, Z+2	; 0x02
    1cec:	eb ad       	ldd	r30, Y+59	; 0x3b
    1cee:	fc ad       	ldd	r31, Y+60	; 0x3c
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	69 2f       	mov	r22, r25
    1cf4:	40 e0       	ldi	r20, 0x00	; 0
    1cf6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    1cfa:	89 af       	std	Y+57, r24	; 0x39
				if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((Copy_start <0) &&(Copy_End>9))){
					return Number_Error;
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[Copy_start]);
    1cfc:	eb ad       	ldd	r30, Y+59	; 0x3b
    1cfe:	fc ad       	ldd	r31, Y+60	; 0x3c
    1d00:	81 81       	ldd	r24, Z+1	; 0x01
    1d02:	48 2f       	mov	r20, r24
    1d04:	50 e0       	ldi	r21, 0x00	; 0
    1d06:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d08:	88 2f       	mov	r24, r24
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	ee 58       	subi	r30, 0x8E	; 142
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	80 81       	ld	r24, Z
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	ca 01       	movw	r24, r20
    1d1a:	b9 01       	movw	r22, r18
    1d1c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    1d20:	89 af       	std	Y+57, r24	; 0x39
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	aa ef       	ldi	r26, 0xFA	; 250
    1d28:	b3 e4       	ldi	r27, 0x43	; 67
    1d2a:	89 8f       	std	Y+25, r24	; 0x19
    1d2c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d2e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d32:	69 8d       	ldd	r22, Y+25	; 0x19
    1d34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	4a ef       	ldi	r20, 0xFA	; 250
    1d40:	54 e4       	ldi	r21, 0x44	; 68
    1d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	8d 8b       	std	Y+21, r24	; 0x15
    1d4c:	9e 8b       	std	Y+22, r25	; 0x16
    1d4e:	af 8b       	std	Y+23, r26	; 0x17
    1d50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d52:	6d 89       	ldd	r22, Y+21	; 0x15
    1d54:	7e 89       	ldd	r23, Y+22	; 0x16
    1d56:	8f 89       	ldd	r24, Y+23	; 0x17
    1d58:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e8       	ldi	r20, 0x80	; 128
    1d60:	5f e3       	ldi	r21, 0x3F	; 63
    1d62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d66:	88 23       	and	r24, r24
    1d68:	2c f4       	brge	.+10     	; 0x1d74 <SevSeg_SevErrStateDisplayRange+0x36e>
		__ticks = 1;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9c 8b       	std	Y+20, r25	; 0x14
    1d70:	8b 8b       	std	Y+19, r24	; 0x13
    1d72:	3f c0       	rjmp	.+126    	; 0x1df2 <SevSeg_SevErrStateDisplayRange+0x3ec>
	else if (__tmp > 65535)
    1d74:	6d 89       	ldd	r22, Y+21	; 0x15
    1d76:	7e 89       	ldd	r23, Y+22	; 0x16
    1d78:	8f 89       	ldd	r24, Y+23	; 0x17
    1d7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	3f ef       	ldi	r19, 0xFF	; 255
    1d80:	4f e7       	ldi	r20, 0x7F	; 127
    1d82:	57 e4       	ldi	r21, 0x47	; 71
    1d84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d88:	18 16       	cp	r1, r24
    1d8a:	4c f5       	brge	.+82     	; 0x1dde <SevSeg_SevErrStateDisplayRange+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e2       	ldi	r20, 0x20	; 32
    1d9a:	51 e4       	ldi	r21, 0x41	; 65
    1d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	bc 01       	movw	r22, r24
    1da6:	cd 01       	movw	r24, r26
    1da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9c 8b       	std	Y+20, r25	; 0x14
    1db2:	8b 8b       	std	Y+19, r24	; 0x13
    1db4:	0f c0       	rjmp	.+30     	; 0x1dd4 <SevSeg_SevErrStateDisplayRange+0x3ce>
    1db6:	88 ec       	ldi	r24, 0xC8	; 200
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	9a 8b       	std	Y+18, r25	; 0x12
    1dbc:	89 8b       	std	Y+17, r24	; 0x11
    1dbe:	89 89       	ldd	r24, Y+17	; 0x11
    1dc0:	9a 89       	ldd	r25, Y+18	; 0x12
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <SevSeg_SevErrStateDisplayRange+0x3bc>
    1dc6:	9a 8b       	std	Y+18, r25	; 0x12
    1dc8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dca:	8b 89       	ldd	r24, Y+19	; 0x13
    1dcc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	9c 8b       	std	Y+20, r25	; 0x14
    1dd2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	69 f7       	brne	.-38     	; 0x1db6 <SevSeg_SevErrStateDisplayRange+0x3b0>
    1ddc:	14 c0       	rjmp	.+40     	; 0x1e06 <SevSeg_SevErrStateDisplayRange+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dde:	6d 89       	ldd	r22, Y+21	; 0x15
    1de0:	7e 89       	ldd	r23, Y+22	; 0x16
    1de2:	8f 89       	ldd	r24, Y+23	; 0x17
    1de4:	98 8d       	ldd	r25, Y+24	; 0x18
    1de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	9c 8b       	std	Y+20, r25	; 0x14
    1df0:	8b 8b       	std	Y+19, r24	; 0x13
    1df2:	8b 89       	ldd	r24, Y+19	; 0x13
    1df4:	9c 89       	ldd	r25, Y+20	; 0x14
    1df6:	98 8b       	std	Y+16, r25	; 0x10
    1df8:	8f 87       	std	Y+15, r24	; 0x0f
    1dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dfc:	98 89       	ldd	r25, Y+16	; 0x10
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	f1 f7       	brne	.-4      	; 0x1dfe <SevSeg_SevErrStateDisplayRange+0x3f8>
    1e02:	98 8b       	std	Y+16, r25	; 0x10
    1e04:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[Copy_End]);
    1e06:	eb ad       	ldd	r30, Y+59	; 0x3b
    1e08:	fc ad       	ldd	r31, Y+60	; 0x3c
    1e0a:	81 81       	ldd	r24, Z+1	; 0x01
    1e0c:	48 2f       	mov	r20, r24
    1e0e:	50 e0       	ldi	r21, 0x00	; 0
    1e10:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e12:	88 2f       	mov	r24, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	fc 01       	movw	r30, r24
    1e18:	ee 58       	subi	r30, 0x8E	; 142
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	ca 01       	movw	r24, r20
    1e24:	b9 01       	movw	r22, r18
    1e26:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    1e2a:	89 af       	std	Y+57, r24	; 0x39
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	aa ef       	ldi	r26, 0xFA	; 250
    1e32:	b3 e4       	ldi	r27, 0x43	; 67
    1e34:	8b 87       	std	Y+11, r24	; 0x0b
    1e36:	9c 87       	std	Y+12, r25	; 0x0c
    1e38:	ad 87       	std	Y+13, r26	; 0x0d
    1e3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	4a ef       	ldi	r20, 0xFA	; 250
    1e4a:	54 e4       	ldi	r21, 0x44	; 68
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	8f 83       	std	Y+7, r24	; 0x07
    1e56:	98 87       	std	Y+8, r25	; 0x08
    1e58:	a9 87       	std	Y+9, r26	; 0x09
    1e5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5e:	78 85       	ldd	r23, Y+8	; 0x08
    1e60:	89 85       	ldd	r24, Y+9	; 0x09
    1e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	2c f4       	brge	.+10     	; 0x1e7e <SevSeg_SevErrStateDisplayRange+0x478>
		__ticks = 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9e 83       	std	Y+6, r25	; 0x06
    1e7a:	8d 83       	std	Y+5, r24	; 0x05
    1e7c:	3f c0       	rjmp	.+126    	; 0x1efc <SevSeg_SevErrStateDisplayRange+0x4f6>
	else if (__tmp > 65535)
    1e7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e80:	78 85       	ldd	r23, Y+8	; 0x08
    1e82:	89 85       	ldd	r24, Y+9	; 0x09
    1e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	3f ef       	ldi	r19, 0xFF	; 255
    1e8a:	4f e7       	ldi	r20, 0x7F	; 127
    1e8c:	57 e4       	ldi	r21, 0x47	; 71
    1e8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e92:	18 16       	cp	r1, r24
    1e94:	4c f5       	brge	.+82     	; 0x1ee8 <SevSeg_SevErrStateDisplayRange+0x4e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e2       	ldi	r20, 0x20	; 32
    1ea4:	51 e4       	ldi	r21, 0x41	; 65
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
    1ebe:	0f c0       	rjmp	.+30     	; 0x1ede <SevSeg_SevErrStateDisplayRange+0x4d8>
    1ec0:	88 ec       	ldi	r24, 0xC8	; 200
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9c 83       	std	Y+4, r25	; 0x04
    1ec6:	8b 83       	std	Y+3, r24	; 0x03
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <SevSeg_SevErrStateDisplayRange+0x4c6>
    1ed0:	9c 83       	std	Y+4, r25	; 0x04
    1ed2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	9e 83       	std	Y+6, r25	; 0x06
    1edc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	69 f7       	brne	.-38     	; 0x1ec0 <SevSeg_SevErrStateDisplayRange+0x4ba>
    1ee6:	14 c0       	rjmp	.+40     	; 0x1f10 <SevSeg_SevErrStateDisplayRange+0x50a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eea:	78 85       	ldd	r23, Y+8	; 0x08
    1eec:	89 85       	ldd	r24, Y+9	; 0x09
    1eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	9e 83       	std	Y+6, r25	; 0x06
    1efa:	8d 83       	std	Y+5, r24	; 0x05
    1efc:	8d 81       	ldd	r24, Y+5	; 0x05
    1efe:	9e 81       	ldd	r25, Y+6	; 0x06
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	89 83       	std	Y+1, r24	; 0x01
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	9a 81       	ldd	r25, Y+2	; 0x02
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <SevSeg_SevErrStateDisplayRange+0x502>
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(500);
				}
			}
		}
	}
	return Seven_OK;
    1f10:	82 e0       	ldi	r24, 0x02	; 2
    1f12:	8f af       	std	Y+63, r24	; 0x3f
    1f14:	8f ad       	ldd	r24, Y+63	; 0x3f

}
    1f16:	ef 96       	adiw	r28, 0x3f	; 63
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	de bf       	out	0x3e, r29	; 62
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	cd bf       	out	0x3d, r28	; 61
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <SevSeg_SevErrStateDisplayMax>:

SevErrState SevSeg_SevErrStateDisplayMax(SevSeg_info * SevenSegment1){
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    1f30:	a3 97       	sbiw	r28, 0x23	; 35
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	9a a3       	std	Y+34, r25	; 0x22
    1f3e:	89 a3       	std	Y+33, r24	; 0x21
	u8 ErrStateDirection,ErrStateValue; // anode 1 // cathode 0 Enable
	ErrStateDirection=DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,DIO_OUT);
    1f40:	e9 a1       	ldd	r30, Y+33	; 0x21
    1f42:	fa a1       	ldd	r31, Y+34	; 0x22
    1f44:	81 81       	ldd	r24, Z+1	; 0x01
    1f46:	88 2f       	mov	r24, r24
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	61 e0       	ldi	r22, 0x01	; 1
    1f4c:	70 e0       	ldi	r23, 0x00	; 0
    1f4e:	0e 94 a6 0a 	call	0x154c	; 0x154c <DIO_ErrStateSetGroupDirection>
    1f52:	88 a3       	std	Y+32, r24	; 0x20
	if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction)
    1f54:	88 a1       	ldd	r24, Y+32	; 0x20
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	19 f0       	breq	.+6      	; 0x1f60 <SevSeg_SevErrStateDisplayMax+0x38>
    1f5a:	88 a1       	ldd	r24, Y+32	; 0x20
    1f5c:	83 30       	cpi	r24, 0x03	; 3
    1f5e:	19 f4       	brne	.+6      	; 0x1f66 <SevSeg_SevErrStateDisplayMax+0x3e>
	{
		return Group_ERROR;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	8b a3       	std	Y+35, r24	; 0x23
    1f64:	9a c1       	rjmp	.+820    	; 0x229a <SevSeg_SevErrStateDisplayMax+0x372>
	}
	else{
		if(SevenSegment1->SevSeg_Type==CA){
    1f66:	e9 a1       	ldd	r30, Y+33	; 0x21
    1f68:	fa a1       	ldd	r31, Y+34	; 0x22
    1f6a:	80 81       	ld	r24, Z
    1f6c:	88 23       	and	r24, r24
    1f6e:	09 f0       	breq	.+2      	; 0x1f72 <SevSeg_SevErrStateDisplayMax+0x4a>
    1f70:	c6 c0       	rjmp	.+396    	; 0x20fe <SevSeg_SevErrStateDisplayMax+0x1d6>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    1f72:	e9 a1       	ldd	r30, Y+33	; 0x21
    1f74:	fa a1       	ldd	r31, Y+34	; 0x22
    1f76:	82 81       	ldd	r24, Z+2	; 0x02
    1f78:	e9 a1       	ldd	r30, Y+33	; 0x21
    1f7a:	fa a1       	ldd	r31, Y+34	; 0x22
    1f7c:	93 81       	ldd	r25, Z+3	; 0x03
    1f7e:	69 2f       	mov	r22, r25
    1f80:	41 e0       	ldi	r20, 0x01	; 1
    1f82:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    1f86:	88 a3       	std	Y+32, r24	; 0x20
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    1f88:	88 a1       	ldd	r24, Y+32	; 0x20
    1f8a:	81 30       	cpi	r24, 0x01	; 1
    1f8c:	31 f0       	breq	.+12     	; 0x1f9a <SevSeg_SevErrStateDisplayMax+0x72>
    1f8e:	88 a1       	ldd	r24, Y+32	; 0x20
    1f90:	83 30       	cpi	r24, 0x03	; 3
    1f92:	19 f0       	breq	.+6      	; 0x1f9a <SevSeg_SevErrStateDisplayMax+0x72>
    1f94:	88 a1       	ldd	r24, Y+32	; 0x20
    1f96:	82 30       	cpi	r24, 0x02	; 2
    1f98:	19 f4       	brne	.+6      	; 0x1fa0 <SevSeg_SevErrStateDisplayMax+0x78>
				return Group_ERROR;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	8b a3       	std	Y+35, r24	; 0x23
    1f9e:	7d c1       	rjmp	.+762    	; 0x229a <SevSeg_SevErrStateDisplayMax+0x372>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
    1fa0:	e9 a1       	ldd	r30, Y+33	; 0x21
    1fa2:	fa a1       	ldd	r31, Y+34	; 0x22
    1fa4:	82 81       	ldd	r24, Z+2	; 0x02
    1fa6:	e9 a1       	ldd	r30, Y+33	; 0x21
    1fa8:	fa a1       	ldd	r31, Y+34	; 0x22
    1faa:	93 81       	ldd	r25, Z+3	; 0x03
    1fac:	69 2f       	mov	r22, r25
    1fae:	41 e0       	ldi	r20, 0x01	; 1
    1fb0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    1fb4:	8f 8f       	std	Y+31, r24	; 0x1f
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    1fb6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fb8:	81 30       	cpi	r24, 0x01	; 1
    1fba:	31 f0       	breq	.+12     	; 0x1fc8 <SevSeg_SevErrStateDisplayMax+0xa0>
    1fbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fbe:	84 30       	cpi	r24, 0x04	; 4
    1fc0:	19 f0       	breq	.+6      	; 0x1fc8 <SevSeg_SevErrStateDisplayMax+0xa0>
    1fc2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fc4:	82 30       	cpi	r24, 0x02	; 2
    1fc6:	11 f4       	brne	.+4      	; 0x1fcc <SevSeg_SevErrStateDisplayMax+0xa4>
					return Number_Error;
    1fc8:	1b a2       	std	Y+35, r1	; 0x23
    1fca:	67 c1       	rjmp	.+718    	; 0x229a <SevSeg_SevErrStateDisplayMax+0x372>
				}
				else{
					for(u8 i=0;i<10;i++){
    1fcc:	1e 8e       	std	Y+30, r1	; 0x1e
    1fce:	88 c0       	rjmp	.+272    	; 0x20e0 <SevSeg_SevErrStateDisplayMax+0x1b8>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[i]);
    1fd0:	e9 a1       	ldd	r30, Y+33	; 0x21
    1fd2:	fa a1       	ldd	r31, Y+34	; 0x22
    1fd4:	81 81       	ldd	r24, Z+1	; 0x01
    1fd6:	48 2f       	mov	r20, r24
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fdc:	88 2f       	mov	r24, r24
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	e8 59       	subi	r30, 0x98	; 152
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	80 81       	ld	r24, Z
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	ca 01       	movw	r24, r20
    1fee:	b9 01       	movw	r22, r18
    1ff0:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    1ff4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	a6 e1       	ldi	r26, 0x16	; 22
    1ffc:	b3 e4       	ldi	r27, 0x43	; 67
    1ffe:	89 8f       	std	Y+25, r24	; 0x19
    2000:	9a 8f       	std	Y+26, r25	; 0x1a
    2002:	ab 8f       	std	Y+27, r26	; 0x1b
    2004:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2006:	69 8d       	ldd	r22, Y+25	; 0x19
    2008:	7a 8d       	ldd	r23, Y+26	; 0x1a
    200a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    200c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	4a ef       	ldi	r20, 0xFA	; 250
    2014:	54 e4       	ldi	r21, 0x44	; 68
    2016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	8d 8b       	std	Y+21, r24	; 0x15
    2020:	9e 8b       	std	Y+22, r25	; 0x16
    2022:	af 8b       	std	Y+23, r26	; 0x17
    2024:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2026:	6d 89       	ldd	r22, Y+21	; 0x15
    2028:	7e 89       	ldd	r23, Y+22	; 0x16
    202a:	8f 89       	ldd	r24, Y+23	; 0x17
    202c:	98 8d       	ldd	r25, Y+24	; 0x18
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e8       	ldi	r20, 0x80	; 128
    2034:	5f e3       	ldi	r21, 0x3F	; 63
    2036:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    203a:	88 23       	and	r24, r24
    203c:	2c f4       	brge	.+10     	; 0x2048 <SevSeg_SevErrStateDisplayMax+0x120>
		__ticks = 1;
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	9c 8b       	std	Y+20, r25	; 0x14
    2044:	8b 8b       	std	Y+19, r24	; 0x13
    2046:	3f c0       	rjmp	.+126    	; 0x20c6 <SevSeg_SevErrStateDisplayMax+0x19e>
	else if (__tmp > 65535)
    2048:	6d 89       	ldd	r22, Y+21	; 0x15
    204a:	7e 89       	ldd	r23, Y+22	; 0x16
    204c:	8f 89       	ldd	r24, Y+23	; 0x17
    204e:	98 8d       	ldd	r25, Y+24	; 0x18
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	3f ef       	ldi	r19, 0xFF	; 255
    2054:	4f e7       	ldi	r20, 0x7F	; 127
    2056:	57 e4       	ldi	r21, 0x47	; 71
    2058:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    205c:	18 16       	cp	r1, r24
    205e:	4c f5       	brge	.+82     	; 0x20b2 <SevSeg_SevErrStateDisplayMax+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2060:	69 8d       	ldd	r22, Y+25	; 0x19
    2062:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2064:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2066:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e2       	ldi	r20, 0x20	; 32
    206e:	51 e4       	ldi	r21, 0x41	; 65
    2070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	bc 01       	movw	r22, r24
    207a:	cd 01       	movw	r24, r26
    207c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	9c 8b       	std	Y+20, r25	; 0x14
    2086:	8b 8b       	std	Y+19, r24	; 0x13
    2088:	0f c0       	rjmp	.+30     	; 0x20a8 <SevSeg_SevErrStateDisplayMax+0x180>
    208a:	88 ec       	ldi	r24, 0xC8	; 200
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9a 8b       	std	Y+18, r25	; 0x12
    2090:	89 8b       	std	Y+17, r24	; 0x11
    2092:	89 89       	ldd	r24, Y+17	; 0x11
    2094:	9a 89       	ldd	r25, Y+18	; 0x12
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <SevSeg_SevErrStateDisplayMax+0x16e>
    209a:	9a 8b       	std	Y+18, r25	; 0x12
    209c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209e:	8b 89       	ldd	r24, Y+19	; 0x13
    20a0:	9c 89       	ldd	r25, Y+20	; 0x14
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	9c 8b       	std	Y+20, r25	; 0x14
    20a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a8:	8b 89       	ldd	r24, Y+19	; 0x13
    20aa:	9c 89       	ldd	r25, Y+20	; 0x14
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	69 f7       	brne	.-38     	; 0x208a <SevSeg_SevErrStateDisplayMax+0x162>
    20b0:	14 c0       	rjmp	.+40     	; 0x20da <SevSeg_SevErrStateDisplayMax+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b2:	6d 89       	ldd	r22, Y+21	; 0x15
    20b4:	7e 89       	ldd	r23, Y+22	; 0x16
    20b6:	8f 89       	ldd	r24, Y+23	; 0x17
    20b8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	9c 8b       	std	Y+20, r25	; 0x14
    20c4:	8b 8b       	std	Y+19, r24	; 0x13
    20c6:	8b 89       	ldd	r24, Y+19	; 0x13
    20c8:	9c 89       	ldd	r25, Y+20	; 0x14
    20ca:	98 8b       	std	Y+16, r25	; 0x10
    20cc:	8f 87       	std	Y+15, r24	; 0x0f
    20ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d0:	98 89       	ldd	r25, Y+16	; 0x10
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	f1 f7       	brne	.-4      	; 0x20d2 <SevSeg_SevErrStateDisplayMax+0x1aa>
    20d6:	98 8b       	std	Y+16, r25	; 0x10
    20d8:	8f 87       	std	Y+15, r24	; 0x0f
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
					return Number_Error;
				}
				else{
					for(u8 i=0;i<10;i++){
    20da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20dc:	8f 5f       	subi	r24, 0xFF	; 255
    20de:	8e 8f       	std	Y+30, r24	; 0x1e
    20e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20e2:	8a 30       	cpi	r24, 0x0A	; 10
    20e4:	08 f4       	brcc	.+2      	; 0x20e8 <SevSeg_SevErrStateDisplayMax+0x1c0>
    20e6:	74 cf       	rjmp	.-280    	; 0x1fd0 <SevSeg_SevErrStateDisplayMax+0xa8>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[i]);
						_delay_ms(150);
					}
					if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE){
    20e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20ea:	81 30       	cpi	r24, 0x01	; 1
    20ec:	19 f0       	breq	.+6      	; 0x20f4 <SevSeg_SevErrStateDisplayMax+0x1cc>
    20ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20f0:	84 30       	cpi	r24, 0x04	; 4
    20f2:	11 f4       	brne	.+4      	; 0x20f8 <SevSeg_SevErrStateDisplayMax+0x1d0>
						return Number_Error;
    20f4:	1b a2       	std	Y+35, r1	; 0x23
    20f6:	d1 c0       	rjmp	.+418    	; 0x229a <SevSeg_SevErrStateDisplayMax+0x372>
					}
					else
						return Seven_OK;
    20f8:	82 e0       	ldi	r24, 0x02	; 2
    20fa:	8b a3       	std	Y+35, r24	; 0x23
    20fc:	ce c0       	rjmp	.+412    	; 0x229a <SevSeg_SevErrStateDisplayMax+0x372>
				}
			}
		}
		else if(SevenSegment1->SevSeg_Type==CC){
    20fe:	e9 a1       	ldd	r30, Y+33	; 0x21
    2100:	fa a1       	ldd	r31, Y+34	; 0x22
    2102:	80 81       	ld	r24, Z
    2104:	81 30       	cpi	r24, 0x01	; 1
    2106:	09 f0       	breq	.+2      	; 0x210a <SevSeg_SevErrStateDisplayMax+0x1e2>
    2108:	c6 c0       	rjmp	.+396    	; 0x2296 <SevSeg_SevErrStateDisplayMax+0x36e>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    210a:	e9 a1       	ldd	r30, Y+33	; 0x21
    210c:	fa a1       	ldd	r31, Y+34	; 0x22
    210e:	82 81       	ldd	r24, Z+2	; 0x02
    2110:	e9 a1       	ldd	r30, Y+33	; 0x21
    2112:	fa a1       	ldd	r31, Y+34	; 0x22
    2114:	93 81       	ldd	r25, Z+3	; 0x03
    2116:	69 2f       	mov	r22, r25
    2118:	41 e0       	ldi	r20, 0x01	; 1
    211a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    211e:	88 a3       	std	Y+32, r24	; 0x20
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    2120:	88 a1       	ldd	r24, Y+32	; 0x20
    2122:	81 30       	cpi	r24, 0x01	; 1
    2124:	31 f0       	breq	.+12     	; 0x2132 <SevSeg_SevErrStateDisplayMax+0x20a>
    2126:	88 a1       	ldd	r24, Y+32	; 0x20
    2128:	83 30       	cpi	r24, 0x03	; 3
    212a:	19 f0       	breq	.+6      	; 0x2132 <SevSeg_SevErrStateDisplayMax+0x20a>
    212c:	88 a1       	ldd	r24, Y+32	; 0x20
    212e:	82 30       	cpi	r24, 0x02	; 2
    2130:	19 f4       	brne	.+6      	; 0x2138 <SevSeg_SevErrStateDisplayMax+0x210>
				return Group_ERROR;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	8b a3       	std	Y+35, r24	; 0x23
    2136:	b1 c0       	rjmp	.+354    	; 0x229a <SevSeg_SevErrStateDisplayMax+0x372>
			}
			else
				{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
    2138:	e9 a1       	ldd	r30, Y+33	; 0x21
    213a:	fa a1       	ldd	r31, Y+34	; 0x22
    213c:	82 81       	ldd	r24, Z+2	; 0x02
    213e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2140:	fa a1       	ldd	r31, Y+34	; 0x22
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	69 2f       	mov	r22, r25
    2146:	40 e0       	ldi	r20, 0x00	; 0
    2148:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    214c:	8f 8f       	std	Y+31, r24	; 0x1f
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    214e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2150:	81 30       	cpi	r24, 0x01	; 1
    2152:	31 f0       	breq	.+12     	; 0x2160 <SevSeg_SevErrStateDisplayMax+0x238>
    2154:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2156:	84 30       	cpi	r24, 0x04	; 4
    2158:	19 f0       	breq	.+6      	; 0x2160 <SevSeg_SevErrStateDisplayMax+0x238>
    215a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    215c:	82 30       	cpi	r24, 0x02	; 2
    215e:	11 f4       	brne	.+4      	; 0x2164 <SevSeg_SevErrStateDisplayMax+0x23c>
					return Number_Error;
    2160:	1b a2       	std	Y+35, r1	; 0x23
    2162:	9b c0       	rjmp	.+310    	; 0x229a <SevSeg_SevErrStateDisplayMax+0x372>
				}
				else{
					for(u8 i=0;i<10;i++){
    2164:	1d 8e       	std	Y+29, r1	; 0x1d
    2166:	88 c0       	rjmp	.+272    	; 0x2278 <SevSeg_SevErrStateDisplayMax+0x350>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[i]);
    2168:	e9 a1       	ldd	r30, Y+33	; 0x21
    216a:	fa a1       	ldd	r31, Y+34	; 0x22
    216c:	81 81       	ldd	r24, Z+1	; 0x01
    216e:	48 2f       	mov	r20, r24
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2174:	88 2f       	mov	r24, r24
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	fc 01       	movw	r30, r24
    217a:	ee 58       	subi	r30, 0x8E	; 142
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	80 81       	ld	r24, Z
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	ca 01       	movw	r24, r20
    2186:	b9 01       	movw	r22, r18
    2188:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    218c:	8f 8f       	std	Y+31, r24	; 0x1f
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	a6 e1       	ldi	r26, 0x16	; 22
    2194:	b3 e4       	ldi	r27, 0x43	; 67
    2196:	8b 87       	std	Y+11, r24	; 0x0b
    2198:	9c 87       	std	Y+12, r25	; 0x0c
    219a:	ad 87       	std	Y+13, r26	; 0x0d
    219c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219e:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	4a ef       	ldi	r20, 0xFA	; 250
    21ac:	54 e4       	ldi	r21, 0x44	; 68
    21ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	8f 83       	std	Y+7, r24	; 0x07
    21b8:	98 87       	std	Y+8, r25	; 0x08
    21ba:	a9 87       	std	Y+9, r26	; 0x09
    21bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21be:	6f 81       	ldd	r22, Y+7	; 0x07
    21c0:	78 85       	ldd	r23, Y+8	; 0x08
    21c2:	89 85       	ldd	r24, Y+9	; 0x09
    21c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e8       	ldi	r20, 0x80	; 128
    21cc:	5f e3       	ldi	r21, 0x3F	; 63
    21ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d2:	88 23       	and	r24, r24
    21d4:	2c f4       	brge	.+10     	; 0x21e0 <SevSeg_SevErrStateDisplayMax+0x2b8>
		__ticks = 1;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	9e 83       	std	Y+6, r25	; 0x06
    21dc:	8d 83       	std	Y+5, r24	; 0x05
    21de:	3f c0       	rjmp	.+126    	; 0x225e <SevSeg_SevErrStateDisplayMax+0x336>
	else if (__tmp > 65535)
    21e0:	6f 81       	ldd	r22, Y+7	; 0x07
    21e2:	78 85       	ldd	r23, Y+8	; 0x08
    21e4:	89 85       	ldd	r24, Y+9	; 0x09
    21e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	3f ef       	ldi	r19, 0xFF	; 255
    21ec:	4f e7       	ldi	r20, 0x7F	; 127
    21ee:	57 e4       	ldi	r21, 0x47	; 71
    21f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f4:	18 16       	cp	r1, r24
    21f6:	4c f5       	brge	.+82     	; 0x224a <SevSeg_SevErrStateDisplayMax+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e2       	ldi	r20, 0x20	; 32
    2206:	51 e4       	ldi	r21, 0x41	; 65
    2208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	bc 01       	movw	r22, r24
    2212:	cd 01       	movw	r24, r26
    2214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	9e 83       	std	Y+6, r25	; 0x06
    221e:	8d 83       	std	Y+5, r24	; 0x05
    2220:	0f c0       	rjmp	.+30     	; 0x2240 <SevSeg_SevErrStateDisplayMax+0x318>
    2222:	88 ec       	ldi	r24, 0xC8	; 200
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9c 83       	std	Y+4, r25	; 0x04
    2228:	8b 83       	std	Y+3, r24	; 0x03
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	f1 f7       	brne	.-4      	; 0x222e <SevSeg_SevErrStateDisplayMax+0x306>
    2232:	9c 83       	std	Y+4, r25	; 0x04
    2234:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2236:	8d 81       	ldd	r24, Y+5	; 0x05
    2238:	9e 81       	ldd	r25, Y+6	; 0x06
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	9e 83       	std	Y+6, r25	; 0x06
    223e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2240:	8d 81       	ldd	r24, Y+5	; 0x05
    2242:	9e 81       	ldd	r25, Y+6	; 0x06
    2244:	00 97       	sbiw	r24, 0x00	; 0
    2246:	69 f7       	brne	.-38     	; 0x2222 <SevSeg_SevErrStateDisplayMax+0x2fa>
    2248:	14 c0       	rjmp	.+40     	; 0x2272 <SevSeg_SevErrStateDisplayMax+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224a:	6f 81       	ldd	r22, Y+7	; 0x07
    224c:	78 85       	ldd	r23, Y+8	; 0x08
    224e:	89 85       	ldd	r24, Y+9	; 0x09
    2250:	9a 85       	ldd	r25, Y+10	; 0x0a
    2252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	9e 83       	std	Y+6, r25	; 0x06
    225c:	8d 83       	std	Y+5, r24	; 0x05
    225e:	8d 81       	ldd	r24, Y+5	; 0x05
    2260:	9e 81       	ldd	r25, Y+6	; 0x06
    2262:	9a 83       	std	Y+2, r25	; 0x02
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	9a 81       	ldd	r25, Y+2	; 0x02
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	f1 f7       	brne	.-4      	; 0x226a <SevSeg_SevErrStateDisplayMax+0x342>
    226e:	9a 83       	std	Y+2, r25	; 0x02
    2270:	89 83       	std	Y+1, r24	; 0x01
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
					return Number_Error;
				}
				else{
					for(u8 i=0;i<10;i++){
    2272:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2274:	8f 5f       	subi	r24, 0xFF	; 255
    2276:	8d 8f       	std	Y+29, r24	; 0x1d
    2278:	8d 8d       	ldd	r24, Y+29	; 0x1d
    227a:	8a 30       	cpi	r24, 0x0A	; 10
    227c:	08 f4       	brcc	.+2      	; 0x2280 <SevSeg_SevErrStateDisplayMax+0x358>
    227e:	74 cf       	rjmp	.-280    	; 0x2168 <SevSeg_SevErrStateDisplayMax+0x240>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[i]);
						_delay_ms(150);
					}
					if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE){
    2280:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2282:	81 30       	cpi	r24, 0x01	; 1
    2284:	19 f0       	breq	.+6      	; 0x228c <SevSeg_SevErrStateDisplayMax+0x364>
    2286:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2288:	84 30       	cpi	r24, 0x04	; 4
    228a:	11 f4       	brne	.+4      	; 0x2290 <SevSeg_SevErrStateDisplayMax+0x368>
						return Number_Error;
    228c:	1b a2       	std	Y+35, r1	; 0x23
    228e:	05 c0       	rjmp	.+10     	; 0x229a <SevSeg_SevErrStateDisplayMax+0x372>
					}
					else
						return Seven_OK;
    2290:	82 e0       	ldi	r24, 0x02	; 2
    2292:	8b a3       	std	Y+35, r24	; 0x23
    2294:	02 c0       	rjmp	.+4      	; 0x229a <SevSeg_SevErrStateDisplayMax+0x372>
				}
			}
		}
	}
	return Seven_OK;
    2296:	82 e0       	ldi	r24, 0x02	; 2
    2298:	8b a3       	std	Y+35, r24	; 0x23
    229a:	8b a1       	ldd	r24, Y+35	; 0x23
}
    229c:	a3 96       	adiw	r28, 0x23	; 35
    229e:	0f b6       	in	r0, 0x3f	; 63
    22a0:	f8 94       	cli
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	cd bf       	out	0x3d, r28	; 61
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <Led_LedErrStateTurnOn>:
 */
#include "../../Common/Definition.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "Led_Interface.h"

LedErrState	Led_LedErrStateTurnOn(Led_info *Led){
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <Led_LedErrStateTurnOn+0x6>
    22b4:	00 d0       	rcall	.+0      	; 0x22b6 <Led_LedErrStateTurnOn+0x8>
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <Led_LedErrStateTurnOn+0xa>
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	9c 83       	std	Y+4, r25	; 0x04
    22be:	8b 83       	std	Y+3, r24	; 0x03
	u8 SetPinErrReturn;
	u8 SetValueErrReturnON;

	SetPinErrReturn=DIO_ErrStateSetPinDirection(Led->Led_Group,Led->Led_Pin,DIO_OUT);
    22c0:	eb 81       	ldd	r30, Y+3	; 0x03
    22c2:	fc 81       	ldd	r31, Y+4	; 0x04
    22c4:	80 81       	ld	r24, Z
    22c6:	eb 81       	ldd	r30, Y+3	; 0x03
    22c8:	fc 81       	ldd	r31, Y+4	; 0x04
    22ca:	91 81       	ldd	r25, Z+1	; 0x01
    22cc:	69 2f       	mov	r22, r25
    22ce:	41 e0       	ldi	r20, 0x01	; 1
    22d0:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    22d4:	8a 83       	std	Y+2, r24	; 0x02
	if(SetPinErrReturn==DIO_ERROR_PORT||SetPinErrReturn==DIO_ERROR_Direction||SetPinErrReturn==DIO_ERROR_PIN){
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	81 30       	cpi	r24, 0x01	; 1
    22da:	31 f0       	breq	.+12     	; 0x22e8 <Led_LedErrStateTurnOn+0x3a>
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	83 30       	cpi	r24, 0x03	; 3
    22e0:	19 f0       	breq	.+6      	; 0x22e8 <Led_LedErrStateTurnOn+0x3a>
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	82 30       	cpi	r24, 0x02	; 2
    22e6:	19 f4       	brne	.+6      	; 0x22ee <Led_LedErrStateTurnOn+0x40>
		return LED_INIT_Error;
    22e8:	85 e0       	ldi	r24, 0x05	; 5
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	3d c0       	rjmp	.+122    	; 0x2368 <Led_LedErrStateTurnOn+0xba>
	}
	else{
		if(Led->ConnectionType==Source_Connection){
    22ee:	eb 81       	ldd	r30, Y+3	; 0x03
    22f0:	fc 81       	ldd	r31, Y+4	; 0x04
    22f2:	82 81       	ldd	r24, Z+2	; 0x02
    22f4:	88 23       	and	r24, r24
    22f6:	c9 f4       	brne	.+50     	; 0x232a <Led_LedErrStateTurnOn+0x7c>
			// HIGH = ON
			SetValueErrReturnON=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_HIGH);
    22f8:	eb 81       	ldd	r30, Y+3	; 0x03
    22fa:	fc 81       	ldd	r31, Y+4	; 0x04
    22fc:	80 81       	ld	r24, Z
    22fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2300:	fc 81       	ldd	r31, Y+4	; 0x04
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	69 2f       	mov	r22, r25
    2306:	41 e0       	ldi	r20, 0x01	; 1
    2308:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    230c:	89 83       	std	Y+1, r24	; 0x01
			if(SetValueErrReturnON==DIO_ERROR_PORT||SetValueErrReturnON==DIO_ERROR_VALUE||SetValueErrReturnON==DIO_ERROR_PIN){
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	81 30       	cpi	r24, 0x01	; 1
    2312:	31 f0       	breq	.+12     	; 0x2320 <Led_LedErrStateTurnOn+0x72>
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	84 30       	cpi	r24, 0x04	; 4
    2318:	19 f0       	breq	.+6      	; 0x2320 <Led_LedErrStateTurnOn+0x72>
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	82 30       	cpi	r24, 0x02	; 2
    231e:	19 f4       	brne	.+6      	; 0x2326 <Led_LedErrStateTurnOn+0x78>
				return LED_ON_Error;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	8d 83       	std	Y+5, r24	; 0x05
    2324:	21 c0       	rjmp	.+66     	; 0x2368 <Led_LedErrStateTurnOn+0xba>
			}
			else
				return LED_ON_OK;
    2326:	1d 82       	std	Y+5, r1	; 0x05
    2328:	1f c0       	rjmp	.+62     	; 0x2368 <Led_LedErrStateTurnOn+0xba>
		}
		else if(Led->ConnectionType==Sink_Connection){
    232a:	eb 81       	ldd	r30, Y+3	; 0x03
    232c:	fc 81       	ldd	r31, Y+4	; 0x04
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	81 30       	cpi	r24, 0x01	; 1
    2332:	c9 f4       	brne	.+50     	; 0x2366 <Led_LedErrStateTurnOn+0xb8>
			// LOW = ON
			SetValueErrReturnON=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_LOW);
    2334:	eb 81       	ldd	r30, Y+3	; 0x03
    2336:	fc 81       	ldd	r31, Y+4	; 0x04
    2338:	80 81       	ld	r24, Z
    233a:	eb 81       	ldd	r30, Y+3	; 0x03
    233c:	fc 81       	ldd	r31, Y+4	; 0x04
    233e:	91 81       	ldd	r25, Z+1	; 0x01
    2340:	69 2f       	mov	r22, r25
    2342:	40 e0       	ldi	r20, 0x00	; 0
    2344:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2348:	89 83       	std	Y+1, r24	; 0x01
			if(SetValueErrReturnON==DIO_ERROR_PORT||SetValueErrReturnON==DIO_ERROR_VALUE||SetValueErrReturnON==DIO_ERROR_PIN){
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	81 30       	cpi	r24, 0x01	; 1
    234e:	31 f0       	breq	.+12     	; 0x235c <Led_LedErrStateTurnOn+0xae>
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	84 30       	cpi	r24, 0x04	; 4
    2354:	19 f0       	breq	.+6      	; 0x235c <Led_LedErrStateTurnOn+0xae>
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	82 30       	cpi	r24, 0x02	; 2
    235a:	19 f4       	brne	.+6      	; 0x2362 <Led_LedErrStateTurnOn+0xb4>
				return LED_ON_Error;
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	8d 83       	std	Y+5, r24	; 0x05
    2360:	03 c0       	rjmp	.+6      	; 0x2368 <Led_LedErrStateTurnOn+0xba>
			}
			else
				return LED_ON_OK;
    2362:	1d 82       	std	Y+5, r1	; 0x05
    2364:	01 c0       	rjmp	.+2      	; 0x2368 <Led_LedErrStateTurnOn+0xba>
    2366:	02 c0       	rjmp	.+4      	; 0x236c <Led_LedErrStateTurnOn+0xbe>
		}

	}
}
    2368:	8d 81       	ldd	r24, Y+5	; 0x05
    236a:	8e 83       	std	Y+6, r24	; 0x06
    236c:	8e 81       	ldd	r24, Y+6	; 0x06
    236e:	26 96       	adiw	r28, 0x06	; 6
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <Led_LedErrStateTurnOff>:


LedErrState	Led_LedErrStateTurnOff(Led_info *Led){
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	00 d0       	rcall	.+0      	; 0x2386 <Led_LedErrStateTurnOff+0x6>
    2386:	00 d0       	rcall	.+0      	; 0x2388 <Led_LedErrStateTurnOff+0x8>
    2388:	0f 92       	push	r0
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	9b 83       	std	Y+3, r25	; 0x03
    2390:	8a 83       	std	Y+2, r24	; 0x02
	u8 SetValueErrReturnOFF;
	if(Led->ConnectionType==Source_Connection){
    2392:	ea 81       	ldd	r30, Y+2	; 0x02
    2394:	fb 81       	ldd	r31, Y+3	; 0x03
    2396:	82 81       	ldd	r24, Z+2	; 0x02
    2398:	88 23       	and	r24, r24
    239a:	d1 f4       	brne	.+52     	; 0x23d0 <Led_LedErrStateTurnOff+0x50>
		// HIGH = ON
		SetValueErrReturnOFF=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_LOW);
    239c:	ea 81       	ldd	r30, Y+2	; 0x02
    239e:	fb 81       	ldd	r31, Y+3	; 0x03
    23a0:	80 81       	ld	r24, Z
    23a2:	ea 81       	ldd	r30, Y+2	; 0x02
    23a4:	fb 81       	ldd	r31, Y+3	; 0x03
    23a6:	91 81       	ldd	r25, Z+1	; 0x01
    23a8:	69 2f       	mov	r22, r25
    23aa:	40 e0       	ldi	r20, 0x00	; 0
    23ac:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    23b0:	89 83       	std	Y+1, r24	; 0x01
		if(SetValueErrReturnOFF==DIO_ERROR_PORT||SetValueErrReturnOFF==DIO_ERROR_VALUE||SetValueErrReturnOFF==DIO_ERROR_PIN){
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	81 30       	cpi	r24, 0x01	; 1
    23b6:	31 f0       	breq	.+12     	; 0x23c4 <Led_LedErrStateTurnOff+0x44>
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	84 30       	cpi	r24, 0x04	; 4
    23bc:	19 f0       	breq	.+6      	; 0x23c4 <Led_LedErrStateTurnOff+0x44>
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	82 30       	cpi	r24, 0x02	; 2
    23c2:	19 f4       	brne	.+6      	; 0x23ca <Led_LedErrStateTurnOff+0x4a>
			return LED_OFF_Error;
    23c4:	83 e0       	ldi	r24, 0x03	; 3
    23c6:	8c 83       	std	Y+4, r24	; 0x04
    23c8:	23 c0       	rjmp	.+70     	; 0x2410 <Led_LedErrStateTurnOff+0x90>
		}
		else
			return LED_OFF_OK;
    23ca:	82 e0       	ldi	r24, 0x02	; 2
    23cc:	8c 83       	std	Y+4, r24	; 0x04
    23ce:	20 c0       	rjmp	.+64     	; 0x2410 <Led_LedErrStateTurnOff+0x90>
	}
else if(Led->ConnectionType==Sink_Connection){
    23d0:	ea 81       	ldd	r30, Y+2	; 0x02
    23d2:	fb 81       	ldd	r31, Y+3	; 0x03
    23d4:	82 81       	ldd	r24, Z+2	; 0x02
    23d6:	81 30       	cpi	r24, 0x01	; 1
    23d8:	d1 f4       	brne	.+52     	; 0x240e <Led_LedErrStateTurnOff+0x8e>
	// LOW = ON
	SetValueErrReturnOFF=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_HIGH);
    23da:	ea 81       	ldd	r30, Y+2	; 0x02
    23dc:	fb 81       	ldd	r31, Y+3	; 0x03
    23de:	80 81       	ld	r24, Z
    23e0:	ea 81       	ldd	r30, Y+2	; 0x02
    23e2:	fb 81       	ldd	r31, Y+3	; 0x03
    23e4:	91 81       	ldd	r25, Z+1	; 0x01
    23e6:	69 2f       	mov	r22, r25
    23e8:	41 e0       	ldi	r20, 0x01	; 1
    23ea:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    23ee:	89 83       	std	Y+1, r24	; 0x01
	if(SetValueErrReturnOFF==DIO_ERROR_PORT||SetValueErrReturnOFF==DIO_ERROR_VALUE||SetValueErrReturnOFF==DIO_ERROR_PIN){
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	81 30       	cpi	r24, 0x01	; 1
    23f4:	31 f0       	breq	.+12     	; 0x2402 <Led_LedErrStateTurnOff+0x82>
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	84 30       	cpi	r24, 0x04	; 4
    23fa:	19 f0       	breq	.+6      	; 0x2402 <Led_LedErrStateTurnOff+0x82>
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	82 30       	cpi	r24, 0x02	; 2
    2400:	19 f4       	brne	.+6      	; 0x2408 <Led_LedErrStateTurnOff+0x88>
		return LED_OFF_Error;
    2402:	83 e0       	ldi	r24, 0x03	; 3
    2404:	8c 83       	std	Y+4, r24	; 0x04
    2406:	04 c0       	rjmp	.+8      	; 0x2410 <Led_LedErrStateTurnOff+0x90>
	}
	else
		return LED_OFF_OK;
    2408:	82 e0       	ldi	r24, 0x02	; 2
    240a:	8c 83       	std	Y+4, r24	; 0x04
    240c:	01 c0       	rjmp	.+2      	; 0x2410 <Led_LedErrStateTurnOff+0x90>
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <Led_LedErrStateTurnOff+0x94>
}

}
    2410:	8c 81       	ldd	r24, Y+4	; 0x04
    2412:	8d 83       	std	Y+5, r24	; 0x05
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	08 95       	ret

00002426 <LCD_VoidSendCommand>:
 */
#include"../../MCAL/DIO/DIO_Interface.h"
#include "LCD_Interface.h"
#include <stdlib.h>

void LCD_VoidSendCommand(u8 Local_Command,LCD_Info *lcd){
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	6f 97       	sbiw	r28, 0x1f	; 31
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	8d 8f       	std	Y+29, r24	; 0x1d
    243c:	7f 8f       	std	Y+31, r23	; 0x1f
    243e:	6e 8f       	std	Y+30, r22	; 0x1e
	/*RS->LOw*/
	DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_LOW);
    2440:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2442:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2444:	80 81       	ld	r24, Z
    2446:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2448:	ff 8d       	ldd	r31, Y+31	; 0x1f
    244a:	91 81       	ldd	r25, Z+1	; 0x01
    244c:	69 2f       	mov	r22, r25
    244e:	40 e0       	ldi	r20, 0x00	; 0
    2450:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
	/*RW-> LOW*/
	DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    2454:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2456:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2458:	82 81       	ldd	r24, Z+2	; 0x02
    245a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    245c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    245e:	93 81       	ldd	r25, Z+3	; 0x03
    2460:	69 2f       	mov	r22, r25
    2462:	40 e0       	ldi	r20, 0x00	; 0
    2464:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
	/*Group = Command*/
	DIO_ErrStateSetPortValue(lcd->Data_group,Local_Command);
    2468:	ee 8d       	ldd	r30, Y+30	; 0x1e
    246a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    246c:	86 81       	ldd	r24, Z+6	; 0x06
    246e:	48 2f       	mov	r20, r24
    2470:	50 e0       	ldi	r21, 0x00	; 0
    2472:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2474:	28 2f       	mov	r18, r24
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	ca 01       	movw	r24, r20
    247a:	b9 01       	movw	r22, r18
    247c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
	/*Enable*/
	DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    2480:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2482:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2484:	84 81       	ldd	r24, Z+4	; 0x04
    2486:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2488:	ff 8d       	ldd	r31, Y+31	; 0x1f
    248a:	95 81       	ldd	r25, Z+5	; 0x05
    248c:	69 2f       	mov	r22, r25
    248e:	41 e0       	ldi	r20, 0x01	; 1
    2490:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	a0 e8       	ldi	r26, 0x80	; 128
    249a:	bf e3       	ldi	r27, 0x3F	; 63
    249c:	89 8f       	std	Y+25, r24	; 0x19
    249e:	9a 8f       	std	Y+26, r25	; 0x1a
    24a0:	ab 8f       	std	Y+27, r26	; 0x1b
    24a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a4:	69 8d       	ldd	r22, Y+25	; 0x19
    24a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	4a ef       	ldi	r20, 0xFA	; 250
    24b2:	54 e4       	ldi	r21, 0x44	; 68
    24b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	8d 8b       	std	Y+21, r24	; 0x15
    24be:	9e 8b       	std	Y+22, r25	; 0x16
    24c0:	af 8b       	std	Y+23, r26	; 0x17
    24c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24c4:	6d 89       	ldd	r22, Y+21	; 0x15
    24c6:	7e 89       	ldd	r23, Y+22	; 0x16
    24c8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ca:	98 8d       	ldd	r25, Y+24	; 0x18
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e8       	ldi	r20, 0x80	; 128
    24d2:	5f e3       	ldi	r21, 0x3F	; 63
    24d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d8:	88 23       	and	r24, r24
    24da:	2c f4       	brge	.+10     	; 0x24e6 <LCD_VoidSendCommand+0xc0>
		__ticks = 1;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9c 8b       	std	Y+20, r25	; 0x14
    24e2:	8b 8b       	std	Y+19, r24	; 0x13
    24e4:	3f c0       	rjmp	.+126    	; 0x2564 <LCD_VoidSendCommand+0x13e>
	else if (__tmp > 65535)
    24e6:	6d 89       	ldd	r22, Y+21	; 0x15
    24e8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ea:	8f 89       	ldd	r24, Y+23	; 0x17
    24ec:	98 8d       	ldd	r25, Y+24	; 0x18
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	3f ef       	ldi	r19, 0xFF	; 255
    24f2:	4f e7       	ldi	r20, 0x7F	; 127
    24f4:	57 e4       	ldi	r21, 0x47	; 71
    24f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24fa:	18 16       	cp	r1, r24
    24fc:	4c f5       	brge	.+82     	; 0x2550 <LCD_VoidSendCommand+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2500:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2502:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2504:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e2       	ldi	r20, 0x20	; 32
    250c:	51 e4       	ldi	r21, 0x41	; 65
    250e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	bc 01       	movw	r22, r24
    2518:	cd 01       	movw	r24, r26
    251a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	9c 8b       	std	Y+20, r25	; 0x14
    2524:	8b 8b       	std	Y+19, r24	; 0x13
    2526:	0f c0       	rjmp	.+30     	; 0x2546 <LCD_VoidSendCommand+0x120>
    2528:	88 ec       	ldi	r24, 0xC8	; 200
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	9a 8b       	std	Y+18, r25	; 0x12
    252e:	89 8b       	std	Y+17, r24	; 0x11
    2530:	89 89       	ldd	r24, Y+17	; 0x11
    2532:	9a 89       	ldd	r25, Y+18	; 0x12
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <LCD_VoidSendCommand+0x10e>
    2538:	9a 8b       	std	Y+18, r25	; 0x12
    253a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253c:	8b 89       	ldd	r24, Y+19	; 0x13
    253e:	9c 89       	ldd	r25, Y+20	; 0x14
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	9c 8b       	std	Y+20, r25	; 0x14
    2544:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2546:	8b 89       	ldd	r24, Y+19	; 0x13
    2548:	9c 89       	ldd	r25, Y+20	; 0x14
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	69 f7       	brne	.-38     	; 0x2528 <LCD_VoidSendCommand+0x102>
    254e:	14 c0       	rjmp	.+40     	; 0x2578 <LCD_VoidSendCommand+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2550:	6d 89       	ldd	r22, Y+21	; 0x15
    2552:	7e 89       	ldd	r23, Y+22	; 0x16
    2554:	8f 89       	ldd	r24, Y+23	; 0x17
    2556:	98 8d       	ldd	r25, Y+24	; 0x18
    2558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	9c 8b       	std	Y+20, r25	; 0x14
    2562:	8b 8b       	std	Y+19, r24	; 0x13
    2564:	8b 89       	ldd	r24, Y+19	; 0x13
    2566:	9c 89       	ldd	r25, Y+20	; 0x14
    2568:	98 8b       	std	Y+16, r25	; 0x10
    256a:	8f 87       	std	Y+15, r24	; 0x0f
    256c:	8f 85       	ldd	r24, Y+15	; 0x0f
    256e:	98 89       	ldd	r25, Y+16	; 0x10
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <LCD_VoidSendCommand+0x14a>
    2574:	98 8b       	std	Y+16, r25	; 0x10
    2576:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    2578:	ee 8d       	ldd	r30, Y+30	; 0x1e
    257a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    257c:	84 81       	ldd	r24, Z+4	; 0x04
    257e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2580:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2582:	95 81       	ldd	r25, Z+5	; 0x05
    2584:	69 2f       	mov	r22, r25
    2586:	40 e0       	ldi	r20, 0x00	; 0
    2588:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	a0 e8       	ldi	r26, 0x80	; 128
    2592:	bf e3       	ldi	r27, 0x3F	; 63
    2594:	8b 87       	std	Y+11, r24	; 0x0b
    2596:	9c 87       	std	Y+12, r25	; 0x0c
    2598:	ad 87       	std	Y+13, r26	; 0x0d
    259a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259c:	6b 85       	ldd	r22, Y+11	; 0x0b
    259e:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	4a ef       	ldi	r20, 0xFA	; 250
    25aa:	54 e4       	ldi	r21, 0x44	; 68
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	8f 83       	std	Y+7, r24	; 0x07
    25b6:	98 87       	std	Y+8, r25	; 0x08
    25b8:	a9 87       	std	Y+9, r26	; 0x09
    25ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25bc:	6f 81       	ldd	r22, Y+7	; 0x07
    25be:	78 85       	ldd	r23, Y+8	; 0x08
    25c0:	89 85       	ldd	r24, Y+9	; 0x09
    25c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e8       	ldi	r20, 0x80	; 128
    25ca:	5f e3       	ldi	r21, 0x3F	; 63
    25cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d0:	88 23       	and	r24, r24
    25d2:	2c f4       	brge	.+10     	; 0x25de <LCD_VoidSendCommand+0x1b8>
		__ticks = 1;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	9e 83       	std	Y+6, r25	; 0x06
    25da:	8d 83       	std	Y+5, r24	; 0x05
    25dc:	3f c0       	rjmp	.+126    	; 0x265c <LCD_VoidSendCommand+0x236>
	else if (__tmp > 65535)
    25de:	6f 81       	ldd	r22, Y+7	; 0x07
    25e0:	78 85       	ldd	r23, Y+8	; 0x08
    25e2:	89 85       	ldd	r24, Y+9	; 0x09
    25e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	3f ef       	ldi	r19, 0xFF	; 255
    25ea:	4f e7       	ldi	r20, 0x7F	; 127
    25ec:	57 e4       	ldi	r21, 0x47	; 71
    25ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f2:	18 16       	cp	r1, r24
    25f4:	4c f5       	brge	.+82     	; 0x2648 <LCD_VoidSendCommand+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e2       	ldi	r20, 0x20	; 32
    2604:	51 e4       	ldi	r21, 0x41	; 65
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	bc 01       	movw	r22, r24
    2610:	cd 01       	movw	r24, r26
    2612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	9e 83       	std	Y+6, r25	; 0x06
    261c:	8d 83       	std	Y+5, r24	; 0x05
    261e:	0f c0       	rjmp	.+30     	; 0x263e <LCD_VoidSendCommand+0x218>
    2620:	88 ec       	ldi	r24, 0xC8	; 200
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9c 83       	std	Y+4, r25	; 0x04
    2626:	8b 83       	std	Y+3, r24	; 0x03
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	9c 81       	ldd	r25, Y+4	; 0x04
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <LCD_VoidSendCommand+0x206>
    2630:	9c 83       	std	Y+4, r25	; 0x04
    2632:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2634:	8d 81       	ldd	r24, Y+5	; 0x05
    2636:	9e 81       	ldd	r25, Y+6	; 0x06
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	9e 83       	std	Y+6, r25	; 0x06
    263c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263e:	8d 81       	ldd	r24, Y+5	; 0x05
    2640:	9e 81       	ldd	r25, Y+6	; 0x06
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	69 f7       	brne	.-38     	; 0x2620 <LCD_VoidSendCommand+0x1fa>
    2646:	14 c0       	rjmp	.+40     	; 0x2670 <LCD_VoidSendCommand+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2648:	6f 81       	ldd	r22, Y+7	; 0x07
    264a:	78 85       	ldd	r23, Y+8	; 0x08
    264c:	89 85       	ldd	r24, Y+9	; 0x09
    264e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	9e 83       	std	Y+6, r25	; 0x06
    265a:	8d 83       	std	Y+5, r24	; 0x05
    265c:	8d 81       	ldd	r24, Y+5	; 0x05
    265e:	9e 81       	ldd	r25, Y+6	; 0x06
    2660:	9a 83       	std	Y+2, r25	; 0x02
    2662:	89 83       	std	Y+1, r24	; 0x01
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	9a 81       	ldd	r25, Y+2	; 0x02
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <LCD_VoidSendCommand+0x242>
    266c:	9a 83       	std	Y+2, r25	; 0x02
    266e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2670:	6f 96       	adiw	r28, 0x1f	; 31
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <LCD_VoidSendChar>:

void LCD_VoidSendChar(u8 Local_Char,LCD_Info *lcd)
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	eb 97       	sbiw	r28, 0x3b	; 59
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
    2696:	89 af       	std	Y+57, r24	; 0x39
    2698:	7b af       	std	Y+59, r23	; 0x3b
    269a:	6a af       	std	Y+58, r22	; 0x3a
	static u8 SwitchingCounter;
	static u8 FirstLineCounter,SecondLineCounter;
	if(SwitchingCounter<16){
    269c:	80 91 b0 00 	lds	r24, 0x00B0
    26a0:	80 31       	cpi	r24, 0x10	; 16
    26a2:	08 f0       	brcs	.+2      	; 0x26a6 <LCD_VoidSendChar+0x24>
    26a4:	1e c1       	rjmp	.+572    	; 0x28e2 <LCD_VoidSendChar+0x260>
		//LCD_VoidGoToXY(FirstLineCounter,0,lcd);
		/*RS->LOw*/
		DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    26a6:	ea ad       	ldd	r30, Y+58	; 0x3a
    26a8:	fb ad       	ldd	r31, Y+59	; 0x3b
    26aa:	80 81       	ld	r24, Z
    26ac:	ea ad       	ldd	r30, Y+58	; 0x3a
    26ae:	fb ad       	ldd	r31, Y+59	; 0x3b
    26b0:	91 81       	ldd	r25, Z+1	; 0x01
    26b2:	69 2f       	mov	r22, r25
    26b4:	41 e0       	ldi	r20, 0x01	; 1
    26b6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		/*RW-> LOW*/
		DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    26ba:	ea ad       	ldd	r30, Y+58	; 0x3a
    26bc:	fb ad       	ldd	r31, Y+59	; 0x3b
    26be:	82 81       	ldd	r24, Z+2	; 0x02
    26c0:	ea ad       	ldd	r30, Y+58	; 0x3a
    26c2:	fb ad       	ldd	r31, Y+59	; 0x3b
    26c4:	93 81       	ldd	r25, Z+3	; 0x03
    26c6:	69 2f       	mov	r22, r25
    26c8:	40 e0       	ldi	r20, 0x00	; 0
    26ca:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		/*Group = Command*/
		DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    26ce:	ea ad       	ldd	r30, Y+58	; 0x3a
    26d0:	fb ad       	ldd	r31, Y+59	; 0x3b
    26d2:	86 81       	ldd	r24, Z+6	; 0x06
    26d4:	48 2f       	mov	r20, r24
    26d6:	50 e0       	ldi	r21, 0x00	; 0
    26d8:	89 ad       	ldd	r24, Y+57	; 0x39
    26da:	28 2f       	mov	r18, r24
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	ca 01       	movw	r24, r20
    26e0:	b9 01       	movw	r22, r18
    26e2:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
		/*Enable*/
		DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    26e6:	ea ad       	ldd	r30, Y+58	; 0x3a
    26e8:	fb ad       	ldd	r31, Y+59	; 0x3b
    26ea:	84 81       	ldd	r24, Z+4	; 0x04
    26ec:	ea ad       	ldd	r30, Y+58	; 0x3a
    26ee:	fb ad       	ldd	r31, Y+59	; 0x3b
    26f0:	95 81       	ldd	r25, Z+5	; 0x05
    26f2:	69 2f       	mov	r22, r25
    26f4:	41 e0       	ldi	r20, 0x01	; 1
    26f6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	a0 e8       	ldi	r26, 0x80	; 128
    2700:	bf e3       	ldi	r27, 0x3F	; 63
    2702:	8d ab       	std	Y+53, r24	; 0x35
    2704:	9e ab       	std	Y+54, r25	; 0x36
    2706:	af ab       	std	Y+55, r26	; 0x37
    2708:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    270a:	6d a9       	ldd	r22, Y+53	; 0x35
    270c:	7e a9       	ldd	r23, Y+54	; 0x36
    270e:	8f a9       	ldd	r24, Y+55	; 0x37
    2710:	98 ad       	ldd	r25, Y+56	; 0x38
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	4a ef       	ldi	r20, 0xFA	; 250
    2718:	54 e4       	ldi	r21, 0x44	; 68
    271a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	89 ab       	std	Y+49, r24	; 0x31
    2724:	9a ab       	std	Y+50, r25	; 0x32
    2726:	ab ab       	std	Y+51, r26	; 0x33
    2728:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    272a:	69 a9       	ldd	r22, Y+49	; 0x31
    272c:	7a a9       	ldd	r23, Y+50	; 0x32
    272e:	8b a9       	ldd	r24, Y+51	; 0x33
    2730:	9c a9       	ldd	r25, Y+52	; 0x34
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e8       	ldi	r20, 0x80	; 128
    2738:	5f e3       	ldi	r21, 0x3F	; 63
    273a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    273e:	88 23       	and	r24, r24
    2740:	2c f4       	brge	.+10     	; 0x274c <LCD_VoidSendChar+0xca>
		__ticks = 1;
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	98 ab       	std	Y+48, r25	; 0x30
    2748:	8f a7       	std	Y+47, r24	; 0x2f
    274a:	3f c0       	rjmp	.+126    	; 0x27ca <LCD_VoidSendChar+0x148>
	else if (__tmp > 65535)
    274c:	69 a9       	ldd	r22, Y+49	; 0x31
    274e:	7a a9       	ldd	r23, Y+50	; 0x32
    2750:	8b a9       	ldd	r24, Y+51	; 0x33
    2752:	9c a9       	ldd	r25, Y+52	; 0x34
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	3f ef       	ldi	r19, 0xFF	; 255
    2758:	4f e7       	ldi	r20, 0x7F	; 127
    275a:	57 e4       	ldi	r21, 0x47	; 71
    275c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2760:	18 16       	cp	r1, r24
    2762:	4c f5       	brge	.+82     	; 0x27b6 <LCD_VoidSendChar+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2764:	6d a9       	ldd	r22, Y+53	; 0x35
    2766:	7e a9       	ldd	r23, Y+54	; 0x36
    2768:	8f a9       	ldd	r24, Y+55	; 0x37
    276a:	98 ad       	ldd	r25, Y+56	; 0x38
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e2       	ldi	r20, 0x20	; 32
    2772:	51 e4       	ldi	r21, 0x41	; 65
    2774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	bc 01       	movw	r22, r24
    277e:	cd 01       	movw	r24, r26
    2780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	98 ab       	std	Y+48, r25	; 0x30
    278a:	8f a7       	std	Y+47, r24	; 0x2f
    278c:	0f c0       	rjmp	.+30     	; 0x27ac <LCD_VoidSendChar+0x12a>
    278e:	88 ec       	ldi	r24, 0xC8	; 200
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	9e a7       	std	Y+46, r25	; 0x2e
    2794:	8d a7       	std	Y+45, r24	; 0x2d
    2796:	8d a5       	ldd	r24, Y+45	; 0x2d
    2798:	9e a5       	ldd	r25, Y+46	; 0x2e
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	f1 f7       	brne	.-4      	; 0x279a <LCD_VoidSendChar+0x118>
    279e:	9e a7       	std	Y+46, r25	; 0x2e
    27a0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    27a4:	98 a9       	ldd	r25, Y+48	; 0x30
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	98 ab       	std	Y+48, r25	; 0x30
    27aa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ae:	98 a9       	ldd	r25, Y+48	; 0x30
    27b0:	00 97       	sbiw	r24, 0x00	; 0
    27b2:	69 f7       	brne	.-38     	; 0x278e <LCD_VoidSendChar+0x10c>
    27b4:	14 c0       	rjmp	.+40     	; 0x27de <LCD_VoidSendChar+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b6:	69 a9       	ldd	r22, Y+49	; 0x31
    27b8:	7a a9       	ldd	r23, Y+50	; 0x32
    27ba:	8b a9       	ldd	r24, Y+51	; 0x33
    27bc:	9c a9       	ldd	r25, Y+52	; 0x34
    27be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	98 ab       	std	Y+48, r25	; 0x30
    27c8:	8f a7       	std	Y+47, r24	; 0x2f
    27ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    27cc:	98 a9       	ldd	r25, Y+48	; 0x30
    27ce:	9c a7       	std	Y+44, r25	; 0x2c
    27d0:	8b a7       	std	Y+43, r24	; 0x2b
    27d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    27d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <LCD_VoidSendChar+0x154>
    27da:	9c a7       	std	Y+44, r25	; 0x2c
    27dc:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    27de:	ea ad       	ldd	r30, Y+58	; 0x3a
    27e0:	fb ad       	ldd	r31, Y+59	; 0x3b
    27e2:	84 81       	ldd	r24, Z+4	; 0x04
    27e4:	ea ad       	ldd	r30, Y+58	; 0x3a
    27e6:	fb ad       	ldd	r31, Y+59	; 0x3b
    27e8:	95 81       	ldd	r25, Z+5	; 0x05
    27ea:	69 2f       	mov	r22, r25
    27ec:	40 e0       	ldi	r20, 0x00	; 0
    27ee:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	a0 e8       	ldi	r26, 0x80	; 128
    27f8:	bf e3       	ldi	r27, 0x3F	; 63
    27fa:	8f a3       	std	Y+39, r24	; 0x27
    27fc:	98 a7       	std	Y+40, r25	; 0x28
    27fe:	a9 a7       	std	Y+41, r26	; 0x29
    2800:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2802:	6f a1       	ldd	r22, Y+39	; 0x27
    2804:	78 a5       	ldd	r23, Y+40	; 0x28
    2806:	89 a5       	ldd	r24, Y+41	; 0x29
    2808:	9a a5       	ldd	r25, Y+42	; 0x2a
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	4a ef       	ldi	r20, 0xFA	; 250
    2810:	54 e4       	ldi	r21, 0x44	; 68
    2812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	8b a3       	std	Y+35, r24	; 0x23
    281c:	9c a3       	std	Y+36, r25	; 0x24
    281e:	ad a3       	std	Y+37, r26	; 0x25
    2820:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2822:	6b a1       	ldd	r22, Y+35	; 0x23
    2824:	7c a1       	ldd	r23, Y+36	; 0x24
    2826:	8d a1       	ldd	r24, Y+37	; 0x25
    2828:	9e a1       	ldd	r25, Y+38	; 0x26
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e8       	ldi	r20, 0x80	; 128
    2830:	5f e3       	ldi	r21, 0x3F	; 63
    2832:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2836:	88 23       	and	r24, r24
    2838:	2c f4       	brge	.+10     	; 0x2844 <LCD_VoidSendChar+0x1c2>
		__ticks = 1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	9a a3       	std	Y+34, r25	; 0x22
    2840:	89 a3       	std	Y+33, r24	; 0x21
    2842:	3f c0       	rjmp	.+126    	; 0x28c2 <LCD_VoidSendChar+0x240>
	else if (__tmp > 65535)
    2844:	6b a1       	ldd	r22, Y+35	; 0x23
    2846:	7c a1       	ldd	r23, Y+36	; 0x24
    2848:	8d a1       	ldd	r24, Y+37	; 0x25
    284a:	9e a1       	ldd	r25, Y+38	; 0x26
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	3f ef       	ldi	r19, 0xFF	; 255
    2850:	4f e7       	ldi	r20, 0x7F	; 127
    2852:	57 e4       	ldi	r21, 0x47	; 71
    2854:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2858:	18 16       	cp	r1, r24
    285a:	4c f5       	brge	.+82     	; 0x28ae <LCD_VoidSendChar+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285c:	6f a1       	ldd	r22, Y+39	; 0x27
    285e:	78 a5       	ldd	r23, Y+40	; 0x28
    2860:	89 a5       	ldd	r24, Y+41	; 0x29
    2862:	9a a5       	ldd	r25, Y+42	; 0x2a
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e2       	ldi	r20, 0x20	; 32
    286a:	51 e4       	ldi	r21, 0x41	; 65
    286c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	bc 01       	movw	r22, r24
    2876:	cd 01       	movw	r24, r26
    2878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	9a a3       	std	Y+34, r25	; 0x22
    2882:	89 a3       	std	Y+33, r24	; 0x21
    2884:	0f c0       	rjmp	.+30     	; 0x28a4 <LCD_VoidSendChar+0x222>
    2886:	88 ec       	ldi	r24, 0xC8	; 200
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	98 a3       	std	Y+32, r25	; 0x20
    288c:	8f 8f       	std	Y+31, r24	; 0x1f
    288e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2890:	98 a1       	ldd	r25, Y+32	; 0x20
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <LCD_VoidSendChar+0x210>
    2896:	98 a3       	std	Y+32, r25	; 0x20
    2898:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289a:	89 a1       	ldd	r24, Y+33	; 0x21
    289c:	9a a1       	ldd	r25, Y+34	; 0x22
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	9a a3       	std	Y+34, r25	; 0x22
    28a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a4:	89 a1       	ldd	r24, Y+33	; 0x21
    28a6:	9a a1       	ldd	r25, Y+34	; 0x22
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	69 f7       	brne	.-38     	; 0x2886 <LCD_VoidSendChar+0x204>
    28ac:	14 c0       	rjmp	.+40     	; 0x28d6 <LCD_VoidSendChar+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ae:	6b a1       	ldd	r22, Y+35	; 0x23
    28b0:	7c a1       	ldd	r23, Y+36	; 0x24
    28b2:	8d a1       	ldd	r24, Y+37	; 0x25
    28b4:	9e a1       	ldd	r25, Y+38	; 0x26
    28b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	9a a3       	std	Y+34, r25	; 0x22
    28c0:	89 a3       	std	Y+33, r24	; 0x21
    28c2:	89 a1       	ldd	r24, Y+33	; 0x21
    28c4:	9a a1       	ldd	r25, Y+34	; 0x22
    28c6:	9e 8f       	std	Y+30, r25	; 0x1e
    28c8:	8d 8f       	std	Y+29, r24	; 0x1d
    28ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	f1 f7       	brne	.-4      	; 0x28ce <LCD_VoidSendChar+0x24c>
    28d2:	9e 8f       	std	Y+30, r25	; 0x1e
    28d4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		SwitchingCounter++;
    28d6:	80 91 b0 00 	lds	r24, 0x00B0
    28da:	8f 5f       	subi	r24, 0xFF	; 255
    28dc:	80 93 b0 00 	sts	0x00B0, r24
    28e0:	34 c1       	rjmp	.+616    	; 0x2b4a <LCD_VoidSendChar+0x4c8>
		//FirstLineCounter++;
	}
	else if(SwitchingCounter>15&&SwitchingCounter<32){
    28e2:	80 91 b0 00 	lds	r24, 0x00B0
    28e6:	80 31       	cpi	r24, 0x10	; 16
    28e8:	08 f4       	brcc	.+2      	; 0x28ec <LCD_VoidSendChar+0x26a>
    28ea:	2f c1       	rjmp	.+606    	; 0x2b4a <LCD_VoidSendChar+0x4c8>
    28ec:	80 91 b0 00 	lds	r24, 0x00B0
    28f0:	80 32       	cpi	r24, 0x20	; 32
    28f2:	08 f0       	brcs	.+2      	; 0x28f6 <LCD_VoidSendChar+0x274>
    28f4:	2a c1       	rjmp	.+596    	; 0x2b4a <LCD_VoidSendChar+0x4c8>
		LCD_VoidGoToXY(SecondLineCounter,1,lcd);
    28f6:	80 91 ae 00 	lds	r24, 0x00AE
    28fa:	2a ad       	ldd	r18, Y+58	; 0x3a
    28fc:	3b ad       	ldd	r19, Y+59	; 0x3b
    28fe:	61 e0       	ldi	r22, 0x01	; 1
    2900:	a9 01       	movw	r20, r18
    2902:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_VoidGoToXY>
		/*RS->LOw*/
		DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    2906:	ea ad       	ldd	r30, Y+58	; 0x3a
    2908:	fb ad       	ldd	r31, Y+59	; 0x3b
    290a:	80 81       	ld	r24, Z
    290c:	ea ad       	ldd	r30, Y+58	; 0x3a
    290e:	fb ad       	ldd	r31, Y+59	; 0x3b
    2910:	91 81       	ldd	r25, Z+1	; 0x01
    2912:	69 2f       	mov	r22, r25
    2914:	41 e0       	ldi	r20, 0x01	; 1
    2916:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		/*RW-> LOW*/
		DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    291a:	ea ad       	ldd	r30, Y+58	; 0x3a
    291c:	fb ad       	ldd	r31, Y+59	; 0x3b
    291e:	82 81       	ldd	r24, Z+2	; 0x02
    2920:	ea ad       	ldd	r30, Y+58	; 0x3a
    2922:	fb ad       	ldd	r31, Y+59	; 0x3b
    2924:	93 81       	ldd	r25, Z+3	; 0x03
    2926:	69 2f       	mov	r22, r25
    2928:	40 e0       	ldi	r20, 0x00	; 0
    292a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		/*Group = Command*/
		DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    292e:	ea ad       	ldd	r30, Y+58	; 0x3a
    2930:	fb ad       	ldd	r31, Y+59	; 0x3b
    2932:	86 81       	ldd	r24, Z+6	; 0x06
    2934:	48 2f       	mov	r20, r24
    2936:	50 e0       	ldi	r21, 0x00	; 0
    2938:	89 ad       	ldd	r24, Y+57	; 0x39
    293a:	28 2f       	mov	r18, r24
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	ca 01       	movw	r24, r20
    2940:	b9 01       	movw	r22, r18
    2942:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
		/*Enable*/
		DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    2946:	ea ad       	ldd	r30, Y+58	; 0x3a
    2948:	fb ad       	ldd	r31, Y+59	; 0x3b
    294a:	84 81       	ldd	r24, Z+4	; 0x04
    294c:	ea ad       	ldd	r30, Y+58	; 0x3a
    294e:	fb ad       	ldd	r31, Y+59	; 0x3b
    2950:	95 81       	ldd	r25, Z+5	; 0x05
    2952:	69 2f       	mov	r22, r25
    2954:	41 e0       	ldi	r20, 0x01	; 1
    2956:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	a0 e8       	ldi	r26, 0x80	; 128
    2960:	bf e3       	ldi	r27, 0x3F	; 63
    2962:	89 8f       	std	Y+25, r24	; 0x19
    2964:	9a 8f       	std	Y+26, r25	; 0x1a
    2966:	ab 8f       	std	Y+27, r26	; 0x1b
    2968:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296a:	69 8d       	ldd	r22, Y+25	; 0x19
    296c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    296e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2970:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	4a ef       	ldi	r20, 0xFA	; 250
    2978:	54 e4       	ldi	r21, 0x44	; 68
    297a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	8d 8b       	std	Y+21, r24	; 0x15
    2984:	9e 8b       	std	Y+22, r25	; 0x16
    2986:	af 8b       	std	Y+23, r26	; 0x17
    2988:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    298a:	6d 89       	ldd	r22, Y+21	; 0x15
    298c:	7e 89       	ldd	r23, Y+22	; 0x16
    298e:	8f 89       	ldd	r24, Y+23	; 0x17
    2990:	98 8d       	ldd	r25, Y+24	; 0x18
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e8       	ldi	r20, 0x80	; 128
    2998:	5f e3       	ldi	r21, 0x3F	; 63
    299a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    299e:	88 23       	and	r24, r24
    29a0:	2c f4       	brge	.+10     	; 0x29ac <LCD_VoidSendChar+0x32a>
		__ticks = 1;
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	9c 8b       	std	Y+20, r25	; 0x14
    29a8:	8b 8b       	std	Y+19, r24	; 0x13
    29aa:	3f c0       	rjmp	.+126    	; 0x2a2a <LCD_VoidSendChar+0x3a8>
	else if (__tmp > 65535)
    29ac:	6d 89       	ldd	r22, Y+21	; 0x15
    29ae:	7e 89       	ldd	r23, Y+22	; 0x16
    29b0:	8f 89       	ldd	r24, Y+23	; 0x17
    29b2:	98 8d       	ldd	r25, Y+24	; 0x18
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	3f ef       	ldi	r19, 0xFF	; 255
    29b8:	4f e7       	ldi	r20, 0x7F	; 127
    29ba:	57 e4       	ldi	r21, 0x47	; 71
    29bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29c0:	18 16       	cp	r1, r24
    29c2:	4c f5       	brge	.+82     	; 0x2a16 <LCD_VoidSendChar+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c4:	69 8d       	ldd	r22, Y+25	; 0x19
    29c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e2       	ldi	r20, 0x20	; 32
    29d2:	51 e4       	ldi	r21, 0x41	; 65
    29d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	bc 01       	movw	r22, r24
    29de:	cd 01       	movw	r24, r26
    29e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	9c 8b       	std	Y+20, r25	; 0x14
    29ea:	8b 8b       	std	Y+19, r24	; 0x13
    29ec:	0f c0       	rjmp	.+30     	; 0x2a0c <LCD_VoidSendChar+0x38a>
    29ee:	88 ec       	ldi	r24, 0xC8	; 200
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	9a 8b       	std	Y+18, r25	; 0x12
    29f4:	89 8b       	std	Y+17, r24	; 0x11
    29f6:	89 89       	ldd	r24, Y+17	; 0x11
    29f8:	9a 89       	ldd	r25, Y+18	; 0x12
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	f1 f7       	brne	.-4      	; 0x29fa <LCD_VoidSendChar+0x378>
    29fe:	9a 8b       	std	Y+18, r25	; 0x12
    2a00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a02:	8b 89       	ldd	r24, Y+19	; 0x13
    2a04:	9c 89       	ldd	r25, Y+20	; 0x14
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	9c 8b       	std	Y+20, r25	; 0x14
    2a0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a10:	00 97       	sbiw	r24, 0x00	; 0
    2a12:	69 f7       	brne	.-38     	; 0x29ee <LCD_VoidSendChar+0x36c>
    2a14:	14 c0       	rjmp	.+40     	; 0x2a3e <LCD_VoidSendChar+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a16:	6d 89       	ldd	r22, Y+21	; 0x15
    2a18:	7e 89       	ldd	r23, Y+22	; 0x16
    2a1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	9c 8b       	std	Y+20, r25	; 0x14
    2a28:	8b 8b       	std	Y+19, r24	; 0x13
    2a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a2e:	98 8b       	std	Y+16, r25	; 0x10
    2a30:	8f 87       	std	Y+15, r24	; 0x0f
    2a32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a34:	98 89       	ldd	r25, Y+16	; 0x10
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <LCD_VoidSendChar+0x3b4>
    2a3a:	98 8b       	std	Y+16, r25	; 0x10
    2a3c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    2a3e:	ea ad       	ldd	r30, Y+58	; 0x3a
    2a40:	fb ad       	ldd	r31, Y+59	; 0x3b
    2a42:	84 81       	ldd	r24, Z+4	; 0x04
    2a44:	ea ad       	ldd	r30, Y+58	; 0x3a
    2a46:	fb ad       	ldd	r31, Y+59	; 0x3b
    2a48:	95 81       	ldd	r25, Z+5	; 0x05
    2a4a:	69 2f       	mov	r22, r25
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	a0 e8       	ldi	r26, 0x80	; 128
    2a58:	bf e3       	ldi	r27, 0x3F	; 63
    2a5a:	8b 87       	std	Y+11, r24	; 0x0b
    2a5c:	9c 87       	std	Y+12, r25	; 0x0c
    2a5e:	ad 87       	std	Y+13, r26	; 0x0d
    2a60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	4a ef       	ldi	r20, 0xFA	; 250
    2a70:	54 e4       	ldi	r21, 0x44	; 68
    2a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	8f 83       	std	Y+7, r24	; 0x07
    2a7c:	98 87       	std	Y+8, r25	; 0x08
    2a7e:	a9 87       	std	Y+9, r26	; 0x09
    2a80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a82:	6f 81       	ldd	r22, Y+7	; 0x07
    2a84:	78 85       	ldd	r23, Y+8	; 0x08
    2a86:	89 85       	ldd	r24, Y+9	; 0x09
    2a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e8       	ldi	r20, 0x80	; 128
    2a90:	5f e3       	ldi	r21, 0x3F	; 63
    2a92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a96:	88 23       	and	r24, r24
    2a98:	2c f4       	brge	.+10     	; 0x2aa4 <LCD_VoidSendChar+0x422>
		__ticks = 1;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	9e 83       	std	Y+6, r25	; 0x06
    2aa0:	8d 83       	std	Y+5, r24	; 0x05
    2aa2:	3f c0       	rjmp	.+126    	; 0x2b22 <LCD_VoidSendChar+0x4a0>
	else if (__tmp > 65535)
    2aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa6:	78 85       	ldd	r23, Y+8	; 0x08
    2aa8:	89 85       	ldd	r24, Y+9	; 0x09
    2aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	3f ef       	ldi	r19, 0xFF	; 255
    2ab0:	4f e7       	ldi	r20, 0x7F	; 127
    2ab2:	57 e4       	ldi	r21, 0x47	; 71
    2ab4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ab8:	18 16       	cp	r1, r24
    2aba:	4c f5       	brge	.+82     	; 0x2b0e <LCD_VoidSendChar+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2abc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2abe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e2       	ldi	r20, 0x20	; 32
    2aca:	51 e4       	ldi	r21, 0x41	; 65
    2acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	bc 01       	movw	r22, r24
    2ad6:	cd 01       	movw	r24, r26
    2ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	9e 83       	std	Y+6, r25	; 0x06
    2ae2:	8d 83       	std	Y+5, r24	; 0x05
    2ae4:	0f c0       	rjmp	.+30     	; 0x2b04 <LCD_VoidSendChar+0x482>
    2ae6:	88 ec       	ldi	r24, 0xC8	; 200
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	9c 83       	std	Y+4, r25	; 0x04
    2aec:	8b 83       	std	Y+3, r24	; 0x03
    2aee:	8b 81       	ldd	r24, Y+3	; 0x03
    2af0:	9c 81       	ldd	r25, Y+4	; 0x04
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	f1 f7       	brne	.-4      	; 0x2af2 <LCD_VoidSendChar+0x470>
    2af6:	9c 83       	std	Y+4, r25	; 0x04
    2af8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2afa:	8d 81       	ldd	r24, Y+5	; 0x05
    2afc:	9e 81       	ldd	r25, Y+6	; 0x06
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	9e 83       	std	Y+6, r25	; 0x06
    2b02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b04:	8d 81       	ldd	r24, Y+5	; 0x05
    2b06:	9e 81       	ldd	r25, Y+6	; 0x06
    2b08:	00 97       	sbiw	r24, 0x00	; 0
    2b0a:	69 f7       	brne	.-38     	; 0x2ae6 <LCD_VoidSendChar+0x464>
    2b0c:	14 c0       	rjmp	.+40     	; 0x2b36 <LCD_VoidSendChar+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b10:	78 85       	ldd	r23, Y+8	; 0x08
    2b12:	89 85       	ldd	r24, Y+9	; 0x09
    2b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	9e 83       	std	Y+6, r25	; 0x06
    2b20:	8d 83       	std	Y+5, r24	; 0x05
    2b22:	8d 81       	ldd	r24, Y+5	; 0x05
    2b24:	9e 81       	ldd	r25, Y+6	; 0x06
    2b26:	9a 83       	std	Y+2, r25	; 0x02
    2b28:	89 83       	std	Y+1, r24	; 0x01
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	f1 f7       	brne	.-4      	; 0x2b2e <LCD_VoidSendChar+0x4ac>
    2b32:	9a 83       	std	Y+2, r25	; 0x02
    2b34:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		SwitchingCounter++;
    2b36:	80 91 b0 00 	lds	r24, 0x00B0
    2b3a:	8f 5f       	subi	r24, 0xFF	; 255
    2b3c:	80 93 b0 00 	sts	0x00B0, r24
		SecondLineCounter++;
    2b40:	80 91 ae 00 	lds	r24, 0x00AE
    2b44:	8f 5f       	subi	r24, 0xFF	; 255
    2b46:	80 93 ae 00 	sts	0x00AE, r24
	}

}
    2b4a:	eb 96       	adiw	r28, 0x3b	; 59
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <LCD_VoidSendCharRepeat>:
void LCD_VoidSendCharRepeat(u8 Local_Char,LCD_Info *lcd)
{
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	eb 97       	sbiw	r28, 0x3b	; 59
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	de bf       	out	0x3e, r29	; 62
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	cd bf       	out	0x3d, r28	; 61
    2b70:	89 af       	std	Y+57, r24	; 0x39
    2b72:	7b af       	std	Y+59, r23	; 0x3b
    2b74:	6a af       	std	Y+58, r22	; 0x3a
	static u8 SwitchingCounter;
	static u8 FirstLineCounter,SecondLineCounter;
	if(SwitchingCounter<16){
    2b76:	80 91 b3 00 	lds	r24, 0x00B3
    2b7a:	80 31       	cpi	r24, 0x10	; 16
    2b7c:	08 f0       	brcs	.+2      	; 0x2b80 <LCD_VoidSendCharRepeat+0x24>
    2b7e:	2b c1       	rjmp	.+598    	; 0x2dd6 <LCD_VoidSendCharRepeat+0x27a>
		LCD_VoidGoToXY(FirstLineCounter,0,lcd);
    2b80:	80 91 b2 00 	lds	r24, 0x00B2
    2b84:	2a ad       	ldd	r18, Y+58	; 0x3a
    2b86:	3b ad       	ldd	r19, Y+59	; 0x3b
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	a9 01       	movw	r20, r18
    2b8c:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_VoidGoToXY>
		/*RS->LOw*/
		DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    2b90:	ea ad       	ldd	r30, Y+58	; 0x3a
    2b92:	fb ad       	ldd	r31, Y+59	; 0x3b
    2b94:	80 81       	ld	r24, Z
    2b96:	ea ad       	ldd	r30, Y+58	; 0x3a
    2b98:	fb ad       	ldd	r31, Y+59	; 0x3b
    2b9a:	91 81       	ldd	r25, Z+1	; 0x01
    2b9c:	69 2f       	mov	r22, r25
    2b9e:	41 e0       	ldi	r20, 0x01	; 1
    2ba0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		/*RW-> LOW*/
		DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    2ba4:	ea ad       	ldd	r30, Y+58	; 0x3a
    2ba6:	fb ad       	ldd	r31, Y+59	; 0x3b
    2ba8:	82 81       	ldd	r24, Z+2	; 0x02
    2baa:	ea ad       	ldd	r30, Y+58	; 0x3a
    2bac:	fb ad       	ldd	r31, Y+59	; 0x3b
    2bae:	93 81       	ldd	r25, Z+3	; 0x03
    2bb0:	69 2f       	mov	r22, r25
    2bb2:	40 e0       	ldi	r20, 0x00	; 0
    2bb4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		/*Group = Command*/
		DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    2bb8:	ea ad       	ldd	r30, Y+58	; 0x3a
    2bba:	fb ad       	ldd	r31, Y+59	; 0x3b
    2bbc:	86 81       	ldd	r24, Z+6	; 0x06
    2bbe:	48 2f       	mov	r20, r24
    2bc0:	50 e0       	ldi	r21, 0x00	; 0
    2bc2:	89 ad       	ldd	r24, Y+57	; 0x39
    2bc4:	28 2f       	mov	r18, r24
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	ca 01       	movw	r24, r20
    2bca:	b9 01       	movw	r22, r18
    2bcc:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
		/*Enable*/
		DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    2bd0:	ea ad       	ldd	r30, Y+58	; 0x3a
    2bd2:	fb ad       	ldd	r31, Y+59	; 0x3b
    2bd4:	84 81       	ldd	r24, Z+4	; 0x04
    2bd6:	ea ad       	ldd	r30, Y+58	; 0x3a
    2bd8:	fb ad       	ldd	r31, Y+59	; 0x3b
    2bda:	95 81       	ldd	r25, Z+5	; 0x05
    2bdc:	69 2f       	mov	r22, r25
    2bde:	41 e0       	ldi	r20, 0x01	; 1
    2be0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	a0 e8       	ldi	r26, 0x80	; 128
    2bea:	bf e3       	ldi	r27, 0x3F	; 63
    2bec:	8d ab       	std	Y+53, r24	; 0x35
    2bee:	9e ab       	std	Y+54, r25	; 0x36
    2bf0:	af ab       	std	Y+55, r26	; 0x37
    2bf2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf4:	6d a9       	ldd	r22, Y+53	; 0x35
    2bf6:	7e a9       	ldd	r23, Y+54	; 0x36
    2bf8:	8f a9       	ldd	r24, Y+55	; 0x37
    2bfa:	98 ad       	ldd	r25, Y+56	; 0x38
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	4a ef       	ldi	r20, 0xFA	; 250
    2c02:	54 e4       	ldi	r21, 0x44	; 68
    2c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	89 ab       	std	Y+49, r24	; 0x31
    2c0e:	9a ab       	std	Y+50, r25	; 0x32
    2c10:	ab ab       	std	Y+51, r26	; 0x33
    2c12:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c14:	69 a9       	ldd	r22, Y+49	; 0x31
    2c16:	7a a9       	ldd	r23, Y+50	; 0x32
    2c18:	8b a9       	ldd	r24, Y+51	; 0x33
    2c1a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e8       	ldi	r20, 0x80	; 128
    2c22:	5f e3       	ldi	r21, 0x3F	; 63
    2c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c28:	88 23       	and	r24, r24
    2c2a:	2c f4       	brge	.+10     	; 0x2c36 <LCD_VoidSendCharRepeat+0xda>
		__ticks = 1;
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	98 ab       	std	Y+48, r25	; 0x30
    2c32:	8f a7       	std	Y+47, r24	; 0x2f
    2c34:	3f c0       	rjmp	.+126    	; 0x2cb4 <LCD_VoidSendCharRepeat+0x158>
	else if (__tmp > 65535)
    2c36:	69 a9       	ldd	r22, Y+49	; 0x31
    2c38:	7a a9       	ldd	r23, Y+50	; 0x32
    2c3a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c3c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	3f ef       	ldi	r19, 0xFF	; 255
    2c42:	4f e7       	ldi	r20, 0x7F	; 127
    2c44:	57 e4       	ldi	r21, 0x47	; 71
    2c46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c4a:	18 16       	cp	r1, r24
    2c4c:	4c f5       	brge	.+82     	; 0x2ca0 <LCD_VoidSendCharRepeat+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c4e:	6d a9       	ldd	r22, Y+53	; 0x35
    2c50:	7e a9       	ldd	r23, Y+54	; 0x36
    2c52:	8f a9       	ldd	r24, Y+55	; 0x37
    2c54:	98 ad       	ldd	r25, Y+56	; 0x38
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e2       	ldi	r20, 0x20	; 32
    2c5c:	51 e4       	ldi	r21, 0x41	; 65
    2c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	bc 01       	movw	r22, r24
    2c68:	cd 01       	movw	r24, r26
    2c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	98 ab       	std	Y+48, r25	; 0x30
    2c74:	8f a7       	std	Y+47, r24	; 0x2f
    2c76:	0f c0       	rjmp	.+30     	; 0x2c96 <LCD_VoidSendCharRepeat+0x13a>
    2c78:	88 ec       	ldi	r24, 0xC8	; 200
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	9e a7       	std	Y+46, r25	; 0x2e
    2c7e:	8d a7       	std	Y+45, r24	; 0x2d
    2c80:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c82:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <LCD_VoidSendCharRepeat+0x128>
    2c88:	9e a7       	std	Y+46, r25	; 0x2e
    2c8a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c8e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	98 ab       	std	Y+48, r25	; 0x30
    2c94:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c96:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c98:	98 a9       	ldd	r25, Y+48	; 0x30
    2c9a:	00 97       	sbiw	r24, 0x00	; 0
    2c9c:	69 f7       	brne	.-38     	; 0x2c78 <LCD_VoidSendCharRepeat+0x11c>
    2c9e:	14 c0       	rjmp	.+40     	; 0x2cc8 <LCD_VoidSendCharRepeat+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ca2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ca4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ca6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	98 ab       	std	Y+48, r25	; 0x30
    2cb2:	8f a7       	std	Y+47, r24	; 0x2f
    2cb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cb6:	98 a9       	ldd	r25, Y+48	; 0x30
    2cb8:	9c a7       	std	Y+44, r25	; 0x2c
    2cba:	8b a7       	std	Y+43, r24	; 0x2b
    2cbc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cbe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	f1 f7       	brne	.-4      	; 0x2cc0 <LCD_VoidSendCharRepeat+0x164>
    2cc4:	9c a7       	std	Y+44, r25	; 0x2c
    2cc6:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    2cc8:	ea ad       	ldd	r30, Y+58	; 0x3a
    2cca:	fb ad       	ldd	r31, Y+59	; 0x3b
    2ccc:	84 81       	ldd	r24, Z+4	; 0x04
    2cce:	ea ad       	ldd	r30, Y+58	; 0x3a
    2cd0:	fb ad       	ldd	r31, Y+59	; 0x3b
    2cd2:	95 81       	ldd	r25, Z+5	; 0x05
    2cd4:	69 2f       	mov	r22, r25
    2cd6:	40 e0       	ldi	r20, 0x00	; 0
    2cd8:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	a0 e8       	ldi	r26, 0x80	; 128
    2ce2:	bf e3       	ldi	r27, 0x3F	; 63
    2ce4:	8f a3       	std	Y+39, r24	; 0x27
    2ce6:	98 a7       	std	Y+40, r25	; 0x28
    2ce8:	a9 a7       	std	Y+41, r26	; 0x29
    2cea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cec:	6f a1       	ldd	r22, Y+39	; 0x27
    2cee:	78 a5       	ldd	r23, Y+40	; 0x28
    2cf0:	89 a5       	ldd	r24, Y+41	; 0x29
    2cf2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	4a ef       	ldi	r20, 0xFA	; 250
    2cfa:	54 e4       	ldi	r21, 0x44	; 68
    2cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	8b a3       	std	Y+35, r24	; 0x23
    2d06:	9c a3       	std	Y+36, r25	; 0x24
    2d08:	ad a3       	std	Y+37, r26	; 0x25
    2d0a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d0c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d0e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d10:	8d a1       	ldd	r24, Y+37	; 0x25
    2d12:	9e a1       	ldd	r25, Y+38	; 0x26
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e8       	ldi	r20, 0x80	; 128
    2d1a:	5f e3       	ldi	r21, 0x3F	; 63
    2d1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d20:	88 23       	and	r24, r24
    2d22:	2c f4       	brge	.+10     	; 0x2d2e <LCD_VoidSendCharRepeat+0x1d2>
		__ticks = 1;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	9a a3       	std	Y+34, r25	; 0x22
    2d2a:	89 a3       	std	Y+33, r24	; 0x21
    2d2c:	3f c0       	rjmp	.+126    	; 0x2dac <LCD_VoidSendCharRepeat+0x250>
	else if (__tmp > 65535)
    2d2e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d30:	7c a1       	ldd	r23, Y+36	; 0x24
    2d32:	8d a1       	ldd	r24, Y+37	; 0x25
    2d34:	9e a1       	ldd	r25, Y+38	; 0x26
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	3f ef       	ldi	r19, 0xFF	; 255
    2d3a:	4f e7       	ldi	r20, 0x7F	; 127
    2d3c:	57 e4       	ldi	r21, 0x47	; 71
    2d3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d42:	18 16       	cp	r1, r24
    2d44:	4c f5       	brge	.+82     	; 0x2d98 <LCD_VoidSendCharRepeat+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d46:	6f a1       	ldd	r22, Y+39	; 0x27
    2d48:	78 a5       	ldd	r23, Y+40	; 0x28
    2d4a:	89 a5       	ldd	r24, Y+41	; 0x29
    2d4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	40 e2       	ldi	r20, 0x20	; 32
    2d54:	51 e4       	ldi	r21, 0x41	; 65
    2d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	bc 01       	movw	r22, r24
    2d60:	cd 01       	movw	r24, r26
    2d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	9a a3       	std	Y+34, r25	; 0x22
    2d6c:	89 a3       	std	Y+33, r24	; 0x21
    2d6e:	0f c0       	rjmp	.+30     	; 0x2d8e <LCD_VoidSendCharRepeat+0x232>
    2d70:	88 ec       	ldi	r24, 0xC8	; 200
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	98 a3       	std	Y+32, r25	; 0x20
    2d76:	8f 8f       	std	Y+31, r24	; 0x1f
    2d78:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d7a:	98 a1       	ldd	r25, Y+32	; 0x20
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	f1 f7       	brne	.-4      	; 0x2d7c <LCD_VoidSendCharRepeat+0x220>
    2d80:	98 a3       	std	Y+32, r25	; 0x20
    2d82:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d84:	89 a1       	ldd	r24, Y+33	; 0x21
    2d86:	9a a1       	ldd	r25, Y+34	; 0x22
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	9a a3       	std	Y+34, r25	; 0x22
    2d8c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d90:	9a a1       	ldd	r25, Y+34	; 0x22
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	69 f7       	brne	.-38     	; 0x2d70 <LCD_VoidSendCharRepeat+0x214>
    2d96:	14 c0       	rjmp	.+40     	; 0x2dc0 <LCD_VoidSendCharRepeat+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d98:	6b a1       	ldd	r22, Y+35	; 0x23
    2d9a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d9c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d9e:	9e a1       	ldd	r25, Y+38	; 0x26
    2da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	9a a3       	std	Y+34, r25	; 0x22
    2daa:	89 a3       	std	Y+33, r24	; 0x21
    2dac:	89 a1       	ldd	r24, Y+33	; 0x21
    2dae:	9a a1       	ldd	r25, Y+34	; 0x22
    2db0:	9e 8f       	std	Y+30, r25	; 0x1e
    2db2:	8d 8f       	std	Y+29, r24	; 0x1d
    2db4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2db6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <LCD_VoidSendCharRepeat+0x25c>
    2dbc:	9e 8f       	std	Y+30, r25	; 0x1e
    2dbe:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		SwitchingCounter++;
    2dc0:	80 91 b3 00 	lds	r24, 0x00B3
    2dc4:	8f 5f       	subi	r24, 0xFF	; 255
    2dc6:	80 93 b3 00 	sts	0x00B3, r24
		FirstLineCounter++;
    2dca:	80 91 b2 00 	lds	r24, 0x00B2
    2dce:	8f 5f       	subi	r24, 0xFF	; 255
    2dd0:	80 93 b2 00 	sts	0x00B2, r24
    2dd4:	3b c1       	rjmp	.+630    	; 0x304c <LCD_VoidSendCharRepeat+0x4f0>
	}
	else if(SwitchingCounter>15&&SwitchingCounter<32){
    2dd6:	80 91 b3 00 	lds	r24, 0x00B3
    2dda:	80 31       	cpi	r24, 0x10	; 16
    2ddc:	08 f4       	brcc	.+2      	; 0x2de0 <LCD_VoidSendCharRepeat+0x284>
    2dde:	30 c1       	rjmp	.+608    	; 0x3040 <LCD_VoidSendCharRepeat+0x4e4>
    2de0:	80 91 b3 00 	lds	r24, 0x00B3
    2de4:	80 32       	cpi	r24, 0x20	; 32
    2de6:	08 f0       	brcs	.+2      	; 0x2dea <LCD_VoidSendCharRepeat+0x28e>
    2de8:	2b c1       	rjmp	.+598    	; 0x3040 <LCD_VoidSendCharRepeat+0x4e4>
		LCD_VoidGoToXY(SecondLineCounter,1,lcd);
    2dea:	80 91 b1 00 	lds	r24, 0x00B1
    2dee:	2a ad       	ldd	r18, Y+58	; 0x3a
    2df0:	3b ad       	ldd	r19, Y+59	; 0x3b
    2df2:	61 e0       	ldi	r22, 0x01	; 1
    2df4:	a9 01       	movw	r20, r18
    2df6:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_VoidGoToXY>
		/*RS->LOw*/
		DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    2dfa:	ea ad       	ldd	r30, Y+58	; 0x3a
    2dfc:	fb ad       	ldd	r31, Y+59	; 0x3b
    2dfe:	80 81       	ld	r24, Z
    2e00:	ea ad       	ldd	r30, Y+58	; 0x3a
    2e02:	fb ad       	ldd	r31, Y+59	; 0x3b
    2e04:	91 81       	ldd	r25, Z+1	; 0x01
    2e06:	69 2f       	mov	r22, r25
    2e08:	41 e0       	ldi	r20, 0x01	; 1
    2e0a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		/*RW-> LOW*/
		DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    2e0e:	ea ad       	ldd	r30, Y+58	; 0x3a
    2e10:	fb ad       	ldd	r31, Y+59	; 0x3b
    2e12:	82 81       	ldd	r24, Z+2	; 0x02
    2e14:	ea ad       	ldd	r30, Y+58	; 0x3a
    2e16:	fb ad       	ldd	r31, Y+59	; 0x3b
    2e18:	93 81       	ldd	r25, Z+3	; 0x03
    2e1a:	69 2f       	mov	r22, r25
    2e1c:	40 e0       	ldi	r20, 0x00	; 0
    2e1e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		/*Group = Command*/
		DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    2e22:	ea ad       	ldd	r30, Y+58	; 0x3a
    2e24:	fb ad       	ldd	r31, Y+59	; 0x3b
    2e26:	86 81       	ldd	r24, Z+6	; 0x06
    2e28:	48 2f       	mov	r20, r24
    2e2a:	50 e0       	ldi	r21, 0x00	; 0
    2e2c:	89 ad       	ldd	r24, Y+57	; 0x39
    2e2e:	28 2f       	mov	r18, r24
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	ca 01       	movw	r24, r20
    2e34:	b9 01       	movw	r22, r18
    2e36:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
		/*Enable*/
		DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    2e3a:	ea ad       	ldd	r30, Y+58	; 0x3a
    2e3c:	fb ad       	ldd	r31, Y+59	; 0x3b
    2e3e:	84 81       	ldd	r24, Z+4	; 0x04
    2e40:	ea ad       	ldd	r30, Y+58	; 0x3a
    2e42:	fb ad       	ldd	r31, Y+59	; 0x3b
    2e44:	95 81       	ldd	r25, Z+5	; 0x05
    2e46:	69 2f       	mov	r22, r25
    2e48:	41 e0       	ldi	r20, 0x01	; 1
    2e4a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	a0 e8       	ldi	r26, 0x80	; 128
    2e54:	bf e3       	ldi	r27, 0x3F	; 63
    2e56:	89 8f       	std	Y+25, r24	; 0x19
    2e58:	9a 8f       	std	Y+26, r25	; 0x1a
    2e5a:	ab 8f       	std	Y+27, r26	; 0x1b
    2e5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	4a ef       	ldi	r20, 0xFA	; 250
    2e6c:	54 e4       	ldi	r21, 0x44	; 68
    2e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	8d 8b       	std	Y+21, r24	; 0x15
    2e78:	9e 8b       	std	Y+22, r25	; 0x16
    2e7a:	af 8b       	std	Y+23, r26	; 0x17
    2e7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e80:	7e 89       	ldd	r23, Y+22	; 0x16
    2e82:	8f 89       	ldd	r24, Y+23	; 0x17
    2e84:	98 8d       	ldd	r25, Y+24	; 0x18
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	40 e8       	ldi	r20, 0x80	; 128
    2e8c:	5f e3       	ldi	r21, 0x3F	; 63
    2e8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e92:	88 23       	and	r24, r24
    2e94:	2c f4       	brge	.+10     	; 0x2ea0 <LCD_VoidSendCharRepeat+0x344>
		__ticks = 1;
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	9c 8b       	std	Y+20, r25	; 0x14
    2e9c:	8b 8b       	std	Y+19, r24	; 0x13
    2e9e:	3f c0       	rjmp	.+126    	; 0x2f1e <LCD_VoidSendCharRepeat+0x3c2>
	else if (__tmp > 65535)
    2ea0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ea2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ea4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	3f ef       	ldi	r19, 0xFF	; 255
    2eac:	4f e7       	ldi	r20, 0x7F	; 127
    2eae:	57 e4       	ldi	r21, 0x47	; 71
    2eb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eb4:	18 16       	cp	r1, r24
    2eb6:	4c f5       	brge	.+82     	; 0x2f0a <LCD_VoidSendCharRepeat+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb8:	69 8d       	ldd	r22, Y+25	; 0x19
    2eba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ebc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ebe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e2       	ldi	r20, 0x20	; 32
    2ec6:	51 e4       	ldi	r21, 0x41	; 65
    2ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	bc 01       	movw	r22, r24
    2ed2:	cd 01       	movw	r24, r26
    2ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	9c 8b       	std	Y+20, r25	; 0x14
    2ede:	8b 8b       	std	Y+19, r24	; 0x13
    2ee0:	0f c0       	rjmp	.+30     	; 0x2f00 <LCD_VoidSendCharRepeat+0x3a4>
    2ee2:	88 ec       	ldi	r24, 0xC8	; 200
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	9a 8b       	std	Y+18, r25	; 0x12
    2ee8:	89 8b       	std	Y+17, r24	; 0x11
    2eea:	89 89       	ldd	r24, Y+17	; 0x11
    2eec:	9a 89       	ldd	r25, Y+18	; 0x12
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	f1 f7       	brne	.-4      	; 0x2eee <LCD_VoidSendCharRepeat+0x392>
    2ef2:	9a 8b       	std	Y+18, r25	; 0x12
    2ef4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ef8:	9c 89       	ldd	r25, Y+20	; 0x14
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	9c 8b       	std	Y+20, r25	; 0x14
    2efe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f00:	8b 89       	ldd	r24, Y+19	; 0x13
    2f02:	9c 89       	ldd	r25, Y+20	; 0x14
    2f04:	00 97       	sbiw	r24, 0x00	; 0
    2f06:	69 f7       	brne	.-38     	; 0x2ee2 <LCD_VoidSendCharRepeat+0x386>
    2f08:	14 c0       	rjmp	.+40     	; 0x2f32 <LCD_VoidSendCharRepeat+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f10:	98 8d       	ldd	r25, Y+24	; 0x18
    2f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	9c 8b       	std	Y+20, r25	; 0x14
    2f1c:	8b 8b       	std	Y+19, r24	; 0x13
    2f1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f20:	9c 89       	ldd	r25, Y+20	; 0x14
    2f22:	98 8b       	std	Y+16, r25	; 0x10
    2f24:	8f 87       	std	Y+15, r24	; 0x0f
    2f26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f28:	98 89       	ldd	r25, Y+16	; 0x10
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <LCD_VoidSendCharRepeat+0x3ce>
    2f2e:	98 8b       	std	Y+16, r25	; 0x10
    2f30:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    2f32:	ea ad       	ldd	r30, Y+58	; 0x3a
    2f34:	fb ad       	ldd	r31, Y+59	; 0x3b
    2f36:	84 81       	ldd	r24, Z+4	; 0x04
    2f38:	ea ad       	ldd	r30, Y+58	; 0x3a
    2f3a:	fb ad       	ldd	r31, Y+59	; 0x3b
    2f3c:	95 81       	ldd	r25, Z+5	; 0x05
    2f3e:	69 2f       	mov	r22, r25
    2f40:	40 e0       	ldi	r20, 0x00	; 0
    2f42:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	a0 e8       	ldi	r26, 0x80	; 128
    2f4c:	bf e3       	ldi	r27, 0x3F	; 63
    2f4e:	8b 87       	std	Y+11, r24	; 0x0b
    2f50:	9c 87       	std	Y+12, r25	; 0x0c
    2f52:	ad 87       	std	Y+13, r26	; 0x0d
    2f54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	4a ef       	ldi	r20, 0xFA	; 250
    2f64:	54 e4       	ldi	r21, 0x44	; 68
    2f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	8f 83       	std	Y+7, r24	; 0x07
    2f70:	98 87       	std	Y+8, r25	; 0x08
    2f72:	a9 87       	std	Y+9, r26	; 0x09
    2f74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f76:	6f 81       	ldd	r22, Y+7	; 0x07
    2f78:	78 85       	ldd	r23, Y+8	; 0x08
    2f7a:	89 85       	ldd	r24, Y+9	; 0x09
    2f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	40 e8       	ldi	r20, 0x80	; 128
    2f84:	5f e3       	ldi	r21, 0x3F	; 63
    2f86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f8a:	88 23       	and	r24, r24
    2f8c:	2c f4       	brge	.+10     	; 0x2f98 <LCD_VoidSendCharRepeat+0x43c>
		__ticks = 1;
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	9e 83       	std	Y+6, r25	; 0x06
    2f94:	8d 83       	std	Y+5, r24	; 0x05
    2f96:	3f c0       	rjmp	.+126    	; 0x3016 <LCD_VoidSendCharRepeat+0x4ba>
	else if (__tmp > 65535)
    2f98:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9a:	78 85       	ldd	r23, Y+8	; 0x08
    2f9c:	89 85       	ldd	r24, Y+9	; 0x09
    2f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	3f ef       	ldi	r19, 0xFF	; 255
    2fa4:	4f e7       	ldi	r20, 0x7F	; 127
    2fa6:	57 e4       	ldi	r21, 0x47	; 71
    2fa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fac:	18 16       	cp	r1, r24
    2fae:	4c f5       	brge	.+82     	; 0x3002 <LCD_VoidSendCharRepeat+0x4a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	40 e2       	ldi	r20, 0x20	; 32
    2fbe:	51 e4       	ldi	r21, 0x41	; 65
    2fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	bc 01       	movw	r22, r24
    2fca:	cd 01       	movw	r24, r26
    2fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	9e 83       	std	Y+6, r25	; 0x06
    2fd6:	8d 83       	std	Y+5, r24	; 0x05
    2fd8:	0f c0       	rjmp	.+30     	; 0x2ff8 <LCD_VoidSendCharRepeat+0x49c>
    2fda:	88 ec       	ldi	r24, 0xC8	; 200
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	9c 83       	std	Y+4, r25	; 0x04
    2fe0:	8b 83       	std	Y+3, r24	; 0x03
    2fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <LCD_VoidSendCharRepeat+0x48a>
    2fea:	9c 83       	std	Y+4, r25	; 0x04
    2fec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fee:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	9e 83       	std	Y+6, r25	; 0x06
    2ff6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffa:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffc:	00 97       	sbiw	r24, 0x00	; 0
    2ffe:	69 f7       	brne	.-38     	; 0x2fda <LCD_VoidSendCharRepeat+0x47e>
    3000:	14 c0       	rjmp	.+40     	; 0x302a <LCD_VoidSendCharRepeat+0x4ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3002:	6f 81       	ldd	r22, Y+7	; 0x07
    3004:	78 85       	ldd	r23, Y+8	; 0x08
    3006:	89 85       	ldd	r24, Y+9	; 0x09
    3008:	9a 85       	ldd	r25, Y+10	; 0x0a
    300a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	9e 83       	std	Y+6, r25	; 0x06
    3014:	8d 83       	std	Y+5, r24	; 0x05
    3016:	8d 81       	ldd	r24, Y+5	; 0x05
    3018:	9e 81       	ldd	r25, Y+6	; 0x06
    301a:	9a 83       	std	Y+2, r25	; 0x02
    301c:	89 83       	std	Y+1, r24	; 0x01
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	9a 81       	ldd	r25, Y+2	; 0x02
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	f1 f7       	brne	.-4      	; 0x3022 <LCD_VoidSendCharRepeat+0x4c6>
    3026:	9a 83       	std	Y+2, r25	; 0x02
    3028:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		SwitchingCounter++;
    302a:	80 91 b3 00 	lds	r24, 0x00B3
    302e:	8f 5f       	subi	r24, 0xFF	; 255
    3030:	80 93 b3 00 	sts	0x00B3, r24
		SecondLineCounter++;
    3034:	80 91 b1 00 	lds	r24, 0x00B1
    3038:	8f 5f       	subi	r24, 0xFF	; 255
    303a:	80 93 b1 00 	sts	0x00B1, r24
    303e:	06 c0       	rjmp	.+12     	; 0x304c <LCD_VoidSendCharRepeat+0x4f0>
	}
	else{
		SwitchingCounter=0;
    3040:	10 92 b3 00 	sts	0x00B3, r1
		FirstLineCounter=0;
    3044:	10 92 b2 00 	sts	0x00B2, r1
		SecondLineCounter=0;
    3048:	10 92 b1 00 	sts	0x00B1, r1
	}
}
    304c:	eb 96       	adiw	r28, 0x3b	; 59
    304e:	0f b6       	in	r0, 0x3f	; 63
    3050:	f8 94       	cli
    3052:	de bf       	out	0x3e, r29	; 62
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	cd bf       	out	0x3d, r28	; 61
    3058:	cf 91       	pop	r28
    305a:	df 91       	pop	r29
    305c:	08 95       	ret

0000305e <LCD_VoidInit>:
void LCD_VoidInit(LCD_Info *lcd){
    305e:	df 93       	push	r29
    3060:	cf 93       	push	r28
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	ea 97       	sbiw	r28, 0x3a	; 58
    3068:	0f b6       	in	r0, 0x3f	; 63
    306a:	f8 94       	cli
    306c:	de bf       	out	0x3e, r29	; 62
    306e:	0f be       	out	0x3f, r0	; 63
    3070:	cd bf       	out	0x3d, r28	; 61
    3072:	9a af       	std	Y+58, r25	; 0x3a
    3074:	89 af       	std	Y+57, r24	; 0x39
	/*Set Directions*/
	DIO_ErrStateSetPinDirection(lcd->RS_group,lcd->RS_pin,DIO_OUT);
    3076:	e9 ad       	ldd	r30, Y+57	; 0x39
    3078:	fa ad       	ldd	r31, Y+58	; 0x3a
    307a:	80 81       	ld	r24, Z
    307c:	e9 ad       	ldd	r30, Y+57	; 0x39
    307e:	fa ad       	ldd	r31, Y+58	; 0x3a
    3080:	91 81       	ldd	r25, Z+1	; 0x01
    3082:	69 2f       	mov	r22, r25
    3084:	41 e0       	ldi	r20, 0x01	; 1
    3086:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->RW_group,lcd->RW_pin,DIO_OUT);
    308a:	e9 ad       	ldd	r30, Y+57	; 0x39
    308c:	fa ad       	ldd	r31, Y+58	; 0x3a
    308e:	82 81       	ldd	r24, Z+2	; 0x02
    3090:	e9 ad       	ldd	r30, Y+57	; 0x39
    3092:	fa ad       	ldd	r31, Y+58	; 0x3a
    3094:	93 81       	ldd	r25, Z+3	; 0x03
    3096:	69 2f       	mov	r22, r25
    3098:	41 e0       	ldi	r20, 0x01	; 1
    309a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->E_group,lcd->E_pin,DIO_OUT);
    309e:	e9 ad       	ldd	r30, Y+57	; 0x39
    30a0:	fa ad       	ldd	r31, Y+58	; 0x3a
    30a2:	84 81       	ldd	r24, Z+4	; 0x04
    30a4:	e9 ad       	ldd	r30, Y+57	; 0x39
    30a6:	fa ad       	ldd	r31, Y+58	; 0x3a
    30a8:	95 81       	ldd	r25, Z+5	; 0x05
    30aa:	69 2f       	mov	r22, r25
    30ac:	41 e0       	ldi	r20, 0x01	; 1
    30ae:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetGroupDirection(lcd->Data_group,0xFF);
    30b2:	e9 ad       	ldd	r30, Y+57	; 0x39
    30b4:	fa ad       	ldd	r31, Y+58	; 0x3a
    30b6:	86 81       	ldd	r24, Z+6	; 0x06
    30b8:	88 2f       	mov	r24, r24
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	6f ef       	ldi	r22, 0xFF	; 255
    30be:	70 e0       	ldi	r23, 0x00	; 0
    30c0:	0e 94 a6 0a 	call	0x154c	; 0x154c <DIO_ErrStateSetGroupDirection>
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	a0 e2       	ldi	r26, 0x20	; 32
    30ca:	b2 e4       	ldi	r27, 0x42	; 66
    30cc:	8d ab       	std	Y+53, r24	; 0x35
    30ce:	9e ab       	std	Y+54, r25	; 0x36
    30d0:	af ab       	std	Y+55, r26	; 0x37
    30d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d4:	6d a9       	ldd	r22, Y+53	; 0x35
    30d6:	7e a9       	ldd	r23, Y+54	; 0x36
    30d8:	8f a9       	ldd	r24, Y+55	; 0x37
    30da:	98 ad       	ldd	r25, Y+56	; 0x38
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	4a ef       	ldi	r20, 0xFA	; 250
    30e2:	54 e4       	ldi	r21, 0x44	; 68
    30e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	89 ab       	std	Y+49, r24	; 0x31
    30ee:	9a ab       	std	Y+50, r25	; 0x32
    30f0:	ab ab       	std	Y+51, r26	; 0x33
    30f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30f4:	69 a9       	ldd	r22, Y+49	; 0x31
    30f6:	7a a9       	ldd	r23, Y+50	; 0x32
    30f8:	8b a9       	ldd	r24, Y+51	; 0x33
    30fa:	9c a9       	ldd	r25, Y+52	; 0x34
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	40 e8       	ldi	r20, 0x80	; 128
    3102:	5f e3       	ldi	r21, 0x3F	; 63
    3104:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3108:	88 23       	and	r24, r24
    310a:	2c f4       	brge	.+10     	; 0x3116 <LCD_VoidInit+0xb8>
		__ticks = 1;
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	98 ab       	std	Y+48, r25	; 0x30
    3112:	8f a7       	std	Y+47, r24	; 0x2f
    3114:	3f c0       	rjmp	.+126    	; 0x3194 <LCD_VoidInit+0x136>
	else if (__tmp > 65535)
    3116:	69 a9       	ldd	r22, Y+49	; 0x31
    3118:	7a a9       	ldd	r23, Y+50	; 0x32
    311a:	8b a9       	ldd	r24, Y+51	; 0x33
    311c:	9c a9       	ldd	r25, Y+52	; 0x34
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	3f ef       	ldi	r19, 0xFF	; 255
    3122:	4f e7       	ldi	r20, 0x7F	; 127
    3124:	57 e4       	ldi	r21, 0x47	; 71
    3126:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    312a:	18 16       	cp	r1, r24
    312c:	4c f5       	brge	.+82     	; 0x3180 <LCD_VoidInit+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    312e:	6d a9       	ldd	r22, Y+53	; 0x35
    3130:	7e a9       	ldd	r23, Y+54	; 0x36
    3132:	8f a9       	ldd	r24, Y+55	; 0x37
    3134:	98 ad       	ldd	r25, Y+56	; 0x38
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e2       	ldi	r20, 0x20	; 32
    313c:	51 e4       	ldi	r21, 0x41	; 65
    313e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3142:	dc 01       	movw	r26, r24
    3144:	cb 01       	movw	r24, r22
    3146:	bc 01       	movw	r22, r24
    3148:	cd 01       	movw	r24, r26
    314a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	98 ab       	std	Y+48, r25	; 0x30
    3154:	8f a7       	std	Y+47, r24	; 0x2f
    3156:	0f c0       	rjmp	.+30     	; 0x3176 <LCD_VoidInit+0x118>
    3158:	88 ec       	ldi	r24, 0xC8	; 200
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	9e a7       	std	Y+46, r25	; 0x2e
    315e:	8d a7       	std	Y+45, r24	; 0x2d
    3160:	8d a5       	ldd	r24, Y+45	; 0x2d
    3162:	9e a5       	ldd	r25, Y+46	; 0x2e
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <LCD_VoidInit+0x106>
    3168:	9e a7       	std	Y+46, r25	; 0x2e
    316a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316c:	8f a5       	ldd	r24, Y+47	; 0x2f
    316e:	98 a9       	ldd	r25, Y+48	; 0x30
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	98 ab       	std	Y+48, r25	; 0x30
    3174:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3176:	8f a5       	ldd	r24, Y+47	; 0x2f
    3178:	98 a9       	ldd	r25, Y+48	; 0x30
    317a:	00 97       	sbiw	r24, 0x00	; 0
    317c:	69 f7       	brne	.-38     	; 0x3158 <LCD_VoidInit+0xfa>
    317e:	14 c0       	rjmp	.+40     	; 0x31a8 <LCD_VoidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3180:	69 a9       	ldd	r22, Y+49	; 0x31
    3182:	7a a9       	ldd	r23, Y+50	; 0x32
    3184:	8b a9       	ldd	r24, Y+51	; 0x33
    3186:	9c a9       	ldd	r25, Y+52	; 0x34
    3188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	98 ab       	std	Y+48, r25	; 0x30
    3192:	8f a7       	std	Y+47, r24	; 0x2f
    3194:	8f a5       	ldd	r24, Y+47	; 0x2f
    3196:	98 a9       	ldd	r25, Y+48	; 0x30
    3198:	9c a7       	std	Y+44, r25	; 0x2c
    319a:	8b a7       	std	Y+43, r24	; 0x2b
    319c:	8b a5       	ldd	r24, Y+43	; 0x2b
    319e:	9c a5       	ldd	r25, Y+44	; 0x2c
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	f1 f7       	brne	.-4      	; 0x31a0 <LCD_VoidInit+0x142>
    31a4:	9c a7       	std	Y+44, r25	; 0x2c
    31a6:	8b a7       	std	Y+43, r24	; 0x2b
	/*Wait more than 30 ms*/
	_delay_ms(40);
	/*Sent function set*/
	LCD_VoidSendCommand(LCD_Set8Bit2Line5x8,lcd);
    31a8:	29 ad       	ldd	r18, Y+57	; 0x39
    31aa:	3a ad       	ldd	r19, Y+58	; 0x3a
    31ac:	88 e3       	ldi	r24, 0x38	; 56
    31ae:	b9 01       	movw	r22, r18
    31b0:	0e 94 13 12 	call	0x2426	; 0x2426 <LCD_VoidSendCommand>
    31b4:	80 e0       	ldi	r24, 0x00	; 0
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	a0 e8       	ldi	r26, 0x80	; 128
    31ba:	bf e3       	ldi	r27, 0x3F	; 63
    31bc:	8f a3       	std	Y+39, r24	; 0x27
    31be:	98 a7       	std	Y+40, r25	; 0x28
    31c0:	a9 a7       	std	Y+41, r26	; 0x29
    31c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c4:	6f a1       	ldd	r22, Y+39	; 0x27
    31c6:	78 a5       	ldd	r23, Y+40	; 0x28
    31c8:	89 a5       	ldd	r24, Y+41	; 0x29
    31ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	4a ef       	ldi	r20, 0xFA	; 250
    31d2:	54 e4       	ldi	r21, 0x44	; 68
    31d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d8:	dc 01       	movw	r26, r24
    31da:	cb 01       	movw	r24, r22
    31dc:	8b a3       	std	Y+35, r24	; 0x23
    31de:	9c a3       	std	Y+36, r25	; 0x24
    31e0:	ad a3       	std	Y+37, r26	; 0x25
    31e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31e4:	6b a1       	ldd	r22, Y+35	; 0x23
    31e6:	7c a1       	ldd	r23, Y+36	; 0x24
    31e8:	8d a1       	ldd	r24, Y+37	; 0x25
    31ea:	9e a1       	ldd	r25, Y+38	; 0x26
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	40 e8       	ldi	r20, 0x80	; 128
    31f2:	5f e3       	ldi	r21, 0x3F	; 63
    31f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31f8:	88 23       	and	r24, r24
    31fa:	2c f4       	brge	.+10     	; 0x3206 <LCD_VoidInit+0x1a8>
		__ticks = 1;
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	9a a3       	std	Y+34, r25	; 0x22
    3202:	89 a3       	std	Y+33, r24	; 0x21
    3204:	3f c0       	rjmp	.+126    	; 0x3284 <LCD_VoidInit+0x226>
	else if (__tmp > 65535)
    3206:	6b a1       	ldd	r22, Y+35	; 0x23
    3208:	7c a1       	ldd	r23, Y+36	; 0x24
    320a:	8d a1       	ldd	r24, Y+37	; 0x25
    320c:	9e a1       	ldd	r25, Y+38	; 0x26
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	3f ef       	ldi	r19, 0xFF	; 255
    3212:	4f e7       	ldi	r20, 0x7F	; 127
    3214:	57 e4       	ldi	r21, 0x47	; 71
    3216:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    321a:	18 16       	cp	r1, r24
    321c:	4c f5       	brge	.+82     	; 0x3270 <LCD_VoidInit+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    321e:	6f a1       	ldd	r22, Y+39	; 0x27
    3220:	78 a5       	ldd	r23, Y+40	; 0x28
    3222:	89 a5       	ldd	r24, Y+41	; 0x29
    3224:	9a a5       	ldd	r25, Y+42	; 0x2a
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	40 e2       	ldi	r20, 0x20	; 32
    322c:	51 e4       	ldi	r21, 0x41	; 65
    322e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	bc 01       	movw	r22, r24
    3238:	cd 01       	movw	r24, r26
    323a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	9a a3       	std	Y+34, r25	; 0x22
    3244:	89 a3       	std	Y+33, r24	; 0x21
    3246:	0f c0       	rjmp	.+30     	; 0x3266 <LCD_VoidInit+0x208>
    3248:	88 ec       	ldi	r24, 0xC8	; 200
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	98 a3       	std	Y+32, r25	; 0x20
    324e:	8f 8f       	std	Y+31, r24	; 0x1f
    3250:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3252:	98 a1       	ldd	r25, Y+32	; 0x20
    3254:	01 97       	sbiw	r24, 0x01	; 1
    3256:	f1 f7       	brne	.-4      	; 0x3254 <LCD_VoidInit+0x1f6>
    3258:	98 a3       	std	Y+32, r25	; 0x20
    325a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325c:	89 a1       	ldd	r24, Y+33	; 0x21
    325e:	9a a1       	ldd	r25, Y+34	; 0x22
    3260:	01 97       	sbiw	r24, 0x01	; 1
    3262:	9a a3       	std	Y+34, r25	; 0x22
    3264:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3266:	89 a1       	ldd	r24, Y+33	; 0x21
    3268:	9a a1       	ldd	r25, Y+34	; 0x22
    326a:	00 97       	sbiw	r24, 0x00	; 0
    326c:	69 f7       	brne	.-38     	; 0x3248 <LCD_VoidInit+0x1ea>
    326e:	14 c0       	rjmp	.+40     	; 0x3298 <LCD_VoidInit+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3270:	6b a1       	ldd	r22, Y+35	; 0x23
    3272:	7c a1       	ldd	r23, Y+36	; 0x24
    3274:	8d a1       	ldd	r24, Y+37	; 0x25
    3276:	9e a1       	ldd	r25, Y+38	; 0x26
    3278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	9a a3       	std	Y+34, r25	; 0x22
    3282:	89 a3       	std	Y+33, r24	; 0x21
    3284:	89 a1       	ldd	r24, Y+33	; 0x21
    3286:	9a a1       	ldd	r25, Y+34	; 0x22
    3288:	9e 8f       	std	Y+30, r25	; 0x1e
    328a:	8d 8f       	std	Y+29, r24	; 0x1d
    328c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    328e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	f1 f7       	brne	.-4      	; 0x3290 <LCD_VoidInit+0x232>
    3294:	9e 8f       	std	Y+30, r25	; 0x1e
    3296:	8d 8f       	std	Y+29, r24	; 0x1d
	/*WAIT 39us*/
	_delay_ms(1);
	LCD_VoidSendCommand(LCD_CursorON,lcd);
    3298:	29 ad       	ldd	r18, Y+57	; 0x39
    329a:	3a ad       	ldd	r19, Y+58	; 0x3a
    329c:	8e e0       	ldi	r24, 0x0E	; 14
    329e:	b9 01       	movw	r22, r18
    32a0:	0e 94 13 12 	call	0x2426	; 0x2426 <LCD_VoidSendCommand>
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	a0 e8       	ldi	r26, 0x80	; 128
    32aa:	bf e3       	ldi	r27, 0x3F	; 63
    32ac:	89 8f       	std	Y+25, r24	; 0x19
    32ae:	9a 8f       	std	Y+26, r25	; 0x1a
    32b0:	ab 8f       	std	Y+27, r26	; 0x1b
    32b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b4:	69 8d       	ldd	r22, Y+25	; 0x19
    32b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	4a ef       	ldi	r20, 0xFA	; 250
    32c2:	54 e4       	ldi	r21, 0x44	; 68
    32c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	8d 8b       	std	Y+21, r24	; 0x15
    32ce:	9e 8b       	std	Y+22, r25	; 0x16
    32d0:	af 8b       	std	Y+23, r26	; 0x17
    32d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32d4:	6d 89       	ldd	r22, Y+21	; 0x15
    32d6:	7e 89       	ldd	r23, Y+22	; 0x16
    32d8:	8f 89       	ldd	r24, Y+23	; 0x17
    32da:	98 8d       	ldd	r25, Y+24	; 0x18
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 e8       	ldi	r20, 0x80	; 128
    32e2:	5f e3       	ldi	r21, 0x3F	; 63
    32e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32e8:	88 23       	and	r24, r24
    32ea:	2c f4       	brge	.+10     	; 0x32f6 <LCD_VoidInit+0x298>
		__ticks = 1;
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	9c 8b       	std	Y+20, r25	; 0x14
    32f2:	8b 8b       	std	Y+19, r24	; 0x13
    32f4:	3f c0       	rjmp	.+126    	; 0x3374 <LCD_VoidInit+0x316>
	else if (__tmp > 65535)
    32f6:	6d 89       	ldd	r22, Y+21	; 0x15
    32f8:	7e 89       	ldd	r23, Y+22	; 0x16
    32fa:	8f 89       	ldd	r24, Y+23	; 0x17
    32fc:	98 8d       	ldd	r25, Y+24	; 0x18
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	3f ef       	ldi	r19, 0xFF	; 255
    3302:	4f e7       	ldi	r20, 0x7F	; 127
    3304:	57 e4       	ldi	r21, 0x47	; 71
    3306:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    330a:	18 16       	cp	r1, r24
    330c:	4c f5       	brge	.+82     	; 0x3360 <LCD_VoidInit+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330e:	69 8d       	ldd	r22, Y+25	; 0x19
    3310:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3312:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3314:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	40 e2       	ldi	r20, 0x20	; 32
    331c:	51 e4       	ldi	r21, 0x41	; 65
    331e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	bc 01       	movw	r22, r24
    3328:	cd 01       	movw	r24, r26
    332a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	9c 8b       	std	Y+20, r25	; 0x14
    3334:	8b 8b       	std	Y+19, r24	; 0x13
    3336:	0f c0       	rjmp	.+30     	; 0x3356 <LCD_VoidInit+0x2f8>
    3338:	88 ec       	ldi	r24, 0xC8	; 200
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	9a 8b       	std	Y+18, r25	; 0x12
    333e:	89 8b       	std	Y+17, r24	; 0x11
    3340:	89 89       	ldd	r24, Y+17	; 0x11
    3342:	9a 89       	ldd	r25, Y+18	; 0x12
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	f1 f7       	brne	.-4      	; 0x3344 <LCD_VoidInit+0x2e6>
    3348:	9a 8b       	std	Y+18, r25	; 0x12
    334a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    334c:	8b 89       	ldd	r24, Y+19	; 0x13
    334e:	9c 89       	ldd	r25, Y+20	; 0x14
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	9c 8b       	std	Y+20, r25	; 0x14
    3354:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3356:	8b 89       	ldd	r24, Y+19	; 0x13
    3358:	9c 89       	ldd	r25, Y+20	; 0x14
    335a:	00 97       	sbiw	r24, 0x00	; 0
    335c:	69 f7       	brne	.-38     	; 0x3338 <LCD_VoidInit+0x2da>
    335e:	14 c0       	rjmp	.+40     	; 0x3388 <LCD_VoidInit+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3360:	6d 89       	ldd	r22, Y+21	; 0x15
    3362:	7e 89       	ldd	r23, Y+22	; 0x16
    3364:	8f 89       	ldd	r24, Y+23	; 0x17
    3366:	98 8d       	ldd	r25, Y+24	; 0x18
    3368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	9c 8b       	std	Y+20, r25	; 0x14
    3372:	8b 8b       	std	Y+19, r24	; 0x13
    3374:	8b 89       	ldd	r24, Y+19	; 0x13
    3376:	9c 89       	ldd	r25, Y+20	; 0x14
    3378:	98 8b       	std	Y+16, r25	; 0x10
    337a:	8f 87       	std	Y+15, r24	; 0x0f
    337c:	8f 85       	ldd	r24, Y+15	; 0x0f
    337e:	98 89       	ldd	r25, Y+16	; 0x10
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	f1 f7       	brne	.-4      	; 0x3380 <LCD_VoidInit+0x322>
    3384:	98 8b       	std	Y+16, r25	; 0x10
    3386:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*LCD Clear Display*/
	LCD_VoidSendCommand(LCD_ClearDisplay,lcd);
    3388:	29 ad       	ldd	r18, Y+57	; 0x39
    338a:	3a ad       	ldd	r19, Y+58	; 0x3a
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	b9 01       	movw	r22, r18
    3390:	0e 94 13 12 	call	0x2426	; 0x2426 <LCD_VoidSendCommand>
    3394:	80 e0       	ldi	r24, 0x00	; 0
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	a0 e8       	ldi	r26, 0x80	; 128
    339a:	bf e3       	ldi	r27, 0x3F	; 63
    339c:	8b 87       	std	Y+11, r24	; 0x0b
    339e:	9c 87       	std	Y+12, r25	; 0x0c
    33a0:	ad 87       	std	Y+13, r26	; 0x0d
    33a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	4a ef       	ldi	r20, 0xFA	; 250
    33b2:	54 e4       	ldi	r21, 0x44	; 68
    33b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	8f 83       	std	Y+7, r24	; 0x07
    33be:	98 87       	std	Y+8, r25	; 0x08
    33c0:	a9 87       	std	Y+9, r26	; 0x09
    33c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33c4:	6f 81       	ldd	r22, Y+7	; 0x07
    33c6:	78 85       	ldd	r23, Y+8	; 0x08
    33c8:	89 85       	ldd	r24, Y+9	; 0x09
    33ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	40 e8       	ldi	r20, 0x80	; 128
    33d2:	5f e3       	ldi	r21, 0x3F	; 63
    33d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33d8:	88 23       	and	r24, r24
    33da:	2c f4       	brge	.+10     	; 0x33e6 <LCD_VoidInit+0x388>
		__ticks = 1;
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	9e 83       	std	Y+6, r25	; 0x06
    33e2:	8d 83       	std	Y+5, r24	; 0x05
    33e4:	3f c0       	rjmp	.+126    	; 0x3464 <LCD_VoidInit+0x406>
	else if (__tmp > 65535)
    33e6:	6f 81       	ldd	r22, Y+7	; 0x07
    33e8:	78 85       	ldd	r23, Y+8	; 0x08
    33ea:	89 85       	ldd	r24, Y+9	; 0x09
    33ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	3f ef       	ldi	r19, 0xFF	; 255
    33f2:	4f e7       	ldi	r20, 0x7F	; 127
    33f4:	57 e4       	ldi	r21, 0x47	; 71
    33f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33fa:	18 16       	cp	r1, r24
    33fc:	4c f5       	brge	.+82     	; 0x3450 <LCD_VoidInit+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3400:	7c 85       	ldd	r23, Y+12	; 0x0c
    3402:	8d 85       	ldd	r24, Y+13	; 0x0d
    3404:	9e 85       	ldd	r25, Y+14	; 0x0e
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	40 e2       	ldi	r20, 0x20	; 32
    340c:	51 e4       	ldi	r21, 0x41	; 65
    340e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	bc 01       	movw	r22, r24
    3418:	cd 01       	movw	r24, r26
    341a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	9e 83       	std	Y+6, r25	; 0x06
    3424:	8d 83       	std	Y+5, r24	; 0x05
    3426:	0f c0       	rjmp	.+30     	; 0x3446 <LCD_VoidInit+0x3e8>
    3428:	88 ec       	ldi	r24, 0xC8	; 200
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	9c 83       	std	Y+4, r25	; 0x04
    342e:	8b 83       	std	Y+3, r24	; 0x03
    3430:	8b 81       	ldd	r24, Y+3	; 0x03
    3432:	9c 81       	ldd	r25, Y+4	; 0x04
    3434:	01 97       	sbiw	r24, 0x01	; 1
    3436:	f1 f7       	brne	.-4      	; 0x3434 <LCD_VoidInit+0x3d6>
    3438:	9c 83       	std	Y+4, r25	; 0x04
    343a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    343c:	8d 81       	ldd	r24, Y+5	; 0x05
    343e:	9e 81       	ldd	r25, Y+6	; 0x06
    3440:	01 97       	sbiw	r24, 0x01	; 1
    3442:	9e 83       	std	Y+6, r25	; 0x06
    3444:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3446:	8d 81       	ldd	r24, Y+5	; 0x05
    3448:	9e 81       	ldd	r25, Y+6	; 0x06
    344a:	00 97       	sbiw	r24, 0x00	; 0
    344c:	69 f7       	brne	.-38     	; 0x3428 <LCD_VoidInit+0x3ca>
    344e:	14 c0       	rjmp	.+40     	; 0x3478 <LCD_VoidInit+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3450:	6f 81       	ldd	r22, Y+7	; 0x07
    3452:	78 85       	ldd	r23, Y+8	; 0x08
    3454:	89 85       	ldd	r24, Y+9	; 0x09
    3456:	9a 85       	ldd	r25, Y+10	; 0x0a
    3458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345c:	dc 01       	movw	r26, r24
    345e:	cb 01       	movw	r24, r22
    3460:	9e 83       	std	Y+6, r25	; 0x06
    3462:	8d 83       	std	Y+5, r24	; 0x05
    3464:	8d 81       	ldd	r24, Y+5	; 0x05
    3466:	9e 81       	ldd	r25, Y+6	; 0x06
    3468:	9a 83       	std	Y+2, r25	; 0x02
    346a:	89 83       	std	Y+1, r24	; 0x01
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	9a 81       	ldd	r25, Y+2	; 0x02
    3470:	01 97       	sbiw	r24, 0x01	; 1
    3472:	f1 f7       	brne	.-4      	; 0x3470 <LCD_VoidInit+0x412>
    3474:	9a 83       	std	Y+2, r25	; 0x02
    3476:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    3478:	ea 96       	adiw	r28, 0x3a	; 58
    347a:	0f b6       	in	r0, 0x3f	; 63
    347c:	f8 94       	cli
    347e:	de bf       	out	0x3e, r29	; 62
    3480:	0f be       	out	0x3f, r0	; 63
    3482:	cd bf       	out	0x3d, r28	; 61
    3484:	cf 91       	pop	r28
    3486:	df 91       	pop	r29
    3488:	08 95       	ret

0000348a <LCD_VoidSendString>:

void LCD_VoidSendString(u8 *Address_String,LCD_Info *lcd){
    348a:	df 93       	push	r29
    348c:	cf 93       	push	r28
    348e:	00 d0       	rcall	.+0      	; 0x3490 <LCD_VoidSendString+0x6>
    3490:	00 d0       	rcall	.+0      	; 0x3492 <LCD_VoidSendString+0x8>
    3492:	cd b7       	in	r28, 0x3d	; 61
    3494:	de b7       	in	r29, 0x3e	; 62
    3496:	9a 83       	std	Y+2, r25	; 0x02
    3498:	89 83       	std	Y+1, r24	; 0x01
    349a:	7c 83       	std	Y+4, r23	; 0x04
    349c:	6b 83       	std	Y+3, r22	; 0x03
    349e:	0d c0       	rjmp	.+26     	; 0x34ba <LCD_VoidSendString+0x30>

	while (*Address_String != '\0') {
		// Send the current character to the LCD
		LCD_VoidSendChar(*Address_String, lcd);
    34a0:	e9 81       	ldd	r30, Y+1	; 0x01
    34a2:	fa 81       	ldd	r31, Y+2	; 0x02
    34a4:	80 81       	ld	r24, Z
    34a6:	2b 81       	ldd	r18, Y+3	; 0x03
    34a8:	3c 81       	ldd	r19, Y+4	; 0x04
    34aa:	b9 01       	movw	r22, r18
    34ac:	0e 94 41 13 	call	0x2682	; 0x2682 <LCD_VoidSendChar>
		Address_String++; // Move to the next character
    34b0:	89 81       	ldd	r24, Y+1	; 0x01
    34b2:	9a 81       	ldd	r25, Y+2	; 0x02
    34b4:	01 96       	adiw	r24, 0x01	; 1
    34b6:	9a 83       	std	Y+2, r25	; 0x02
    34b8:	89 83       	std	Y+1, r24	; 0x01

}

void LCD_VoidSendString(u8 *Address_String,LCD_Info *lcd){

	while (*Address_String != '\0') {
    34ba:	e9 81       	ldd	r30, Y+1	; 0x01
    34bc:	fa 81       	ldd	r31, Y+2	; 0x02
    34be:	80 81       	ld	r24, Z
    34c0:	88 23       	and	r24, r24
    34c2:	71 f7       	brne	.-36     	; 0x34a0 <LCD_VoidSendString+0x16>
		// Send the current character to the LCD
		LCD_VoidSendChar(*Address_String, lcd);
		Address_String++; // Move to the next character
	}
}
    34c4:	0f 90       	pop	r0
    34c6:	0f 90       	pop	r0
    34c8:	0f 90       	pop	r0
    34ca:	0f 90       	pop	r0
    34cc:	cf 91       	pop	r28
    34ce:	df 91       	pop	r29
    34d0:	08 95       	ret

000034d2 <LCD_VoidGoToXY>:
void LCD_VoidGoToXY(u8 Local_XPosition,u8 Local_YPosition, LCD_Info *lcd) {
    34d2:	df 93       	push	r29
    34d4:	cf 93       	push	r28
    34d6:	00 d0       	rcall	.+0      	; 0x34d8 <LCD_VoidGoToXY+0x6>
    34d8:	00 d0       	rcall	.+0      	; 0x34da <LCD_VoidGoToXY+0x8>
    34da:	0f 92       	push	r0
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	8a 83       	std	Y+2, r24	; 0x02
    34e2:	6b 83       	std	Y+3, r22	; 0x03
    34e4:	5d 83       	std	Y+5, r21	; 0x05
    34e6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Address = 0;
    34e8:	19 82       	std	Y+1, r1	; 0x01
	/* Calculate the DDRAM address based on the row and column */
	if(Local_YPosition == 0) {
    34ea:	8b 81       	ldd	r24, Y+3	; 0x03
    34ec:	88 23       	and	r24, r24
    34ee:	19 f4       	brne	.+6      	; 0x34f6 <LCD_VoidGoToXY+0x24>
		Address = LCD_FirstLine + Local_XPosition;
    34f0:	8a 81       	ldd	r24, Y+2	; 0x02
    34f2:	89 83       	std	Y+1, r24	; 0x01
    34f4:	03 c0       	rjmp	.+6      	; 0x34fc <LCD_VoidGoToXY+0x2a>
	} else {
		Address = LCD_SecoundLine + Local_XPosition;
    34f6:	8a 81       	ldd	r24, Y+2	; 0x02
    34f8:	80 5c       	subi	r24, 0xC0	; 192
    34fa:	89 83       	std	Y+1, r24	; 0x01
	}
	/* Send the command to set the DDRAM address */
	LCD_VoidSendCommand(LCD_SetAddressDDRAM | Address, lcd);
    34fc:	89 81       	ldd	r24, Y+1	; 0x01
    34fe:	80 68       	ori	r24, 0x80	; 128
    3500:	2c 81       	ldd	r18, Y+4	; 0x04
    3502:	3d 81       	ldd	r19, Y+5	; 0x05
    3504:	b9 01       	movw	r22, r18
    3506:	0e 94 13 12 	call	0x2426	; 0x2426 <LCD_VoidSendCommand>
}
    350a:	0f 90       	pop	r0
    350c:	0f 90       	pop	r0
    350e:	0f 90       	pop	r0
    3510:	0f 90       	pop	r0
    3512:	0f 90       	pop	r0
    3514:	cf 91       	pop	r28
    3516:	df 91       	pop	r29
    3518:	08 95       	ret

0000351a <LCD_VoidSpecialCharacter>:

void LCD_VoidSpecialCharacter(u8 *pattern,u8 location, LCD_Info *lcd){
    351a:	df 93       	push	r29
    351c:	cf 93       	push	r28
    351e:	00 d0       	rcall	.+0      	; 0x3520 <LCD_VoidSpecialCharacter+0x6>
    3520:	00 d0       	rcall	.+0      	; 0x3522 <LCD_VoidSpecialCharacter+0x8>
    3522:	00 d0       	rcall	.+0      	; 0x3524 <LCD_VoidSpecialCharacter+0xa>
    3524:	cd b7       	in	r28, 0x3d	; 61
    3526:	de b7       	in	r29, 0x3e	; 62
    3528:	9b 83       	std	Y+3, r25	; 0x03
    352a:	8a 83       	std	Y+2, r24	; 0x02
    352c:	6c 83       	std	Y+4, r22	; 0x04
    352e:	5e 83       	std	Y+6, r21	; 0x06
    3530:	4d 83       	std	Y+5, r20	; 0x05
	LCD_VoidSendCommand(LCD_SetAddressCGRAM+(location*8),lcd);
    3532:	8c 81       	ldd	r24, Y+4	; 0x04
    3534:	88 2f       	mov	r24, r24
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	08 96       	adiw	r24, 0x08	; 8
    353a:	88 0f       	add	r24, r24
    353c:	99 1f       	adc	r25, r25
    353e:	88 0f       	add	r24, r24
    3540:	99 1f       	adc	r25, r25
    3542:	88 0f       	add	r24, r24
    3544:	99 1f       	adc	r25, r25
    3546:	2d 81       	ldd	r18, Y+5	; 0x05
    3548:	3e 81       	ldd	r19, Y+6	; 0x06
    354a:	b9 01       	movw	r22, r18
    354c:	0e 94 13 12 	call	0x2426	; 0x2426 <LCD_VoidSendCommand>
	/* Sending the bitmap to CGRAM */
	for(u8 i=0;i<8;i++){
    3550:	19 82       	std	Y+1, r1	; 0x01
    3552:	11 c0       	rjmp	.+34     	; 0x3576 <LCD_VoidSpecialCharacter+0x5c>
		LCD_VoidSendChar(pattern[i],lcd);
    3554:	89 81       	ldd	r24, Y+1	; 0x01
    3556:	28 2f       	mov	r18, r24
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	8a 81       	ldd	r24, Y+2	; 0x02
    355c:	9b 81       	ldd	r25, Y+3	; 0x03
    355e:	fc 01       	movw	r30, r24
    3560:	e2 0f       	add	r30, r18
    3562:	f3 1f       	adc	r31, r19
    3564:	80 81       	ld	r24, Z
    3566:	2d 81       	ldd	r18, Y+5	; 0x05
    3568:	3e 81       	ldd	r19, Y+6	; 0x06
    356a:	b9 01       	movw	r22, r18
    356c:	0e 94 41 13 	call	0x2682	; 0x2682 <LCD_VoidSendChar>
}

void LCD_VoidSpecialCharacter(u8 *pattern,u8 location, LCD_Info *lcd){
	LCD_VoidSendCommand(LCD_SetAddressCGRAM+(location*8),lcd);
	/* Sending the bitmap to CGRAM */
	for(u8 i=0;i<8;i++){
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	8f 5f       	subi	r24, 0xFF	; 255
    3574:	89 83       	std	Y+1, r24	; 0x01
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	88 30       	cpi	r24, 0x08	; 8
    357a:	60 f3       	brcs	.-40     	; 0x3554 <LCD_VoidSpecialCharacter+0x3a>
		LCD_VoidSendChar(pattern[i],lcd);
	}
	/*	Send the cursor to DDRAM + choose location */
	LCD_VoidGoToXY(1,1,lcd);
    357c:	2d 81       	ldd	r18, Y+5	; 0x05
    357e:	3e 81       	ldd	r19, Y+6	; 0x06
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	61 e0       	ldi	r22, 0x01	; 1
    3584:	a9 01       	movw	r20, r18
    3586:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_VoidGoToXY>
	LCD_VoidSendChar(location,lcd);
    358a:	2d 81       	ldd	r18, Y+5	; 0x05
    358c:	3e 81       	ldd	r19, Y+6	; 0x06
    358e:	8c 81       	ldd	r24, Y+4	; 0x04
    3590:	b9 01       	movw	r22, r18
    3592:	0e 94 41 13 	call	0x2682	; 0x2682 <LCD_VoidSendChar>
}
    3596:	26 96       	adiw	r28, 0x06	; 6
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	f8 94       	cli
    359c:	de bf       	out	0x3e, r29	; 62
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	cd bf       	out	0x3d, r28	; 61
    35a2:	cf 91       	pop	r28
    35a4:	df 91       	pop	r29
    35a6:	08 95       	ret

000035a8 <LCD_VoidSendInt>:
void LCD_VoidSendInt(u32 Recieved_Number,LCD_Info *lcd){
    35a8:	0f 93       	push	r16
    35aa:	1f 93       	push	r17
    35ac:	df 93       	push	r29
    35ae:	cf 93       	push	r28
    35b0:	cd b7       	in	r28, 0x3d	; 61
    35b2:	de b7       	in	r29, 0x3e	; 62
    35b4:	61 97       	sbiw	r28, 0x11	; 17
    35b6:	0f b6       	in	r0, 0x3f	; 63
    35b8:	f8 94       	cli
    35ba:	de bf       	out	0x3e, r29	; 62
    35bc:	0f be       	out	0x3f, r0	; 63
    35be:	cd bf       	out	0x3d, r28	; 61
    35c0:	6c 87       	std	Y+12, r22	; 0x0c
    35c2:	7d 87       	std	Y+13, r23	; 0x0d
    35c4:	8e 87       	std	Y+14, r24	; 0x0e
    35c6:	9f 87       	std	Y+15, r25	; 0x0f
    35c8:	59 8b       	std	Y+17, r21	; 0x11
    35ca:	48 8b       	std	Y+16, r20	; 0x10
	u8 NumAsString[LCD_StringMax];
	u8 LCD_StringCounter;
	if(Recieved_Number==0){
    35cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    35ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    35d0:	ae 85       	ldd	r26, Y+14	; 0x0e
    35d2:	bf 85       	ldd	r27, Y+15	; 0x0f
    35d4:	00 97       	sbiw	r24, 0x00	; 0
    35d6:	a1 05       	cpc	r26, r1
    35d8:	b1 05       	cpc	r27, r1
    35da:	a1 f5       	brne	.+104    	; 0x3644 <LCD_VoidSendInt+0x9c>
		LCD_VoidSendChar('0',lcd);
    35dc:	28 89       	ldd	r18, Y+16	; 0x10
    35de:	39 89       	ldd	r19, Y+17	; 0x11
    35e0:	80 e3       	ldi	r24, 0x30	; 48
    35e2:	b9 01       	movw	r22, r18
    35e4:	0e 94 41 13 	call	0x2682	; 0x2682 <LCD_VoidSendChar>
    35e8:	35 c0       	rjmp	.+106    	; 0x3654 <LCD_VoidSendInt+0xac>
	}
	else{
		while(Recieved_Number!=0){
			NumAsString[LCD_StringCounter]=Recieved_Number%10;
    35ea:	89 81       	ldd	r24, Y+1	; 0x01
    35ec:	08 2f       	mov	r16, r24
    35ee:	10 e0       	ldi	r17, 0x00	; 0
    35f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    35f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    35f4:	ae 85       	ldd	r26, Y+14	; 0x0e
    35f6:	bf 85       	ldd	r27, Y+15	; 0x0f
    35f8:	2a e0       	ldi	r18, 0x0A	; 10
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	40 e0       	ldi	r20, 0x00	; 0
    35fe:	50 e0       	ldi	r21, 0x00	; 0
    3600:	bc 01       	movw	r22, r24
    3602:	cd 01       	movw	r24, r26
    3604:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__udivmodsi4>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	28 2f       	mov	r18, r24
    360e:	ce 01       	movw	r24, r28
    3610:	02 96       	adiw	r24, 0x02	; 2
    3612:	fc 01       	movw	r30, r24
    3614:	e0 0f       	add	r30, r16
    3616:	f1 1f       	adc	r31, r17
    3618:	20 83       	st	Z, r18
			Recieved_Number/=10;
    361a:	8c 85       	ldd	r24, Y+12	; 0x0c
    361c:	9d 85       	ldd	r25, Y+13	; 0x0d
    361e:	ae 85       	ldd	r26, Y+14	; 0x0e
    3620:	bf 85       	ldd	r27, Y+15	; 0x0f
    3622:	2a e0       	ldi	r18, 0x0A	; 10
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	40 e0       	ldi	r20, 0x00	; 0
    3628:	50 e0       	ldi	r21, 0x00	; 0
    362a:	bc 01       	movw	r22, r24
    362c:	cd 01       	movw	r24, r26
    362e:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__udivmodsi4>
    3632:	da 01       	movw	r26, r20
    3634:	c9 01       	movw	r24, r18
    3636:	8c 87       	std	Y+12, r24	; 0x0c
    3638:	9d 87       	std	Y+13, r25	; 0x0d
    363a:	ae 87       	std	Y+14, r26	; 0x0e
    363c:	bf 87       	std	Y+15, r27	; 0x0f
			LCD_StringCounter++;
    363e:	89 81       	ldd	r24, Y+1	; 0x01
    3640:	8f 5f       	subi	r24, 0xFF	; 255
    3642:	89 83       	std	Y+1, r24	; 0x01
	u8 LCD_StringCounter;
	if(Recieved_Number==0){
		LCD_VoidSendChar('0',lcd);
	}
	else{
		while(Recieved_Number!=0){
    3644:	8c 85       	ldd	r24, Y+12	; 0x0c
    3646:	9d 85       	ldd	r25, Y+13	; 0x0d
    3648:	ae 85       	ldd	r26, Y+14	; 0x0e
    364a:	bf 85       	ldd	r27, Y+15	; 0x0f
    364c:	00 97       	sbiw	r24, 0x00	; 0
    364e:	a1 05       	cpc	r26, r1
    3650:	b1 05       	cpc	r27, r1
    3652:	59 f6       	brne	.-106    	; 0x35ea <LCD_VoidSendInt+0x42>
			NumAsString[LCD_StringCounter]=Recieved_Number%10;
			Recieved_Number/=10;
			LCD_StringCounter++;
		}
	}
	for(LCD_StringCounter=(LCD_StringMax-1);LCD_StringCounter>=0;LCD_StringCounter--){
    3654:	89 e0       	ldi	r24, 0x09	; 9
    3656:	89 83       	std	Y+1, r24	; 0x01
		LCD_VoidSendChar(NumAsString[LCD_StringCounter],lcd);
    3658:	89 81       	ldd	r24, Y+1	; 0x01
    365a:	28 2f       	mov	r18, r24
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	ce 01       	movw	r24, r28
    3660:	02 96       	adiw	r24, 0x02	; 2
    3662:	fc 01       	movw	r30, r24
    3664:	e2 0f       	add	r30, r18
    3666:	f3 1f       	adc	r31, r19
    3668:	80 81       	ld	r24, Z
    366a:	28 89       	ldd	r18, Y+16	; 0x10
    366c:	39 89       	ldd	r19, Y+17	; 0x11
    366e:	b9 01       	movw	r22, r18
    3670:	0e 94 41 13 	call	0x2682	; 0x2682 <LCD_VoidSendChar>
			NumAsString[LCD_StringCounter]=Recieved_Number%10;
			Recieved_Number/=10;
			LCD_StringCounter++;
		}
	}
	for(LCD_StringCounter=(LCD_StringMax-1);LCD_StringCounter>=0;LCD_StringCounter--){
    3674:	89 81       	ldd	r24, Y+1	; 0x01
    3676:	81 50       	subi	r24, 0x01	; 1
    3678:	89 83       	std	Y+1, r24	; 0x01
    367a:	ee cf       	rjmp	.-36     	; 0x3658 <LCD_VoidSendInt+0xb0>

0000367c <KP_ErrStateInit>:
		{'7','8','9','/'},
		{'4','5','6','*'},
		{'1','2','3','-'},
		{'C','0','=','+'}
};
void KP_ErrStateInit(KeypadRow_PORT_PIN *KP_RPP_INFO,KeypadCol_PORT_PIN *KP_CPP_INFO){
    367c:	df 93       	push	r29
    367e:	cf 93       	push	r28
    3680:	00 d0       	rcall	.+0      	; 0x3682 <KP_ErrStateInit+0x6>
    3682:	00 d0       	rcall	.+0      	; 0x3684 <KP_ErrStateInit+0x8>
    3684:	cd b7       	in	r28, 0x3d	; 61
    3686:	de b7       	in	r29, 0x3e	; 62
    3688:	9a 83       	std	Y+2, r25	; 0x02
    368a:	89 83       	std	Y+1, r24	; 0x01
    368c:	7c 83       	std	Y+4, r23	; 0x04
    368e:	6b 83       	std	Y+3, r22	; 0x03
	//u8 ROW,COL,ReadPin;
	//KPRPORT ROWP=KP_ROW_PORT1;
	//KPCPORT COLP=KP_COL_PORT1;
		DIO_ErrStateSetPinDirection(PORT_C,KP_RPP_INFO->ROW_PIN1,DIO_OUT);
    3690:	e9 81       	ldd	r30, Y+1	; 0x01
    3692:	fa 81       	ldd	r31, Y+2	; 0x02
    3694:	91 81       	ldd	r25, Z+1	; 0x01
    3696:	83 e4       	ldi	r24, 0x43	; 67
    3698:	69 2f       	mov	r22, r25
    369a:	41 e0       	ldi	r20, 0x01	; 1
    369c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_RPP_INFO->ROW_PIN2,DIO_OUT);
    36a0:	e9 81       	ldd	r30, Y+1	; 0x01
    36a2:	fa 81       	ldd	r31, Y+2	; 0x02
    36a4:	93 81       	ldd	r25, Z+3	; 0x03
    36a6:	83 e4       	ldi	r24, 0x43	; 67
    36a8:	69 2f       	mov	r22, r25
    36aa:	41 e0       	ldi	r20, 0x01	; 1
    36ac:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_RPP_INFO->ROW_PIN3,DIO_OUT);
    36b0:	e9 81       	ldd	r30, Y+1	; 0x01
    36b2:	fa 81       	ldd	r31, Y+2	; 0x02
    36b4:	95 81       	ldd	r25, Z+5	; 0x05
    36b6:	83 e4       	ldi	r24, 0x43	; 67
    36b8:	69 2f       	mov	r22, r25
    36ba:	41 e0       	ldi	r20, 0x01	; 1
    36bc:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_RPP_INFO->ROW_PIN4,DIO_OUT);
    36c0:	e9 81       	ldd	r30, Y+1	; 0x01
    36c2:	fa 81       	ldd	r31, Y+2	; 0x02
    36c4:	97 81       	ldd	r25, Z+7	; 0x07
    36c6:	83 e4       	ldi	r24, 0x43	; 67
    36c8:	69 2f       	mov	r22, r25
    36ca:	41 e0       	ldi	r20, 0x01	; 1
    36cc:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_CPP_INFO->COL_PIN1,DIO_IN);
    36d0:	eb 81       	ldd	r30, Y+3	; 0x03
    36d2:	fc 81       	ldd	r31, Y+4	; 0x04
    36d4:	91 81       	ldd	r25, Z+1	; 0x01
    36d6:	83 e4       	ldi	r24, 0x43	; 67
    36d8:	69 2f       	mov	r22, r25
    36da:	40 e0       	ldi	r20, 0x00	; 0
    36dc:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_CPP_INFO->COL_PIN2,DIO_IN);
    36e0:	eb 81       	ldd	r30, Y+3	; 0x03
    36e2:	fc 81       	ldd	r31, Y+4	; 0x04
    36e4:	93 81       	ldd	r25, Z+3	; 0x03
    36e6:	83 e4       	ldi	r24, 0x43	; 67
    36e8:	69 2f       	mov	r22, r25
    36ea:	40 e0       	ldi	r20, 0x00	; 0
    36ec:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_CPP_INFO->COL_PIN3,DIO_IN);
    36f0:	eb 81       	ldd	r30, Y+3	; 0x03
    36f2:	fc 81       	ldd	r31, Y+4	; 0x04
    36f4:	95 81       	ldd	r25, Z+5	; 0x05
    36f6:	83 e4       	ldi	r24, 0x43	; 67
    36f8:	69 2f       	mov	r22, r25
    36fa:	40 e0       	ldi	r20, 0x00	; 0
    36fc:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_CPP_INFO->COL_PIN4,DIO_IN);
    3700:	eb 81       	ldd	r30, Y+3	; 0x03
    3702:	fc 81       	ldd	r31, Y+4	; 0x04
    3704:	97 81       	ldd	r25, Z+7	; 0x07
    3706:	83 e4       	ldi	r24, 0x43	; 67
    3708:	69 2f       	mov	r22, r25
    370a:	40 e0       	ldi	r20, 0x00	; 0
    370c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinValue(PORT_C,KP_RPP_INFO->ROW_PIN1,DIO_HIGH);
    3710:	e9 81       	ldd	r30, Y+1	; 0x01
    3712:	fa 81       	ldd	r31, Y+2	; 0x02
    3714:	91 81       	ldd	r25, Z+1	; 0x01
    3716:	83 e4       	ldi	r24, 0x43	; 67
    3718:	69 2f       	mov	r22, r25
    371a:	41 e0       	ldi	r20, 0x01	; 1
    371c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_RPP_INFO->ROW_PIN2,DIO_HIGH);
    3720:	e9 81       	ldd	r30, Y+1	; 0x01
    3722:	fa 81       	ldd	r31, Y+2	; 0x02
    3724:	93 81       	ldd	r25, Z+3	; 0x03
    3726:	83 e4       	ldi	r24, 0x43	; 67
    3728:	69 2f       	mov	r22, r25
    372a:	41 e0       	ldi	r20, 0x01	; 1
    372c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_RPP_INFO->ROW_PIN3,DIO_HIGH);
    3730:	e9 81       	ldd	r30, Y+1	; 0x01
    3732:	fa 81       	ldd	r31, Y+2	; 0x02
    3734:	95 81       	ldd	r25, Z+5	; 0x05
    3736:	83 e4       	ldi	r24, 0x43	; 67
    3738:	69 2f       	mov	r22, r25
    373a:	41 e0       	ldi	r20, 0x01	; 1
    373c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_RPP_INFO->ROW_PIN4,DIO_HIGH);
    3740:	e9 81       	ldd	r30, Y+1	; 0x01
    3742:	fa 81       	ldd	r31, Y+2	; 0x02
    3744:	97 81       	ldd	r25, Z+7	; 0x07
    3746:	83 e4       	ldi	r24, 0x43	; 67
    3748:	69 2f       	mov	r22, r25
    374a:	41 e0       	ldi	r20, 0x01	; 1
    374c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_CPP_INFO->COL_PIN1,DIO_HIGH);
    3750:	eb 81       	ldd	r30, Y+3	; 0x03
    3752:	fc 81       	ldd	r31, Y+4	; 0x04
    3754:	91 81       	ldd	r25, Z+1	; 0x01
    3756:	83 e4       	ldi	r24, 0x43	; 67
    3758:	69 2f       	mov	r22, r25
    375a:	41 e0       	ldi	r20, 0x01	; 1
    375c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_CPP_INFO->COL_PIN2,DIO_HIGH);
    3760:	eb 81       	ldd	r30, Y+3	; 0x03
    3762:	fc 81       	ldd	r31, Y+4	; 0x04
    3764:	93 81       	ldd	r25, Z+3	; 0x03
    3766:	83 e4       	ldi	r24, 0x43	; 67
    3768:	69 2f       	mov	r22, r25
    376a:	41 e0       	ldi	r20, 0x01	; 1
    376c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_CPP_INFO->COL_PIN3,DIO_HIGH);
    3770:	eb 81       	ldd	r30, Y+3	; 0x03
    3772:	fc 81       	ldd	r31, Y+4	; 0x04
    3774:	95 81       	ldd	r25, Z+5	; 0x05
    3776:	83 e4       	ldi	r24, 0x43	; 67
    3778:	69 2f       	mov	r22, r25
    377a:	41 e0       	ldi	r20, 0x01	; 1
    377c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_CPP_INFO->COL_PIN4,DIO_HIGH);
    3780:	eb 81       	ldd	r30, Y+3	; 0x03
    3782:	fc 81       	ldd	r31, Y+4	; 0x04
    3784:	97 81       	ldd	r25, Z+7	; 0x07
    3786:	83 e4       	ldi	r24, 0x43	; 67
    3788:	69 2f       	mov	r22, r25
    378a:	41 e0       	ldi	r20, 0x01	; 1
    378c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>

}
    3790:	0f 90       	pop	r0
    3792:	0f 90       	pop	r0
    3794:	0f 90       	pop	r0
    3796:	0f 90       	pop	r0
    3798:	cf 91       	pop	r28
    379a:	df 91       	pop	r29
    379c:	08 95       	ret

0000379e <KP_ErrStateRead>:
KP_ErrState	KP_ErrStateRead(KeypadRow_PORT_PIN *KP_RPP_INFO,KeypadCol_PORT_PIN *KP_CPP_INFO,u8 *ReadValue){
    379e:	df 93       	push	r29
    37a0:	cf 93       	push	r28
    37a2:	cd b7       	in	r28, 0x3d	; 61
    37a4:	de b7       	in	r29, 0x3e	; 62
    37a6:	69 97       	sbiw	r28, 0x19	; 25
    37a8:	0f b6       	in	r0, 0x3f	; 63
    37aa:	f8 94       	cli
    37ac:	de bf       	out	0x3e, r29	; 62
    37ae:	0f be       	out	0x3f, r0	; 63
    37b0:	cd bf       	out	0x3d, r28	; 61
    37b2:	9c 8b       	std	Y+20, r25	; 0x14
    37b4:	8b 8b       	std	Y+19, r24	; 0x13
    37b6:	7e 8b       	std	Y+22, r23	; 0x16
    37b8:	6d 8b       	std	Y+21, r22	; 0x15
    37ba:	58 8f       	std	Y+24, r21	; 0x18
    37bc:	4f 8b       	std	Y+23, r20	; 0x17
	u8 ROW,COL,ReadPin;
	u8 ErrVal;
	//_delay_ms(100);
	for(ROW=0;ROW<4;ROW++){
    37be:	19 8a       	std	Y+17, r1	; 0x11
    37c0:	c0 c0       	rjmp	.+384    	; 0x3942 <KP_ErrStateRead+0x1a4>
		DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_LOW);
    37c2:	83 e4       	ldi	r24, 0x43	; 67
    37c4:	69 89       	ldd	r22, Y+17	; 0x11
    37c6:	40 e0       	ldi	r20, 0x00	; 0
    37c8:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>

		for(COL=4;COL<8;COL++){
    37cc:	84 e0       	ldi	r24, 0x04	; 4
    37ce:	88 8b       	std	Y+16, r24	; 0x10
    37d0:	ac c0       	rjmp	.+344    	; 0x392a <KP_ErrStateRead+0x18c>
			ErrVal=DIO_ErrStateReadPinValue(PORT_C,COL,&ReadPin);
    37d2:	9e 01       	movw	r18, r28
    37d4:	2e 5e       	subi	r18, 0xEE	; 238
    37d6:	3f 4f       	sbci	r19, 0xFF	; 255
    37d8:	83 e4       	ldi	r24, 0x43	; 67
    37da:	68 89       	ldd	r22, Y+16	; 0x10
    37dc:	a9 01       	movw	r20, r18
    37de:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_ErrStateReadPinValue>
    37e2:	8f 87       	std	Y+15, r24	; 0x0f
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	a0 ef       	ldi	r26, 0xF0	; 240
    37ea:	b1 e4       	ldi	r27, 0x41	; 65
    37ec:	8b 87       	std	Y+11, r24	; 0x0b
    37ee:	9c 87       	std	Y+12, r25	; 0x0c
    37f0:	ad 87       	std	Y+13, r26	; 0x0d
    37f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    37f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    37f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    37fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    37fc:	20 e0       	ldi	r18, 0x00	; 0
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	4a ef       	ldi	r20, 0xFA	; 250
    3802:	54 e4       	ldi	r21, 0x44	; 68
    3804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3808:	dc 01       	movw	r26, r24
    380a:	cb 01       	movw	r24, r22
    380c:	8f 83       	std	Y+7, r24	; 0x07
    380e:	98 87       	std	Y+8, r25	; 0x08
    3810:	a9 87       	std	Y+9, r26	; 0x09
    3812:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3814:	6f 81       	ldd	r22, Y+7	; 0x07
    3816:	78 85       	ldd	r23, Y+8	; 0x08
    3818:	89 85       	ldd	r24, Y+9	; 0x09
    381a:	9a 85       	ldd	r25, Y+10	; 0x0a
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	40 e8       	ldi	r20, 0x80	; 128
    3822:	5f e3       	ldi	r21, 0x3F	; 63
    3824:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3828:	88 23       	and	r24, r24
    382a:	2c f4       	brge	.+10     	; 0x3836 <KP_ErrStateRead+0x98>
		__ticks = 1;
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	9e 83       	std	Y+6, r25	; 0x06
    3832:	8d 83       	std	Y+5, r24	; 0x05
    3834:	3f c0       	rjmp	.+126    	; 0x38b4 <KP_ErrStateRead+0x116>
	else if (__tmp > 65535)
    3836:	6f 81       	ldd	r22, Y+7	; 0x07
    3838:	78 85       	ldd	r23, Y+8	; 0x08
    383a:	89 85       	ldd	r24, Y+9	; 0x09
    383c:	9a 85       	ldd	r25, Y+10	; 0x0a
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	3f ef       	ldi	r19, 0xFF	; 255
    3842:	4f e7       	ldi	r20, 0x7F	; 127
    3844:	57 e4       	ldi	r21, 0x47	; 71
    3846:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    384a:	18 16       	cp	r1, r24
    384c:	4c f5       	brge	.+82     	; 0x38a0 <KP_ErrStateRead+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    384e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3850:	7c 85       	ldd	r23, Y+12	; 0x0c
    3852:	8d 85       	ldd	r24, Y+13	; 0x0d
    3854:	9e 85       	ldd	r25, Y+14	; 0x0e
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	40 e2       	ldi	r20, 0x20	; 32
    385c:	51 e4       	ldi	r21, 0x41	; 65
    385e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	bc 01       	movw	r22, r24
    3868:	cd 01       	movw	r24, r26
    386a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	9e 83       	std	Y+6, r25	; 0x06
    3874:	8d 83       	std	Y+5, r24	; 0x05
    3876:	0f c0       	rjmp	.+30     	; 0x3896 <KP_ErrStateRead+0xf8>
    3878:	88 ec       	ldi	r24, 0xC8	; 200
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	9c 83       	std	Y+4, r25	; 0x04
    387e:	8b 83       	std	Y+3, r24	; 0x03
    3880:	8b 81       	ldd	r24, Y+3	; 0x03
    3882:	9c 81       	ldd	r25, Y+4	; 0x04
    3884:	01 97       	sbiw	r24, 0x01	; 1
    3886:	f1 f7       	brne	.-4      	; 0x3884 <KP_ErrStateRead+0xe6>
    3888:	9c 83       	std	Y+4, r25	; 0x04
    388a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    388c:	8d 81       	ldd	r24, Y+5	; 0x05
    388e:	9e 81       	ldd	r25, Y+6	; 0x06
    3890:	01 97       	sbiw	r24, 0x01	; 1
    3892:	9e 83       	std	Y+6, r25	; 0x06
    3894:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3896:	8d 81       	ldd	r24, Y+5	; 0x05
    3898:	9e 81       	ldd	r25, Y+6	; 0x06
    389a:	00 97       	sbiw	r24, 0x00	; 0
    389c:	69 f7       	brne	.-38     	; 0x3878 <KP_ErrStateRead+0xda>
    389e:	14 c0       	rjmp	.+40     	; 0x38c8 <KP_ErrStateRead+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a0:	6f 81       	ldd	r22, Y+7	; 0x07
    38a2:	78 85       	ldd	r23, Y+8	; 0x08
    38a4:	89 85       	ldd	r24, Y+9	; 0x09
    38a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ac:	dc 01       	movw	r26, r24
    38ae:	cb 01       	movw	r24, r22
    38b0:	9e 83       	std	Y+6, r25	; 0x06
    38b2:	8d 83       	std	Y+5, r24	; 0x05
    38b4:	8d 81       	ldd	r24, Y+5	; 0x05
    38b6:	9e 81       	ldd	r25, Y+6	; 0x06
    38b8:	9a 83       	std	Y+2, r25	; 0x02
    38ba:	89 83       	std	Y+1, r24	; 0x01
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	9a 81       	ldd	r25, Y+2	; 0x02
    38c0:	01 97       	sbiw	r24, 0x01	; 1
    38c2:	f1 f7       	brne	.-4      	; 0x38c0 <KP_ErrStateRead+0x122>
    38c4:	9a 83       	std	Y+2, r25	; 0x02
    38c6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(30);
			if(ErrVal==DIO_OK&&ReadPin==0){
    38c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    38ca:	88 23       	and	r24, r24
    38cc:	59 f5       	brne	.+86     	; 0x3924 <KP_ErrStateRead+0x186>
    38ce:	8a 89       	ldd	r24, Y+18	; 0x12
    38d0:	88 23       	and	r24, r24
    38d2:	41 f5       	brne	.+80     	; 0x3924 <KP_ErrStateRead+0x186>
				DIO_ErrStateSetPinDirection(PORT_D,PIN_0,DIO_OUT);
    38d4:	84 e4       	ldi	r24, 0x44	; 68
    38d6:	60 e0       	ldi	r22, 0x00	; 0
    38d8:	41 e0       	ldi	r20, 0x01	; 1
    38da:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
				DIO_ErrStateSetPinValue(PORT_D,PIN_0,DIO_HIGH);
    38de:	84 e4       	ldi	r24, 0x44	; 68
    38e0:	60 e0       	ldi	r22, 0x00	; 0
    38e2:	41 e0       	ldi	r20, 0x01	; 1
    38e4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
				DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_HIGH);
    38e8:	83 e4       	ldi	r24, 0x43	; 67
    38ea:	69 89       	ldd	r22, Y+17	; 0x11
    38ec:	41 e0       	ldi	r20, 0x01	; 1
    38ee:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
				//_delay_ms(30);
				*ReadValue =KP_Arr[ROW][COL-4];
    38f2:	89 89       	ldd	r24, Y+17	; 0x11
    38f4:	48 2f       	mov	r20, r24
    38f6:	50 e0       	ldi	r21, 0x00	; 0
    38f8:	88 89       	ldd	r24, Y+16	; 0x10
    38fa:	88 2f       	mov	r24, r24
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	9c 01       	movw	r18, r24
    3900:	24 50       	subi	r18, 0x04	; 4
    3902:	30 40       	sbci	r19, 0x00	; 0
    3904:	ca 01       	movw	r24, r20
    3906:	88 0f       	add	r24, r24
    3908:	99 1f       	adc	r25, r25
    390a:	88 0f       	add	r24, r24
    390c:	99 1f       	adc	r25, r25
    390e:	82 0f       	add	r24, r18
    3910:	93 1f       	adc	r25, r19
    3912:	fc 01       	movw	r30, r24
    3914:	e4 58       	subi	r30, 0x84	; 132
    3916:	ff 4f       	sbci	r31, 0xFF	; 255
    3918:	80 81       	ld	r24, Z
    391a:	ef 89       	ldd	r30, Y+23	; 0x17
    391c:	f8 8d       	ldd	r31, Y+24	; 0x18
    391e:	80 83       	st	Z, r24
				return OK;
    3920:	19 8e       	std	Y+25, r1	; 0x19
    3922:	15 c0       	rjmp	.+42     	; 0x394e <KP_ErrStateRead+0x1b0>
	u8 ErrVal;
	//_delay_ms(100);
	for(ROW=0;ROW<4;ROW++){
		DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_LOW);

		for(COL=4;COL<8;COL++){
    3924:	88 89       	ldd	r24, Y+16	; 0x10
    3926:	8f 5f       	subi	r24, 0xFF	; 255
    3928:	88 8b       	std	Y+16, r24	; 0x10
    392a:	88 89       	ldd	r24, Y+16	; 0x10
    392c:	88 30       	cpi	r24, 0x08	; 8
    392e:	08 f4       	brcc	.+2      	; 0x3932 <KP_ErrStateRead+0x194>
    3930:	50 cf       	rjmp	.-352    	; 0x37d2 <KP_ErrStateRead+0x34>
				//_delay_ms(30);
				*ReadValue =KP_Arr[ROW][COL-4];
				return OK;
			}
		}
		DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_HIGH);
    3932:	83 e4       	ldi	r24, 0x43	; 67
    3934:	69 89       	ldd	r22, Y+17	; 0x11
    3936:	41 e0       	ldi	r20, 0x01	; 1
    3938:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
}
KP_ErrState	KP_ErrStateRead(KeypadRow_PORT_PIN *KP_RPP_INFO,KeypadCol_PORT_PIN *KP_CPP_INFO,u8 *ReadValue){
	u8 ROW,COL,ReadPin;
	u8 ErrVal;
	//_delay_ms(100);
	for(ROW=0;ROW<4;ROW++){
    393c:	89 89       	ldd	r24, Y+17	; 0x11
    393e:	8f 5f       	subi	r24, 0xFF	; 255
    3940:	89 8b       	std	Y+17, r24	; 0x11
    3942:	89 89       	ldd	r24, Y+17	; 0x11
    3944:	84 30       	cpi	r24, 0x04	; 4
    3946:	08 f4       	brcc	.+2      	; 0x394a <KP_ErrStateRead+0x1ac>
    3948:	3c cf       	rjmp	.-392    	; 0x37c2 <KP_ErrStateRead+0x24>
				return OK;
			}
		}
		DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_HIGH);
	}
	return Error;
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	89 8f       	std	Y+25, r24	; 0x19
    394e:	89 8d       	ldd	r24, Y+25	; 0x19
	//Flag=0;
}
    3950:	69 96       	adiw	r28, 0x19	; 25
    3952:	0f b6       	in	r0, 0x3f	; 63
    3954:	f8 94       	cli
    3956:	de bf       	out	0x3e, r29	; 62
    3958:	0f be       	out	0x3f, r0	; 63
    395a:	cd bf       	out	0x3d, r28	; 61
    395c:	cf 91       	pop	r28
    395e:	df 91       	pop	r29
    3960:	08 95       	ret

00003962 <main>:
	PIN_Number COL_PIN3  ;
	PORT_Name COL_PORT4 ;
	PIN_Number COL_PIN4  ;
}KeypadCol_PORT_PIN;
 */
void main(){
    3962:	df 93       	push	r29
    3964:	cf 93       	push	r28
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
    396a:	a8 97       	sbiw	r28, 0x28	; 40
    396c:	0f b6       	in	r0, 0x3f	; 63
    396e:	f8 94       	cli
    3970:	de bf       	out	0x3e, r29	; 62
    3972:	0f be       	out	0x3f, r0	; 63
    3974:	cd bf       	out	0x3d, r28	; 61
	DIO_ErrStateSetPinDirection(PORT_A,PIN_0,DIO_OUT);
    3976:	81 e4       	ldi	r24, 0x41	; 65
    3978:	60 e0       	ldi	r22, 0x00	; 0
    397a:	41 e0       	ldi	r20, 0x01	; 1
    397c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
	//DIO_ErrStateSetPinValue(PORT_A,0,DIO_LOW);
	LCD_Info lcd={PORT_B,PIN_0,PORT_B,PIN_1,PORT_B,PIN_2,PORT_A};
    3980:	ce 01       	movw	r24, r28
    3982:	02 96       	adiw	r24, 0x02	; 2
    3984:	9b 8f       	std	Y+27, r25	; 0x1b
    3986:	8a 8f       	std	Y+26, r24	; 0x1a
    3988:	ec e9       	ldi	r30, 0x9C	; 156
    398a:	f0 e0       	ldi	r31, 0x00	; 0
    398c:	fd 8f       	std	Y+29, r31	; 0x1d
    398e:	ec 8f       	std	Y+28, r30	; 0x1c
    3990:	f7 e0       	ldi	r31, 0x07	; 7
    3992:	fe 8f       	std	Y+30, r31	; 0x1e
    3994:	ec 8d       	ldd	r30, Y+28	; 0x1c
    3996:	fd 8d       	ldd	r31, Y+29	; 0x1d
    3998:	00 80       	ld	r0, Z
    399a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    399c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    399e:	01 96       	adiw	r24, 0x01	; 1
    39a0:	9d 8f       	std	Y+29, r25	; 0x1d
    39a2:	8c 8f       	std	Y+28, r24	; 0x1c
    39a4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    39a6:	fb 8d       	ldd	r31, Y+27	; 0x1b
    39a8:	00 82       	st	Z, r0
    39aa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    39ac:	9b 8d       	ldd	r25, Y+27	; 0x1b
    39ae:	01 96       	adiw	r24, 0x01	; 1
    39b0:	9b 8f       	std	Y+27, r25	; 0x1b
    39b2:	8a 8f       	std	Y+26, r24	; 0x1a
    39b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39b6:	91 50       	subi	r25, 0x01	; 1
    39b8:	9e 8f       	std	Y+30, r25	; 0x1e
    39ba:	ee 8d       	ldd	r30, Y+30	; 0x1e
    39bc:	ee 23       	and	r30, r30
    39be:	51 f7       	brne	.-44     	; 0x3994 <main+0x32>
	KeypadRow_PORT_PIN row={PORT_C,PIN_0,PORT_C,PIN_1,PORT_C,PIN_2,PORT_C,PIN_3};
    39c0:	ce 01       	movw	r24, r28
    39c2:	09 96       	adiw	r24, 0x09	; 9
    39c4:	98 a3       	std	Y+32, r25	; 0x20
    39c6:	8f 8f       	std	Y+31, r24	; 0x1f
    39c8:	e4 e9       	ldi	r30, 0x94	; 148
    39ca:	f0 e0       	ldi	r31, 0x00	; 0
    39cc:	fa a3       	std	Y+34, r31	; 0x22
    39ce:	e9 a3       	std	Y+33, r30	; 0x21
    39d0:	f8 e0       	ldi	r31, 0x08	; 8
    39d2:	fb a3       	std	Y+35, r31	; 0x23
    39d4:	e9 a1       	ldd	r30, Y+33	; 0x21
    39d6:	fa a1       	ldd	r31, Y+34	; 0x22
    39d8:	00 80       	ld	r0, Z
    39da:	89 a1       	ldd	r24, Y+33	; 0x21
    39dc:	9a a1       	ldd	r25, Y+34	; 0x22
    39de:	01 96       	adiw	r24, 0x01	; 1
    39e0:	9a a3       	std	Y+34, r25	; 0x22
    39e2:	89 a3       	std	Y+33, r24	; 0x21
    39e4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    39e6:	f8 a1       	ldd	r31, Y+32	; 0x20
    39e8:	00 82       	st	Z, r0
    39ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39ec:	98 a1       	ldd	r25, Y+32	; 0x20
    39ee:	01 96       	adiw	r24, 0x01	; 1
    39f0:	98 a3       	std	Y+32, r25	; 0x20
    39f2:	8f 8f       	std	Y+31, r24	; 0x1f
    39f4:	9b a1       	ldd	r25, Y+35	; 0x23
    39f6:	91 50       	subi	r25, 0x01	; 1
    39f8:	9b a3       	std	Y+35, r25	; 0x23
    39fa:	eb a1       	ldd	r30, Y+35	; 0x23
    39fc:	ee 23       	and	r30, r30
    39fe:	51 f7       	brne	.-44     	; 0x39d4 <main+0x72>
	KeypadCol_PORT_PIN col={PORT_C,PIN_4,PORT_C,PIN_5,PORT_C,PIN_6,PORT_C,PIN_7};
    3a00:	ce 01       	movw	r24, r28
    3a02:	41 96       	adiw	r24, 0x11	; 17
    3a04:	9d a3       	std	Y+37, r25	; 0x25
    3a06:	8c a3       	std	Y+36, r24	; 0x24
    3a08:	ec e8       	ldi	r30, 0x8C	; 140
    3a0a:	f0 e0       	ldi	r31, 0x00	; 0
    3a0c:	ff a3       	std	Y+39, r31	; 0x27
    3a0e:	ee a3       	std	Y+38, r30	; 0x26
    3a10:	f8 e0       	ldi	r31, 0x08	; 8
    3a12:	f8 a7       	std	Y+40, r31	; 0x28
    3a14:	ee a1       	ldd	r30, Y+38	; 0x26
    3a16:	ff a1       	ldd	r31, Y+39	; 0x27
    3a18:	00 80       	ld	r0, Z
    3a1a:	8e a1       	ldd	r24, Y+38	; 0x26
    3a1c:	9f a1       	ldd	r25, Y+39	; 0x27
    3a1e:	01 96       	adiw	r24, 0x01	; 1
    3a20:	9f a3       	std	Y+39, r25	; 0x27
    3a22:	8e a3       	std	Y+38, r24	; 0x26
    3a24:	ec a1       	ldd	r30, Y+36	; 0x24
    3a26:	fd a1       	ldd	r31, Y+37	; 0x25
    3a28:	00 82       	st	Z, r0
    3a2a:	8c a1       	ldd	r24, Y+36	; 0x24
    3a2c:	9d a1       	ldd	r25, Y+37	; 0x25
    3a2e:	01 96       	adiw	r24, 0x01	; 1
    3a30:	9d a3       	std	Y+37, r25	; 0x25
    3a32:	8c a3       	std	Y+36, r24	; 0x24
    3a34:	98 a5       	ldd	r25, Y+40	; 0x28
    3a36:	91 50       	subi	r25, 0x01	; 1
    3a38:	98 a7       	std	Y+40, r25	; 0x28
    3a3a:	e8 a5       	ldd	r30, Y+40	; 0x28
    3a3c:	ee 23       	and	r30, r30
    3a3e:	51 f7       	brne	.-44     	; 0x3a14 <main+0xb2>
		u8 x;
		u8 read;
		LCD_VoidInit(&lcd);
    3a40:	ce 01       	movw	r24, r28
    3a42:	02 96       	adiw	r24, 0x02	; 2
    3a44:	0e 94 2f 18 	call	0x305e	; 0x305e <LCD_VoidInit>
		KP_ErrStateInit(&row,&col);
    3a48:	ce 01       	movw	r24, r28
    3a4a:	09 96       	adiw	r24, 0x09	; 9
    3a4c:	9e 01       	movw	r18, r28
    3a4e:	2f 5e       	subi	r18, 0xEF	; 239
    3a50:	3f 4f       	sbci	r19, 0xFF	; 255
    3a52:	b9 01       	movw	r22, r18
    3a54:	0e 94 3e 1b 	call	0x367c	; 0x367c <KP_ErrStateInit>
	Time_0_Init();
    3a58:	0e 94 a3 05 	call	0xb46	; 0xb46 <Time_0_Init>
	while(1){
		read=KP_ErrStateRead(&row,&col,&x);
    3a5c:	ce 01       	movw	r24, r28
    3a5e:	09 96       	adiw	r24, 0x09	; 9
    3a60:	9e 01       	movw	r18, r28
    3a62:	2f 5e       	subi	r18, 0xEF	; 239
    3a64:	3f 4f       	sbci	r19, 0xFF	; 255
    3a66:	ae 01       	movw	r20, r28
    3a68:	47 5e       	subi	r20, 0xE7	; 231
    3a6a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a6c:	b9 01       	movw	r22, r18
    3a6e:	0e 94 cf 1b 	call	0x379e	; 0x379e <KP_ErrStateRead>
    3a72:	89 83       	std	Y+1, r24	; 0x01
		if(read == OK)
    3a74:	89 81       	ldd	r24, Y+1	; 0x01
    3a76:	88 23       	and	r24, r24
    3a78:	89 f7       	brne	.-30     	; 0x3a5c <main+0xfa>
		LCD_VoidSendChar(x,&lcd);
    3a7a:	89 8d       	ldd	r24, Y+25	; 0x19
    3a7c:	9e 01       	movw	r18, r28
    3a7e:	2e 5f       	subi	r18, 0xFE	; 254
    3a80:	3f 4f       	sbci	r19, 0xFF	; 255
    3a82:	b9 01       	movw	r22, r18
    3a84:	0e 94 41 13 	call	0x2682	; 0x2682 <LCD_VoidSendChar>
    3a88:	e9 cf       	rjmp	.-46     	; 0x3a5c <main+0xfa>

00003a8a <__udivmodsi4>:
    3a8a:	a1 e2       	ldi	r26, 0x21	; 33
    3a8c:	1a 2e       	mov	r1, r26
    3a8e:	aa 1b       	sub	r26, r26
    3a90:	bb 1b       	sub	r27, r27
    3a92:	fd 01       	movw	r30, r26
    3a94:	0d c0       	rjmp	.+26     	; 0x3ab0 <__udivmodsi4_ep>

00003a96 <__udivmodsi4_loop>:
    3a96:	aa 1f       	adc	r26, r26
    3a98:	bb 1f       	adc	r27, r27
    3a9a:	ee 1f       	adc	r30, r30
    3a9c:	ff 1f       	adc	r31, r31
    3a9e:	a2 17       	cp	r26, r18
    3aa0:	b3 07       	cpc	r27, r19
    3aa2:	e4 07       	cpc	r30, r20
    3aa4:	f5 07       	cpc	r31, r21
    3aa6:	20 f0       	brcs	.+8      	; 0x3ab0 <__udivmodsi4_ep>
    3aa8:	a2 1b       	sub	r26, r18
    3aaa:	b3 0b       	sbc	r27, r19
    3aac:	e4 0b       	sbc	r30, r20
    3aae:	f5 0b       	sbc	r31, r21

00003ab0 <__udivmodsi4_ep>:
    3ab0:	66 1f       	adc	r22, r22
    3ab2:	77 1f       	adc	r23, r23
    3ab4:	88 1f       	adc	r24, r24
    3ab6:	99 1f       	adc	r25, r25
    3ab8:	1a 94       	dec	r1
    3aba:	69 f7       	brne	.-38     	; 0x3a96 <__udivmodsi4_loop>
    3abc:	60 95       	com	r22
    3abe:	70 95       	com	r23
    3ac0:	80 95       	com	r24
    3ac2:	90 95       	com	r25
    3ac4:	9b 01       	movw	r18, r22
    3ac6:	ac 01       	movw	r20, r24
    3ac8:	bd 01       	movw	r22, r26
    3aca:	cf 01       	movw	r24, r30
    3acc:	08 95       	ret

00003ace <__prologue_saves__>:
    3ace:	2f 92       	push	r2
    3ad0:	3f 92       	push	r3
    3ad2:	4f 92       	push	r4
    3ad4:	5f 92       	push	r5
    3ad6:	6f 92       	push	r6
    3ad8:	7f 92       	push	r7
    3ada:	8f 92       	push	r8
    3adc:	9f 92       	push	r9
    3ade:	af 92       	push	r10
    3ae0:	bf 92       	push	r11
    3ae2:	cf 92       	push	r12
    3ae4:	df 92       	push	r13
    3ae6:	ef 92       	push	r14
    3ae8:	ff 92       	push	r15
    3aea:	0f 93       	push	r16
    3aec:	1f 93       	push	r17
    3aee:	cf 93       	push	r28
    3af0:	df 93       	push	r29
    3af2:	cd b7       	in	r28, 0x3d	; 61
    3af4:	de b7       	in	r29, 0x3e	; 62
    3af6:	ca 1b       	sub	r28, r26
    3af8:	db 0b       	sbc	r29, r27
    3afa:	0f b6       	in	r0, 0x3f	; 63
    3afc:	f8 94       	cli
    3afe:	de bf       	out	0x3e, r29	; 62
    3b00:	0f be       	out	0x3f, r0	; 63
    3b02:	cd bf       	out	0x3d, r28	; 61
    3b04:	09 94       	ijmp

00003b06 <__epilogue_restores__>:
    3b06:	2a 88       	ldd	r2, Y+18	; 0x12
    3b08:	39 88       	ldd	r3, Y+17	; 0x11
    3b0a:	48 88       	ldd	r4, Y+16	; 0x10
    3b0c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b0e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b10:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b12:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b14:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b16:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b18:	b9 84       	ldd	r11, Y+9	; 0x09
    3b1a:	c8 84       	ldd	r12, Y+8	; 0x08
    3b1c:	df 80       	ldd	r13, Y+7	; 0x07
    3b1e:	ee 80       	ldd	r14, Y+6	; 0x06
    3b20:	fd 80       	ldd	r15, Y+5	; 0x05
    3b22:	0c 81       	ldd	r16, Y+4	; 0x04
    3b24:	1b 81       	ldd	r17, Y+3	; 0x03
    3b26:	aa 81       	ldd	r26, Y+2	; 0x02
    3b28:	b9 81       	ldd	r27, Y+1	; 0x01
    3b2a:	ce 0f       	add	r28, r30
    3b2c:	d1 1d       	adc	r29, r1
    3b2e:	0f b6       	in	r0, 0x3f	; 63
    3b30:	f8 94       	cli
    3b32:	de bf       	out	0x3e, r29	; 62
    3b34:	0f be       	out	0x3f, r0	; 63
    3b36:	cd bf       	out	0x3d, r28	; 61
    3b38:	ed 01       	movw	r28, r26
    3b3a:	08 95       	ret

00003b3c <_exit>:
    3b3c:	f8 94       	cli

00003b3e <__stop_program>:
    3b3e:	ff cf       	rjmp	.-2      	; 0x3b3e <__stop_program>
