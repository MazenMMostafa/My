
Mar_29.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00003a44  00003ad8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800094  00800094  00003b0c  2**0
                  ALLOC
  3 .stab         00004e54  00000000  00000000  00003b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003c80  00000000  00000000  00008960  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000c720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c890  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000e4d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000f3c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00010174  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000102d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00010561  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010d2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__vector_1>
       8:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__vector_2>
       c:	0c 94 75 06 	jmp	0xcea	; 0xcea <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 03 1c 	call	0x3806	; 0x3806 <main>
      8a:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e9 1c 	jmp	0x39d2	; 0x39d2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e9 1c 	jmp	0x39d2	; 0x39d2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 15 1d 	jmp	0x3a2a	; 0x3a2a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Time_0_Init>:
//u32 Desired;
/*void CallBackTimer0(void(*Timer0)(void)){
	VoidNormalTimer0=Timer0;
}*/

void Time_0_Init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
	SET_BIT(TIMSK,0);
     b5c:	a9 e5       	ldi	r26, 0x59	; 89
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e9 e5       	ldi	r30, 0x59	; 89
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	81 60       	ori	r24, 0x01	; 1
     b68:	8c 93       	st	X, r24
	//CLEAR_BIT(TCCR0,7);
	//SET_BIT(TCCR0,1);
	SET_BIT(TCCR0,6);
     b6a:	a3 e5       	ldi	r26, 0x53	; 83
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e3 e5       	ldi	r30, 0x53	; 83
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 64       	ori	r24, 0x40	; 64
     b76:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 60       	ori	r24, 0x08	; 8
     b84:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 62       	ori	r24, 0x20	; 32
     b92:	8c 93       	st	X, r24
	//CLEAR_BIT(TCCR0,5);
}
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <__vector_11>:
void __vector_11 (void)  __attribute__((signal));
void __vector_11 (void)
{
     b9a:	1f 92       	push	r1
     b9c:	0f 92       	push	r0
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	0f 92       	push	r0
     ba2:	11 24       	eor	r1, r1
     ba4:	8f 93       	push	r24
     ba6:	9f 93       	push	r25
     ba8:	af 93       	push	r26
     baa:	bf 93       	push	r27
     bac:	ef 93       	push	r30
     bae:	ff 93       	push	r31
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
	SWCounts = 1/ TOF;
	//t=(SWCounts - (u32)SWCounts);
//	Preload = 256-(t*256);
	*///if(VoidNormalTimer0!=Null){

	count++;
     bb8:	80 91 94 00 	lds	r24, 0x0094
     bbc:	90 91 95 00 	lds	r25, 0x0095
     bc0:	a0 91 96 00 	lds	r26, 0x0096
     bc4:	b0 91 97 00 	lds	r27, 0x0097
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	a1 1d       	adc	r26, r1
     bcc:	b1 1d       	adc	r27, r1
     bce:	80 93 94 00 	sts	0x0094, r24
     bd2:	90 93 95 00 	sts	0x0095, r25
     bd6:	a0 93 96 00 	sts	0x0096, r26
     bda:	b0 93 97 00 	sts	0x0097, r27
	OCR0=125;
     bde:	ec e5       	ldi	r30, 0x5C	; 92
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	8d e7       	ldi	r24, 0x7D	; 125
     be4:	80 83       	st	Z, r24
		if(count == 0)
     be6:	80 91 94 00 	lds	r24, 0x0094
     bea:	90 91 95 00 	lds	r25, 0x0095
     bee:	a0 91 96 00 	lds	r26, 0x0096
     bf2:	b0 91 97 00 	lds	r27, 0x0097
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	a1 05       	cpc	r26, r1
     bfa:	b1 05       	cpc	r27, r1
     bfc:	49 f4       	brne	.+18     	; 0xc10 <__vector_11+0x76>
		{	TOGGLE_BIT(PORTA_ITI,0);
     bfe:	ab e3       	ldi	r26, 0x3B	; 59
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	eb e3       	ldi	r30, 0x3B	; 59
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	90 81       	ld	r25, Z
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	89 27       	eor	r24, r25
     c0c:	8c 93       	st	X, r24
     c0e:	2b c0       	rjmp	.+86     	; 0xc66 <__vector_11+0xcc>
			//SET CALL BACK FUNCTION
			//count = 0;
			//TCNT0 = 90;

		}
		else if(count == 10)
     c10:	80 91 94 00 	lds	r24, 0x0094
     c14:	90 91 95 00 	lds	r25, 0x0095
     c18:	a0 91 96 00 	lds	r26, 0x0096
     c1c:	b0 91 97 00 	lds	r27, 0x0097
     c20:	8a 30       	cpi	r24, 0x0A	; 10
     c22:	91 05       	cpc	r25, r1
     c24:	a1 05       	cpc	r26, r1
     c26:	b1 05       	cpc	r27, r1
     c28:	49 f4       	brne	.+18     	; 0xc3c <__vector_11+0xa2>
		{	TOGGLE_BIT(PORTA_ITI,0);
     c2a:	ab e3       	ldi	r26, 0x3B	; 59
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	eb e3       	ldi	r30, 0x3B	; 59
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	90 81       	ld	r25, Z
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	89 27       	eor	r24, r25
     c38:	8c 93       	st	X, r24
     c3a:	15 c0       	rjmp	.+42     	; 0xc66 <__vector_11+0xcc>
			//SET CALL BACK FUNCTION
			//TCNT0 = 90;

		}
		else if(count==20){
     c3c:	80 91 94 00 	lds	r24, 0x0094
     c40:	90 91 95 00 	lds	r25, 0x0095
     c44:	a0 91 96 00 	lds	r26, 0x0096
     c48:	b0 91 97 00 	lds	r27, 0x0097
     c4c:	84 31       	cpi	r24, 0x14	; 20
     c4e:	91 05       	cpc	r25, r1
     c50:	a1 05       	cpc	r26, r1
     c52:	b1 05       	cpc	r27, r1
     c54:	41 f4       	brne	.+16     	; 0xc66 <__vector_11+0xcc>
			count=0;
     c56:	10 92 94 00 	sts	0x0094, r1
     c5a:	10 92 95 00 	sts	0x0095, r1
     c5e:	10 92 96 00 	sts	0x0096, r1
     c62:	10 92 97 00 	sts	0x0097, r1
		}

}
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	ff 91       	pop	r31
     c6c:	ef 91       	pop	r30
     c6e:	bf 91       	pop	r27
     c70:	af 91       	pop	r26
     c72:	9f 91       	pop	r25
     c74:	8f 91       	pop	r24
     c76:	0f 90       	pop	r0
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	0f 90       	pop	r0
     c7c:	1f 90       	pop	r1
     c7e:	18 95       	reti

00000c80 <INT2_VoidSETINT2>:
 *      Author: Mazen
 */
#include "EXTINT2_Interface.h"
void (*INT2_CallbackAddress)(void)=Null;

void INT2_VoidSETINT2(void){
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
EnableGlobalInterrupt();
     c88:	0e 94 da 07 	call	0xfb4	; 0xfb4 <EnableGlobalInterrupt>
ENABLEINT2_GICR_Reg;
     c8c:	ab e5       	ldi	r26, 0x5B	; 91
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	eb e5       	ldi	r30, 0x5B	; 91
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	80 62       	ori	r24, 0x20	; 32
     c98:	8c 93       	st	X, r24
ENABLEINT2_FALLING_EDGE;
     c9a:	a4 e5       	ldi	r26, 0x54	; 84
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e4 e5       	ldi	r30, 0x54	; 84
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	80 64       	ori	r24, 0x40	; 64
     ca6:	8c 93       	st	X, r24
}
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <INT2_SetCallBack>:
INT2_Err INT2_SetCallBack(void (*INT2CB)(void)){
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <INT2_SetCallBack+0x6>
     cb4:	0f 92       	push	r0
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	9a 83       	std	Y+2, r25	; 0x02
     cbc:	89 83       	std	Y+1, r24	; 0x01
	if(INT2CB!=Null){
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	49 f0       	breq	.+18     	; 0xcd8 <INT2_SetCallBack+0x2a>
	INT2CB=INT2_CallbackAddress;
     cc6:	80 91 98 00 	lds	r24, 0x0098
     cca:	90 91 99 00 	lds	r25, 0x0099
     cce:	9a 83       	std	Y+2, r25	; 0x02
     cd0:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		return INT2_PTR_NULL;
	}
	return INT2_PTR_OK;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	8b 83       	std	Y+3, r24	; 0x03
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <INT2_SetCallBack+0x2e>
	if(INT2CB!=Null){
	INT2CB=INT2_CallbackAddress;
	}
	else
	{
		return INT2_PTR_NULL;
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	8b 83       	std	Y+3, r24	; 0x03
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return INT2_PTR_OK;
}
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void){
     cea:	1f 92       	push	r1
     cec:	0f 92       	push	r0
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	0f 92       	push	r0
     cf2:	11 24       	eor	r1, r1
     cf4:	2f 93       	push	r18
     cf6:	3f 93       	push	r19
     cf8:	4f 93       	push	r20
     cfa:	5f 93       	push	r21
     cfc:	6f 93       	push	r22
     cfe:	7f 93       	push	r23
     d00:	8f 93       	push	r24
     d02:	9f 93       	push	r25
     d04:	af 93       	push	r26
     d06:	bf 93       	push	r27
     d08:	ef 93       	push	r30
     d0a:	ff 93       	push	r31
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
if(INT2_CallbackAddress!=Null){
     d14:	80 91 98 00 	lds	r24, 0x0098
     d18:	90 91 99 00 	lds	r25, 0x0099
     d1c:	00 97       	sbiw	r24, 0x00	; 0
     d1e:	29 f0       	breq	.+10     	; 0xd2a <__vector_3+0x40>
	INT2_CallbackAddress();
     d20:	e0 91 98 00 	lds	r30, 0x0098
     d24:	f0 91 99 00 	lds	r31, 0x0099
     d28:	09 95       	icall
}
else{
//Nothing
}
}
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	ff 91       	pop	r31
     d30:	ef 91       	pop	r30
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	7f 91       	pop	r23
     d3c:	6f 91       	pop	r22
     d3e:	5f 91       	pop	r21
     d40:	4f 91       	pop	r20
     d42:	3f 91       	pop	r19
     d44:	2f 91       	pop	r18
     d46:	0f 90       	pop	r0
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	0f 90       	pop	r0
     d4c:	1f 90       	pop	r1
     d4e:	18 95       	reti

00000d50 <INT1_VoidSETINT1>:
 */
#include "EXTINT1_Interface.h"

void (*INT1_CallbackAddress)(void)=Null;

void INT1_VoidSETINT1(void){
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
	EnableGlobalInterrupt();
     d58:	0e 94 da 07 	call	0xfb4	; 0xfb4 <EnableGlobalInterrupt>
	ENABLEINT1_GICR_Reg;
     d5c:	ab e5       	ldi	r26, 0x5B	; 91
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	eb e5       	ldi	r30, 0x5B	; 91
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	80 68       	ori	r24, 0x80	; 128
     d68:	8c 93       	st	X, r24
#if CaseINT1==INT1_LowLevel
	ENABLEINT1_LOW_LEVEL;
     d6a:	a5 e5       	ldi	r26, 0x55	; 85
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e5 e5       	ldi	r30, 0x55	; 85
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8b 7f       	andi	r24, 0xFB	; 251
     d76:	8c 93       	st	X, r24
     d78:	a5 e5       	ldi	r26, 0x55	; 85
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e5 e5       	ldi	r30, 0x55	; 85
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	87 7f       	andi	r24, 0xF7	; 247
     d84:	8c 93       	st	X, r24
#endif
#if CaseINT1==INT0_AnyLogicalChange
	ENABLEINT1_ANY_LOGIC;
     d86:	a5 e5       	ldi	r26, 0x55	; 85
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e5 e5       	ldi	r30, 0x55	; 85
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	84 60       	ori	r24, 0x04	; 4
     d92:	8c 93       	st	X, r24
     d94:	a5 e5       	ldi	r26, 0x55	; 85
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e5 e5       	ldi	r30, 0x55	; 85
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	87 7f       	andi	r24, 0xF7	; 247
     da0:	8c 93       	st	X, r24
#endif
#if CaseINT1 ==INT1_FallingEdge
	ENABLEINT1_FALLING_EDGE;
     da2:	a5 e5       	ldi	r26, 0x55	; 85
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e5 e5       	ldi	r30, 0x55	; 85
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	8b 7f       	andi	r24, 0xFB	; 251
     dae:	8c 93       	st	X, r24
     db0:	a5 e5       	ldi	r26, 0x55	; 85
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e5 e5       	ldi	r30, 0x55	; 85
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	88 60       	ori	r24, 0x08	; 8
     dbc:	8c 93       	st	X, r24
#endif
#if CaseINT1==INT1_RisingEdge
	ENABLEINT1_RISING_EDGE;
     dbe:	a5 e5       	ldi	r26, 0x55	; 85
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e5 e5       	ldi	r30, 0x55	; 85
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	84 60       	ori	r24, 0x04	; 4
     dca:	8c 93       	st	X, r24
     dcc:	a5 e5       	ldi	r26, 0x55	; 85
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e5 e5       	ldi	r30, 0x55	; 85
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	88 60       	ori	r24, 0x08	; 8
     dd8:	8c 93       	st	X, r24
#endif
}
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <INT1_SetCallBack>:

INT1_Err INT1_SetCallBack(void (*INT1CB)(void)){
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	00 d0       	rcall	.+0      	; 0xde6 <INT1_SetCallBack+0x6>
     de6:	0f 92       	push	r0
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	9a 83       	std	Y+2, r25	; 0x02
     dee:	89 83       	std	Y+1, r24	; 0x01
	if(INT1CB!=Null){
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	9a 81       	ldd	r25, Y+2	; 0x02
     df4:	00 97       	sbiw	r24, 0x00	; 0
     df6:	49 f0       	breq	.+18     	; 0xe0a <INT1_SetCallBack+0x2a>
	INT1CB=INT1_CallbackAddress;
     df8:	80 91 9a 00 	lds	r24, 0x009A
     dfc:	90 91 9b 00 	lds	r25, 0x009B
     e00:	9a 83       	std	Y+2, r25	; 0x02
     e02:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
		return INT1_PTR_NULL;
	}
	return INT1_PTR_OK;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	8b 83       	std	Y+3, r24	; 0x03
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <INT1_SetCallBack+0x2e>
INT1_Err INT1_SetCallBack(void (*INT1CB)(void)){
	if(INT1CB!=Null){
	INT1CB=INT1_CallbackAddress;
	}
	else{
		return INT1_PTR_NULL;
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	8b 83       	std	Y+3, r24	; 0x03
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return INT1_PTR_OK;

}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <__vector_2>:

void __vector_2 (void) __attribute__((signal));
void __vector_2(void){
     e1c:	1f 92       	push	r1
     e1e:	0f 92       	push	r0
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	0f 92       	push	r0
     e24:	11 24       	eor	r1, r1
     e26:	2f 93       	push	r18
     e28:	3f 93       	push	r19
     e2a:	4f 93       	push	r20
     e2c:	5f 93       	push	r21
     e2e:	6f 93       	push	r22
     e30:	7f 93       	push	r23
     e32:	8f 93       	push	r24
     e34:	9f 93       	push	r25
     e36:	af 93       	push	r26
     e38:	bf 93       	push	r27
     e3a:	ef 93       	push	r30
     e3c:	ff 93       	push	r31
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
	if(INT1_CallbackAddress!=Null){
     e46:	80 91 9a 00 	lds	r24, 0x009A
     e4a:	90 91 9b 00 	lds	r25, 0x009B
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	29 f0       	breq	.+10     	; 0xe5c <__vector_2+0x40>
		INT1_CallbackAddress();
     e52:	e0 91 9a 00 	lds	r30, 0x009A
     e56:	f0 91 9b 00 	lds	r31, 0x009B
     e5a:	09 95       	icall
	}
	else{
		//Do Nothing
	}
}
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	ff 91       	pop	r31
     e62:	ef 91       	pop	r30
     e64:	bf 91       	pop	r27
     e66:	af 91       	pop	r26
     e68:	9f 91       	pop	r25
     e6a:	8f 91       	pop	r24
     e6c:	7f 91       	pop	r23
     e6e:	6f 91       	pop	r22
     e70:	5f 91       	pop	r21
     e72:	4f 91       	pop	r20
     e74:	3f 91       	pop	r19
     e76:	2f 91       	pop	r18
     e78:	0f 90       	pop	r0
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	0f 90       	pop	r0
     e7e:	1f 90       	pop	r1
     e80:	18 95       	reti

00000e82 <INT0_VoidSETINT0>:
 */

#include "EXTINT0_Interface.h"
void (*INT0_CallbackAddress)(void)=Null;

void INT0_VoidSETINT0(void){
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	EnableGlobalInterrupt();
     e8a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <EnableGlobalInterrupt>
	ENABLEINT0_GICR_Reg;
     e8e:	ab e5       	ldi	r26, 0x5B	; 91
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e5       	ldi	r30, 0x5B	; 91
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	80 64       	ori	r24, 0x40	; 64
     e9a:	8c 93       	st	X, r24
#if CaseINT0==INT0_LowLevel
	ENABLEINT0_LOW_LEVEL;
     e9c:	a5 e5       	ldi	r26, 0x55	; 85
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e5 e5       	ldi	r30, 0x55	; 85
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8e 7f       	andi	r24, 0xFE	; 254
     ea8:	8c 93       	st	X, r24
     eaa:	a5 e5       	ldi	r26, 0x55	; 85
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e5 e5       	ldi	r30, 0x55	; 85
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8d 7f       	andi	r24, 0xFD	; 253
     eb6:	8c 93       	st	X, r24
#endif
#if CaseINT0==INT0_AnyLogicalChange
	ENABLEINT0_ANY_LOGIC;
     eb8:	a5 e5       	ldi	r26, 0x55	; 85
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e5 e5       	ldi	r30, 0x55	; 85
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	81 60       	ori	r24, 0x01	; 1
     ec4:	8c 93       	st	X, r24
     ec6:	a5 e5       	ldi	r26, 0x55	; 85
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e5 e5       	ldi	r30, 0x55	; 85
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	8d 7f       	andi	r24, 0xFD	; 253
     ed2:	8c 93       	st	X, r24
#endif
#if CaseINT0 ==INT0_FallingEdge
	ENABLEINT0_FALLING_EDGE;
     ed4:	a5 e5       	ldi	r26, 0x55	; 85
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e5 e5       	ldi	r30, 0x55	; 85
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	8e 7f       	andi	r24, 0xFE	; 254
     ee0:	8c 93       	st	X, r24
     ee2:	a5 e5       	ldi	r26, 0x55	; 85
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e5 e5       	ldi	r30, 0x55	; 85
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	82 60       	ori	r24, 0x02	; 2
     eee:	8c 93       	st	X, r24
#endif
#if CaseINT0==INT0_RisingEdge
	ENABLEINT0_RISING_EDGE;
     ef0:	a5 e5       	ldi	r26, 0x55	; 85
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e5 e5       	ldi	r30, 0x55	; 85
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	81 60       	ori	r24, 0x01	; 1
     efc:	8c 93       	st	X, r24
     efe:	a5 e5       	ldi	r26, 0x55	; 85
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e5 e5       	ldi	r30, 0x55	; 85
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	82 60       	ori	r24, 0x02	; 2
     f0a:	8c 93       	st	X, r24
#endif
}
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <INT0_SetCallBack>:

INT0_Err INT0_SetCallBack(void (*INT0CB)(void)){
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	00 d0       	rcall	.+0      	; 0xf18 <INT0_SetCallBack+0x6>
     f18:	0f 92       	push	r0
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	9a 83       	std	Y+2, r25	; 0x02
     f20:	89 83       	std	Y+1, r24	; 0x01
if(INT0CB != Null){
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	9a 81       	ldd	r25, Y+2	; 0x02
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	49 f0       	breq	.+18     	; 0xf3c <INT0_SetCallBack+0x2a>
	INT0CB=INT0_CallbackAddress;
     f2a:	80 91 9c 00 	lds	r24, 0x009C
     f2e:	90 91 9d 00 	lds	r25, 0x009D
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
	}
else{
	return INT0_PTR_NULL;
}
return INT0_PTR_OK;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	8b 83       	std	Y+3, r24	; 0x03
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <INT0_SetCallBack+0x2e>
INT0_Err INT0_SetCallBack(void (*INT0CB)(void)){
if(INT0CB != Null){
	INT0CB=INT0_CallbackAddress;
	}
else{
	return INT0_PTR_NULL;
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	8b 83       	std	Y+3, r24	; 0x03
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
}
return INT0_PTR_OK;
}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <__vector_1>:

void __vector_1(void) __attribute__((signal));
void __vector_1(void){
     f4e:	1f 92       	push	r1
     f50:	0f 92       	push	r0
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	0f 92       	push	r0
     f56:	11 24       	eor	r1, r1
     f58:	2f 93       	push	r18
     f5a:	3f 93       	push	r19
     f5c:	4f 93       	push	r20
     f5e:	5f 93       	push	r21
     f60:	6f 93       	push	r22
     f62:	7f 93       	push	r23
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
     f68:	af 93       	push	r26
     f6a:	bf 93       	push	r27
     f6c:	ef 93       	push	r30
     f6e:	ff 93       	push	r31
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62

	if(INT0_CallbackAddress!=Null){
     f78:	80 91 9c 00 	lds	r24, 0x009C
     f7c:	90 91 9d 00 	lds	r25, 0x009D
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	29 f0       	breq	.+10     	; 0xf8e <__vector_1+0x40>
		INT0_CallbackAddress();
     f84:	e0 91 9c 00 	lds	r30, 0x009C
     f88:	f0 91 9d 00 	lds	r31, 0x009D
     f8c:	09 95       	icall
	}
	else{
		//nothing
	}
}
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	ff 91       	pop	r31
     f94:	ef 91       	pop	r30
     f96:	bf 91       	pop	r27
     f98:	af 91       	pop	r26
     f9a:	9f 91       	pop	r25
     f9c:	8f 91       	pop	r24
     f9e:	7f 91       	pop	r23
     fa0:	6f 91       	pop	r22
     fa2:	5f 91       	pop	r21
     fa4:	4f 91       	pop	r20
     fa6:	3f 91       	pop	r19
     fa8:	2f 91       	pop	r18
     faa:	0f 90       	pop	r0
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	0f 90       	pop	r0
     fb0:	1f 90       	pop	r1
     fb2:	18 95       	reti

00000fb4 <EnableGlobalInterrupt>:
 *
 *  Created on: Apr 4, 2023
 *      Author: Mazen
 */
#include "Global_Interrupt_Enable.h"
void EnableGlobalInterrupt(void){
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	ENABLEINT0_SREG;
     fbc:	af e5       	ldi	r26, 0x5F	; 95
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	ef e5       	ldi	r30, 0x5F	; 95
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	80 68       	ori	r24, 0x80	; 128
     fc8:	8c 93       	st	X, r24
}
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <DIO_ErrStateSetPinDirection>:
 *      Author: Mazen
 */

#include "DIO_Interface.h"

DIO_Err DIO_ErrStateSetPinDirection(PORT_Name port,PIN_Number pin,Direction direction){
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	28 97       	sbiw	r28, 0x08	; 8
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	89 83       	std	Y+1, r24	; 0x01
     fe6:	6a 83       	std	Y+2, r22	; 0x02
     fe8:	4b 83       	std	Y+3, r20	; 0x03
	if(pin>=0 && pin<=7)
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	88 30       	cpi	r24, 0x08	; 8
     fee:	08 f0       	brcs	.+2      	; 0xff2 <DIO_ErrStateSetPinDirection+0x22>
     ff0:	f8 c0       	rjmp	.+496    	; 0x11e2 <DIO_ErrStateSetPinDirection+0x212>
		{
			if(direction == DIO_OUT)
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	09 f0       	breq	.+2      	; 0xffa <DIO_ErrStateSetPinDirection+0x2a>
     ff8:	73 c0       	rjmp	.+230    	; 0x10e0 <DIO_ErrStateSetPinDirection+0x110>
			{
				switch(port)
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	38 87       	std	Y+8, r19	; 0x08
    1002:	2f 83       	std	Y+7, r18	; 0x07
    1004:	8f 81       	ldd	r24, Y+7	; 0x07
    1006:	98 85       	ldd	r25, Y+8	; 0x08
    1008:	82 34       	cpi	r24, 0x42	; 66
    100a:	91 05       	cpc	r25, r1
    100c:	51 f1       	breq	.+84     	; 0x1062 <DIO_ErrStateSetPinDirection+0x92>
    100e:	2f 81       	ldd	r18, Y+7	; 0x07
    1010:	38 85       	ldd	r19, Y+8	; 0x08
    1012:	23 34       	cpi	r18, 0x43	; 67
    1014:	31 05       	cpc	r19, r1
    1016:	34 f4       	brge	.+12     	; 0x1024 <DIO_ErrStateSetPinDirection+0x54>
    1018:	8f 81       	ldd	r24, Y+7	; 0x07
    101a:	98 85       	ldd	r25, Y+8	; 0x08
    101c:	81 34       	cpi	r24, 0x41	; 65
    101e:	91 05       	cpc	r25, r1
    1020:	61 f0       	breq	.+24     	; 0x103a <DIO_ErrStateSetPinDirection+0x6a>
    1022:	5b c0       	rjmp	.+182    	; 0x10da <DIO_ErrStateSetPinDirection+0x10a>
    1024:	2f 81       	ldd	r18, Y+7	; 0x07
    1026:	38 85       	ldd	r19, Y+8	; 0x08
    1028:	23 34       	cpi	r18, 0x43	; 67
    102a:	31 05       	cpc	r19, r1
    102c:	71 f1       	breq	.+92     	; 0x108a <DIO_ErrStateSetPinDirection+0xba>
    102e:	8f 81       	ldd	r24, Y+7	; 0x07
    1030:	98 85       	ldd	r25, Y+8	; 0x08
    1032:	84 34       	cpi	r24, 0x44	; 68
    1034:	91 05       	cpc	r25, r1
    1036:	e9 f1       	breq	.+122    	; 0x10b2 <DIO_ErrStateSetPinDirection+0xe2>
    1038:	50 c0       	rjmp	.+160    	; 0x10da <DIO_ErrStateSetPinDirection+0x10a>
				{
				case 'A': SET_BIT(DDRA_ITI,pin); break;
    103a:	aa e3       	ldi	r26, 0x3A	; 58
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	ea e3       	ldi	r30, 0x3A	; 58
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_ErrStateSetPinDirection+0x88>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_ErrStateSetPinDirection+0x84>
    105c:	84 2b       	or	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	be c0       	rjmp	.+380    	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				case 'B': SET_BIT(DDRB_ITI,pin); break;
    1062:	a7 e3       	ldi	r26, 0x37	; 55
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e7 e3       	ldi	r30, 0x37	; 55
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_ErrStateSetPinDirection+0xb0>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_ErrStateSetPinDirection+0xac>
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	aa c0       	rjmp	.+340    	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				case 'C': SET_BIT(DDRC_ITI,pin); break;
    108a:	a4 e3       	ldi	r26, 0x34	; 52
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e4 e3       	ldi	r30, 0x34	; 52
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <DIO_ErrStateSetPinDirection+0xd8>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <DIO_ErrStateSetPinDirection+0xd4>
    10ac:	84 2b       	or	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	96 c0       	rjmp	.+300    	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				case 'D': SET_BIT(DDRD_ITI,pin); break;
    10b2:	a1 e3       	ldi	r26, 0x31	; 49
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e1 e3       	ldi	r30, 0x31	; 49
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 2e       	mov	r0, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_ErrStateSetPinDirection+0x100>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_ErrStateSetPinDirection+0xfc>
    10d4:	84 2b       	or	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	82 c0       	rjmp	.+260    	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				default: return DIO_ERROR_PORT;
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	83 c0       	rjmp	.+262    	; 0x11e6 <DIO_ErrStateSetPinDirection+0x216>
				}

			}
			else if(direction == DIO_IN)
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	88 23       	and	r24, r24
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <DIO_ErrStateSetPinDirection+0x118>
    10e6:	78 c0       	rjmp	.+240    	; 0x11d8 <DIO_ErrStateSetPinDirection+0x208>
			{
				switch(port)
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	3d 83       	std	Y+5, r19	; 0x05
    10f0:	2c 83       	std	Y+4, r18	; 0x04
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	9d 81       	ldd	r25, Y+5	; 0x05
    10f6:	82 34       	cpi	r24, 0x42	; 66
    10f8:	91 05       	cpc	r25, r1
    10fa:	61 f1       	breq	.+88     	; 0x1154 <DIO_ErrStateSetPinDirection+0x184>
    10fc:	2c 81       	ldd	r18, Y+4	; 0x04
    10fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1100:	23 34       	cpi	r18, 0x43	; 67
    1102:	31 05       	cpc	r19, r1
    1104:	34 f4       	brge	.+12     	; 0x1112 <DIO_ErrStateSetPinDirection+0x142>
    1106:	8c 81       	ldd	r24, Y+4	; 0x04
    1108:	9d 81       	ldd	r25, Y+5	; 0x05
    110a:	81 34       	cpi	r24, 0x41	; 65
    110c:	91 05       	cpc	r25, r1
    110e:	69 f0       	breq	.+26     	; 0x112a <DIO_ErrStateSetPinDirection+0x15a>
    1110:	60 c0       	rjmp	.+192    	; 0x11d2 <DIO_ErrStateSetPinDirection+0x202>
    1112:	2c 81       	ldd	r18, Y+4	; 0x04
    1114:	3d 81       	ldd	r19, Y+5	; 0x05
    1116:	23 34       	cpi	r18, 0x43	; 67
    1118:	31 05       	cpc	r19, r1
    111a:	89 f1       	breq	.+98     	; 0x117e <DIO_ErrStateSetPinDirection+0x1ae>
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	9d 81       	ldd	r25, Y+5	; 0x05
    1120:	84 34       	cpi	r24, 0x44	; 68
    1122:	91 05       	cpc	r25, r1
    1124:	09 f4       	brne	.+2      	; 0x1128 <DIO_ErrStateSetPinDirection+0x158>
    1126:	40 c0       	rjmp	.+128    	; 0x11a8 <DIO_ErrStateSetPinDirection+0x1d8>
    1128:	54 c0       	rjmp	.+168    	; 0x11d2 <DIO_ErrStateSetPinDirection+0x202>
				{
				case 'A': CLEAR_BIT(DDRA_ITI,pin); break;
    112a:	aa e3       	ldi	r26, 0x3A	; 58
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	ea e3       	ldi	r30, 0x3A	; 58
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <DIO_ErrStateSetPinDirection+0x178>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <DIO_ErrStateSetPinDirection+0x174>
    114c:	80 95       	com	r24
    114e:	84 23       	and	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	45 c0       	rjmp	.+138    	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				case 'B': CLEAR_BIT(DDRB_ITI,pin); break;
    1154:	a7 e3       	ldi	r26, 0x37	; 55
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e7 e3       	ldi	r30, 0x37	; 55
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_ErrStateSetPinDirection+0x1a2>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_ErrStateSetPinDirection+0x19e>
    1176:	80 95       	com	r24
    1178:	84 23       	and	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	30 c0       	rjmp	.+96     	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				case 'C': CLEAR_BIT(DDRC_ITI,pin); break;
    117e:	a4 e3       	ldi	r26, 0x34	; 52
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e4 e3       	ldi	r30, 0x34	; 52
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_ErrStateSetPinDirection+0x1cc>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_ErrStateSetPinDirection+0x1c8>
    11a0:	80 95       	com	r24
    11a2:	84 23       	and	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	1b c0       	rjmp	.+54     	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				case 'D': CLEAR_BIT(DDRD_ITI,pin); break;
    11a8:	a1 e3       	ldi	r26, 0x31	; 49
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e1 e3       	ldi	r30, 0x31	; 49
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_ErrStateSetPinDirection+0x1f6>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_ErrStateSetPinDirection+0x1f2>
    11ca:	80 95       	com	r24
    11cc:	84 23       	and	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	06 c0       	rjmp	.+12     	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				default: return DIO_ERROR_PORT;				}
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	9e 83       	std	Y+6, r25	; 0x06
    11d6:	07 c0       	rjmp	.+14     	; 0x11e6 <DIO_ErrStateSetPinDirection+0x216>
			}
			else
				return DIO_ERROR_Direction;
    11d8:	23 e0       	ldi	r18, 0x03	; 3
    11da:	2e 83       	std	Y+6, r18	; 0x06
    11dc:	04 c0       	rjmp	.+8      	; 0x11e6 <DIO_ErrStateSetPinDirection+0x216>
		}
	else
		return DIO_ERROR_PIN;
	return DIO_OK;
    11de:	1e 82       	std	Y+6, r1	; 0x06
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <DIO_ErrStateSetPinDirection+0x216>
			}
			else
				return DIO_ERROR_Direction;
		}
	else
		return DIO_ERROR_PIN;
    11e2:	32 e0       	ldi	r19, 0x02	; 2
    11e4:	3e 83       	std	Y+6, r19	; 0x06
    11e6:	8e 81       	ldd	r24, Y+6	; 0x06
	return DIO_OK;
}
    11e8:	28 96       	adiw	r28, 0x08	; 8
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <DIO_ErrStateSetPinValue>:
DIO_Err DIO_ErrStateSetPinValue(PORT_Name port,PIN_Number pin,Volt val){
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	28 97       	sbiw	r28, 0x08	; 8
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	6a 83       	std	Y+2, r22	; 0x02
    1212:	4b 83       	std	Y+3, r20	; 0x03
	if(pin>=0 && pin<=7)
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	88 30       	cpi	r24, 0x08	; 8
    1218:	08 f0       	brcs	.+2      	; 0x121c <DIO_ErrStateSetPinValue+0x22>
    121a:	f8 c0       	rjmp	.+496    	; 0x140c <DIO_ErrStateSetPinValue+0x212>
			{
				if(val == DIO_HIGH)
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	09 f0       	breq	.+2      	; 0x1224 <DIO_ErrStateSetPinValue+0x2a>
    1222:	73 c0       	rjmp	.+230    	; 0x130a <DIO_ErrStateSetPinValue+0x110>
				{
					switch(port)
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	38 87       	std	Y+8, r19	; 0x08
    122c:	2f 83       	std	Y+7, r18	; 0x07
    122e:	8f 81       	ldd	r24, Y+7	; 0x07
    1230:	98 85       	ldd	r25, Y+8	; 0x08
    1232:	82 34       	cpi	r24, 0x42	; 66
    1234:	91 05       	cpc	r25, r1
    1236:	51 f1       	breq	.+84     	; 0x128c <DIO_ErrStateSetPinValue+0x92>
    1238:	2f 81       	ldd	r18, Y+7	; 0x07
    123a:	38 85       	ldd	r19, Y+8	; 0x08
    123c:	23 34       	cpi	r18, 0x43	; 67
    123e:	31 05       	cpc	r19, r1
    1240:	34 f4       	brge	.+12     	; 0x124e <DIO_ErrStateSetPinValue+0x54>
    1242:	8f 81       	ldd	r24, Y+7	; 0x07
    1244:	98 85       	ldd	r25, Y+8	; 0x08
    1246:	81 34       	cpi	r24, 0x41	; 65
    1248:	91 05       	cpc	r25, r1
    124a:	61 f0       	breq	.+24     	; 0x1264 <DIO_ErrStateSetPinValue+0x6a>
    124c:	5b c0       	rjmp	.+182    	; 0x1304 <DIO_ErrStateSetPinValue+0x10a>
    124e:	2f 81       	ldd	r18, Y+7	; 0x07
    1250:	38 85       	ldd	r19, Y+8	; 0x08
    1252:	23 34       	cpi	r18, 0x43	; 67
    1254:	31 05       	cpc	r19, r1
    1256:	71 f1       	breq	.+92     	; 0x12b4 <DIO_ErrStateSetPinValue+0xba>
    1258:	8f 81       	ldd	r24, Y+7	; 0x07
    125a:	98 85       	ldd	r25, Y+8	; 0x08
    125c:	84 34       	cpi	r24, 0x44	; 68
    125e:	91 05       	cpc	r25, r1
    1260:	e9 f1       	breq	.+122    	; 0x12dc <DIO_ErrStateSetPinValue+0xe2>
    1262:	50 c0       	rjmp	.+160    	; 0x1304 <DIO_ErrStateSetPinValue+0x10a>
					{
					case 'A': SET_BIT(PORTA_ITI,pin); break;
    1264:	ab e3       	ldi	r26, 0x3B	; 59
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	eb e3       	ldi	r30, 0x3B	; 59
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <DIO_ErrStateSetPinValue+0x88>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <DIO_ErrStateSetPinValue+0x84>
    1286:	84 2b       	or	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	be c0       	rjmp	.+380    	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					case 'B': SET_BIT(PORTB_ITI,pin); break;
    128c:	a8 e3       	ldi	r26, 0x38	; 56
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e8 e3       	ldi	r30, 0x38	; 56
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_ErrStateSetPinValue+0xb0>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_ErrStateSetPinValue+0xac>
    12ae:	84 2b       	or	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	aa c0       	rjmp	.+340    	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					case 'C': SET_BIT(PORTC_ITI,pin); break;
    12b4:	a5 e3       	ldi	r26, 0x35	; 53
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e5 e3       	ldi	r30, 0x35	; 53
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_ErrStateSetPinValue+0xd8>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_ErrStateSetPinValue+0xd4>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	96 c0       	rjmp	.+300    	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					case 'D': SET_BIT(PORTD_ITI,pin); break;
    12dc:	a2 e3       	ldi	r26, 0x32	; 50
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e2 e3       	ldi	r30, 0x32	; 50
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_ErrStateSetPinValue+0x100>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_ErrStateSetPinValue+0xfc>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	82 c0       	rjmp	.+260    	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					default: return DIO_ERROR_PORT;
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	9e 83       	std	Y+6, r25	; 0x06
    1308:	83 c0       	rjmp	.+262    	; 0x1410 <DIO_ErrStateSetPinValue+0x216>
					}
				}
				else if(val == DIO_LOW)
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	88 23       	and	r24, r24
    130e:	09 f0       	breq	.+2      	; 0x1312 <DIO_ErrStateSetPinValue+0x118>
    1310:	78 c0       	rjmp	.+240    	; 0x1402 <DIO_ErrStateSetPinValue+0x208>
				{
					switch(port)
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	3d 83       	std	Y+5, r19	; 0x05
    131a:	2c 83       	std	Y+4, r18	; 0x04
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	9d 81       	ldd	r25, Y+5	; 0x05
    1320:	82 34       	cpi	r24, 0x42	; 66
    1322:	91 05       	cpc	r25, r1
    1324:	61 f1       	breq	.+88     	; 0x137e <DIO_ErrStateSetPinValue+0x184>
    1326:	2c 81       	ldd	r18, Y+4	; 0x04
    1328:	3d 81       	ldd	r19, Y+5	; 0x05
    132a:	23 34       	cpi	r18, 0x43	; 67
    132c:	31 05       	cpc	r19, r1
    132e:	34 f4       	brge	.+12     	; 0x133c <DIO_ErrStateSetPinValue+0x142>
    1330:	8c 81       	ldd	r24, Y+4	; 0x04
    1332:	9d 81       	ldd	r25, Y+5	; 0x05
    1334:	81 34       	cpi	r24, 0x41	; 65
    1336:	91 05       	cpc	r25, r1
    1338:	69 f0       	breq	.+26     	; 0x1354 <DIO_ErrStateSetPinValue+0x15a>
    133a:	60 c0       	rjmp	.+192    	; 0x13fc <DIO_ErrStateSetPinValue+0x202>
    133c:	2c 81       	ldd	r18, Y+4	; 0x04
    133e:	3d 81       	ldd	r19, Y+5	; 0x05
    1340:	23 34       	cpi	r18, 0x43	; 67
    1342:	31 05       	cpc	r19, r1
    1344:	89 f1       	breq	.+98     	; 0x13a8 <DIO_ErrStateSetPinValue+0x1ae>
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	84 34       	cpi	r24, 0x44	; 68
    134c:	91 05       	cpc	r25, r1
    134e:	09 f4       	brne	.+2      	; 0x1352 <DIO_ErrStateSetPinValue+0x158>
    1350:	40 c0       	rjmp	.+128    	; 0x13d2 <DIO_ErrStateSetPinValue+0x1d8>
    1352:	54 c0       	rjmp	.+168    	; 0x13fc <DIO_ErrStateSetPinValue+0x202>
					{
					case 'A': CLEAR_BIT(PORTA_ITI,pin); break;
    1354:	ab e3       	ldi	r26, 0x3B	; 59
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	eb e3       	ldi	r30, 0x3B	; 59
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_ErrStateSetPinValue+0x178>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_ErrStateSetPinValue+0x174>
    1376:	80 95       	com	r24
    1378:	84 23       	and	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	45 c0       	rjmp	.+138    	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					case 'B': CLEAR_BIT(PORTB_ITI,pin); break;
    137e:	a8 e3       	ldi	r26, 0x38	; 56
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e8 e3       	ldi	r30, 0x38	; 56
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_ErrStateSetPinValue+0x1a2>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <DIO_ErrStateSetPinValue+0x19e>
    13a0:	80 95       	com	r24
    13a2:	84 23       	and	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	30 c0       	rjmp	.+96     	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					case 'C': CLEAR_BIT(PORTC_ITI,pin); break;
    13a8:	a5 e3       	ldi	r26, 0x35	; 53
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e5 e3       	ldi	r30, 0x35	; 53
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_ErrStateSetPinValue+0x1cc>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_ErrStateSetPinValue+0x1c8>
    13ca:	80 95       	com	r24
    13cc:	84 23       	and	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	1b c0       	rjmp	.+54     	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					case 'D': CLEAR_BIT(PORTD_ITI,pin); break;
    13d2:	a2 e3       	ldi	r26, 0x32	; 50
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e2 e3       	ldi	r30, 0x32	; 50
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_ErrStateSetPinValue+0x1f6>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_ErrStateSetPinValue+0x1f2>
    13f4:	80 95       	com	r24
    13f6:	84 23       	and	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	06 c0       	rjmp	.+12     	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					default: return DIO_ERROR_PORT;					}
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	9e 83       	std	Y+6, r25	; 0x06
    1400:	07 c0       	rjmp	.+14     	; 0x1410 <DIO_ErrStateSetPinValue+0x216>
				}
				else
					return DIO_ERROR_VALUE;
    1402:	24 e0       	ldi	r18, 0x04	; 4
    1404:	2e 83       	std	Y+6, r18	; 0x06
    1406:	04 c0       	rjmp	.+8      	; 0x1410 <DIO_ErrStateSetPinValue+0x216>
			}
		else
			return DIO_ERROR_PIN;
		return DIO_OK;
    1408:	1e 82       	std	Y+6, r1	; 0x06
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_ErrStateSetPinValue+0x216>
				}
				else
					return DIO_ERROR_VALUE;
			}
		else
			return DIO_ERROR_PIN;
    140c:	32 e0       	ldi	r19, 0x02	; 2
    140e:	3e 83       	std	Y+6, r19	; 0x06
    1410:	8e 81       	ldd	r24, Y+6	; 0x06
		return DIO_OK;
}
    1412:	28 96       	adiw	r28, 0x08	; 8
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <DIO_ErrStateReadPinValue>:
DIO_Err DIO_ErrStateReadPinValue(PORT_Name port,PIN_Number pin,u8 *value){
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	27 97       	sbiw	r28, 0x07	; 7
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	6a 83       	std	Y+2, r22	; 0x02
    143c:	5c 83       	std	Y+4, r21	; 0x04
    143e:	4b 83       	std	Y+3, r20	; 0x03
	if(pin>=0 && pin<=7)
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	88 30       	cpi	r24, 0x08	; 8
    1444:	08 f0       	brcs	.+2      	; 0x1448 <DIO_ErrStateReadPinValue+0x24>
    1446:	76 c0       	rjmp	.+236    	; 0x1534 <DIO_ErrStateReadPinValue+0x110>
				{
						switch(port)
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	3f 83       	std	Y+7, r19	; 0x07
    1450:	2e 83       	std	Y+6, r18	; 0x06
    1452:	4e 81       	ldd	r20, Y+6	; 0x06
    1454:	5f 81       	ldd	r21, Y+7	; 0x07
    1456:	42 34       	cpi	r20, 0x42	; 66
    1458:	51 05       	cpc	r21, r1
    145a:	59 f1       	breq	.+86     	; 0x14b2 <DIO_ErrStateReadPinValue+0x8e>
    145c:	8e 81       	ldd	r24, Y+6	; 0x06
    145e:	9f 81       	ldd	r25, Y+7	; 0x07
    1460:	83 34       	cpi	r24, 0x43	; 67
    1462:	91 05       	cpc	r25, r1
    1464:	34 f4       	brge	.+12     	; 0x1472 <DIO_ErrStateReadPinValue+0x4e>
    1466:	2e 81       	ldd	r18, Y+6	; 0x06
    1468:	3f 81       	ldd	r19, Y+7	; 0x07
    146a:	21 34       	cpi	r18, 0x41	; 65
    146c:	31 05       	cpc	r19, r1
    146e:	69 f0       	breq	.+26     	; 0x148a <DIO_ErrStateReadPinValue+0x66>
    1470:	5c c0       	rjmp	.+184    	; 0x152a <DIO_ErrStateReadPinValue+0x106>
    1472:	4e 81       	ldd	r20, Y+6	; 0x06
    1474:	5f 81       	ldd	r21, Y+7	; 0x07
    1476:	43 34       	cpi	r20, 0x43	; 67
    1478:	51 05       	cpc	r21, r1
    147a:	79 f1       	breq	.+94     	; 0x14da <DIO_ErrStateReadPinValue+0xb6>
    147c:	8e 81       	ldd	r24, Y+6	; 0x06
    147e:	9f 81       	ldd	r25, Y+7	; 0x07
    1480:	84 34       	cpi	r24, 0x44	; 68
    1482:	91 05       	cpc	r25, r1
    1484:	09 f4       	brne	.+2      	; 0x1488 <DIO_ErrStateReadPinValue+0x64>
    1486:	3d c0       	rjmp	.+122    	; 0x1502 <DIO_ErrStateReadPinValue+0xde>
    1488:	50 c0       	rjmp	.+160    	; 0x152a <DIO_ErrStateReadPinValue+0x106>
						{
						case 'A':*value= GET_BIT(PINA_ITI,pin); break;
    148a:	e9 e3       	ldi	r30, 0x39	; 57
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	88 2f       	mov	r24, r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	a9 01       	movw	r20, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_ErrStateReadPinValue+0x7e>
    149e:	55 95       	asr	r21
    14a0:	47 95       	ror	r20
    14a2:	8a 95       	dec	r24
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_ErrStateReadPinValue+0x7a>
    14a6:	ca 01       	movw	r24, r20
    14a8:	81 70       	andi	r24, 0x01	; 1
    14aa:	eb 81       	ldd	r30, Y+3	; 0x03
    14ac:	fc 81       	ldd	r31, Y+4	; 0x04
    14ae:	80 83       	st	Z, r24
    14b0:	3f c0       	rjmp	.+126    	; 0x1530 <DIO_ErrStateReadPinValue+0x10c>
						case 'B':*value= GET_BIT(PINB_ITI,pin); break;
    14b2:	e6 e3       	ldi	r30, 0x36	; 54
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	a9 01       	movw	r20, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <DIO_ErrStateReadPinValue+0xa6>
    14c6:	55 95       	asr	r21
    14c8:	47 95       	ror	r20
    14ca:	8a 95       	dec	r24
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <DIO_ErrStateReadPinValue+0xa2>
    14ce:	ca 01       	movw	r24, r20
    14d0:	81 70       	andi	r24, 0x01	; 1
    14d2:	eb 81       	ldd	r30, Y+3	; 0x03
    14d4:	fc 81       	ldd	r31, Y+4	; 0x04
    14d6:	80 83       	st	Z, r24
    14d8:	2b c0       	rjmp	.+86     	; 0x1530 <DIO_ErrStateReadPinValue+0x10c>
						case 'C':*value= GET_BIT(PINC_ITI,pin); break;
    14da:	e3 e3       	ldi	r30, 0x33	; 51
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	88 2f       	mov	r24, r24
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	a9 01       	movw	r20, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <DIO_ErrStateReadPinValue+0xce>
    14ee:	55 95       	asr	r21
    14f0:	47 95       	ror	r20
    14f2:	8a 95       	dec	r24
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <DIO_ErrStateReadPinValue+0xca>
    14f6:	ca 01       	movw	r24, r20
    14f8:	81 70       	andi	r24, 0x01	; 1
    14fa:	eb 81       	ldd	r30, Y+3	; 0x03
    14fc:	fc 81       	ldd	r31, Y+4	; 0x04
    14fe:	80 83       	st	Z, r24
    1500:	17 c0       	rjmp	.+46     	; 0x1530 <DIO_ErrStateReadPinValue+0x10c>
						case 'D':*value= GET_BIT(PIND_ITI,pin); break;
    1502:	e0 e3       	ldi	r30, 0x30	; 48
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a9 01       	movw	r20, r18
    1514:	02 c0       	rjmp	.+4      	; 0x151a <DIO_ErrStateReadPinValue+0xf6>
    1516:	55 95       	asr	r21
    1518:	47 95       	ror	r20
    151a:	8a 95       	dec	r24
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <DIO_ErrStateReadPinValue+0xf2>
    151e:	ca 01       	movw	r24, r20
    1520:	81 70       	andi	r24, 0x01	; 1
    1522:	eb 81       	ldd	r30, Y+3	; 0x03
    1524:	fc 81       	ldd	r31, Y+4	; 0x04
    1526:	80 83       	st	Z, r24
    1528:	03 c0       	rjmp	.+6      	; 0x1530 <DIO_ErrStateReadPinValue+0x10c>
						default: return DIO_ERROR_PORT;
    152a:	51 e0       	ldi	r21, 0x01	; 1
    152c:	5d 83       	std	Y+5, r21	; 0x05
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <DIO_ErrStateReadPinValue+0x114>
						}

				}
			else
				return DIO_ERROR_PIN;
			return DIO_OK;
    1530:	1d 82       	std	Y+5, r1	; 0x05
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <DIO_ErrStateReadPinValue+0x114>
						default: return DIO_ERROR_PORT;
						}

				}
			else
				return DIO_ERROR_PIN;
    1534:	82 e0       	ldi	r24, 0x02	; 2
    1536:	8d 83       	std	Y+5, r24	; 0x05
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
			return DIO_OK;
}
    153a:	27 96       	adiw	r28, 0x07	; 7
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	de bf       	out	0x3e, r29	; 62
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	cd bf       	out	0x3d, r28	; 61
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <DIO_ErrStateSetGroupDirection>:

DIO_Err  DIO_ErrStateSetGroupDirection(PORT_Name port ,Direction direction)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	00 d0       	rcall	.+0      	; 0x1552 <DIO_ErrStateSetGroupDirection+0x6>
    1552:	00 d0       	rcall	.+0      	; 0x1554 <DIO_ErrStateSetGroupDirection+0x8>
    1554:	0f 92       	push	r0
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	89 83       	std	Y+1, r24	; 0x01
    155c:	6a 83       	std	Y+2, r22	; 0x02
	if (direction <= 0xff && direction>=0x00)
	{
		switch(port)
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	3d 83       	std	Y+5, r19	; 0x05
    1566:	2c 83       	std	Y+4, r18	; 0x04
    1568:	8c 81       	ldd	r24, Y+4	; 0x04
    156a:	9d 81       	ldd	r25, Y+5	; 0x05
    156c:	82 34       	cpi	r24, 0x42	; 66
    156e:	91 05       	cpc	r25, r1
    1570:	d9 f0       	breq	.+54     	; 0x15a8 <DIO_ErrStateSetGroupDirection+0x5c>
    1572:	2c 81       	ldd	r18, Y+4	; 0x04
    1574:	3d 81       	ldd	r19, Y+5	; 0x05
    1576:	23 34       	cpi	r18, 0x43	; 67
    1578:	31 05       	cpc	r19, r1
    157a:	34 f4       	brge	.+12     	; 0x1588 <DIO_ErrStateSetGroupDirection+0x3c>
    157c:	8c 81       	ldd	r24, Y+4	; 0x04
    157e:	9d 81       	ldd	r25, Y+5	; 0x05
    1580:	81 34       	cpi	r24, 0x41	; 65
    1582:	91 05       	cpc	r25, r1
    1584:	61 f0       	breq	.+24     	; 0x159e <DIO_ErrStateSetGroupDirection+0x52>
    1586:	1f c0       	rjmp	.+62     	; 0x15c6 <DIO_ErrStateSetGroupDirection+0x7a>
    1588:	2c 81       	ldd	r18, Y+4	; 0x04
    158a:	3d 81       	ldd	r19, Y+5	; 0x05
    158c:	23 34       	cpi	r18, 0x43	; 67
    158e:	31 05       	cpc	r19, r1
    1590:	81 f0       	breq	.+32     	; 0x15b2 <DIO_ErrStateSetGroupDirection+0x66>
    1592:	8c 81       	ldd	r24, Y+4	; 0x04
    1594:	9d 81       	ldd	r25, Y+5	; 0x05
    1596:	84 34       	cpi	r24, 0x44	; 68
    1598:	91 05       	cpc	r25, r1
    159a:	81 f0       	breq	.+32     	; 0x15bc <DIO_ErrStateSetGroupDirection+0x70>
    159c:	14 c0       	rjmp	.+40     	; 0x15c6 <DIO_ErrStateSetGroupDirection+0x7a>
		{
		case 'A': DDRA_ITI =   direction ;break ;
    159e:	ea e3       	ldi	r30, 0x3A	; 58
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	80 83       	st	Z, r24
    15a6:	12 c0       	rjmp	.+36     	; 0x15cc <DIO_ErrStateSetGroupDirection+0x80>
		case 'B': DDRB_ITI =   direction ;break ;
    15a8:	e7 e3       	ldi	r30, 0x37	; 55
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	80 83       	st	Z, r24
    15b0:	0d c0       	rjmp	.+26     	; 0x15cc <DIO_ErrStateSetGroupDirection+0x80>
		case 'C': DDRC_ITI =   direction ;break ;
    15b2:	e4 e3       	ldi	r30, 0x34	; 52
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	80 83       	st	Z, r24
    15ba:	08 c0       	rjmp	.+16     	; 0x15cc <DIO_ErrStateSetGroupDirection+0x80>
		case 'D': DDRD_ITI =   direction ;break ;
    15bc:	e1 e3       	ldi	r30, 0x31	; 49
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	80 83       	st	Z, r24
    15c4:	03 c0       	rjmp	.+6      	; 0x15cc <DIO_ErrStateSetGroupDirection+0x80>
		default :
			return DIO_ERROR_PORT ;
    15c6:	91 e0       	ldi	r25, 0x01	; 1
    15c8:	9b 83       	std	Y+3, r25	; 0x03
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <DIO_ErrStateSetGroupDirection+0x82>
		}
		return DIO_OK ;
    15cc:	1b 82       	std	Y+3, r1	; 0x03
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	else
	{
		return DIO_ERROR_Direction;
	}
}
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <DIO_ErrStateSetPortValue>:
DIO_Err  DIO_ErrStateSetPortValue(PORT_Name port,Volt val)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <DIO_ErrStateSetPortValue+0x6>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <DIO_ErrStateSetPortValue+0x8>
    15e8:	0f 92       	push	r0
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	6a 83       	std	Y+2, r22	; 0x02
	if (val <= 0xff && val>=0x00)
	{
		switch(port)
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	3d 83       	std	Y+5, r19	; 0x05
    15fa:	2c 83       	std	Y+4, r18	; 0x04
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1600:	82 34       	cpi	r24, 0x42	; 66
    1602:	91 05       	cpc	r25, r1
    1604:	d9 f0       	breq	.+54     	; 0x163c <DIO_ErrStateSetPortValue+0x5c>
    1606:	2c 81       	ldd	r18, Y+4	; 0x04
    1608:	3d 81       	ldd	r19, Y+5	; 0x05
    160a:	23 34       	cpi	r18, 0x43	; 67
    160c:	31 05       	cpc	r19, r1
    160e:	34 f4       	brge	.+12     	; 0x161c <DIO_ErrStateSetPortValue+0x3c>
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	9d 81       	ldd	r25, Y+5	; 0x05
    1614:	81 34       	cpi	r24, 0x41	; 65
    1616:	91 05       	cpc	r25, r1
    1618:	61 f0       	breq	.+24     	; 0x1632 <DIO_ErrStateSetPortValue+0x52>
    161a:	1f c0       	rjmp	.+62     	; 0x165a <DIO_ErrStateSetPortValue+0x7a>
    161c:	2c 81       	ldd	r18, Y+4	; 0x04
    161e:	3d 81       	ldd	r19, Y+5	; 0x05
    1620:	23 34       	cpi	r18, 0x43	; 67
    1622:	31 05       	cpc	r19, r1
    1624:	81 f0       	breq	.+32     	; 0x1646 <DIO_ErrStateSetPortValue+0x66>
    1626:	8c 81       	ldd	r24, Y+4	; 0x04
    1628:	9d 81       	ldd	r25, Y+5	; 0x05
    162a:	84 34       	cpi	r24, 0x44	; 68
    162c:	91 05       	cpc	r25, r1
    162e:	81 f0       	breq	.+32     	; 0x1650 <DIO_ErrStateSetPortValue+0x70>
    1630:	14 c0       	rjmp	.+40     	; 0x165a <DIO_ErrStateSetPortValue+0x7a>
		{
		case 'A':  PORTA_ITI =  val ;break ;
    1632:	eb e3       	ldi	r30, 0x3B	; 59
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	80 83       	st	Z, r24
    163a:	12 c0       	rjmp	.+36     	; 0x1660 <DIO_ErrStateSetPortValue+0x80>
		case 'B':  PORTB_ITI =  val ;break ;
    163c:	e8 e3       	ldi	r30, 0x38	; 56
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	80 83       	st	Z, r24
    1644:	0d c0       	rjmp	.+26     	; 0x1660 <DIO_ErrStateSetPortValue+0x80>
		case 'C':  PORTC_ITI =  val ;break ;
    1646:	e5 e3       	ldi	r30, 0x35	; 53
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	80 83       	st	Z, r24
    164e:	08 c0       	rjmp	.+16     	; 0x1660 <DIO_ErrStateSetPortValue+0x80>
		case 'D':  PORTD_ITI =  val ;break ;
    1650:	e2 e3       	ldi	r30, 0x32	; 50
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	80 83       	st	Z, r24
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <DIO_ErrStateSetPortValue+0x80>
		default :
			return DIO_ERROR_PORT ;
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	9b 83       	std	Y+3, r25	; 0x03
    165e:	01 c0       	rjmp	.+2      	; 0x1662 <DIO_ErrStateSetPortValue+0x82>
		}
		return DIO_OK ;
    1660:	1b 82       	std	Y+3, r1	; 0x03
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
	else
	{
		return DIO_ERROR_VALUE;
	}

}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <DIO_ErrStateReadGroupValue>:
DIO_Err  DIO_ErrStateReadGroupValue(PORT_Name port ,u8 *value)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <DIO_ErrStateReadGroupValue+0x6>
    167a:	00 d0       	rcall	.+0      	; 0x167c <DIO_ErrStateReadGroupValue+0x8>
    167c:	00 d0       	rcall	.+0      	; 0x167e <DIO_ErrStateReadGroupValue+0xa>
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	7b 83       	std	Y+3, r23	; 0x03
    1686:	6a 83       	std	Y+2, r22	; 0x02
	if(value!=Null)
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	9b 81       	ldd	r25, Y+3	; 0x03
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	09 f4       	brne	.+2      	; 0x1692 <DIO_ErrStateReadGroupValue+0x1e>
    1690:	41 c0       	rjmp	.+130    	; 0x1714 <DIO_ErrStateReadGroupValue+0xa0>
	{
		switch(port)
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	3e 83       	std	Y+6, r19	; 0x06
    169a:	2d 83       	std	Y+5, r18	; 0x05
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
    169e:	9e 81       	ldd	r25, Y+6	; 0x06
    16a0:	82 34       	cpi	r24, 0x42	; 66
    16a2:	91 05       	cpc	r25, r1
    16a4:	e9 f0       	breq	.+58     	; 0x16e0 <DIO_ErrStateReadGroupValue+0x6c>
    16a6:	2d 81       	ldd	r18, Y+5	; 0x05
    16a8:	3e 81       	ldd	r19, Y+6	; 0x06
    16aa:	23 34       	cpi	r18, 0x43	; 67
    16ac:	31 05       	cpc	r19, r1
    16ae:	34 f4       	brge	.+12     	; 0x16bc <DIO_ErrStateReadGroupValue+0x48>
    16b0:	8d 81       	ldd	r24, Y+5	; 0x05
    16b2:	9e 81       	ldd	r25, Y+6	; 0x06
    16b4:	81 34       	cpi	r24, 0x41	; 65
    16b6:	91 05       	cpc	r25, r1
    16b8:	61 f0       	breq	.+24     	; 0x16d2 <DIO_ErrStateReadGroupValue+0x5e>
    16ba:	27 c0       	rjmp	.+78     	; 0x170a <DIO_ErrStateReadGroupValue+0x96>
    16bc:	2d 81       	ldd	r18, Y+5	; 0x05
    16be:	3e 81       	ldd	r19, Y+6	; 0x06
    16c0:	23 34       	cpi	r18, 0x43	; 67
    16c2:	31 05       	cpc	r19, r1
    16c4:	a1 f0       	breq	.+40     	; 0x16ee <DIO_ErrStateReadGroupValue+0x7a>
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ca:	84 34       	cpi	r24, 0x44	; 68
    16cc:	91 05       	cpc	r25, r1
    16ce:	b1 f0       	breq	.+44     	; 0x16fc <DIO_ErrStateReadGroupValue+0x88>
    16d0:	1c c0       	rjmp	.+56     	; 0x170a <DIO_ErrStateReadGroupValue+0x96>
		{
		case 'A':  *value = PINA_ITI ; break ;
    16d2:	e9 e3       	ldi	r30, 0x39	; 57
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	ea 81       	ldd	r30, Y+2	; 0x02
    16da:	fb 81       	ldd	r31, Y+3	; 0x03
    16dc:	80 83       	st	Z, r24
    16de:	18 c0       	rjmp	.+48     	; 0x1710 <DIO_ErrStateReadGroupValue+0x9c>
		case 'B':  *value = PINB_ITI ; break ;
    16e0:	e6 e3       	ldi	r30, 0x36	; 54
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	ea 81       	ldd	r30, Y+2	; 0x02
    16e8:	fb 81       	ldd	r31, Y+3	; 0x03
    16ea:	80 83       	st	Z, r24
    16ec:	11 c0       	rjmp	.+34     	; 0x1710 <DIO_ErrStateReadGroupValue+0x9c>
		case 'C':  *value = PINC_ITI ; break ;
    16ee:	e3 e3       	ldi	r30, 0x33	; 51
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	ea 81       	ldd	r30, Y+2	; 0x02
    16f6:	fb 81       	ldd	r31, Y+3	; 0x03
    16f8:	80 83       	st	Z, r24
    16fa:	0a c0       	rjmp	.+20     	; 0x1710 <DIO_ErrStateReadGroupValue+0x9c>
		case 'D':  *value = PIND_ITI ; break ;
    16fc:	e0 e3       	ldi	r30, 0x30	; 48
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	ea 81       	ldd	r30, Y+2	; 0x02
    1704:	fb 81       	ldd	r31, Y+3	; 0x03
    1706:	80 83       	st	Z, r24
    1708:	03 c0       	rjmp	.+6      	; 0x1710 <DIO_ErrStateReadGroupValue+0x9c>
		default :
			return DIO_ERROR_PORT ;
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	9c 83       	std	Y+4, r25	; 0x04
    170e:	04 c0       	rjmp	.+8      	; 0x1718 <DIO_ErrStateReadGroupValue+0xa4>
		}
		return DIO_OK ;
    1710:	1c 82       	std	Y+4, r1	; 0x04
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <DIO_ErrStateReadGroupValue+0xa4>
	}
	else
	{
		return AddressError;
    1714:	25 e0       	ldi	r18, 0x05	; 5
    1716:	2c 83       	std	Y+4, r18	; 0x04
    1718:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    171a:	26 96       	adiw	r28, 0x06	; 6
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <ADC_ErrStateInit>:
 *      Author: Mazen
 */

#include "ADC_Interface.h"

void ADC_ErrStateInit(void){
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62

	//AVCC With External Cap
	CLEAR_BIT(ADMUX_Reg,REFS0);
    1734:	a7 e2       	ldi	r26, 0x27	; 39
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e7 e2       	ldi	r30, 0x27	; 39
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	8f 7b       	andi	r24, 0xBF	; 191
    1740:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX_Reg,REFS1);
    1742:	a7 e2       	ldi	r26, 0x27	; 39
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e7 e2       	ldi	r30, 0x27	; 39
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	8f 77       	andi	r24, 0x7F	; 127
    174e:	8c 93       	st	X, r24

	//Left Adjust
	SET_BIT(ADMUX_Reg,ADLAR);
    1750:	a7 e2       	ldi	r26, 0x27	; 39
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e7 e2       	ldi	r30, 0x27	; 39
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	80 62       	ori	r24, 0x20	; 32
    175c:	8c 93       	st	X, r24

	ADCSRA_Reg&=ADC_PRESC_MASK;
    175e:	a6 e2       	ldi	r26, 0x26	; 38
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e6 e2       	ldi	r30, 0x26	; 38
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	88 7f       	andi	r24, 0xF8	; 248
    176a:	8c 93       	st	X, r24
	//Setting Prescale in Config file
	ADCSRA_Reg|=PRESC;
    176c:	a6 e2       	ldi	r26, 0x26	; 38
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e6 e2       	ldi	r30, 0x26	; 38
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	82 60       	ori	r24, 0x02	; 2
    1778:	8c 93       	st	X, r24
	//Enable
	SET_BIT(ADCSRA_Reg,ADEN);
    177a:	a6 e2       	ldi	r26, 0x26	; 38
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e6 e2       	ldi	r30, 0x26	; 38
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	80 68       	ori	r24, 0x80	; 128
    1786:	8c 93       	st	X, r24
}
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <ADC_ErrStateReadValue>:
u8 ADC_ErrStateReadValue(u8 PIN){
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	0f 92       	push	r0
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	89 83       	std	Y+1, r24	; 0x01
ADMUX_Reg&=0b11100000;
    179a:	a7 e2       	ldi	r26, 0x27	; 39
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e7 e2       	ldi	r30, 0x27	; 39
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	80 7e       	andi	r24, 0xE0	; 224
    17a6:	8c 93       	st	X, r24
ADMUX_Reg|=PIN;
    17a8:	a7 e2       	ldi	r26, 0x27	; 39
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e7 e2       	ldi	r30, 0x27	; 39
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	90 81       	ld	r25, Z
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	89 2b       	or	r24, r25
    17b6:	8c 93       	st	X, r24
SET_BIT(ADCSRA_Reg,ADSC);
    17b8:	a6 e2       	ldi	r26, 0x26	; 38
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e6 e2       	ldi	r30, 0x26	; 38
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	80 64       	ori	r24, 0x40	; 64
    17c4:	8c 93       	st	X, r24
while((GET_BIT(ADCSRA_Reg,ADIF))==0);
    17c6:	e6 e2       	ldi	r30, 0x26	; 38
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	82 95       	swap	r24
    17ce:	8f 70       	andi	r24, 0x0F	; 15
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	81 70       	andi	r24, 0x01	; 1
    17d6:	90 70       	andi	r25, 0x00	; 0
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	a9 f3       	breq	.-22     	; 0x17c6 <ADC_ErrStateReadValue+0x38>
SET_BIT(ADCSRA_Reg,ADIF);
    17dc:	a6 e2       	ldi	r26, 0x26	; 38
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e6 e2       	ldi	r30, 0x26	; 38
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	80 61       	ori	r24, 0x10	; 16
    17e8:	8c 93       	st	X, r24
return ADCH_Reg;
    17ea:	e5 e2       	ldi	r30, 0x25	; 37
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
}
    17f0:	0f 90       	pop	r0
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <SW_SwitchErrStateGetState>:
 *  Created on: Mar 24, 2023
 *      Author: hisha
 */

#include "Switch_Interface.h"
SwitchErrState  SW_SwitchErrStateGetState(Switch_Info * Switch ,u8 * Result){
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	29 97       	sbiw	r28, 0x09	; 9
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	9d 83       	std	Y+5, r25	; 0x05
    180e:	8c 83       	std	Y+4, r24	; 0x04
    1810:	7f 83       	std	Y+7, r23	; 0x07
    1812:	6e 83       	std	Y+6, r22	; 0x06
	u8 read_val;
	Result=&read_val;
    1814:	ce 01       	movw	r24, r28
    1816:	03 96       	adiw	r24, 0x03	; 3
    1818:	9f 83       	std	Y+7, r25	; 0x07
    181a:	8e 83       	std	Y+6, r24	; 0x06
	u8 Switch_ErrDirectionReturn;
	u8 Switch_ErrValueReturn;
	if(Switch->ConnectionType==InternalPullUp){
    181c:	ec 81       	ldd	r30, Y+4	; 0x04
    181e:	fd 81       	ldd	r31, Y+5	; 0x05
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	88 23       	and	r24, r24
    1824:	d1 f5       	brne	.+116    	; 0x189a <SW_SwitchErrStateGetState+0xa2>
		Switch_ErrDirectionReturn=DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_IN);
    1826:	ec 81       	ldd	r30, Y+4	; 0x04
    1828:	fd 81       	ldd	r31, Y+5	; 0x05
    182a:	80 81       	ld	r24, Z
    182c:	ec 81       	ldd	r30, Y+4	; 0x04
    182e:	fd 81       	ldd	r31, Y+5	; 0x05
    1830:	91 81       	ldd	r25, Z+1	; 0x01
    1832:	69 2f       	mov	r22, r25
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    183a:	8a 83       	std	Y+2, r24	; 0x02
		if(Switch_ErrDirectionReturn==DIO_ERROR_PORT||Switch_ErrDirectionReturn==DIO_ERROR_Direction||Switch_ErrDirectionReturn==DIO_ERROR_PIN){
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	31 f0       	breq	.+12     	; 0x184e <SW_SwitchErrStateGetState+0x56>
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	83 30       	cpi	r24, 0x03	; 3
    1846:	19 f0       	breq	.+6      	; 0x184e <SW_SwitchErrStateGetState+0x56>
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	82 30       	cpi	r24, 0x02	; 2
    184c:	11 f4       	brne	.+4      	; 0x1852 <SW_SwitchErrStateGetState+0x5a>
			return Switch_Init_Error;
    184e:	18 86       	std	Y+8, r1	; 0x08
    1850:	79 c0       	rjmp	.+242    	; 0x1944 <SW_SwitchErrStateGetState+0x14c>
		}
		else{
			DIO_ErrStateSetPinValue(Switch->SW_Group,Switch->SW_Pin,DIO_HIGH);
    1852:	ec 81       	ldd	r30, Y+4	; 0x04
    1854:	fd 81       	ldd	r31, Y+5	; 0x05
    1856:	80 81       	ld	r24, Z
    1858:	ec 81       	ldd	r30, Y+4	; 0x04
    185a:	fd 81       	ldd	r31, Y+5	; 0x05
    185c:	91 81       	ldd	r25, Z+1	; 0x01
    185e:	69 2f       	mov	r22, r25
    1860:	41 e0       	ldi	r20, 0x01	; 1
    1862:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
			Switch_ErrValueReturn=DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,&read_val);
    1866:	ec 81       	ldd	r30, Y+4	; 0x04
    1868:	fd 81       	ldd	r31, Y+5	; 0x05
    186a:	80 81       	ld	r24, Z
    186c:	ec 81       	ldd	r30, Y+4	; 0x04
    186e:	fd 81       	ldd	r31, Y+5	; 0x05
    1870:	91 81       	ldd	r25, Z+1	; 0x01
    1872:	9e 01       	movw	r18, r28
    1874:	2d 5f       	subi	r18, 0xFD	; 253
    1876:	3f 4f       	sbci	r19, 0xFF	; 255
    1878:	69 2f       	mov	r22, r25
    187a:	a9 01       	movw	r20, r18
    187c:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_ErrStateReadPinValue>
    1880:	89 83       	std	Y+1, r24	; 0x01
			if(Switch_ErrValueReturn==DIO_ERROR_PIN||Switch_ErrValueReturn==DIO_ERROR_PORT){
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	82 30       	cpi	r24, 0x02	; 2
    1886:	19 f0       	breq	.+6      	; 0x188e <SW_SwitchErrStateGetState+0x96>
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	19 f4       	brne	.+6      	; 0x1894 <SW_SwitchErrStateGetState+0x9c>
				return Switch_Value_Error;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	88 87       	std	Y+8, r24	; 0x08
    1892:	58 c0       	rjmp	.+176    	; 0x1944 <SW_SwitchErrStateGetState+0x14c>
			}
			else
				return Switch_Ok;
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	88 87       	std	Y+8, r24	; 0x08
    1898:	55 c0       	rjmp	.+170    	; 0x1944 <SW_SwitchErrStateGetState+0x14c>
		}
	}
	else if(Switch->ConnectionType==ExternalPullUp){
    189a:	ec 81       	ldd	r30, Y+4	; 0x04
    189c:	fd 81       	ldd	r31, Y+5	; 0x05
    189e:	82 81       	ldd	r24, Z+2	; 0x02
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	29 f5       	brne	.+74     	; 0x18ee <SW_SwitchErrStateGetState+0xf6>
		Switch_ErrDirectionReturn=DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_IN);
    18a4:	ec 81       	ldd	r30, Y+4	; 0x04
    18a6:	fd 81       	ldd	r31, Y+5	; 0x05
    18a8:	80 81       	ld	r24, Z
    18aa:	ec 81       	ldd	r30, Y+4	; 0x04
    18ac:	fd 81       	ldd	r31, Y+5	; 0x05
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    18b0:	69 2f       	mov	r22, r25
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    18b8:	8a 83       	std	Y+2, r24	; 0x02
		Switch_ErrValueReturn=DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,&read_val);
    18ba:	ec 81       	ldd	r30, Y+4	; 0x04
    18bc:	fd 81       	ldd	r31, Y+5	; 0x05
    18be:	80 81       	ld	r24, Z
    18c0:	ec 81       	ldd	r30, Y+4	; 0x04
    18c2:	fd 81       	ldd	r31, Y+5	; 0x05
    18c4:	91 81       	ldd	r25, Z+1	; 0x01
    18c6:	9e 01       	movw	r18, r28
    18c8:	2d 5f       	subi	r18, 0xFD	; 253
    18ca:	3f 4f       	sbci	r19, 0xFF	; 255
    18cc:	69 2f       	mov	r22, r25
    18ce:	a9 01       	movw	r20, r18
    18d0:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_ErrStateReadPinValue>
    18d4:	89 83       	std	Y+1, r24	; 0x01
		if(Switch_ErrValueReturn==DIO_ERROR_PIN||Switch_ErrValueReturn==DIO_ERROR_PORT){
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	82 30       	cpi	r24, 0x02	; 2
    18da:	19 f0       	breq	.+6      	; 0x18e2 <SW_SwitchErrStateGetState+0xea>
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	19 f4       	brne	.+6      	; 0x18e8 <SW_SwitchErrStateGetState+0xf0>
			return Switch_Value_Error;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	88 87       	std	Y+8, r24	; 0x08
    18e6:	2e c0       	rjmp	.+92     	; 0x1944 <SW_SwitchErrStateGetState+0x14c>
		}
		else
			return Switch_Ok;
    18e8:	82 e0       	ldi	r24, 0x02	; 2
    18ea:	88 87       	std	Y+8, r24	; 0x08
    18ec:	2b c0       	rjmp	.+86     	; 0x1944 <SW_SwitchErrStateGetState+0x14c>
	}

	else if(Switch->ConnectionType==ExternalPullDown){
    18ee:	ec 81       	ldd	r30, Y+4	; 0x04
    18f0:	fd 81       	ldd	r31, Y+5	; 0x05
    18f2:	82 81       	ldd	r24, Z+2	; 0x02
    18f4:	82 30       	cpi	r24, 0x02	; 2
    18f6:	29 f5       	brne	.+74     	; 0x1942 <SW_SwitchErrStateGetState+0x14a>
		Switch_ErrDirectionReturn=DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_IN);
    18f8:	ec 81       	ldd	r30, Y+4	; 0x04
    18fa:	fd 81       	ldd	r31, Y+5	; 0x05
    18fc:	80 81       	ld	r24, Z
    18fe:	ec 81       	ldd	r30, Y+4	; 0x04
    1900:	fd 81       	ldd	r31, Y+5	; 0x05
    1902:	91 81       	ldd	r25, Z+1	; 0x01
    1904:	69 2f       	mov	r22, r25
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    190c:	8a 83       	std	Y+2, r24	; 0x02
		Switch_ErrValueReturn=DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,&read_val);
    190e:	ec 81       	ldd	r30, Y+4	; 0x04
    1910:	fd 81       	ldd	r31, Y+5	; 0x05
    1912:	80 81       	ld	r24, Z
    1914:	ec 81       	ldd	r30, Y+4	; 0x04
    1916:	fd 81       	ldd	r31, Y+5	; 0x05
    1918:	91 81       	ldd	r25, Z+1	; 0x01
    191a:	9e 01       	movw	r18, r28
    191c:	2d 5f       	subi	r18, 0xFD	; 253
    191e:	3f 4f       	sbci	r19, 0xFF	; 255
    1920:	69 2f       	mov	r22, r25
    1922:	a9 01       	movw	r20, r18
    1924:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_ErrStateReadPinValue>
    1928:	89 83       	std	Y+1, r24	; 0x01
		if(Switch_ErrValueReturn==DIO_ERROR_PIN||Switch_ErrValueReturn==DIO_ERROR_PORT){
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	82 30       	cpi	r24, 0x02	; 2
    192e:	19 f0       	breq	.+6      	; 0x1936 <SW_SwitchErrStateGetState+0x13e>
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	81 30       	cpi	r24, 0x01	; 1
    1934:	19 f4       	brne	.+6      	; 0x193c <SW_SwitchErrStateGetState+0x144>
			return Switch_Value_Error;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	88 87       	std	Y+8, r24	; 0x08
    193a:	04 c0       	rjmp	.+8      	; 0x1944 <SW_SwitchErrStateGetState+0x14c>
		}
		else
			return Switch_Ok;
    193c:	82 e0       	ldi	r24, 0x02	; 2
    193e:	88 87       	std	Y+8, r24	; 0x08
    1940:	01 c0       	rjmp	.+2      	; 0x1944 <SW_SwitchErrStateGetState+0x14c>
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <SW_SwitchErrStateGetState+0x150>
	}

}
    1944:	88 85       	ldd	r24, Y+8	; 0x08
    1946:	89 87       	std	Y+9, r24	; 0x09
    1948:	89 85       	ldd	r24, Y+9	; 0x09
    194a:	29 96       	adiw	r28, 0x09	; 9
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <SevSeg_SevErrStateSetNumber>:
		SevSegCC_6 ,
		SevSegCC_7 ,
		SevSegCC_8 ,
		SevSegCC_9
};
SevErrState SevSeg_SevErrStateSetNumber(u8 INPUT_NUMBER , SevSeg_info * SevenSegment1){
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	00 d0       	rcall	.+0      	; 0x1962 <SevSeg_SevErrStateSetNumber+0x6>
    1962:	00 d0       	rcall	.+0      	; 0x1964 <SevSeg_SevErrStateSetNumber+0x8>
    1964:	00 d0       	rcall	.+0      	; 0x1966 <SevSeg_SevErrStateSetNumber+0xa>
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	8b 83       	std	Y+3, r24	; 0x03
    196c:	7d 83       	std	Y+5, r23	; 0x05
    196e:	6c 83       	std	Y+4, r22	; 0x04
	u8 ErrStateDirection,ErrStateValue; // anode 1 // cathode 0 Enable
	ErrStateDirection=DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,DIO_OUT);
    1970:	ec 81       	ldd	r30, Y+4	; 0x04
    1972:	fd 81       	ldd	r31, Y+5	; 0x05
    1974:	81 81       	ldd	r24, Z+1	; 0x01
    1976:	61 e0       	ldi	r22, 0x01	; 1
    1978:	0e 94 a6 0a 	call	0x154c	; 0x154c <DIO_ErrStateSetGroupDirection>
    197c:	8a 83       	std	Y+2, r24	; 0x02
	if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction)
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	19 f0       	breq	.+6      	; 0x198a <SevSeg_SevErrStateSetNumber+0x2e>
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	83 30       	cpi	r24, 0x03	; 3
    1988:	19 f4       	brne	.+6      	; 0x1990 <SevSeg_SevErrStateSetNumber+0x34>
	{
		return Group_ERROR;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	8e 83       	std	Y+6, r24	; 0x06
    198e:	8c c0       	rjmp	.+280    	; 0x1aa8 <SevSeg_SevErrStateSetNumber+0x14c>
	}
	else{
		if(SevenSegment1->SevSeg_Type==CA){
    1990:	ec 81       	ldd	r30, Y+4	; 0x04
    1992:	fd 81       	ldd	r31, Y+5	; 0x05
    1994:	80 81       	ld	r24, Z
    1996:	88 23       	and	r24, r24
    1998:	09 f0       	breq	.+2      	; 0x199c <SevSeg_SevErrStateSetNumber+0x40>
    199a:	3f c0       	rjmp	.+126    	; 0x1a1a <SevSeg_SevErrStateSetNumber+0xbe>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    199c:	ec 81       	ldd	r30, Y+4	; 0x04
    199e:	fd 81       	ldd	r31, Y+5	; 0x05
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	ec 81       	ldd	r30, Y+4	; 0x04
    19a4:	fd 81       	ldd	r31, Y+5	; 0x05
    19a6:	93 81       	ldd	r25, Z+3	; 0x03
    19a8:	69 2f       	mov	r22, r25
    19aa:	41 e0       	ldi	r20, 0x01	; 1
    19ac:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    19b0:	8a 83       	std	Y+2, r24	; 0x02
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	81 30       	cpi	r24, 0x01	; 1
    19b6:	31 f0       	breq	.+12     	; 0x19c4 <SevSeg_SevErrStateSetNumber+0x68>
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	83 30       	cpi	r24, 0x03	; 3
    19bc:	19 f0       	breq	.+6      	; 0x19c4 <SevSeg_SevErrStateSetNumber+0x68>
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	82 30       	cpi	r24, 0x02	; 2
    19c2:	19 f4       	brne	.+6      	; 0x19ca <SevSeg_SevErrStateSetNumber+0x6e>
				return Group_ERROR;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	8e 83       	std	Y+6, r24	; 0x06
    19c8:	6f c0       	rjmp	.+222    	; 0x1aa8 <SevSeg_SevErrStateSetNumber+0x14c>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
    19ca:	ec 81       	ldd	r30, Y+4	; 0x04
    19cc:	fd 81       	ldd	r31, Y+5	; 0x05
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	ec 81       	ldd	r30, Y+4	; 0x04
    19d2:	fd 81       	ldd	r31, Y+5	; 0x05
    19d4:	93 81       	ldd	r25, Z+3	; 0x03
    19d6:	69 2f       	mov	r22, r25
    19d8:	41 e0       	ldi	r20, 0x01	; 1
    19da:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    19de:	89 83       	std	Y+1, r24	; 0x01
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	81 30       	cpi	r24, 0x01	; 1
    19e4:	31 f0       	breq	.+12     	; 0x19f2 <SevSeg_SevErrStateSetNumber+0x96>
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	84 30       	cpi	r24, 0x04	; 4
    19ea:	19 f0       	breq	.+6      	; 0x19f2 <SevSeg_SevErrStateSetNumber+0x96>
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	82 30       	cpi	r24, 0x02	; 2
    19f0:	11 f4       	brne	.+4      	; 0x19f6 <SevSeg_SevErrStateSetNumber+0x9a>
					return Number_Error;
    19f2:	1e 82       	std	Y+6, r1	; 0x06
    19f4:	59 c0       	rjmp	.+178    	; 0x1aa8 <SevSeg_SevErrStateSetNumber+0x14c>
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[INPUT_NUMBER]);
    19f6:	ec 81       	ldd	r30, Y+4	; 0x04
    19f8:	fd 81       	ldd	r31, Y+5	; 0x05
    19fa:	21 81       	ldd	r18, Z+1	; 0x01
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	fc 01       	movw	r30, r24
    1a04:	e8 59       	subi	r30, 0x98	; 152
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	90 81       	ld	r25, Z
    1a0a:	82 2f       	mov	r24, r18
    1a0c:	69 2f       	mov	r22, r25
    1a0e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    1a12:	89 83       	std	Y+1, r24	; 0x01
					if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((INPUT_NUMBER <0 )&&(INPUT_NUMBER>9))){
						return Number_Error;
					}
					else
						return Seven_OK;
    1a14:	82 e0       	ldi	r24, 0x02	; 2
    1a16:	8e 83       	std	Y+6, r24	; 0x06
    1a18:	47 c0       	rjmp	.+142    	; 0x1aa8 <SevSeg_SevErrStateSetNumber+0x14c>
				}
			}
		}
		else if(SevenSegment1->SevSeg_Type==CC){
    1a1a:	ec 81       	ldd	r30, Y+4	; 0x04
    1a1c:	fd 81       	ldd	r31, Y+5	; 0x05
    1a1e:	80 81       	ld	r24, Z
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	09 f0       	breq	.+2      	; 0x1a26 <SevSeg_SevErrStateSetNumber+0xca>
    1a24:	3f c0       	rjmp	.+126    	; 0x1aa4 <SevSeg_SevErrStateSetNumber+0x148>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    1a26:	ec 81       	ldd	r30, Y+4	; 0x04
    1a28:	fd 81       	ldd	r31, Y+5	; 0x05
    1a2a:	82 81       	ldd	r24, Z+2	; 0x02
    1a2c:	ec 81       	ldd	r30, Y+4	; 0x04
    1a2e:	fd 81       	ldd	r31, Y+5	; 0x05
    1a30:	93 81       	ldd	r25, Z+3	; 0x03
    1a32:	69 2f       	mov	r22, r25
    1a34:	41 e0       	ldi	r20, 0x01	; 1
    1a36:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    1a3a:	8a 83       	std	Y+2, r24	; 0x02
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	31 f0       	breq	.+12     	; 0x1a4e <SevSeg_SevErrStateSetNumber+0xf2>
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	83 30       	cpi	r24, 0x03	; 3
    1a46:	19 f0       	breq	.+6      	; 0x1a4e <SevSeg_SevErrStateSetNumber+0xf2>
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	82 30       	cpi	r24, 0x02	; 2
    1a4c:	19 f4       	brne	.+6      	; 0x1a54 <SevSeg_SevErrStateSetNumber+0xf8>
				return Group_ERROR;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	8e 83       	std	Y+6, r24	; 0x06
    1a52:	2a c0       	rjmp	.+84     	; 0x1aa8 <SevSeg_SevErrStateSetNumber+0x14c>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
    1a54:	ec 81       	ldd	r30, Y+4	; 0x04
    1a56:	fd 81       	ldd	r31, Y+5	; 0x05
    1a58:	82 81       	ldd	r24, Z+2	; 0x02
    1a5a:	ec 81       	ldd	r30, Y+4	; 0x04
    1a5c:	fd 81       	ldd	r31, Y+5	; 0x05
    1a5e:	93 81       	ldd	r25, Z+3	; 0x03
    1a60:	69 2f       	mov	r22, r25
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    1a68:	89 83       	std	Y+1, r24	; 0x01
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	81 30       	cpi	r24, 0x01	; 1
    1a6e:	31 f0       	breq	.+12     	; 0x1a7c <SevSeg_SevErrStateSetNumber+0x120>
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	84 30       	cpi	r24, 0x04	; 4
    1a74:	19 f0       	breq	.+6      	; 0x1a7c <SevSeg_SevErrStateSetNumber+0x120>
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	82 30       	cpi	r24, 0x02	; 2
    1a7a:	11 f4       	brne	.+4      	; 0x1a80 <SevSeg_SevErrStateSetNumber+0x124>
					return Number_Error;
    1a7c:	1e 82       	std	Y+6, r1	; 0x06
    1a7e:	14 c0       	rjmp	.+40     	; 0x1aa8 <SevSeg_SevErrStateSetNumber+0x14c>
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[INPUT_NUMBER]);
    1a80:	ec 81       	ldd	r30, Y+4	; 0x04
    1a82:	fd 81       	ldd	r31, Y+5	; 0x05
    1a84:	21 81       	ldd	r18, Z+1	; 0x01
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	88 2f       	mov	r24, r24
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	ee 58       	subi	r30, 0x8E	; 142
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	90 81       	ld	r25, Z
    1a94:	82 2f       	mov	r24, r18
    1a96:	69 2f       	mov	r22, r25
    1a98:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    1a9c:	89 83       	std	Y+1, r24	; 0x01
					if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((INPUT_NUMBER <0) &&(INPUT_NUMBER>9))){
						return Number_Error;
					}
					else
						return Seven_OK;
    1a9e:	82 e0       	ldi	r24, 0x02	; 2
    1aa0:	8e 83       	std	Y+6, r24	; 0x06
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <SevSeg_SevErrStateSetNumber+0x14c>
				}
			}
		}
	}
	return Seven_OK;
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	8e 83       	std	Y+6, r24	; 0x06
    1aa8:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1aaa:	26 96       	adiw	r28, 0x06	; 6
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <SevSeg_SevErrStateDisplayRange>:

SevErrState    SevSeg_SevErrStateDisplayRange(SevSeg_info * SevenSegment1 , u8 Copy_start , u8 Copy_End ){
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	ef 97       	sbiw	r28, 0x3f	; 63
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	9c af       	std	Y+60, r25	; 0x3c
    1ad2:	8b af       	std	Y+59, r24	; 0x3b
    1ad4:	6d af       	std	Y+61, r22	; 0x3d
    1ad6:	4e af       	std	Y+62, r20	; 0x3e
	u8 ErrStateDirection,ErrStateValue;
	DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,DIO_OUT);
    1ad8:	eb ad       	ldd	r30, Y+59	; 0x3b
    1ada:	fc ad       	ldd	r31, Y+60	; 0x3c
    1adc:	81 81       	ldd	r24, Z+1	; 0x01
    1ade:	61 e0       	ldi	r22, 0x01	; 1
    1ae0:	0e 94 a6 0a 	call	0x154c	; 0x154c <DIO_ErrStateSetGroupDirection>
	if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction)
    1ae4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	19 f0       	breq	.+6      	; 0x1af0 <SevSeg_SevErrStateDisplayRange+0x34>
    1aea:	8a ad       	ldd	r24, Y+58	; 0x3a
    1aec:	83 30       	cpi	r24, 0x03	; 3
    1aee:	19 f4       	brne	.+6      	; 0x1af6 <SevSeg_SevErrStateDisplayRange+0x3a>
	{
		return Group_ERROR;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	8f af       	std	Y+63, r24	; 0x3f
    1af4:	57 c2       	rjmp	.+1198   	; 0x1fa4 <SevSeg_SevErrStateDisplayRange+0x4e8>
	}
	else{
		if(SevenSegment1->SevSeg_Type==CA){
    1af6:	eb ad       	ldd	r30, Y+59	; 0x3b
    1af8:	fc ad       	ldd	r31, Y+60	; 0x3c
    1afa:	80 81       	ld	r24, Z
    1afc:	88 23       	and	r24, r24
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <SevSeg_SevErrStateDisplayRange+0x46>
    1b00:	25 c1       	rjmp	.+586    	; 0x1d4c <SevSeg_SevErrStateDisplayRange+0x290>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    1b02:	eb ad       	ldd	r30, Y+59	; 0x3b
    1b04:	fc ad       	ldd	r31, Y+60	; 0x3c
    1b06:	82 81       	ldd	r24, Z+2	; 0x02
    1b08:	eb ad       	ldd	r30, Y+59	; 0x3b
    1b0a:	fc ad       	ldd	r31, Y+60	; 0x3c
    1b0c:	93 81       	ldd	r25, Z+3	; 0x03
    1b0e:	69 2f       	mov	r22, r25
    1b10:	41 e0       	ldi	r20, 0x01	; 1
    1b12:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    1b16:	8a af       	std	Y+58, r24	; 0x3a
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    1b18:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b1a:	81 30       	cpi	r24, 0x01	; 1
    1b1c:	31 f0       	breq	.+12     	; 0x1b2a <SevSeg_SevErrStateDisplayRange+0x6e>
    1b1e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b20:	83 30       	cpi	r24, 0x03	; 3
    1b22:	19 f0       	breq	.+6      	; 0x1b2a <SevSeg_SevErrStateDisplayRange+0x6e>
    1b24:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b26:	82 30       	cpi	r24, 0x02	; 2
    1b28:	19 f4       	brne	.+6      	; 0x1b30 <SevSeg_SevErrStateDisplayRange+0x74>
				return Group_ERROR;
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	8f af       	std	Y+63, r24	; 0x3f
    1b2e:	3a c2       	rjmp	.+1140   	; 0x1fa4 <SevSeg_SevErrStateDisplayRange+0x4e8>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
    1b30:	eb ad       	ldd	r30, Y+59	; 0x3b
    1b32:	fc ad       	ldd	r31, Y+60	; 0x3c
    1b34:	82 81       	ldd	r24, Z+2	; 0x02
    1b36:	eb ad       	ldd	r30, Y+59	; 0x3b
    1b38:	fc ad       	ldd	r31, Y+60	; 0x3c
    1b3a:	93 81       	ldd	r25, Z+3	; 0x03
    1b3c:	69 2f       	mov	r22, r25
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    1b44:	89 af       	std	Y+57, r24	; 0x39
				if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((Copy_start <0) &&(Copy_End>9))){
					return Number_Error;
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[Copy_start]);
    1b46:	eb ad       	ldd	r30, Y+59	; 0x3b
    1b48:	fc ad       	ldd	r31, Y+60	; 0x3c
    1b4a:	21 81       	ldd	r18, Z+1	; 0x01
    1b4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b4e:	88 2f       	mov	r24, r24
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	fc 01       	movw	r30, r24
    1b54:	e8 59       	subi	r30, 0x98	; 152
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	90 81       	ld	r25, Z
    1b5a:	82 2f       	mov	r24, r18
    1b5c:	69 2f       	mov	r22, r25
    1b5e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    1b62:	89 af       	std	Y+57, r24	; 0x39
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	aa ef       	ldi	r26, 0xFA	; 250
    1b6a:	b3 e4       	ldi	r27, 0x43	; 67
    1b6c:	8d ab       	std	Y+53, r24	; 0x35
    1b6e:	9e ab       	std	Y+54, r25	; 0x36
    1b70:	af ab       	std	Y+55, r26	; 0x37
    1b72:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b74:	6d a9       	ldd	r22, Y+53	; 0x35
    1b76:	7e a9       	ldd	r23, Y+54	; 0x36
    1b78:	8f a9       	ldd	r24, Y+55	; 0x37
    1b7a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	4a ef       	ldi	r20, 0xFA	; 250
    1b82:	54 e4       	ldi	r21, 0x44	; 68
    1b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	89 ab       	std	Y+49, r24	; 0x31
    1b8e:	9a ab       	std	Y+50, r25	; 0x32
    1b90:	ab ab       	std	Y+51, r26	; 0x33
    1b92:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b94:	69 a9       	ldd	r22, Y+49	; 0x31
    1b96:	7a a9       	ldd	r23, Y+50	; 0x32
    1b98:	8b a9       	ldd	r24, Y+51	; 0x33
    1b9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e8       	ldi	r20, 0x80	; 128
    1ba2:	5f e3       	ldi	r21, 0x3F	; 63
    1ba4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba8:	88 23       	and	r24, r24
    1baa:	2c f4       	brge	.+10     	; 0x1bb6 <SevSeg_SevErrStateDisplayRange+0xfa>
		__ticks = 1;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	98 ab       	std	Y+48, r25	; 0x30
    1bb2:	8f a7       	std	Y+47, r24	; 0x2f
    1bb4:	3f c0       	rjmp	.+126    	; 0x1c34 <SevSeg_SevErrStateDisplayRange+0x178>
	else if (__tmp > 65535)
    1bb6:	69 a9       	ldd	r22, Y+49	; 0x31
    1bb8:	7a a9       	ldd	r23, Y+50	; 0x32
    1bba:	8b a9       	ldd	r24, Y+51	; 0x33
    1bbc:	9c a9       	ldd	r25, Y+52	; 0x34
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	3f ef       	ldi	r19, 0xFF	; 255
    1bc2:	4f e7       	ldi	r20, 0x7F	; 127
    1bc4:	57 e4       	ldi	r21, 0x47	; 71
    1bc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bca:	18 16       	cp	r1, r24
    1bcc:	4c f5       	brge	.+82     	; 0x1c20 <SevSeg_SevErrStateDisplayRange+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bce:	6d a9       	ldd	r22, Y+53	; 0x35
    1bd0:	7e a9       	ldd	r23, Y+54	; 0x36
    1bd2:	8f a9       	ldd	r24, Y+55	; 0x37
    1bd4:	98 ad       	ldd	r25, Y+56	; 0x38
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e2       	ldi	r20, 0x20	; 32
    1bdc:	51 e4       	ldi	r21, 0x41	; 65
    1bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	bc 01       	movw	r22, r24
    1be8:	cd 01       	movw	r24, r26
    1bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	98 ab       	std	Y+48, r25	; 0x30
    1bf4:	8f a7       	std	Y+47, r24	; 0x2f
    1bf6:	0f c0       	rjmp	.+30     	; 0x1c16 <SevSeg_SevErrStateDisplayRange+0x15a>
    1bf8:	88 ec       	ldi	r24, 0xC8	; 200
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	9e a7       	std	Y+46, r25	; 0x2e
    1bfe:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c00:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c02:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <SevSeg_SevErrStateDisplayRange+0x148>
    1c08:	9e a7       	std	Y+46, r25	; 0x2e
    1c0a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	98 ab       	std	Y+48, r25	; 0x30
    1c14:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c18:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	69 f7       	brne	.-38     	; 0x1bf8 <SevSeg_SevErrStateDisplayRange+0x13c>
    1c1e:	14 c0       	rjmp	.+40     	; 0x1c48 <SevSeg_SevErrStateDisplayRange+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c20:	69 a9       	ldd	r22, Y+49	; 0x31
    1c22:	7a a9       	ldd	r23, Y+50	; 0x32
    1c24:	8b a9       	ldd	r24, Y+51	; 0x33
    1c26:	9c a9       	ldd	r25, Y+52	; 0x34
    1c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	98 ab       	std	Y+48, r25	; 0x30
    1c32:	8f a7       	std	Y+47, r24	; 0x2f
    1c34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c36:	98 a9       	ldd	r25, Y+48	; 0x30
    1c38:	9c a7       	std	Y+44, r25	; 0x2c
    1c3a:	8b a7       	std	Y+43, r24	; 0x2b
    1c3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <SevSeg_SevErrStateDisplayRange+0x184>
    1c44:	9c a7       	std	Y+44, r25	; 0x2c
    1c46:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(500);
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[Copy_End]);
    1c48:	eb ad       	ldd	r30, Y+59	; 0x3b
    1c4a:	fc ad       	ldd	r31, Y+60	; 0x3c
    1c4c:	21 81       	ldd	r18, Z+1	; 0x01
    1c4e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c50:	88 2f       	mov	r24, r24
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	fc 01       	movw	r30, r24
    1c56:	e8 59       	subi	r30, 0x98	; 152
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	90 81       	ld	r25, Z
    1c5c:	82 2f       	mov	r24, r18
    1c5e:	69 2f       	mov	r22, r25
    1c60:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    1c64:	89 af       	std	Y+57, r24	; 0x39
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	aa ef       	ldi	r26, 0xFA	; 250
    1c6c:	b3 e4       	ldi	r27, 0x43	; 67
    1c6e:	8f a3       	std	Y+39, r24	; 0x27
    1c70:	98 a7       	std	Y+40, r25	; 0x28
    1c72:	a9 a7       	std	Y+41, r26	; 0x29
    1c74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c76:	6f a1       	ldd	r22, Y+39	; 0x27
    1c78:	78 a5       	ldd	r23, Y+40	; 0x28
    1c7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a ef       	ldi	r20, 0xFA	; 250
    1c84:	54 e4       	ldi	r21, 0x44	; 68
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	8b a3       	std	Y+35, r24	; 0x23
    1c90:	9c a3       	std	Y+36, r25	; 0x24
    1c92:	ad a3       	std	Y+37, r26	; 0x25
    1c94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c96:	6b a1       	ldd	r22, Y+35	; 0x23
    1c98:	7c a1       	ldd	r23, Y+36	; 0x24
    1c9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e8       	ldi	r20, 0x80	; 128
    1ca4:	5f e3       	ldi	r21, 0x3F	; 63
    1ca6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1caa:	88 23       	and	r24, r24
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <SevSeg_SevErrStateDisplayRange+0x1fc>
		__ticks = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	9a a3       	std	Y+34, r25	; 0x22
    1cb4:	89 a3       	std	Y+33, r24	; 0x21
    1cb6:	3f c0       	rjmp	.+126    	; 0x1d36 <SevSeg_SevErrStateDisplayRange+0x27a>
	else if (__tmp > 65535)
    1cb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cba:	7c a1       	ldd	r23, Y+36	; 0x24
    1cbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	3f ef       	ldi	r19, 0xFF	; 255
    1cc4:	4f e7       	ldi	r20, 0x7F	; 127
    1cc6:	57 e4       	ldi	r21, 0x47	; 71
    1cc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	4c f5       	brge	.+82     	; 0x1d22 <SevSeg_SevErrStateDisplayRange+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd0:	6f a1       	ldd	r22, Y+39	; 0x27
    1cd2:	78 a5       	ldd	r23, Y+40	; 0x28
    1cd4:	89 a5       	ldd	r24, Y+41	; 0x29
    1cd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e2       	ldi	r20, 0x20	; 32
    1cde:	51 e4       	ldi	r21, 0x41	; 65
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9a a3       	std	Y+34, r25	; 0x22
    1cf6:	89 a3       	std	Y+33, r24	; 0x21
    1cf8:	0f c0       	rjmp	.+30     	; 0x1d18 <SevSeg_SevErrStateDisplayRange+0x25c>
    1cfa:	88 ec       	ldi	r24, 0xC8	; 200
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	98 a3       	std	Y+32, r25	; 0x20
    1d00:	8f 8f       	std	Y+31, r24	; 0x1f
    1d02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d04:	98 a1       	ldd	r25, Y+32	; 0x20
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <SevSeg_SevErrStateDisplayRange+0x24a>
    1d0a:	98 a3       	std	Y+32, r25	; 0x20
    1d0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d10:	9a a1       	ldd	r25, Y+34	; 0x22
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	9a a3       	std	Y+34, r25	; 0x22
    1d16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d18:	89 a1       	ldd	r24, Y+33	; 0x21
    1d1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	69 f7       	brne	.-38     	; 0x1cfa <SevSeg_SevErrStateDisplayRange+0x23e>
    1d20:	3f c1       	rjmp	.+638    	; 0x1fa0 <SevSeg_SevErrStateDisplayRange+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d22:	6b a1       	ldd	r22, Y+35	; 0x23
    1d24:	7c a1       	ldd	r23, Y+36	; 0x24
    1d26:	8d a1       	ldd	r24, Y+37	; 0x25
    1d28:	9e a1       	ldd	r25, Y+38	; 0x26
    1d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	9a a3       	std	Y+34, r25	; 0x22
    1d34:	89 a3       	std	Y+33, r24	; 0x21
    1d36:	89 a1       	ldd	r24, Y+33	; 0x21
    1d38:	9a a1       	ldd	r25, Y+34	; 0x22
    1d3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <SevSeg_SevErrStateDisplayRange+0x286>
    1d46:	9e 8f       	std	Y+30, r25	; 0x1e
    1d48:	8d 8f       	std	Y+29, r24	; 0x1d
    1d4a:	2a c1       	rjmp	.+596    	; 0x1fa0 <SevSeg_SevErrStateDisplayRange+0x4e4>
					_delay_ms(500);
				}
			}
		}
		else if(SevenSegment1->SevSeg_Type==CC){
    1d4c:	eb ad       	ldd	r30, Y+59	; 0x3b
    1d4e:	fc ad       	ldd	r31, Y+60	; 0x3c
    1d50:	80 81       	ld	r24, Z
    1d52:	81 30       	cpi	r24, 0x01	; 1
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <SevSeg_SevErrStateDisplayRange+0x29c>
    1d56:	24 c1       	rjmp	.+584    	; 0x1fa0 <SevSeg_SevErrStateDisplayRange+0x4e4>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    1d58:	eb ad       	ldd	r30, Y+59	; 0x3b
    1d5a:	fc ad       	ldd	r31, Y+60	; 0x3c
    1d5c:	82 81       	ldd	r24, Z+2	; 0x02
    1d5e:	eb ad       	ldd	r30, Y+59	; 0x3b
    1d60:	fc ad       	ldd	r31, Y+60	; 0x3c
    1d62:	93 81       	ldd	r25, Z+3	; 0x03
    1d64:	69 2f       	mov	r22, r25
    1d66:	41 e0       	ldi	r20, 0x01	; 1
    1d68:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    1d6c:	8a af       	std	Y+58, r24	; 0x3a
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    1d6e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d70:	81 30       	cpi	r24, 0x01	; 1
    1d72:	31 f0       	breq	.+12     	; 0x1d80 <SevSeg_SevErrStateDisplayRange+0x2c4>
    1d74:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d76:	83 30       	cpi	r24, 0x03	; 3
    1d78:	19 f0       	breq	.+6      	; 0x1d80 <SevSeg_SevErrStateDisplayRange+0x2c4>
    1d7a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d7c:	82 30       	cpi	r24, 0x02	; 2
    1d7e:	19 f4       	brne	.+6      	; 0x1d86 <SevSeg_SevErrStateDisplayRange+0x2ca>
				return Group_ERROR;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	8f af       	std	Y+63, r24	; 0x3f
    1d84:	0f c1       	rjmp	.+542    	; 0x1fa4 <SevSeg_SevErrStateDisplayRange+0x4e8>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
    1d86:	eb ad       	ldd	r30, Y+59	; 0x3b
    1d88:	fc ad       	ldd	r31, Y+60	; 0x3c
    1d8a:	82 81       	ldd	r24, Z+2	; 0x02
    1d8c:	eb ad       	ldd	r30, Y+59	; 0x3b
    1d8e:	fc ad       	ldd	r31, Y+60	; 0x3c
    1d90:	93 81       	ldd	r25, Z+3	; 0x03
    1d92:	69 2f       	mov	r22, r25
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    1d9a:	89 af       	std	Y+57, r24	; 0x39
				if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((Copy_start <0) &&(Copy_End>9))){
					return Number_Error;
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[Copy_start]);
    1d9c:	eb ad       	ldd	r30, Y+59	; 0x3b
    1d9e:	fc ad       	ldd	r31, Y+60	; 0x3c
    1da0:	21 81       	ldd	r18, Z+1	; 0x01
    1da2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1da4:	88 2f       	mov	r24, r24
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	fc 01       	movw	r30, r24
    1daa:	ee 58       	subi	r30, 0x8E	; 142
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	90 81       	ld	r25, Z
    1db0:	82 2f       	mov	r24, r18
    1db2:	69 2f       	mov	r22, r25
    1db4:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    1db8:	89 af       	std	Y+57, r24	; 0x39
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	aa ef       	ldi	r26, 0xFA	; 250
    1dc0:	b3 e4       	ldi	r27, 0x43	; 67
    1dc2:	89 8f       	std	Y+25, r24	; 0x19
    1dc4:	9a 8f       	std	Y+26, r25	; 0x1a
    1dc6:	ab 8f       	std	Y+27, r26	; 0x1b
    1dc8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dca:	69 8d       	ldd	r22, Y+25	; 0x19
    1dcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	4a ef       	ldi	r20, 0xFA	; 250
    1dd8:	54 e4       	ldi	r21, 0x44	; 68
    1dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	8d 8b       	std	Y+21, r24	; 0x15
    1de4:	9e 8b       	std	Y+22, r25	; 0x16
    1de6:	af 8b       	std	Y+23, r26	; 0x17
    1de8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dea:	6d 89       	ldd	r22, Y+21	; 0x15
    1dec:	7e 89       	ldd	r23, Y+22	; 0x16
    1dee:	8f 89       	ldd	r24, Y+23	; 0x17
    1df0:	98 8d       	ldd	r25, Y+24	; 0x18
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e8       	ldi	r20, 0x80	; 128
    1df8:	5f e3       	ldi	r21, 0x3F	; 63
    1dfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dfe:	88 23       	and	r24, r24
    1e00:	2c f4       	brge	.+10     	; 0x1e0c <SevSeg_SevErrStateDisplayRange+0x350>
		__ticks = 1;
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	9c 8b       	std	Y+20, r25	; 0x14
    1e08:	8b 8b       	std	Y+19, r24	; 0x13
    1e0a:	3f c0       	rjmp	.+126    	; 0x1e8a <SevSeg_SevErrStateDisplayRange+0x3ce>
	else if (__tmp > 65535)
    1e0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e10:	8f 89       	ldd	r24, Y+23	; 0x17
    1e12:	98 8d       	ldd	r25, Y+24	; 0x18
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	3f ef       	ldi	r19, 0xFF	; 255
    1e18:	4f e7       	ldi	r20, 0x7F	; 127
    1e1a:	57 e4       	ldi	r21, 0x47	; 71
    1e1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e20:	18 16       	cp	r1, r24
    1e22:	4c f5       	brge	.+82     	; 0x1e76 <SevSeg_SevErrStateDisplayRange+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e24:	69 8d       	ldd	r22, Y+25	; 0x19
    1e26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e2       	ldi	r20, 0x20	; 32
    1e32:	51 e4       	ldi	r21, 0x41	; 65
    1e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	bc 01       	movw	r22, r24
    1e3e:	cd 01       	movw	r24, r26
    1e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	9c 8b       	std	Y+20, r25	; 0x14
    1e4a:	8b 8b       	std	Y+19, r24	; 0x13
    1e4c:	0f c0       	rjmp	.+30     	; 0x1e6c <SevSeg_SevErrStateDisplayRange+0x3b0>
    1e4e:	88 ec       	ldi	r24, 0xC8	; 200
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9a 8b       	std	Y+18, r25	; 0x12
    1e54:	89 8b       	std	Y+17, r24	; 0x11
    1e56:	89 89       	ldd	r24, Y+17	; 0x11
    1e58:	9a 89       	ldd	r25, Y+18	; 0x12
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <SevSeg_SevErrStateDisplayRange+0x39e>
    1e5e:	9a 8b       	std	Y+18, r25	; 0x12
    1e60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e62:	8b 89       	ldd	r24, Y+19	; 0x13
    1e64:	9c 89       	ldd	r25, Y+20	; 0x14
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	9c 8b       	std	Y+20, r25	; 0x14
    1e6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	69 f7       	brne	.-38     	; 0x1e4e <SevSeg_SevErrStateDisplayRange+0x392>
    1e74:	14 c0       	rjmp	.+40     	; 0x1e9e <SevSeg_SevErrStateDisplayRange+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e76:	6d 89       	ldd	r22, Y+21	; 0x15
    1e78:	7e 89       	ldd	r23, Y+22	; 0x16
    1e7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	9c 8b       	std	Y+20, r25	; 0x14
    1e88:	8b 8b       	std	Y+19, r24	; 0x13
    1e8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e8e:	98 8b       	std	Y+16, r25	; 0x10
    1e90:	8f 87       	std	Y+15, r24	; 0x0f
    1e92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e94:	98 89       	ldd	r25, Y+16	; 0x10
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <SevSeg_SevErrStateDisplayRange+0x3da>
    1e9a:	98 8b       	std	Y+16, r25	; 0x10
    1e9c:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[Copy_End]);
    1e9e:	eb ad       	ldd	r30, Y+59	; 0x3b
    1ea0:	fc ad       	ldd	r31, Y+60	; 0x3c
    1ea2:	21 81       	ldd	r18, Z+1	; 0x01
    1ea4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ea6:	88 2f       	mov	r24, r24
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	fc 01       	movw	r30, r24
    1eac:	ee 58       	subi	r30, 0x8E	; 142
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	90 81       	ld	r25, Z
    1eb2:	82 2f       	mov	r24, r18
    1eb4:	69 2f       	mov	r22, r25
    1eb6:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    1eba:	89 af       	std	Y+57, r24	; 0x39
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	aa ef       	ldi	r26, 0xFA	; 250
    1ec2:	b3 e4       	ldi	r27, 0x43	; 67
    1ec4:	8b 87       	std	Y+11, r24	; 0x0b
    1ec6:	9c 87       	std	Y+12, r25	; 0x0c
    1ec8:	ad 87       	std	Y+13, r26	; 0x0d
    1eca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ecc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ece:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	4a ef       	ldi	r20, 0xFA	; 250
    1eda:	54 e4       	ldi	r21, 0x44	; 68
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	8f 83       	std	Y+7, r24	; 0x07
    1ee6:	98 87       	std	Y+8, r25	; 0x08
    1ee8:	a9 87       	std	Y+9, r26	; 0x09
    1eea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eec:	6f 81       	ldd	r22, Y+7	; 0x07
    1eee:	78 85       	ldd	r23, Y+8	; 0x08
    1ef0:	89 85       	ldd	r24, Y+9	; 0x09
    1ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e8       	ldi	r20, 0x80	; 128
    1efa:	5f e3       	ldi	r21, 0x3F	; 63
    1efc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f00:	88 23       	and	r24, r24
    1f02:	2c f4       	brge	.+10     	; 0x1f0e <SevSeg_SevErrStateDisplayRange+0x452>
		__ticks = 1;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
    1f0c:	3f c0       	rjmp	.+126    	; 0x1f8c <SevSeg_SevErrStateDisplayRange+0x4d0>
	else if (__tmp > 65535)
    1f0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f10:	78 85       	ldd	r23, Y+8	; 0x08
    1f12:	89 85       	ldd	r24, Y+9	; 0x09
    1f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	3f ef       	ldi	r19, 0xFF	; 255
    1f1a:	4f e7       	ldi	r20, 0x7F	; 127
    1f1c:	57 e4       	ldi	r21, 0x47	; 71
    1f1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f22:	18 16       	cp	r1, r24
    1f24:	4c f5       	brge	.+82     	; 0x1f78 <SevSeg_SevErrStateDisplayRange+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e2       	ldi	r20, 0x20	; 32
    1f34:	51 e4       	ldi	r21, 0x41	; 65
    1f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	bc 01       	movw	r22, r24
    1f40:	cd 01       	movw	r24, r26
    1f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	9e 83       	std	Y+6, r25	; 0x06
    1f4c:	8d 83       	std	Y+5, r24	; 0x05
    1f4e:	0f c0       	rjmp	.+30     	; 0x1f6e <SevSeg_SevErrStateDisplayRange+0x4b2>
    1f50:	88 ec       	ldi	r24, 0xC8	; 200
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	9c 83       	std	Y+4, r25	; 0x04
    1f56:	8b 83       	std	Y+3, r24	; 0x03
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <SevSeg_SevErrStateDisplayRange+0x4a0>
    1f60:	9c 83       	std	Y+4, r25	; 0x04
    1f62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f64:	8d 81       	ldd	r24, Y+5	; 0x05
    1f66:	9e 81       	ldd	r25, Y+6	; 0x06
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	9e 83       	std	Y+6, r25	; 0x06
    1f6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f70:	9e 81       	ldd	r25, Y+6	; 0x06
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	69 f7       	brne	.-38     	; 0x1f50 <SevSeg_SevErrStateDisplayRange+0x494>
    1f76:	14 c0       	rjmp	.+40     	; 0x1fa0 <SevSeg_SevErrStateDisplayRange+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f78:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7a:	78 85       	ldd	r23, Y+8	; 0x08
    1f7c:	89 85       	ldd	r24, Y+9	; 0x09
    1f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	9e 83       	std	Y+6, r25	; 0x06
    1f8a:	8d 83       	std	Y+5, r24	; 0x05
    1f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f90:	9a 83       	std	Y+2, r25	; 0x02
    1f92:	89 83       	std	Y+1, r24	; 0x01
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	9a 81       	ldd	r25, Y+2	; 0x02
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <SevSeg_SevErrStateDisplayRange+0x4dc>
    1f9c:	9a 83       	std	Y+2, r25	; 0x02
    1f9e:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(500);
				}
			}
		}
	}
	return Seven_OK;
    1fa0:	82 e0       	ldi	r24, 0x02	; 2
    1fa2:	8f af       	std	Y+63, r24	; 0x3f
    1fa4:	8f ad       	ldd	r24, Y+63	; 0x3f

}
    1fa6:	ef 96       	adiw	r28, 0x3f	; 63
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <SevSeg_SevErrStateDisplayMax>:

SevErrState SevSeg_SevErrStateDisplayMax(SevSeg_info * SevenSegment1){
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	a3 97       	sbiw	r28, 0x23	; 35
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	9a a3       	std	Y+34, r25	; 0x22
    1fce:	89 a3       	std	Y+33, r24	; 0x21
	u8 ErrStateDirection,ErrStateValue; // anode 1 // cathode 0 Enable
	ErrStateDirection=DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,DIO_OUT);
    1fd0:	e9 a1       	ldd	r30, Y+33	; 0x21
    1fd2:	fa a1       	ldd	r31, Y+34	; 0x22
    1fd4:	81 81       	ldd	r24, Z+1	; 0x01
    1fd6:	61 e0       	ldi	r22, 0x01	; 1
    1fd8:	0e 94 a6 0a 	call	0x154c	; 0x154c <DIO_ErrStateSetGroupDirection>
    1fdc:	88 a3       	std	Y+32, r24	; 0x20
	if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction)
    1fde:	88 a1       	ldd	r24, Y+32	; 0x20
    1fe0:	81 30       	cpi	r24, 0x01	; 1
    1fe2:	19 f0       	breq	.+6      	; 0x1fea <SevSeg_SevErrStateDisplayMax+0x32>
    1fe4:	88 a1       	ldd	r24, Y+32	; 0x20
    1fe6:	83 30       	cpi	r24, 0x03	; 3
    1fe8:	19 f4       	brne	.+6      	; 0x1ff0 <SevSeg_SevErrStateDisplayMax+0x38>
	{
		return Group_ERROR;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	8b a3       	std	Y+35, r24	; 0x23
    1fee:	92 c1       	rjmp	.+804    	; 0x2314 <SevSeg_SevErrStateDisplayMax+0x35c>
	}
	else{
		if(SevenSegment1->SevSeg_Type==CA){
    1ff0:	e9 a1       	ldd	r30, Y+33	; 0x21
    1ff2:	fa a1       	ldd	r31, Y+34	; 0x22
    1ff4:	80 81       	ld	r24, Z
    1ff6:	88 23       	and	r24, r24
    1ff8:	09 f0       	breq	.+2      	; 0x1ffc <SevSeg_SevErrStateDisplayMax+0x44>
    1ffa:	c2 c0       	rjmp	.+388    	; 0x2180 <SevSeg_SevErrStateDisplayMax+0x1c8>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    1ffc:	e9 a1       	ldd	r30, Y+33	; 0x21
    1ffe:	fa a1       	ldd	r31, Y+34	; 0x22
    2000:	82 81       	ldd	r24, Z+2	; 0x02
    2002:	e9 a1       	ldd	r30, Y+33	; 0x21
    2004:	fa a1       	ldd	r31, Y+34	; 0x22
    2006:	93 81       	ldd	r25, Z+3	; 0x03
    2008:	69 2f       	mov	r22, r25
    200a:	41 e0       	ldi	r20, 0x01	; 1
    200c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    2010:	88 a3       	std	Y+32, r24	; 0x20
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    2012:	88 a1       	ldd	r24, Y+32	; 0x20
    2014:	81 30       	cpi	r24, 0x01	; 1
    2016:	31 f0       	breq	.+12     	; 0x2024 <SevSeg_SevErrStateDisplayMax+0x6c>
    2018:	88 a1       	ldd	r24, Y+32	; 0x20
    201a:	83 30       	cpi	r24, 0x03	; 3
    201c:	19 f0       	breq	.+6      	; 0x2024 <SevSeg_SevErrStateDisplayMax+0x6c>
    201e:	88 a1       	ldd	r24, Y+32	; 0x20
    2020:	82 30       	cpi	r24, 0x02	; 2
    2022:	19 f4       	brne	.+6      	; 0x202a <SevSeg_SevErrStateDisplayMax+0x72>
				return Group_ERROR;
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	8b a3       	std	Y+35, r24	; 0x23
    2028:	75 c1       	rjmp	.+746    	; 0x2314 <SevSeg_SevErrStateDisplayMax+0x35c>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
    202a:	e9 a1       	ldd	r30, Y+33	; 0x21
    202c:	fa a1       	ldd	r31, Y+34	; 0x22
    202e:	82 81       	ldd	r24, Z+2	; 0x02
    2030:	e9 a1       	ldd	r30, Y+33	; 0x21
    2032:	fa a1       	ldd	r31, Y+34	; 0x22
    2034:	93 81       	ldd	r25, Z+3	; 0x03
    2036:	69 2f       	mov	r22, r25
    2038:	41 e0       	ldi	r20, 0x01	; 1
    203a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    203e:	8f 8f       	std	Y+31, r24	; 0x1f
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    2040:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2042:	81 30       	cpi	r24, 0x01	; 1
    2044:	31 f0       	breq	.+12     	; 0x2052 <SevSeg_SevErrStateDisplayMax+0x9a>
    2046:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2048:	84 30       	cpi	r24, 0x04	; 4
    204a:	19 f0       	breq	.+6      	; 0x2052 <SevSeg_SevErrStateDisplayMax+0x9a>
    204c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    204e:	82 30       	cpi	r24, 0x02	; 2
    2050:	11 f4       	brne	.+4      	; 0x2056 <SevSeg_SevErrStateDisplayMax+0x9e>
					return Number_Error;
    2052:	1b a2       	std	Y+35, r1	; 0x23
    2054:	5f c1       	rjmp	.+702    	; 0x2314 <SevSeg_SevErrStateDisplayMax+0x35c>
				}
				else{
					for(u8 i=0;i<10;i++){
    2056:	1e 8e       	std	Y+30, r1	; 0x1e
    2058:	84 c0       	rjmp	.+264    	; 0x2162 <SevSeg_SevErrStateDisplayMax+0x1aa>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[i]);
    205a:	e9 a1       	ldd	r30, Y+33	; 0x21
    205c:	fa a1       	ldd	r31, Y+34	; 0x22
    205e:	21 81       	ldd	r18, Z+1	; 0x01
    2060:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2062:	88 2f       	mov	r24, r24
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	fc 01       	movw	r30, r24
    2068:	e8 59       	subi	r30, 0x98	; 152
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	90 81       	ld	r25, Z
    206e:	82 2f       	mov	r24, r18
    2070:	69 2f       	mov	r22, r25
    2072:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    2076:	8f 8f       	std	Y+31, r24	; 0x1f
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	a6 e1       	ldi	r26, 0x16	; 22
    207e:	b3 e4       	ldi	r27, 0x43	; 67
    2080:	89 8f       	std	Y+25, r24	; 0x19
    2082:	9a 8f       	std	Y+26, r25	; 0x1a
    2084:	ab 8f       	std	Y+27, r26	; 0x1b
    2086:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2088:	69 8d       	ldd	r22, Y+25	; 0x19
    208a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    208c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    208e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	4a ef       	ldi	r20, 0xFA	; 250
    2096:	54 e4       	ldi	r21, 0x44	; 68
    2098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	8d 8b       	std	Y+21, r24	; 0x15
    20a2:	9e 8b       	std	Y+22, r25	; 0x16
    20a4:	af 8b       	std	Y+23, r26	; 0x17
    20a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20a8:	6d 89       	ldd	r22, Y+21	; 0x15
    20aa:	7e 89       	ldd	r23, Y+22	; 0x16
    20ac:	8f 89       	ldd	r24, Y+23	; 0x17
    20ae:	98 8d       	ldd	r25, Y+24	; 0x18
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e8       	ldi	r20, 0x80	; 128
    20b6:	5f e3       	ldi	r21, 0x3F	; 63
    20b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20bc:	88 23       	and	r24, r24
    20be:	2c f4       	brge	.+10     	; 0x20ca <SevSeg_SevErrStateDisplayMax+0x112>
		__ticks = 1;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	9c 8b       	std	Y+20, r25	; 0x14
    20c6:	8b 8b       	std	Y+19, r24	; 0x13
    20c8:	3f c0       	rjmp	.+126    	; 0x2148 <SevSeg_SevErrStateDisplayMax+0x190>
	else if (__tmp > 65535)
    20ca:	6d 89       	ldd	r22, Y+21	; 0x15
    20cc:	7e 89       	ldd	r23, Y+22	; 0x16
    20ce:	8f 89       	ldd	r24, Y+23	; 0x17
    20d0:	98 8d       	ldd	r25, Y+24	; 0x18
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	3f ef       	ldi	r19, 0xFF	; 255
    20d6:	4f e7       	ldi	r20, 0x7F	; 127
    20d8:	57 e4       	ldi	r21, 0x47	; 71
    20da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20de:	18 16       	cp	r1, r24
    20e0:	4c f5       	brge	.+82     	; 0x2134 <SevSeg_SevErrStateDisplayMax+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e2:	69 8d       	ldd	r22, Y+25	; 0x19
    20e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e2       	ldi	r20, 0x20	; 32
    20f0:	51 e4       	ldi	r21, 0x41	; 65
    20f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	bc 01       	movw	r22, r24
    20fc:	cd 01       	movw	r24, r26
    20fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	9c 8b       	std	Y+20, r25	; 0x14
    2108:	8b 8b       	std	Y+19, r24	; 0x13
    210a:	0f c0       	rjmp	.+30     	; 0x212a <SevSeg_SevErrStateDisplayMax+0x172>
    210c:	88 ec       	ldi	r24, 0xC8	; 200
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	9a 8b       	std	Y+18, r25	; 0x12
    2112:	89 8b       	std	Y+17, r24	; 0x11
    2114:	89 89       	ldd	r24, Y+17	; 0x11
    2116:	9a 89       	ldd	r25, Y+18	; 0x12
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <SevSeg_SevErrStateDisplayMax+0x160>
    211c:	9a 8b       	std	Y+18, r25	; 0x12
    211e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2120:	8b 89       	ldd	r24, Y+19	; 0x13
    2122:	9c 89       	ldd	r25, Y+20	; 0x14
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	9c 8b       	std	Y+20, r25	; 0x14
    2128:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212a:	8b 89       	ldd	r24, Y+19	; 0x13
    212c:	9c 89       	ldd	r25, Y+20	; 0x14
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	69 f7       	brne	.-38     	; 0x210c <SevSeg_SevErrStateDisplayMax+0x154>
    2132:	14 c0       	rjmp	.+40     	; 0x215c <SevSeg_SevErrStateDisplayMax+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2134:	6d 89       	ldd	r22, Y+21	; 0x15
    2136:	7e 89       	ldd	r23, Y+22	; 0x16
    2138:	8f 89       	ldd	r24, Y+23	; 0x17
    213a:	98 8d       	ldd	r25, Y+24	; 0x18
    213c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	9c 8b       	std	Y+20, r25	; 0x14
    2146:	8b 8b       	std	Y+19, r24	; 0x13
    2148:	8b 89       	ldd	r24, Y+19	; 0x13
    214a:	9c 89       	ldd	r25, Y+20	; 0x14
    214c:	98 8b       	std	Y+16, r25	; 0x10
    214e:	8f 87       	std	Y+15, r24	; 0x0f
    2150:	8f 85       	ldd	r24, Y+15	; 0x0f
    2152:	98 89       	ldd	r25, Y+16	; 0x10
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	f1 f7       	brne	.-4      	; 0x2154 <SevSeg_SevErrStateDisplayMax+0x19c>
    2158:	98 8b       	std	Y+16, r25	; 0x10
    215a:	8f 87       	std	Y+15, r24	; 0x0f
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
					return Number_Error;
				}
				else{
					for(u8 i=0;i<10;i++){
    215c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    215e:	8f 5f       	subi	r24, 0xFF	; 255
    2160:	8e 8f       	std	Y+30, r24	; 0x1e
    2162:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2164:	8a 30       	cpi	r24, 0x0A	; 10
    2166:	08 f4       	brcc	.+2      	; 0x216a <SevSeg_SevErrStateDisplayMax+0x1b2>
    2168:	78 cf       	rjmp	.-272    	; 0x205a <SevSeg_SevErrStateDisplayMax+0xa2>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[i]);
						_delay_ms(150);
					}
					if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE){
    216a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    216c:	81 30       	cpi	r24, 0x01	; 1
    216e:	19 f0       	breq	.+6      	; 0x2176 <SevSeg_SevErrStateDisplayMax+0x1be>
    2170:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2172:	84 30       	cpi	r24, 0x04	; 4
    2174:	11 f4       	brne	.+4      	; 0x217a <SevSeg_SevErrStateDisplayMax+0x1c2>
						return Number_Error;
    2176:	1b a2       	std	Y+35, r1	; 0x23
    2178:	cd c0       	rjmp	.+410    	; 0x2314 <SevSeg_SevErrStateDisplayMax+0x35c>
					}
					else
						return Seven_OK;
    217a:	82 e0       	ldi	r24, 0x02	; 2
    217c:	8b a3       	std	Y+35, r24	; 0x23
    217e:	ca c0       	rjmp	.+404    	; 0x2314 <SevSeg_SevErrStateDisplayMax+0x35c>
				}
			}
		}
		else if(SevenSegment1->SevSeg_Type==CC){
    2180:	e9 a1       	ldd	r30, Y+33	; 0x21
    2182:	fa a1       	ldd	r31, Y+34	; 0x22
    2184:	80 81       	ld	r24, Z
    2186:	81 30       	cpi	r24, 0x01	; 1
    2188:	09 f0       	breq	.+2      	; 0x218c <SevSeg_SevErrStateDisplayMax+0x1d4>
    218a:	c2 c0       	rjmp	.+388    	; 0x2310 <SevSeg_SevErrStateDisplayMax+0x358>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    218c:	e9 a1       	ldd	r30, Y+33	; 0x21
    218e:	fa a1       	ldd	r31, Y+34	; 0x22
    2190:	82 81       	ldd	r24, Z+2	; 0x02
    2192:	e9 a1       	ldd	r30, Y+33	; 0x21
    2194:	fa a1       	ldd	r31, Y+34	; 0x22
    2196:	93 81       	ldd	r25, Z+3	; 0x03
    2198:	69 2f       	mov	r22, r25
    219a:	41 e0       	ldi	r20, 0x01	; 1
    219c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    21a0:	88 a3       	std	Y+32, r24	; 0x20
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    21a2:	88 a1       	ldd	r24, Y+32	; 0x20
    21a4:	81 30       	cpi	r24, 0x01	; 1
    21a6:	31 f0       	breq	.+12     	; 0x21b4 <SevSeg_SevErrStateDisplayMax+0x1fc>
    21a8:	88 a1       	ldd	r24, Y+32	; 0x20
    21aa:	83 30       	cpi	r24, 0x03	; 3
    21ac:	19 f0       	breq	.+6      	; 0x21b4 <SevSeg_SevErrStateDisplayMax+0x1fc>
    21ae:	88 a1       	ldd	r24, Y+32	; 0x20
    21b0:	82 30       	cpi	r24, 0x02	; 2
    21b2:	19 f4       	brne	.+6      	; 0x21ba <SevSeg_SevErrStateDisplayMax+0x202>
				return Group_ERROR;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	8b a3       	std	Y+35, r24	; 0x23
    21b8:	ad c0       	rjmp	.+346    	; 0x2314 <SevSeg_SevErrStateDisplayMax+0x35c>
			}
			else
				{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
    21ba:	e9 a1       	ldd	r30, Y+33	; 0x21
    21bc:	fa a1       	ldd	r31, Y+34	; 0x22
    21be:	82 81       	ldd	r24, Z+2	; 0x02
    21c0:	e9 a1       	ldd	r30, Y+33	; 0x21
    21c2:	fa a1       	ldd	r31, Y+34	; 0x22
    21c4:	93 81       	ldd	r25, Z+3	; 0x03
    21c6:	69 2f       	mov	r22, r25
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    21ce:	8f 8f       	std	Y+31, r24	; 0x1f
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    21d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21d2:	81 30       	cpi	r24, 0x01	; 1
    21d4:	31 f0       	breq	.+12     	; 0x21e2 <SevSeg_SevErrStateDisplayMax+0x22a>
    21d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21d8:	84 30       	cpi	r24, 0x04	; 4
    21da:	19 f0       	breq	.+6      	; 0x21e2 <SevSeg_SevErrStateDisplayMax+0x22a>
    21dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21de:	82 30       	cpi	r24, 0x02	; 2
    21e0:	11 f4       	brne	.+4      	; 0x21e6 <SevSeg_SevErrStateDisplayMax+0x22e>
					return Number_Error;
    21e2:	1b a2       	std	Y+35, r1	; 0x23
    21e4:	97 c0       	rjmp	.+302    	; 0x2314 <SevSeg_SevErrStateDisplayMax+0x35c>
				}
				else{
					for(u8 i=0;i<10;i++){
    21e6:	1d 8e       	std	Y+29, r1	; 0x1d
    21e8:	84 c0       	rjmp	.+264    	; 0x22f2 <SevSeg_SevErrStateDisplayMax+0x33a>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[i]);
    21ea:	e9 a1       	ldd	r30, Y+33	; 0x21
    21ec:	fa a1       	ldd	r31, Y+34	; 0x22
    21ee:	21 81       	ldd	r18, Z+1	; 0x01
    21f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21f2:	88 2f       	mov	r24, r24
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	fc 01       	movw	r30, r24
    21f8:	ee 58       	subi	r30, 0x8E	; 142
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	90 81       	ld	r25, Z
    21fe:	82 2f       	mov	r24, r18
    2200:	69 2f       	mov	r22, r25
    2202:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    2206:	8f 8f       	std	Y+31, r24	; 0x1f
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	a6 e1       	ldi	r26, 0x16	; 22
    220e:	b3 e4       	ldi	r27, 0x43	; 67
    2210:	8b 87       	std	Y+11, r24	; 0x0b
    2212:	9c 87       	std	Y+12, r25	; 0x0c
    2214:	ad 87       	std	Y+13, r26	; 0x0d
    2216:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2218:	6b 85       	ldd	r22, Y+11	; 0x0b
    221a:	7c 85       	ldd	r23, Y+12	; 0x0c
    221c:	8d 85       	ldd	r24, Y+13	; 0x0d
    221e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	4a ef       	ldi	r20, 0xFA	; 250
    2226:	54 e4       	ldi	r21, 0x44	; 68
    2228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	8f 83       	std	Y+7, r24	; 0x07
    2232:	98 87       	std	Y+8, r25	; 0x08
    2234:	a9 87       	std	Y+9, r26	; 0x09
    2236:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2238:	6f 81       	ldd	r22, Y+7	; 0x07
    223a:	78 85       	ldd	r23, Y+8	; 0x08
    223c:	89 85       	ldd	r24, Y+9	; 0x09
    223e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e8       	ldi	r20, 0x80	; 128
    2246:	5f e3       	ldi	r21, 0x3F	; 63
    2248:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    224c:	88 23       	and	r24, r24
    224e:	2c f4       	brge	.+10     	; 0x225a <SevSeg_SevErrStateDisplayMax+0x2a2>
		__ticks = 1;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	9e 83       	std	Y+6, r25	; 0x06
    2256:	8d 83       	std	Y+5, r24	; 0x05
    2258:	3f c0       	rjmp	.+126    	; 0x22d8 <SevSeg_SevErrStateDisplayMax+0x320>
	else if (__tmp > 65535)
    225a:	6f 81       	ldd	r22, Y+7	; 0x07
    225c:	78 85       	ldd	r23, Y+8	; 0x08
    225e:	89 85       	ldd	r24, Y+9	; 0x09
    2260:	9a 85       	ldd	r25, Y+10	; 0x0a
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	3f ef       	ldi	r19, 0xFF	; 255
    2266:	4f e7       	ldi	r20, 0x7F	; 127
    2268:	57 e4       	ldi	r21, 0x47	; 71
    226a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    226e:	18 16       	cp	r1, r24
    2270:	4c f5       	brge	.+82     	; 0x22c4 <SevSeg_SevErrStateDisplayMax+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2272:	6b 85       	ldd	r22, Y+11	; 0x0b
    2274:	7c 85       	ldd	r23, Y+12	; 0x0c
    2276:	8d 85       	ldd	r24, Y+13	; 0x0d
    2278:	9e 85       	ldd	r25, Y+14	; 0x0e
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e2       	ldi	r20, 0x20	; 32
    2280:	51 e4       	ldi	r21, 0x41	; 65
    2282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	9e 83       	std	Y+6, r25	; 0x06
    2298:	8d 83       	std	Y+5, r24	; 0x05
    229a:	0f c0       	rjmp	.+30     	; 0x22ba <SevSeg_SevErrStateDisplayMax+0x302>
    229c:	88 ec       	ldi	r24, 0xC8	; 200
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	9c 83       	std	Y+4, r25	; 0x04
    22a2:	8b 83       	std	Y+3, r24	; 0x03
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	9c 81       	ldd	r25, Y+4	; 0x04
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <SevSeg_SevErrStateDisplayMax+0x2f0>
    22ac:	9c 83       	std	Y+4, r25	; 0x04
    22ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b0:	8d 81       	ldd	r24, Y+5	; 0x05
    22b2:	9e 81       	ldd	r25, Y+6	; 0x06
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	9e 83       	std	Y+6, r25	; 0x06
    22b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ba:	8d 81       	ldd	r24, Y+5	; 0x05
    22bc:	9e 81       	ldd	r25, Y+6	; 0x06
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	69 f7       	brne	.-38     	; 0x229c <SevSeg_SevErrStateDisplayMax+0x2e4>
    22c2:	14 c0       	rjmp	.+40     	; 0x22ec <SevSeg_SevErrStateDisplayMax+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c4:	6f 81       	ldd	r22, Y+7	; 0x07
    22c6:	78 85       	ldd	r23, Y+8	; 0x08
    22c8:	89 85       	ldd	r24, Y+9	; 0x09
    22ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    22cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	9e 83       	std	Y+6, r25	; 0x06
    22d6:	8d 83       	std	Y+5, r24	; 0x05
    22d8:	8d 81       	ldd	r24, Y+5	; 0x05
    22da:	9e 81       	ldd	r25, Y+6	; 0x06
    22dc:	9a 83       	std	Y+2, r25	; 0x02
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	9a 81       	ldd	r25, Y+2	; 0x02
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <SevSeg_SevErrStateDisplayMax+0x32c>
    22e8:	9a 83       	std	Y+2, r25	; 0x02
    22ea:	89 83       	std	Y+1, r24	; 0x01
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
					return Number_Error;
				}
				else{
					for(u8 i=0;i<10;i++){
    22ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ee:	8f 5f       	subi	r24, 0xFF	; 255
    22f0:	8d 8f       	std	Y+29, r24	; 0x1d
    22f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22f4:	8a 30       	cpi	r24, 0x0A	; 10
    22f6:	08 f4       	brcc	.+2      	; 0x22fa <SevSeg_SevErrStateDisplayMax+0x342>
    22f8:	78 cf       	rjmp	.-272    	; 0x21ea <SevSeg_SevErrStateDisplayMax+0x232>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[i]);
						_delay_ms(150);
					}
					if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE){
    22fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22fc:	81 30       	cpi	r24, 0x01	; 1
    22fe:	19 f0       	breq	.+6      	; 0x2306 <SevSeg_SevErrStateDisplayMax+0x34e>
    2300:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2302:	84 30       	cpi	r24, 0x04	; 4
    2304:	11 f4       	brne	.+4      	; 0x230a <SevSeg_SevErrStateDisplayMax+0x352>
						return Number_Error;
    2306:	1b a2       	std	Y+35, r1	; 0x23
    2308:	05 c0       	rjmp	.+10     	; 0x2314 <SevSeg_SevErrStateDisplayMax+0x35c>
					}
					else
						return Seven_OK;
    230a:	82 e0       	ldi	r24, 0x02	; 2
    230c:	8b a3       	std	Y+35, r24	; 0x23
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <SevSeg_SevErrStateDisplayMax+0x35c>
				}
			}
		}
	}
	return Seven_OK;
    2310:	82 e0       	ldi	r24, 0x02	; 2
    2312:	8b a3       	std	Y+35, r24	; 0x23
    2314:	8b a1       	ldd	r24, Y+35	; 0x23
}
    2316:	a3 96       	adiw	r28, 0x23	; 35
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	cd bf       	out	0x3d, r28	; 61
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	08 95       	ret

00002328 <Led_LedErrStateTurnOn>:
 */
#include "../../Common/Definition.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "Led_Interface.h"

LedErrState	Led_LedErrStateTurnOn(Led_info *Led){
    2328:	df 93       	push	r29
    232a:	cf 93       	push	r28
    232c:	00 d0       	rcall	.+0      	; 0x232e <Led_LedErrStateTurnOn+0x6>
    232e:	00 d0       	rcall	.+0      	; 0x2330 <Led_LedErrStateTurnOn+0x8>
    2330:	0f 92       	push	r0
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	9c 83       	std	Y+4, r25	; 0x04
    2338:	8b 83       	std	Y+3, r24	; 0x03
	u8 SetPinErrReturn;
	u8 SetValueErrReturnON;

	SetPinErrReturn=DIO_ErrStateSetPinDirection(Led->Led_Group,Led->Led_Pin,DIO_OUT);
    233a:	eb 81       	ldd	r30, Y+3	; 0x03
    233c:	fc 81       	ldd	r31, Y+4	; 0x04
    233e:	80 81       	ld	r24, Z
    2340:	eb 81       	ldd	r30, Y+3	; 0x03
    2342:	fc 81       	ldd	r31, Y+4	; 0x04
    2344:	91 81       	ldd	r25, Z+1	; 0x01
    2346:	69 2f       	mov	r22, r25
    2348:	41 e0       	ldi	r20, 0x01	; 1
    234a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    234e:	8a 83       	std	Y+2, r24	; 0x02
	if(SetPinErrReturn==DIO_ERROR_PORT||SetPinErrReturn==DIO_ERROR_Direction||SetPinErrReturn==DIO_ERROR_PIN){
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	81 30       	cpi	r24, 0x01	; 1
    2354:	31 f0       	breq	.+12     	; 0x2362 <Led_LedErrStateTurnOn+0x3a>
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	83 30       	cpi	r24, 0x03	; 3
    235a:	19 f0       	breq	.+6      	; 0x2362 <Led_LedErrStateTurnOn+0x3a>
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	82 30       	cpi	r24, 0x02	; 2
    2360:	19 f4       	brne	.+6      	; 0x2368 <Led_LedErrStateTurnOn+0x40>
		return LED_INIT_Error;
    2362:	86 e0       	ldi	r24, 0x06	; 6
    2364:	8d 83       	std	Y+5, r24	; 0x05
    2366:	3e c0       	rjmp	.+124    	; 0x23e4 <Led_LedErrStateTurnOn+0xbc>
	}
	else{
		if(Led->ConnectionType==Source_Connection){
    2368:	eb 81       	ldd	r30, Y+3	; 0x03
    236a:	fc 81       	ldd	r31, Y+4	; 0x04
    236c:	82 81       	ldd	r24, Z+2	; 0x02
    236e:	88 23       	and	r24, r24
    2370:	c9 f4       	brne	.+50     	; 0x23a4 <Led_LedErrStateTurnOn+0x7c>
			// HIGH = ON
			SetValueErrReturnON=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_HIGH);
    2372:	eb 81       	ldd	r30, Y+3	; 0x03
    2374:	fc 81       	ldd	r31, Y+4	; 0x04
    2376:	80 81       	ld	r24, Z
    2378:	eb 81       	ldd	r30, Y+3	; 0x03
    237a:	fc 81       	ldd	r31, Y+4	; 0x04
    237c:	91 81       	ldd	r25, Z+1	; 0x01
    237e:	69 2f       	mov	r22, r25
    2380:	41 e0       	ldi	r20, 0x01	; 1
    2382:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2386:	89 83       	std	Y+1, r24	; 0x01
			if(SetValueErrReturnON==DIO_ERROR_PORT||SetValueErrReturnON==DIO_ERROR_VALUE||SetValueErrReturnON==DIO_ERROR_PIN){
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	81 30       	cpi	r24, 0x01	; 1
    238c:	31 f0       	breq	.+12     	; 0x239a <Led_LedErrStateTurnOn+0x72>
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	84 30       	cpi	r24, 0x04	; 4
    2392:	19 f0       	breq	.+6      	; 0x239a <Led_LedErrStateTurnOn+0x72>
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	82 30       	cpi	r24, 0x02	; 2
    2398:	19 f4       	brne	.+6      	; 0x23a0 <Led_LedErrStateTurnOn+0x78>
				return LED_ON_Error;
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	8d 83       	std	Y+5, r24	; 0x05
    239e:	22 c0       	rjmp	.+68     	; 0x23e4 <Led_LedErrStateTurnOn+0xbc>
			}
			else
				return LED_ON_OK;
    23a0:	1d 82       	std	Y+5, r1	; 0x05
    23a2:	20 c0       	rjmp	.+64     	; 0x23e4 <Led_LedErrStateTurnOn+0xbc>
		}
		else if(Led->ConnectionType==Sink_Connection){
    23a4:	eb 81       	ldd	r30, Y+3	; 0x03
    23a6:	fc 81       	ldd	r31, Y+4	; 0x04
    23a8:	82 81       	ldd	r24, Z+2	; 0x02
    23aa:	81 30       	cpi	r24, 0x01	; 1
    23ac:	c9 f4       	brne	.+50     	; 0x23e0 <Led_LedErrStateTurnOn+0xb8>
			// LOW = ON
			SetValueErrReturnON=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_LOW);
    23ae:	eb 81       	ldd	r30, Y+3	; 0x03
    23b0:	fc 81       	ldd	r31, Y+4	; 0x04
    23b2:	80 81       	ld	r24, Z
    23b4:	eb 81       	ldd	r30, Y+3	; 0x03
    23b6:	fc 81       	ldd	r31, Y+4	; 0x04
    23b8:	91 81       	ldd	r25, Z+1	; 0x01
    23ba:	69 2f       	mov	r22, r25
    23bc:	40 e0       	ldi	r20, 0x00	; 0
    23be:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    23c2:	89 83       	std	Y+1, r24	; 0x01
			if(SetValueErrReturnON==DIO_ERROR_PORT||SetValueErrReturnON==DIO_ERROR_VALUE||SetValueErrReturnON==DIO_ERROR_PIN){
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	81 30       	cpi	r24, 0x01	; 1
    23c8:	31 f0       	breq	.+12     	; 0x23d6 <Led_LedErrStateTurnOn+0xae>
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	84 30       	cpi	r24, 0x04	; 4
    23ce:	19 f0       	breq	.+6      	; 0x23d6 <Led_LedErrStateTurnOn+0xae>
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	82 30       	cpi	r24, 0x02	; 2
    23d4:	19 f4       	brne	.+6      	; 0x23dc <Led_LedErrStateTurnOn+0xb4>
				return LED_ON_Error;
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	8d 83       	std	Y+5, r24	; 0x05
    23da:	04 c0       	rjmp	.+8      	; 0x23e4 <Led_LedErrStateTurnOn+0xbc>
			}
			else
				return LED_ON_OK;
    23dc:	1d 82       	std	Y+5, r1	; 0x05
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <Led_LedErrStateTurnOn+0xbc>
		}
		else
			return LED_Connection_Error;
    23e0:	84 e0       	ldi	r24, 0x04	; 4
    23e2:	8d 83       	std	Y+5, r24	; 0x05
    23e4:	8d 81       	ldd	r24, Y+5	; 0x05

	}
}
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <Led_LedErrStateTurnOff>:


LedErrState	Led_LedErrStateTurnOff(Led_info *Led){
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	00 d0       	rcall	.+0      	; 0x23fc <Led_LedErrStateTurnOff+0x6>
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <Led_LedErrStateTurnOff+0x8>
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	9b 83       	std	Y+3, r25	; 0x03
    2404:	8a 83       	std	Y+2, r24	; 0x02
	u8 SetValueErrReturnOFF;
	if(Led->ConnectionType==Source_Connection){
    2406:	ea 81       	ldd	r30, Y+2	; 0x02
    2408:	fb 81       	ldd	r31, Y+3	; 0x03
    240a:	82 81       	ldd	r24, Z+2	; 0x02
    240c:	88 23       	and	r24, r24
    240e:	d1 f4       	brne	.+52     	; 0x2444 <Led_LedErrStateTurnOff+0x4e>
		// HIGH = ON
		SetValueErrReturnOFF=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_LOW);
    2410:	ea 81       	ldd	r30, Y+2	; 0x02
    2412:	fb 81       	ldd	r31, Y+3	; 0x03
    2414:	80 81       	ld	r24, Z
    2416:	ea 81       	ldd	r30, Y+2	; 0x02
    2418:	fb 81       	ldd	r31, Y+3	; 0x03
    241a:	91 81       	ldd	r25, Z+1	; 0x01
    241c:	69 2f       	mov	r22, r25
    241e:	40 e0       	ldi	r20, 0x00	; 0
    2420:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2424:	89 83       	std	Y+1, r24	; 0x01
		if(SetValueErrReturnOFF==DIO_ERROR_PORT||SetValueErrReturnOFF==DIO_ERROR_VALUE||SetValueErrReturnOFF==DIO_ERROR_PIN){
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	81 30       	cpi	r24, 0x01	; 1
    242a:	31 f0       	breq	.+12     	; 0x2438 <Led_LedErrStateTurnOff+0x42>
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	84 30       	cpi	r24, 0x04	; 4
    2430:	19 f0       	breq	.+6      	; 0x2438 <Led_LedErrStateTurnOff+0x42>
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	82 30       	cpi	r24, 0x02	; 2
    2436:	19 f4       	brne	.+6      	; 0x243e <Led_LedErrStateTurnOff+0x48>
			return LED_OFF_Error;
    2438:	83 e0       	ldi	r24, 0x03	; 3
    243a:	8c 83       	std	Y+4, r24	; 0x04
    243c:	24 c0       	rjmp	.+72     	; 0x2486 <Led_LedErrStateTurnOff+0x90>
		}
		else
			return LED_OFF_OK;
    243e:	82 e0       	ldi	r24, 0x02	; 2
    2440:	8c 83       	std	Y+4, r24	; 0x04
    2442:	21 c0       	rjmp	.+66     	; 0x2486 <Led_LedErrStateTurnOff+0x90>
	}
else if(Led->ConnectionType==Sink_Connection){
    2444:	ea 81       	ldd	r30, Y+2	; 0x02
    2446:	fb 81       	ldd	r31, Y+3	; 0x03
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	81 30       	cpi	r24, 0x01	; 1
    244c:	d1 f4       	brne	.+52     	; 0x2482 <Led_LedErrStateTurnOff+0x8c>
	// LOW = ON
	SetValueErrReturnOFF=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_HIGH);
    244e:	ea 81       	ldd	r30, Y+2	; 0x02
    2450:	fb 81       	ldd	r31, Y+3	; 0x03
    2452:	80 81       	ld	r24, Z
    2454:	ea 81       	ldd	r30, Y+2	; 0x02
    2456:	fb 81       	ldd	r31, Y+3	; 0x03
    2458:	91 81       	ldd	r25, Z+1	; 0x01
    245a:	69 2f       	mov	r22, r25
    245c:	41 e0       	ldi	r20, 0x01	; 1
    245e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2462:	89 83       	std	Y+1, r24	; 0x01
	if(SetValueErrReturnOFF==DIO_ERROR_PORT||SetValueErrReturnOFF==DIO_ERROR_VALUE||SetValueErrReturnOFF==DIO_ERROR_PIN){
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	81 30       	cpi	r24, 0x01	; 1
    2468:	31 f0       	breq	.+12     	; 0x2476 <Led_LedErrStateTurnOff+0x80>
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	84 30       	cpi	r24, 0x04	; 4
    246e:	19 f0       	breq	.+6      	; 0x2476 <Led_LedErrStateTurnOff+0x80>
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	82 30       	cpi	r24, 0x02	; 2
    2474:	19 f4       	brne	.+6      	; 0x247c <Led_LedErrStateTurnOff+0x86>
		return LED_OFF_Error;
    2476:	83 e0       	ldi	r24, 0x03	; 3
    2478:	8c 83       	std	Y+4, r24	; 0x04
    247a:	05 c0       	rjmp	.+10     	; 0x2486 <Led_LedErrStateTurnOff+0x90>
	}
	else
		return LED_OFF_OK;
    247c:	82 e0       	ldi	r24, 0x02	; 2
    247e:	8c 83       	std	Y+4, r24	; 0x04
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <Led_LedErrStateTurnOff+0x90>
}
else
	return LED_Connection_Error;
    2482:	84 e0       	ldi	r24, 0x04	; 4
    2484:	8c 83       	std	Y+4, r24	; 0x04
    2486:	8c 81       	ldd	r24, Y+4	; 0x04

}
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	08 95       	ret

00002496 <LCD_VoidSendCommand>:
 */
#include"../../MCAL/DIO/DIO_Interface.h"
#include "LCD_Interface.h"
#include <stdlib.h>

void LCD_VoidSendCommand(u8 Local_Command,LCD_Info *lcd){
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	6f 97       	sbiw	r28, 0x1f	; 31
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	8d 8f       	std	Y+29, r24	; 0x1d
    24ac:	7f 8f       	std	Y+31, r23	; 0x1f
    24ae:	6e 8f       	std	Y+30, r22	; 0x1e
	/*RS->LOw*/
	DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_LOW);
    24b0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    24b2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    24b4:	80 81       	ld	r24, Z
    24b6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    24b8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    24ba:	91 81       	ldd	r25, Z+1	; 0x01
    24bc:	69 2f       	mov	r22, r25
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
	/*RW-> LOW*/
	DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    24c4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    24c6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	ee 8d       	ldd	r30, Y+30	; 0x1e
    24cc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    24ce:	93 81       	ldd	r25, Z+3	; 0x03
    24d0:	69 2f       	mov	r22, r25
    24d2:	40 e0       	ldi	r20, 0x00	; 0
    24d4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
	/*Group = Command*/
	DIO_ErrStateSetPortValue(lcd->Data_group,Local_Command);
    24d8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    24da:	ff 8d       	ldd	r31, Y+31	; 0x1f
    24dc:	86 81       	ldd	r24, Z+6	; 0x06
    24de:	6d 8d       	ldd	r22, Y+29	; 0x1d
    24e0:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
	/*Enable*/
	DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    24e4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    24e6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    24e8:	84 81       	ldd	r24, Z+4	; 0x04
    24ea:	ee 8d       	ldd	r30, Y+30	; 0x1e
    24ec:	ff 8d       	ldd	r31, Y+31	; 0x1f
    24ee:	95 81       	ldd	r25, Z+5	; 0x05
    24f0:	69 2f       	mov	r22, r25
    24f2:	41 e0       	ldi	r20, 0x01	; 1
    24f4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a0 e8       	ldi	r26, 0x80	; 128
    24fe:	bf e3       	ldi	r27, 0x3F	; 63
    2500:	89 8f       	std	Y+25, r24	; 0x19
    2502:	9a 8f       	std	Y+26, r25	; 0x1a
    2504:	ab 8f       	std	Y+27, r26	; 0x1b
    2506:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2508:	69 8d       	ldd	r22, Y+25	; 0x19
    250a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    250c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    250e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	4a ef       	ldi	r20, 0xFA	; 250
    2516:	54 e4       	ldi	r21, 0x44	; 68
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	8d 8b       	std	Y+21, r24	; 0x15
    2522:	9e 8b       	std	Y+22, r25	; 0x16
    2524:	af 8b       	std	Y+23, r26	; 0x17
    2526:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2528:	6d 89       	ldd	r22, Y+21	; 0x15
    252a:	7e 89       	ldd	r23, Y+22	; 0x16
    252c:	8f 89       	ldd	r24, Y+23	; 0x17
    252e:	98 8d       	ldd	r25, Y+24	; 0x18
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e8       	ldi	r20, 0x80	; 128
    2536:	5f e3       	ldi	r21, 0x3F	; 63
    2538:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    253c:	88 23       	and	r24, r24
    253e:	2c f4       	brge	.+10     	; 0x254a <LCD_VoidSendCommand+0xb4>
		__ticks = 1;
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	9c 8b       	std	Y+20, r25	; 0x14
    2546:	8b 8b       	std	Y+19, r24	; 0x13
    2548:	3f c0       	rjmp	.+126    	; 0x25c8 <LCD_VoidSendCommand+0x132>
	else if (__tmp > 65535)
    254a:	6d 89       	ldd	r22, Y+21	; 0x15
    254c:	7e 89       	ldd	r23, Y+22	; 0x16
    254e:	8f 89       	ldd	r24, Y+23	; 0x17
    2550:	98 8d       	ldd	r25, Y+24	; 0x18
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	3f ef       	ldi	r19, 0xFF	; 255
    2556:	4f e7       	ldi	r20, 0x7F	; 127
    2558:	57 e4       	ldi	r21, 0x47	; 71
    255a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    255e:	18 16       	cp	r1, r24
    2560:	4c f5       	brge	.+82     	; 0x25b4 <LCD_VoidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2562:	69 8d       	ldd	r22, Y+25	; 0x19
    2564:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2566:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2568:	9c 8d       	ldd	r25, Y+28	; 0x1c
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e2       	ldi	r20, 0x20	; 32
    2570:	51 e4       	ldi	r21, 0x41	; 65
    2572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	bc 01       	movw	r22, r24
    257c:	cd 01       	movw	r24, r26
    257e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	9c 8b       	std	Y+20, r25	; 0x14
    2588:	8b 8b       	std	Y+19, r24	; 0x13
    258a:	0f c0       	rjmp	.+30     	; 0x25aa <LCD_VoidSendCommand+0x114>
    258c:	88 ec       	ldi	r24, 0xC8	; 200
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	9a 8b       	std	Y+18, r25	; 0x12
    2592:	89 8b       	std	Y+17, r24	; 0x11
    2594:	89 89       	ldd	r24, Y+17	; 0x11
    2596:	9a 89       	ldd	r25, Y+18	; 0x12
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	f1 f7       	brne	.-4      	; 0x2598 <LCD_VoidSendCommand+0x102>
    259c:	9a 8b       	std	Y+18, r25	; 0x12
    259e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a0:	8b 89       	ldd	r24, Y+19	; 0x13
    25a2:	9c 89       	ldd	r25, Y+20	; 0x14
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	9c 8b       	std	Y+20, r25	; 0x14
    25a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25aa:	8b 89       	ldd	r24, Y+19	; 0x13
    25ac:	9c 89       	ldd	r25, Y+20	; 0x14
    25ae:	00 97       	sbiw	r24, 0x00	; 0
    25b0:	69 f7       	brne	.-38     	; 0x258c <LCD_VoidSendCommand+0xf6>
    25b2:	14 c0       	rjmp	.+40     	; 0x25dc <LCD_VoidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b4:	6d 89       	ldd	r22, Y+21	; 0x15
    25b6:	7e 89       	ldd	r23, Y+22	; 0x16
    25b8:	8f 89       	ldd	r24, Y+23	; 0x17
    25ba:	98 8d       	ldd	r25, Y+24	; 0x18
    25bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	9c 8b       	std	Y+20, r25	; 0x14
    25c6:	8b 8b       	std	Y+19, r24	; 0x13
    25c8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ca:	9c 89       	ldd	r25, Y+20	; 0x14
    25cc:	98 8b       	std	Y+16, r25	; 0x10
    25ce:	8f 87       	std	Y+15, r24	; 0x0f
    25d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25d2:	98 89       	ldd	r25, Y+16	; 0x10
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <LCD_VoidSendCommand+0x13e>
    25d8:	98 8b       	std	Y+16, r25	; 0x10
    25da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    25dc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    25de:	ff 8d       	ldd	r31, Y+31	; 0x1f
    25e0:	84 81       	ldd	r24, Z+4	; 0x04
    25e2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    25e4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    25e6:	95 81       	ldd	r25, Z+5	; 0x05
    25e8:	69 2f       	mov	r22, r25
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	a0 e8       	ldi	r26, 0x80	; 128
    25f6:	bf e3       	ldi	r27, 0x3F	; 63
    25f8:	8b 87       	std	Y+11, r24	; 0x0b
    25fa:	9c 87       	std	Y+12, r25	; 0x0c
    25fc:	ad 87       	std	Y+13, r26	; 0x0d
    25fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2600:	6b 85       	ldd	r22, Y+11	; 0x0b
    2602:	7c 85       	ldd	r23, Y+12	; 0x0c
    2604:	8d 85       	ldd	r24, Y+13	; 0x0d
    2606:	9e 85       	ldd	r25, Y+14	; 0x0e
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	4a ef       	ldi	r20, 0xFA	; 250
    260e:	54 e4       	ldi	r21, 0x44	; 68
    2610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	8f 83       	std	Y+7, r24	; 0x07
    261a:	98 87       	std	Y+8, r25	; 0x08
    261c:	a9 87       	std	Y+9, r26	; 0x09
    261e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2620:	6f 81       	ldd	r22, Y+7	; 0x07
    2622:	78 85       	ldd	r23, Y+8	; 0x08
    2624:	89 85       	ldd	r24, Y+9	; 0x09
    2626:	9a 85       	ldd	r25, Y+10	; 0x0a
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e8       	ldi	r20, 0x80	; 128
    262e:	5f e3       	ldi	r21, 0x3F	; 63
    2630:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2634:	88 23       	and	r24, r24
    2636:	2c f4       	brge	.+10     	; 0x2642 <LCD_VoidSendCommand+0x1ac>
		__ticks = 1;
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	9e 83       	std	Y+6, r25	; 0x06
    263e:	8d 83       	std	Y+5, r24	; 0x05
    2640:	3f c0       	rjmp	.+126    	; 0x26c0 <LCD_VoidSendCommand+0x22a>
	else if (__tmp > 65535)
    2642:	6f 81       	ldd	r22, Y+7	; 0x07
    2644:	78 85       	ldd	r23, Y+8	; 0x08
    2646:	89 85       	ldd	r24, Y+9	; 0x09
    2648:	9a 85       	ldd	r25, Y+10	; 0x0a
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	3f ef       	ldi	r19, 0xFF	; 255
    264e:	4f e7       	ldi	r20, 0x7F	; 127
    2650:	57 e4       	ldi	r21, 0x47	; 71
    2652:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2656:	18 16       	cp	r1, r24
    2658:	4c f5       	brge	.+82     	; 0x26ac <LCD_VoidSendCommand+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265a:	6b 85       	ldd	r22, Y+11	; 0x0b
    265c:	7c 85       	ldd	r23, Y+12	; 0x0c
    265e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2660:	9e 85       	ldd	r25, Y+14	; 0x0e
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e2       	ldi	r20, 0x20	; 32
    2668:	51 e4       	ldi	r21, 0x41	; 65
    266a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	bc 01       	movw	r22, r24
    2674:	cd 01       	movw	r24, r26
    2676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
    2682:	0f c0       	rjmp	.+30     	; 0x26a2 <LCD_VoidSendCommand+0x20c>
    2684:	88 ec       	ldi	r24, 0xC8	; 200
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	9c 83       	std	Y+4, r25	; 0x04
    268a:	8b 83       	std	Y+3, r24	; 0x03
    268c:	8b 81       	ldd	r24, Y+3	; 0x03
    268e:	9c 81       	ldd	r25, Y+4	; 0x04
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <LCD_VoidSendCommand+0x1fa>
    2694:	9c 83       	std	Y+4, r25	; 0x04
    2696:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2698:	8d 81       	ldd	r24, Y+5	; 0x05
    269a:	9e 81       	ldd	r25, Y+6	; 0x06
    269c:	01 97       	sbiw	r24, 0x01	; 1
    269e:	9e 83       	std	Y+6, r25	; 0x06
    26a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a2:	8d 81       	ldd	r24, Y+5	; 0x05
    26a4:	9e 81       	ldd	r25, Y+6	; 0x06
    26a6:	00 97       	sbiw	r24, 0x00	; 0
    26a8:	69 f7       	brne	.-38     	; 0x2684 <LCD_VoidSendCommand+0x1ee>
    26aa:	14 c0       	rjmp	.+40     	; 0x26d4 <LCD_VoidSendCommand+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ac:	6f 81       	ldd	r22, Y+7	; 0x07
    26ae:	78 85       	ldd	r23, Y+8	; 0x08
    26b0:	89 85       	ldd	r24, Y+9	; 0x09
    26b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	9e 83       	std	Y+6, r25	; 0x06
    26be:	8d 83       	std	Y+5, r24	; 0x05
    26c0:	8d 81       	ldd	r24, Y+5	; 0x05
    26c2:	9e 81       	ldd	r25, Y+6	; 0x06
    26c4:	9a 83       	std	Y+2, r25	; 0x02
    26c6:	89 83       	std	Y+1, r24	; 0x01
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	9a 81       	ldd	r25, Y+2	; 0x02
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	f1 f7       	brne	.-4      	; 0x26cc <LCD_VoidSendCommand+0x236>
    26d0:	9a 83       	std	Y+2, r25	; 0x02
    26d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    26d4:	6f 96       	adiw	r28, 0x1f	; 31
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	de bf       	out	0x3e, r29	; 62
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <LCD_VoidSendChar>:

u8 LCD_VoidSendChar(u8 Local_Char,LCD_Info *lcd)
{
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	eb 97       	sbiw	r28, 0x3b	; 59
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	89 af       	std	Y+57, r24	; 0x39
    26fc:	7b af       	std	Y+59, r23	; 0x3b
    26fe:	6a af       	std	Y+58, r22	; 0x3a
	static u8 SwitchingCounter;
	static u8 SecondLineCounter;
	if(SwitchingCounter<16){
    2700:	80 91 9f 00 	lds	r24, 0x009F
    2704:	80 31       	cpi	r24, 0x10	; 16
    2706:	08 f0       	brcs	.+2      	; 0x270a <LCD_VoidSendChar+0x24>
    2708:	18 c1       	rjmp	.+560    	; 0x293a <LCD_VoidSendChar+0x254>
		//LCD_VoidGoToXY(FirstLineCounter,0,lcd);
		/*RS->LOw*/
		DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    270a:	ea ad       	ldd	r30, Y+58	; 0x3a
    270c:	fb ad       	ldd	r31, Y+59	; 0x3b
    270e:	80 81       	ld	r24, Z
    2710:	ea ad       	ldd	r30, Y+58	; 0x3a
    2712:	fb ad       	ldd	r31, Y+59	; 0x3b
    2714:	91 81       	ldd	r25, Z+1	; 0x01
    2716:	69 2f       	mov	r22, r25
    2718:	41 e0       	ldi	r20, 0x01	; 1
    271a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		/*RW-> LOW*/
		DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    271e:	ea ad       	ldd	r30, Y+58	; 0x3a
    2720:	fb ad       	ldd	r31, Y+59	; 0x3b
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	ea ad       	ldd	r30, Y+58	; 0x3a
    2726:	fb ad       	ldd	r31, Y+59	; 0x3b
    2728:	93 81       	ldd	r25, Z+3	; 0x03
    272a:	69 2f       	mov	r22, r25
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		/*Group = Command*/
		DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    2732:	ea ad       	ldd	r30, Y+58	; 0x3a
    2734:	fb ad       	ldd	r31, Y+59	; 0x3b
    2736:	86 81       	ldd	r24, Z+6	; 0x06
    2738:	69 ad       	ldd	r22, Y+57	; 0x39
    273a:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
		/*Enable*/
		DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    273e:	ea ad       	ldd	r30, Y+58	; 0x3a
    2740:	fb ad       	ldd	r31, Y+59	; 0x3b
    2742:	84 81       	ldd	r24, Z+4	; 0x04
    2744:	ea ad       	ldd	r30, Y+58	; 0x3a
    2746:	fb ad       	ldd	r31, Y+59	; 0x3b
    2748:	95 81       	ldd	r25, Z+5	; 0x05
    274a:	69 2f       	mov	r22, r25
    274c:	41 e0       	ldi	r20, 0x01	; 1
    274e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	a0 e8       	ldi	r26, 0x80	; 128
    2758:	bf e3       	ldi	r27, 0x3F	; 63
    275a:	8d ab       	std	Y+53, r24	; 0x35
    275c:	9e ab       	std	Y+54, r25	; 0x36
    275e:	af ab       	std	Y+55, r26	; 0x37
    2760:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2762:	6d a9       	ldd	r22, Y+53	; 0x35
    2764:	7e a9       	ldd	r23, Y+54	; 0x36
    2766:	8f a9       	ldd	r24, Y+55	; 0x37
    2768:	98 ad       	ldd	r25, Y+56	; 0x38
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	4a ef       	ldi	r20, 0xFA	; 250
    2770:	54 e4       	ldi	r21, 0x44	; 68
    2772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	89 ab       	std	Y+49, r24	; 0x31
    277c:	9a ab       	std	Y+50, r25	; 0x32
    277e:	ab ab       	std	Y+51, r26	; 0x33
    2780:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2782:	69 a9       	ldd	r22, Y+49	; 0x31
    2784:	7a a9       	ldd	r23, Y+50	; 0x32
    2786:	8b a9       	ldd	r24, Y+51	; 0x33
    2788:	9c a9       	ldd	r25, Y+52	; 0x34
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e8       	ldi	r20, 0x80	; 128
    2790:	5f e3       	ldi	r21, 0x3F	; 63
    2792:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2796:	88 23       	and	r24, r24
    2798:	2c f4       	brge	.+10     	; 0x27a4 <LCD_VoidSendChar+0xbe>
		__ticks = 1;
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	98 ab       	std	Y+48, r25	; 0x30
    27a0:	8f a7       	std	Y+47, r24	; 0x2f
    27a2:	3f c0       	rjmp	.+126    	; 0x2822 <LCD_VoidSendChar+0x13c>
	else if (__tmp > 65535)
    27a4:	69 a9       	ldd	r22, Y+49	; 0x31
    27a6:	7a a9       	ldd	r23, Y+50	; 0x32
    27a8:	8b a9       	ldd	r24, Y+51	; 0x33
    27aa:	9c a9       	ldd	r25, Y+52	; 0x34
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	3f ef       	ldi	r19, 0xFF	; 255
    27b0:	4f e7       	ldi	r20, 0x7F	; 127
    27b2:	57 e4       	ldi	r21, 0x47	; 71
    27b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27b8:	18 16       	cp	r1, r24
    27ba:	4c f5       	brge	.+82     	; 0x280e <LCD_VoidSendChar+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27bc:	6d a9       	ldd	r22, Y+53	; 0x35
    27be:	7e a9       	ldd	r23, Y+54	; 0x36
    27c0:	8f a9       	ldd	r24, Y+55	; 0x37
    27c2:	98 ad       	ldd	r25, Y+56	; 0x38
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	40 e2       	ldi	r20, 0x20	; 32
    27ca:	51 e4       	ldi	r21, 0x41	; 65
    27cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	bc 01       	movw	r22, r24
    27d6:	cd 01       	movw	r24, r26
    27d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	98 ab       	std	Y+48, r25	; 0x30
    27e2:	8f a7       	std	Y+47, r24	; 0x2f
    27e4:	0f c0       	rjmp	.+30     	; 0x2804 <LCD_VoidSendChar+0x11e>
    27e6:	88 ec       	ldi	r24, 0xC8	; 200
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	9e a7       	std	Y+46, r25	; 0x2e
    27ec:	8d a7       	std	Y+45, r24	; 0x2d
    27ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    27f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	f1 f7       	brne	.-4      	; 0x27f2 <LCD_VoidSendChar+0x10c>
    27f6:	9e a7       	std	Y+46, r25	; 0x2e
    27f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    27fc:	98 a9       	ldd	r25, Y+48	; 0x30
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	98 ab       	std	Y+48, r25	; 0x30
    2802:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2804:	8f a5       	ldd	r24, Y+47	; 0x2f
    2806:	98 a9       	ldd	r25, Y+48	; 0x30
    2808:	00 97       	sbiw	r24, 0x00	; 0
    280a:	69 f7       	brne	.-38     	; 0x27e6 <LCD_VoidSendChar+0x100>
    280c:	14 c0       	rjmp	.+40     	; 0x2836 <LCD_VoidSendChar+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280e:	69 a9       	ldd	r22, Y+49	; 0x31
    2810:	7a a9       	ldd	r23, Y+50	; 0x32
    2812:	8b a9       	ldd	r24, Y+51	; 0x33
    2814:	9c a9       	ldd	r25, Y+52	; 0x34
    2816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	98 ab       	std	Y+48, r25	; 0x30
    2820:	8f a7       	std	Y+47, r24	; 0x2f
    2822:	8f a5       	ldd	r24, Y+47	; 0x2f
    2824:	98 a9       	ldd	r25, Y+48	; 0x30
    2826:	9c a7       	std	Y+44, r25	; 0x2c
    2828:	8b a7       	std	Y+43, r24	; 0x2b
    282a:	8b a5       	ldd	r24, Y+43	; 0x2b
    282c:	9c a5       	ldd	r25, Y+44	; 0x2c
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <LCD_VoidSendChar+0x148>
    2832:	9c a7       	std	Y+44, r25	; 0x2c
    2834:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    2836:	ea ad       	ldd	r30, Y+58	; 0x3a
    2838:	fb ad       	ldd	r31, Y+59	; 0x3b
    283a:	84 81       	ldd	r24, Z+4	; 0x04
    283c:	ea ad       	ldd	r30, Y+58	; 0x3a
    283e:	fb ad       	ldd	r31, Y+59	; 0x3b
    2840:	95 81       	ldd	r25, Z+5	; 0x05
    2842:	69 2f       	mov	r22, r25
    2844:	40 e0       	ldi	r20, 0x00	; 0
    2846:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	a0 e8       	ldi	r26, 0x80	; 128
    2850:	bf e3       	ldi	r27, 0x3F	; 63
    2852:	8f a3       	std	Y+39, r24	; 0x27
    2854:	98 a7       	std	Y+40, r25	; 0x28
    2856:	a9 a7       	std	Y+41, r26	; 0x29
    2858:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285a:	6f a1       	ldd	r22, Y+39	; 0x27
    285c:	78 a5       	ldd	r23, Y+40	; 0x28
    285e:	89 a5       	ldd	r24, Y+41	; 0x29
    2860:	9a a5       	ldd	r25, Y+42	; 0x2a
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	4a ef       	ldi	r20, 0xFA	; 250
    2868:	54 e4       	ldi	r21, 0x44	; 68
    286a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	8b a3       	std	Y+35, r24	; 0x23
    2874:	9c a3       	std	Y+36, r25	; 0x24
    2876:	ad a3       	std	Y+37, r26	; 0x25
    2878:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    287a:	6b a1       	ldd	r22, Y+35	; 0x23
    287c:	7c a1       	ldd	r23, Y+36	; 0x24
    287e:	8d a1       	ldd	r24, Y+37	; 0x25
    2880:	9e a1       	ldd	r25, Y+38	; 0x26
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e8       	ldi	r20, 0x80	; 128
    2888:	5f e3       	ldi	r21, 0x3F	; 63
    288a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    288e:	88 23       	and	r24, r24
    2890:	2c f4       	brge	.+10     	; 0x289c <LCD_VoidSendChar+0x1b6>
		__ticks = 1;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	9a a3       	std	Y+34, r25	; 0x22
    2898:	89 a3       	std	Y+33, r24	; 0x21
    289a:	3f c0       	rjmp	.+126    	; 0x291a <LCD_VoidSendChar+0x234>
	else if (__tmp > 65535)
    289c:	6b a1       	ldd	r22, Y+35	; 0x23
    289e:	7c a1       	ldd	r23, Y+36	; 0x24
    28a0:	8d a1       	ldd	r24, Y+37	; 0x25
    28a2:	9e a1       	ldd	r25, Y+38	; 0x26
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	3f ef       	ldi	r19, 0xFF	; 255
    28a8:	4f e7       	ldi	r20, 0x7F	; 127
    28aa:	57 e4       	ldi	r21, 0x47	; 71
    28ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28b0:	18 16       	cp	r1, r24
    28b2:	4c f5       	brge	.+82     	; 0x2906 <LCD_VoidSendChar+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b4:	6f a1       	ldd	r22, Y+39	; 0x27
    28b6:	78 a5       	ldd	r23, Y+40	; 0x28
    28b8:	89 a5       	ldd	r24, Y+41	; 0x29
    28ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e2       	ldi	r20, 0x20	; 32
    28c2:	51 e4       	ldi	r21, 0x41	; 65
    28c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	bc 01       	movw	r22, r24
    28ce:	cd 01       	movw	r24, r26
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	9a a3       	std	Y+34, r25	; 0x22
    28da:	89 a3       	std	Y+33, r24	; 0x21
    28dc:	0f c0       	rjmp	.+30     	; 0x28fc <LCD_VoidSendChar+0x216>
    28de:	88 ec       	ldi	r24, 0xC8	; 200
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	98 a3       	std	Y+32, r25	; 0x20
    28e4:	8f 8f       	std	Y+31, r24	; 0x1f
    28e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28e8:	98 a1       	ldd	r25, Y+32	; 0x20
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <LCD_VoidSendChar+0x204>
    28ee:	98 a3       	std	Y+32, r25	; 0x20
    28f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f2:	89 a1       	ldd	r24, Y+33	; 0x21
    28f4:	9a a1       	ldd	r25, Y+34	; 0x22
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	9a a3       	std	Y+34, r25	; 0x22
    28fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fc:	89 a1       	ldd	r24, Y+33	; 0x21
    28fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	69 f7       	brne	.-38     	; 0x28de <LCD_VoidSendChar+0x1f8>
    2904:	14 c0       	rjmp	.+40     	; 0x292e <LCD_VoidSendChar+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2906:	6b a1       	ldd	r22, Y+35	; 0x23
    2908:	7c a1       	ldd	r23, Y+36	; 0x24
    290a:	8d a1       	ldd	r24, Y+37	; 0x25
    290c:	9e a1       	ldd	r25, Y+38	; 0x26
    290e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	9a a3       	std	Y+34, r25	; 0x22
    2918:	89 a3       	std	Y+33, r24	; 0x21
    291a:	89 a1       	ldd	r24, Y+33	; 0x21
    291c:	9a a1       	ldd	r25, Y+34	; 0x22
    291e:	9e 8f       	std	Y+30, r25	; 0x1e
    2920:	8d 8f       	std	Y+29, r24	; 0x1d
    2922:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2924:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	f1 f7       	brne	.-4      	; 0x2926 <LCD_VoidSendChar+0x240>
    292a:	9e 8f       	std	Y+30, r25	; 0x1e
    292c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		SwitchingCounter++;
    292e:	80 91 9f 00 	lds	r24, 0x009F
    2932:	8f 5f       	subi	r24, 0xFF	; 255
    2934:	80 93 9f 00 	sts	0x009F, r24
    2938:	2e c1       	rjmp	.+604    	; 0x2b96 <LCD_VoidSendChar+0x4b0>
		//FirstLineCounter++;
	}
	else if(SwitchingCounter>15&&SwitchingCounter<32){
    293a:	80 91 9f 00 	lds	r24, 0x009F
    293e:	80 31       	cpi	r24, 0x10	; 16
    2940:	08 f4       	brcc	.+2      	; 0x2944 <LCD_VoidSendChar+0x25e>
    2942:	29 c1       	rjmp	.+594    	; 0x2b96 <LCD_VoidSendChar+0x4b0>
    2944:	80 91 9f 00 	lds	r24, 0x009F
    2948:	80 32       	cpi	r24, 0x20	; 32
    294a:	08 f0       	brcs	.+2      	; 0x294e <LCD_VoidSendChar+0x268>
    294c:	24 c1       	rjmp	.+584    	; 0x2b96 <LCD_VoidSendChar+0x4b0>
		LCD_VoidGoToXY(SecondLineCounter,1,lcd);
    294e:	80 91 9e 00 	lds	r24, 0x009E
    2952:	2a ad       	ldd	r18, Y+58	; 0x3a
    2954:	3b ad       	ldd	r19, Y+59	; 0x3b
    2956:	61 e0       	ldi	r22, 0x01	; 1
    2958:	a9 01       	movw	r20, r18
    295a:	0e 94 4b 19 	call	0x3296	; 0x3296 <LCD_VoidGoToXY>
		/*RS->LOw*/
		DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    295e:	ea ad       	ldd	r30, Y+58	; 0x3a
    2960:	fb ad       	ldd	r31, Y+59	; 0x3b
    2962:	80 81       	ld	r24, Z
    2964:	ea ad       	ldd	r30, Y+58	; 0x3a
    2966:	fb ad       	ldd	r31, Y+59	; 0x3b
    2968:	91 81       	ldd	r25, Z+1	; 0x01
    296a:	69 2f       	mov	r22, r25
    296c:	41 e0       	ldi	r20, 0x01	; 1
    296e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		/*RW-> LOW*/
		DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    2972:	ea ad       	ldd	r30, Y+58	; 0x3a
    2974:	fb ad       	ldd	r31, Y+59	; 0x3b
    2976:	82 81       	ldd	r24, Z+2	; 0x02
    2978:	ea ad       	ldd	r30, Y+58	; 0x3a
    297a:	fb ad       	ldd	r31, Y+59	; 0x3b
    297c:	93 81       	ldd	r25, Z+3	; 0x03
    297e:	69 2f       	mov	r22, r25
    2980:	40 e0       	ldi	r20, 0x00	; 0
    2982:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		/*Group = Command*/
		DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    2986:	ea ad       	ldd	r30, Y+58	; 0x3a
    2988:	fb ad       	ldd	r31, Y+59	; 0x3b
    298a:	86 81       	ldd	r24, Z+6	; 0x06
    298c:	69 ad       	ldd	r22, Y+57	; 0x39
    298e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
		/*Enable*/
		DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    2992:	ea ad       	ldd	r30, Y+58	; 0x3a
    2994:	fb ad       	ldd	r31, Y+59	; 0x3b
    2996:	84 81       	ldd	r24, Z+4	; 0x04
    2998:	ea ad       	ldd	r30, Y+58	; 0x3a
    299a:	fb ad       	ldd	r31, Y+59	; 0x3b
    299c:	95 81       	ldd	r25, Z+5	; 0x05
    299e:	69 2f       	mov	r22, r25
    29a0:	41 e0       	ldi	r20, 0x01	; 1
    29a2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	a0 e8       	ldi	r26, 0x80	; 128
    29ac:	bf e3       	ldi	r27, 0x3F	; 63
    29ae:	89 8f       	std	Y+25, r24	; 0x19
    29b0:	9a 8f       	std	Y+26, r25	; 0x1a
    29b2:	ab 8f       	std	Y+27, r26	; 0x1b
    29b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b6:	69 8d       	ldd	r22, Y+25	; 0x19
    29b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	4a ef       	ldi	r20, 0xFA	; 250
    29c4:	54 e4       	ldi	r21, 0x44	; 68
    29c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	8d 8b       	std	Y+21, r24	; 0x15
    29d0:	9e 8b       	std	Y+22, r25	; 0x16
    29d2:	af 8b       	std	Y+23, r26	; 0x17
    29d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29d6:	6d 89       	ldd	r22, Y+21	; 0x15
    29d8:	7e 89       	ldd	r23, Y+22	; 0x16
    29da:	8f 89       	ldd	r24, Y+23	; 0x17
    29dc:	98 8d       	ldd	r25, Y+24	; 0x18
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e8       	ldi	r20, 0x80	; 128
    29e4:	5f e3       	ldi	r21, 0x3F	; 63
    29e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29ea:	88 23       	and	r24, r24
    29ec:	2c f4       	brge	.+10     	; 0x29f8 <LCD_VoidSendChar+0x312>
		__ticks = 1;
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	9c 8b       	std	Y+20, r25	; 0x14
    29f4:	8b 8b       	std	Y+19, r24	; 0x13
    29f6:	3f c0       	rjmp	.+126    	; 0x2a76 <LCD_VoidSendChar+0x390>
	else if (__tmp > 65535)
    29f8:	6d 89       	ldd	r22, Y+21	; 0x15
    29fa:	7e 89       	ldd	r23, Y+22	; 0x16
    29fc:	8f 89       	ldd	r24, Y+23	; 0x17
    29fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	3f ef       	ldi	r19, 0xFF	; 255
    2a04:	4f e7       	ldi	r20, 0x7F	; 127
    2a06:	57 e4       	ldi	r21, 0x47	; 71
    2a08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a0c:	18 16       	cp	r1, r24
    2a0e:	4c f5       	brge	.+82     	; 0x2a62 <LCD_VoidSendChar+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a10:	69 8d       	ldd	r22, Y+25	; 0x19
    2a12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e2       	ldi	r20, 0x20	; 32
    2a1e:	51 e4       	ldi	r21, 0x41	; 65
    2a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	9c 8b       	std	Y+20, r25	; 0x14
    2a36:	8b 8b       	std	Y+19, r24	; 0x13
    2a38:	0f c0       	rjmp	.+30     	; 0x2a58 <LCD_VoidSendChar+0x372>
    2a3a:	88 ec       	ldi	r24, 0xC8	; 200
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	9a 8b       	std	Y+18, r25	; 0x12
    2a40:	89 8b       	std	Y+17, r24	; 0x11
    2a42:	89 89       	ldd	r24, Y+17	; 0x11
    2a44:	9a 89       	ldd	r25, Y+18	; 0x12
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <LCD_VoidSendChar+0x360>
    2a4a:	9a 8b       	std	Y+18, r25	; 0x12
    2a4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a50:	9c 89       	ldd	r25, Y+20	; 0x14
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	9c 8b       	std	Y+20, r25	; 0x14
    2a56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a58:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	69 f7       	brne	.-38     	; 0x2a3a <LCD_VoidSendChar+0x354>
    2a60:	14 c0       	rjmp	.+40     	; 0x2a8a <LCD_VoidSendChar+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a62:	6d 89       	ldd	r22, Y+21	; 0x15
    2a64:	7e 89       	ldd	r23, Y+22	; 0x16
    2a66:	8f 89       	ldd	r24, Y+23	; 0x17
    2a68:	98 8d       	ldd	r25, Y+24	; 0x18
    2a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	9c 8b       	std	Y+20, r25	; 0x14
    2a74:	8b 8b       	std	Y+19, r24	; 0x13
    2a76:	8b 89       	ldd	r24, Y+19	; 0x13
    2a78:	9c 89       	ldd	r25, Y+20	; 0x14
    2a7a:	98 8b       	std	Y+16, r25	; 0x10
    2a7c:	8f 87       	std	Y+15, r24	; 0x0f
    2a7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a80:	98 89       	ldd	r25, Y+16	; 0x10
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	f1 f7       	brne	.-4      	; 0x2a82 <LCD_VoidSendChar+0x39c>
    2a86:	98 8b       	std	Y+16, r25	; 0x10
    2a88:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    2a8a:	ea ad       	ldd	r30, Y+58	; 0x3a
    2a8c:	fb ad       	ldd	r31, Y+59	; 0x3b
    2a8e:	84 81       	ldd	r24, Z+4	; 0x04
    2a90:	ea ad       	ldd	r30, Y+58	; 0x3a
    2a92:	fb ad       	ldd	r31, Y+59	; 0x3b
    2a94:	95 81       	ldd	r25, Z+5	; 0x05
    2a96:	69 2f       	mov	r22, r25
    2a98:	40 e0       	ldi	r20, 0x00	; 0
    2a9a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	a0 e8       	ldi	r26, 0x80	; 128
    2aa4:	bf e3       	ldi	r27, 0x3F	; 63
    2aa6:	8b 87       	std	Y+11, r24	; 0x0b
    2aa8:	9c 87       	std	Y+12, r25	; 0x0c
    2aaa:	ad 87       	std	Y+13, r26	; 0x0d
    2aac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	4a ef       	ldi	r20, 0xFA	; 250
    2abc:	54 e4       	ldi	r21, 0x44	; 68
    2abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	8f 83       	std	Y+7, r24	; 0x07
    2ac8:	98 87       	std	Y+8, r25	; 0x08
    2aca:	a9 87       	std	Y+9, r26	; 0x09
    2acc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ace:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad0:	78 85       	ldd	r23, Y+8	; 0x08
    2ad2:	89 85       	ldd	r24, Y+9	; 0x09
    2ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	5f e3       	ldi	r21, 0x3F	; 63
    2ade:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ae2:	88 23       	and	r24, r24
    2ae4:	2c f4       	brge	.+10     	; 0x2af0 <LCD_VoidSendChar+0x40a>
		__ticks = 1;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	9e 83       	std	Y+6, r25	; 0x06
    2aec:	8d 83       	std	Y+5, r24	; 0x05
    2aee:	3f c0       	rjmp	.+126    	; 0x2b6e <LCD_VoidSendChar+0x488>
	else if (__tmp > 65535)
    2af0:	6f 81       	ldd	r22, Y+7	; 0x07
    2af2:	78 85       	ldd	r23, Y+8	; 0x08
    2af4:	89 85       	ldd	r24, Y+9	; 0x09
    2af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	3f ef       	ldi	r19, 0xFF	; 255
    2afc:	4f e7       	ldi	r20, 0x7F	; 127
    2afe:	57 e4       	ldi	r21, 0x47	; 71
    2b00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b04:	18 16       	cp	r1, r24
    2b06:	4c f5       	brge	.+82     	; 0x2b5a <LCD_VoidSendChar+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e2       	ldi	r20, 0x20	; 32
    2b16:	51 e4       	ldi	r21, 0x41	; 65
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	9e 83       	std	Y+6, r25	; 0x06
    2b2e:	8d 83       	std	Y+5, r24	; 0x05
    2b30:	0f c0       	rjmp	.+30     	; 0x2b50 <LCD_VoidSendChar+0x46a>
    2b32:	88 ec       	ldi	r24, 0xC8	; 200
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	9c 83       	std	Y+4, r25	; 0x04
    2b38:	8b 83       	std	Y+3, r24	; 0x03
    2b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <LCD_VoidSendChar+0x458>
    2b42:	9c 83       	std	Y+4, r25	; 0x04
    2b44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b46:	8d 81       	ldd	r24, Y+5	; 0x05
    2b48:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	9e 83       	std	Y+6, r25	; 0x06
    2b4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b50:	8d 81       	ldd	r24, Y+5	; 0x05
    2b52:	9e 81       	ldd	r25, Y+6	; 0x06
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	69 f7       	brne	.-38     	; 0x2b32 <LCD_VoidSendChar+0x44c>
    2b58:	14 c0       	rjmp	.+40     	; 0x2b82 <LCD_VoidSendChar+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5c:	78 85       	ldd	r23, Y+8	; 0x08
    2b5e:	89 85       	ldd	r24, Y+9	; 0x09
    2b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	9e 83       	std	Y+6, r25	; 0x06
    2b6c:	8d 83       	std	Y+5, r24	; 0x05
    2b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b70:	9e 81       	ldd	r25, Y+6	; 0x06
    2b72:	9a 83       	std	Y+2, r25	; 0x02
    2b74:	89 83       	std	Y+1, r24	; 0x01
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <LCD_VoidSendChar+0x494>
    2b7e:	9a 83       	std	Y+2, r25	; 0x02
    2b80:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		SwitchingCounter++;
    2b82:	80 91 9f 00 	lds	r24, 0x009F
    2b86:	8f 5f       	subi	r24, 0xFF	; 255
    2b88:	80 93 9f 00 	sts	0x009F, r24
		SecondLineCounter++;
    2b8c:	80 91 9e 00 	lds	r24, 0x009E
    2b90:	8f 5f       	subi	r24, 0xFF	; 255
    2b92:	80 93 9e 00 	sts	0x009E, r24
	}
return 0;
    2b96:	80 e0       	ldi	r24, 0x00	; 0

}
    2b98:	eb 96       	adiw	r28, 0x3b	; 59
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	08 95       	ret

00002baa <LCD_VoidSendCharRepeat>:
u8 LCD_VoidSendCharRepeat(u8 Local_Char,LCD_Info *lcd)
{
    2baa:	df 93       	push	r29
    2bac:	cf 93       	push	r28
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
    2bb2:	a0 97       	sbiw	r28, 0x20	; 32
    2bb4:	0f b6       	in	r0, 0x3f	; 63
    2bb6:	f8 94       	cli
    2bb8:	de bf       	out	0x3e, r29	; 62
    2bba:	0f be       	out	0x3f, r0	; 63
    2bbc:	cd bf       	out	0x3d, r28	; 61
    2bbe:	8d 8f       	std	Y+29, r24	; 0x1d
    2bc0:	7f 8f       	std	Y+31, r23	; 0x1f
    2bc2:	6e 8f       	std	Y+30, r22	; 0x1e
	static u8 SwitchingCounter;
	static u8 FirstLineCounter,SecondLineCounter;
	if(SwitchingCounter<16){
    2bc4:	80 91 a2 00 	lds	r24, 0x00A2
    2bc8:	80 31       	cpi	r24, 0x10	; 16
    2bca:	08 f0       	brcs	.+2      	; 0x2bce <LCD_VoidSendCharRepeat+0x24>
    2bcc:	18 c1       	rjmp	.+560    	; 0x2dfe <LCD_VoidSendCharRepeat+0x254>
		//LCD_VoidGoToXY(FirstLineCounter,0,lcd);
		/*RS->LOw*/
		DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    2bce:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2bd0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2bd2:	80 81       	ld	r24, Z
    2bd4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2bd6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2bd8:	91 81       	ldd	r25, Z+1	; 0x01
    2bda:	69 2f       	mov	r22, r25
    2bdc:	41 e0       	ldi	r20, 0x01	; 1
    2bde:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		/*RW-> LOW*/
		DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    2be2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2be4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2be6:	82 81       	ldd	r24, Z+2	; 0x02
    2be8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2bea:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2bec:	93 81       	ldd	r25, Z+3	; 0x03
    2bee:	69 2f       	mov	r22, r25
    2bf0:	40 e0       	ldi	r20, 0x00	; 0
    2bf2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		/*Group = Command*/
		DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    2bf6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2bf8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2bfa:	86 81       	ldd	r24, Z+6	; 0x06
    2bfc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2bfe:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
		/*Enable*/
		DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    2c02:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c04:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c06:	84 81       	ldd	r24, Z+4	; 0x04
    2c08:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c0a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c0c:	95 81       	ldd	r25, Z+5	; 0x05
    2c0e:	69 2f       	mov	r22, r25
    2c10:	41 e0       	ldi	r20, 0x01	; 1
    2c12:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	a0 e8       	ldi	r26, 0x80	; 128
    2c1c:	bf e3       	ldi	r27, 0x3F	; 63
    2c1e:	89 8f       	std	Y+25, r24	; 0x19
    2c20:	9a 8f       	std	Y+26, r25	; 0x1a
    2c22:	ab 8f       	std	Y+27, r26	; 0x1b
    2c24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c26:	69 8d       	ldd	r22, Y+25	; 0x19
    2c28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	4a ef       	ldi	r20, 0xFA	; 250
    2c34:	54 e4       	ldi	r21, 0x44	; 68
    2c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	8d 8b       	std	Y+21, r24	; 0x15
    2c40:	9e 8b       	std	Y+22, r25	; 0x16
    2c42:	af 8b       	std	Y+23, r26	; 0x17
    2c44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c46:	6d 89       	ldd	r22, Y+21	; 0x15
    2c48:	7e 89       	ldd	r23, Y+22	; 0x16
    2c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	40 e8       	ldi	r20, 0x80	; 128
    2c54:	5f e3       	ldi	r21, 0x3F	; 63
    2c56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c5a:	88 23       	and	r24, r24
    2c5c:	2c f4       	brge	.+10     	; 0x2c68 <LCD_VoidSendCharRepeat+0xbe>
		__ticks = 1;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	9c 8b       	std	Y+20, r25	; 0x14
    2c64:	8b 8b       	std	Y+19, r24	; 0x13
    2c66:	3f c0       	rjmp	.+126    	; 0x2ce6 <LCD_VoidSendCharRepeat+0x13c>
	else if (__tmp > 65535)
    2c68:	6d 89       	ldd	r22, Y+21	; 0x15
    2c6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	3f ef       	ldi	r19, 0xFF	; 255
    2c74:	4f e7       	ldi	r20, 0x7F	; 127
    2c76:	57 e4       	ldi	r21, 0x47	; 71
    2c78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c7c:	18 16       	cp	r1, r24
    2c7e:	4c f5       	brge	.+82     	; 0x2cd2 <LCD_VoidSendCharRepeat+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c80:	69 8d       	ldd	r22, Y+25	; 0x19
    2c82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	40 e2       	ldi	r20, 0x20	; 32
    2c8e:	51 e4       	ldi	r21, 0x41	; 65
    2c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	bc 01       	movw	r22, r24
    2c9a:	cd 01       	movw	r24, r26
    2c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	9c 8b       	std	Y+20, r25	; 0x14
    2ca6:	8b 8b       	std	Y+19, r24	; 0x13
    2ca8:	0f c0       	rjmp	.+30     	; 0x2cc8 <LCD_VoidSendCharRepeat+0x11e>
    2caa:	88 ec       	ldi	r24, 0xC8	; 200
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	9a 8b       	std	Y+18, r25	; 0x12
    2cb0:	89 8b       	std	Y+17, r24	; 0x11
    2cb2:	89 89       	ldd	r24, Y+17	; 0x11
    2cb4:	9a 89       	ldd	r25, Y+18	; 0x12
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	f1 f7       	brne	.-4      	; 0x2cb6 <LCD_VoidSendCharRepeat+0x10c>
    2cba:	9a 8b       	std	Y+18, r25	; 0x12
    2cbc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cbe:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc2:	01 97       	sbiw	r24, 0x01	; 1
    2cc4:	9c 8b       	std	Y+20, r25	; 0x14
    2cc6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cca:	9c 89       	ldd	r25, Y+20	; 0x14
    2ccc:	00 97       	sbiw	r24, 0x00	; 0
    2cce:	69 f7       	brne	.-38     	; 0x2caa <LCD_VoidSendCharRepeat+0x100>
    2cd0:	14 c0       	rjmp	.+40     	; 0x2cfa <LCD_VoidSendCharRepeat+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	9c 8b       	std	Y+20, r25	; 0x14
    2ce4:	8b 8b       	std	Y+19, r24	; 0x13
    2ce6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cea:	98 8b       	std	Y+16, r25	; 0x10
    2cec:	8f 87       	std	Y+15, r24	; 0x0f
    2cee:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf0:	98 89       	ldd	r25, Y+16	; 0x10
    2cf2:	01 97       	sbiw	r24, 0x01	; 1
    2cf4:	f1 f7       	brne	.-4      	; 0x2cf2 <LCD_VoidSendCharRepeat+0x148>
    2cf6:	98 8b       	std	Y+16, r25	; 0x10
    2cf8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    2cfa:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2cfc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2cfe:	84 81       	ldd	r24, Z+4	; 0x04
    2d00:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2d02:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2d04:	95 81       	ldd	r25, Z+5	; 0x05
    2d06:	69 2f       	mov	r22, r25
    2d08:	40 e0       	ldi	r20, 0x00	; 0
    2d0a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2d0e:	80 e0       	ldi	r24, 0x00	; 0
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	a0 e8       	ldi	r26, 0x80	; 128
    2d14:	bf e3       	ldi	r27, 0x3F	; 63
    2d16:	8b 87       	std	Y+11, r24	; 0x0b
    2d18:	9c 87       	std	Y+12, r25	; 0x0c
    2d1a:	ad 87       	std	Y+13, r26	; 0x0d
    2d1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	4a ef       	ldi	r20, 0xFA	; 250
    2d2c:	54 e4       	ldi	r21, 0x44	; 68
    2d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	8f 83       	std	Y+7, r24	; 0x07
    2d38:	98 87       	std	Y+8, r25	; 0x08
    2d3a:	a9 87       	std	Y+9, r26	; 0x09
    2d3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d40:	78 85       	ldd	r23, Y+8	; 0x08
    2d42:	89 85       	ldd	r24, Y+9	; 0x09
    2d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e8       	ldi	r20, 0x80	; 128
    2d4c:	5f e3       	ldi	r21, 0x3F	; 63
    2d4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d52:	88 23       	and	r24, r24
    2d54:	2c f4       	brge	.+10     	; 0x2d60 <LCD_VoidSendCharRepeat+0x1b6>
		__ticks = 1;
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	9e 83       	std	Y+6, r25	; 0x06
    2d5c:	8d 83       	std	Y+5, r24	; 0x05
    2d5e:	3f c0       	rjmp	.+126    	; 0x2dde <LCD_VoidSendCharRepeat+0x234>
	else if (__tmp > 65535)
    2d60:	6f 81       	ldd	r22, Y+7	; 0x07
    2d62:	78 85       	ldd	r23, Y+8	; 0x08
    2d64:	89 85       	ldd	r24, Y+9	; 0x09
    2d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	3f ef       	ldi	r19, 0xFF	; 255
    2d6c:	4f e7       	ldi	r20, 0x7F	; 127
    2d6e:	57 e4       	ldi	r21, 0x47	; 71
    2d70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d74:	18 16       	cp	r1, r24
    2d76:	4c f5       	brge	.+82     	; 0x2dca <LCD_VoidSendCharRepeat+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	40 e2       	ldi	r20, 0x20	; 32
    2d86:	51 e4       	ldi	r21, 0x41	; 65
    2d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	bc 01       	movw	r22, r24
    2d92:	cd 01       	movw	r24, r26
    2d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	9e 83       	std	Y+6, r25	; 0x06
    2d9e:	8d 83       	std	Y+5, r24	; 0x05
    2da0:	0f c0       	rjmp	.+30     	; 0x2dc0 <LCD_VoidSendCharRepeat+0x216>
    2da2:	88 ec       	ldi	r24, 0xC8	; 200
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	9c 83       	std	Y+4, r25	; 0x04
    2da8:	8b 83       	std	Y+3, r24	; 0x03
    2daa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dac:	9c 81       	ldd	r25, Y+4	; 0x04
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	f1 f7       	brne	.-4      	; 0x2dae <LCD_VoidSendCharRepeat+0x204>
    2db2:	9c 83       	std	Y+4, r25	; 0x04
    2db4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db6:	8d 81       	ldd	r24, Y+5	; 0x05
    2db8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	9e 83       	std	Y+6, r25	; 0x06
    2dbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc4:	00 97       	sbiw	r24, 0x00	; 0
    2dc6:	69 f7       	brne	.-38     	; 0x2da2 <LCD_VoidSendCharRepeat+0x1f8>
    2dc8:	14 c0       	rjmp	.+40     	; 0x2df2 <LCD_VoidSendCharRepeat+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dca:	6f 81       	ldd	r22, Y+7	; 0x07
    2dcc:	78 85       	ldd	r23, Y+8	; 0x08
    2dce:	89 85       	ldd	r24, Y+9	; 0x09
    2dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	9e 83       	std	Y+6, r25	; 0x06
    2ddc:	8d 83       	std	Y+5, r24	; 0x05
    2dde:	8d 81       	ldd	r24, Y+5	; 0x05
    2de0:	9e 81       	ldd	r25, Y+6	; 0x06
    2de2:	9a 83       	std	Y+2, r25	; 0x02
    2de4:	89 83       	std	Y+1, r24	; 0x01
    2de6:	89 81       	ldd	r24, Y+1	; 0x01
    2de8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	f1 f7       	brne	.-4      	; 0x2dea <LCD_VoidSendCharRepeat+0x240>
    2dee:	9a 83       	std	Y+2, r25	; 0x02
    2df0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		SwitchingCounter++;
    2df2:	80 91 a2 00 	lds	r24, 0x00A2
    2df6:	8f 5f       	subi	r24, 0xFF	; 255
    2df8:	80 93 a2 00 	sts	0x00A2, r24
    2dfc:	0c c0       	rjmp	.+24     	; 0x2e16 <LCD_VoidSendCharRepeat+0x26c>
		_delay_ms(1);
		SwitchingCounter++;
		SecondLineCounter++;
	}*/
	else{
		SwitchingCounter=0;
    2dfe:	10 92 a2 00 	sts	0x00A2, r1
		FirstLineCounter=0;
    2e02:	10 92 a1 00 	sts	0x00A1, r1
		SecondLineCounter=0;
    2e06:	10 92 a0 00 	sts	0x00A0, r1
		LCD_VoidSendCommand(0x01,lcd); // Clear lcd
    2e0a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2e0c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	b9 01       	movw	r22, r18
    2e12:	0e 94 4b 12 	call	0x2496	; 0x2496 <LCD_VoidSendCommand>
	}

}
    2e16:	a0 96       	adiw	r28, 0x20	; 32
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	f8 94       	cli
    2e1c:	de bf       	out	0x3e, r29	; 62
    2e1e:	0f be       	out	0x3f, r0	; 63
    2e20:	cd bf       	out	0x3d, r28	; 61
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	08 95       	ret

00002e28 <LCD_VoidInit>:
void LCD_VoidInit(LCD_Info *lcd){
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
    2e30:	ea 97       	sbiw	r28, 0x3a	; 58
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	de bf       	out	0x3e, r29	; 62
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	9a af       	std	Y+58, r25	; 0x3a
    2e3e:	89 af       	std	Y+57, r24	; 0x39
	/*Set Directions*/
	DIO_ErrStateSetPinDirection(lcd->RS_group,lcd->RS_pin,DIO_OUT);
    2e40:	e9 ad       	ldd	r30, Y+57	; 0x39
    2e42:	fa ad       	ldd	r31, Y+58	; 0x3a
    2e44:	80 81       	ld	r24, Z
    2e46:	e9 ad       	ldd	r30, Y+57	; 0x39
    2e48:	fa ad       	ldd	r31, Y+58	; 0x3a
    2e4a:	91 81       	ldd	r25, Z+1	; 0x01
    2e4c:	69 2f       	mov	r22, r25
    2e4e:	41 e0       	ldi	r20, 0x01	; 1
    2e50:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->RW_group,lcd->RW_pin,DIO_OUT);
    2e54:	e9 ad       	ldd	r30, Y+57	; 0x39
    2e56:	fa ad       	ldd	r31, Y+58	; 0x3a
    2e58:	82 81       	ldd	r24, Z+2	; 0x02
    2e5a:	e9 ad       	ldd	r30, Y+57	; 0x39
    2e5c:	fa ad       	ldd	r31, Y+58	; 0x3a
    2e5e:	93 81       	ldd	r25, Z+3	; 0x03
    2e60:	69 2f       	mov	r22, r25
    2e62:	41 e0       	ldi	r20, 0x01	; 1
    2e64:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->E_group,lcd->E_pin,DIO_OUT);
    2e68:	e9 ad       	ldd	r30, Y+57	; 0x39
    2e6a:	fa ad       	ldd	r31, Y+58	; 0x3a
    2e6c:	84 81       	ldd	r24, Z+4	; 0x04
    2e6e:	e9 ad       	ldd	r30, Y+57	; 0x39
    2e70:	fa ad       	ldd	r31, Y+58	; 0x3a
    2e72:	95 81       	ldd	r25, Z+5	; 0x05
    2e74:	69 2f       	mov	r22, r25
    2e76:	41 e0       	ldi	r20, 0x01	; 1
    2e78:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetGroupDirection(lcd->Data_group,0xFF);
    2e7c:	e9 ad       	ldd	r30, Y+57	; 0x39
    2e7e:	fa ad       	ldd	r31, Y+58	; 0x3a
    2e80:	86 81       	ldd	r24, Z+6	; 0x06
    2e82:	6f ef       	ldi	r22, 0xFF	; 255
    2e84:	0e 94 a6 0a 	call	0x154c	; 0x154c <DIO_ErrStateSetGroupDirection>
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	a0 e2       	ldi	r26, 0x20	; 32
    2e8e:	b2 e4       	ldi	r27, 0x42	; 66
    2e90:	8d ab       	std	Y+53, r24	; 0x35
    2e92:	9e ab       	std	Y+54, r25	; 0x36
    2e94:	af ab       	std	Y+55, r26	; 0x37
    2e96:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e98:	6d a9       	ldd	r22, Y+53	; 0x35
    2e9a:	7e a9       	ldd	r23, Y+54	; 0x36
    2e9c:	8f a9       	ldd	r24, Y+55	; 0x37
    2e9e:	98 ad       	ldd	r25, Y+56	; 0x38
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	4a ef       	ldi	r20, 0xFA	; 250
    2ea6:	54 e4       	ldi	r21, 0x44	; 68
    2ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	89 ab       	std	Y+49, r24	; 0x31
    2eb2:	9a ab       	std	Y+50, r25	; 0x32
    2eb4:	ab ab       	std	Y+51, r26	; 0x33
    2eb6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2eb8:	69 a9       	ldd	r22, Y+49	; 0x31
    2eba:	7a a9       	ldd	r23, Y+50	; 0x32
    2ebc:	8b a9       	ldd	r24, Y+51	; 0x33
    2ebe:	9c a9       	ldd	r25, Y+52	; 0x34
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e8       	ldi	r20, 0x80	; 128
    2ec6:	5f e3       	ldi	r21, 0x3F	; 63
    2ec8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ecc:	88 23       	and	r24, r24
    2ece:	2c f4       	brge	.+10     	; 0x2eda <LCD_VoidInit+0xb2>
		__ticks = 1;
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	98 ab       	std	Y+48, r25	; 0x30
    2ed6:	8f a7       	std	Y+47, r24	; 0x2f
    2ed8:	3f c0       	rjmp	.+126    	; 0x2f58 <LCD_VoidInit+0x130>
	else if (__tmp > 65535)
    2eda:	69 a9       	ldd	r22, Y+49	; 0x31
    2edc:	7a a9       	ldd	r23, Y+50	; 0x32
    2ede:	8b a9       	ldd	r24, Y+51	; 0x33
    2ee0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	3f ef       	ldi	r19, 0xFF	; 255
    2ee6:	4f e7       	ldi	r20, 0x7F	; 127
    2ee8:	57 e4       	ldi	r21, 0x47	; 71
    2eea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eee:	18 16       	cp	r1, r24
    2ef0:	4c f5       	brge	.+82     	; 0x2f44 <LCD_VoidInit+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ef4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ef6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ef8:	98 ad       	ldd	r25, Y+56	; 0x38
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e2       	ldi	r20, 0x20	; 32
    2f00:	51 e4       	ldi	r21, 0x41	; 65
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	bc 01       	movw	r22, r24
    2f0c:	cd 01       	movw	r24, r26
    2f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	98 ab       	std	Y+48, r25	; 0x30
    2f18:	8f a7       	std	Y+47, r24	; 0x2f
    2f1a:	0f c0       	rjmp	.+30     	; 0x2f3a <LCD_VoidInit+0x112>
    2f1c:	88 ec       	ldi	r24, 0xC8	; 200
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	9e a7       	std	Y+46, r25	; 0x2e
    2f22:	8d a7       	std	Y+45, r24	; 0x2d
    2f24:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f26:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <LCD_VoidInit+0x100>
    2f2c:	9e a7       	std	Y+46, r25	; 0x2e
    2f2e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f32:	98 a9       	ldd	r25, Y+48	; 0x30
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	98 ab       	std	Y+48, r25	; 0x30
    2f38:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	69 f7       	brne	.-38     	; 0x2f1c <LCD_VoidInit+0xf4>
    2f42:	14 c0       	rjmp	.+40     	; 0x2f6c <LCD_VoidInit+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f44:	69 a9       	ldd	r22, Y+49	; 0x31
    2f46:	7a a9       	ldd	r23, Y+50	; 0x32
    2f48:	8b a9       	ldd	r24, Y+51	; 0x33
    2f4a:	9c a9       	ldd	r25, Y+52	; 0x34
    2f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	98 ab       	std	Y+48, r25	; 0x30
    2f56:	8f a7       	std	Y+47, r24	; 0x2f
    2f58:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f5a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f5c:	9c a7       	std	Y+44, r25	; 0x2c
    2f5e:	8b a7       	std	Y+43, r24	; 0x2b
    2f60:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f62:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	f1 f7       	brne	.-4      	; 0x2f64 <LCD_VoidInit+0x13c>
    2f68:	9c a7       	std	Y+44, r25	; 0x2c
    2f6a:	8b a7       	std	Y+43, r24	; 0x2b
	/*Wait more than 30 ms*/
	_delay_ms(40);
	/*Sent function set*/
	LCD_VoidSendCommand(LCD_Set8Bit2Line5x8,lcd);
    2f6c:	29 ad       	ldd	r18, Y+57	; 0x39
    2f6e:	3a ad       	ldd	r19, Y+58	; 0x3a
    2f70:	88 e3       	ldi	r24, 0x38	; 56
    2f72:	b9 01       	movw	r22, r18
    2f74:	0e 94 4b 12 	call	0x2496	; 0x2496 <LCD_VoidSendCommand>
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	a0 e8       	ldi	r26, 0x80	; 128
    2f7e:	bf e3       	ldi	r27, 0x3F	; 63
    2f80:	8f a3       	std	Y+39, r24	; 0x27
    2f82:	98 a7       	std	Y+40, r25	; 0x28
    2f84:	a9 a7       	std	Y+41, r26	; 0x29
    2f86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f88:	6f a1       	ldd	r22, Y+39	; 0x27
    2f8a:	78 a5       	ldd	r23, Y+40	; 0x28
    2f8c:	89 a5       	ldd	r24, Y+41	; 0x29
    2f8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	4a ef       	ldi	r20, 0xFA	; 250
    2f96:	54 e4       	ldi	r21, 0x44	; 68
    2f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	8b a3       	std	Y+35, r24	; 0x23
    2fa2:	9c a3       	std	Y+36, r25	; 0x24
    2fa4:	ad a3       	std	Y+37, r26	; 0x25
    2fa6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fa8:	6b a1       	ldd	r22, Y+35	; 0x23
    2faa:	7c a1       	ldd	r23, Y+36	; 0x24
    2fac:	8d a1       	ldd	r24, Y+37	; 0x25
    2fae:	9e a1       	ldd	r25, Y+38	; 0x26
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	40 e8       	ldi	r20, 0x80	; 128
    2fb6:	5f e3       	ldi	r21, 0x3F	; 63
    2fb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fbc:	88 23       	and	r24, r24
    2fbe:	2c f4       	brge	.+10     	; 0x2fca <LCD_VoidInit+0x1a2>
		__ticks = 1;
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	9a a3       	std	Y+34, r25	; 0x22
    2fc6:	89 a3       	std	Y+33, r24	; 0x21
    2fc8:	3f c0       	rjmp	.+126    	; 0x3048 <LCD_VoidInit+0x220>
	else if (__tmp > 65535)
    2fca:	6b a1       	ldd	r22, Y+35	; 0x23
    2fcc:	7c a1       	ldd	r23, Y+36	; 0x24
    2fce:	8d a1       	ldd	r24, Y+37	; 0x25
    2fd0:	9e a1       	ldd	r25, Y+38	; 0x26
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	3f ef       	ldi	r19, 0xFF	; 255
    2fd6:	4f e7       	ldi	r20, 0x7F	; 127
    2fd8:	57 e4       	ldi	r21, 0x47	; 71
    2fda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fde:	18 16       	cp	r1, r24
    2fe0:	4c f5       	brge	.+82     	; 0x3034 <LCD_VoidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe2:	6f a1       	ldd	r22, Y+39	; 0x27
    2fe4:	78 a5       	ldd	r23, Y+40	; 0x28
    2fe6:	89 a5       	ldd	r24, Y+41	; 0x29
    2fe8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	40 e2       	ldi	r20, 0x20	; 32
    2ff0:	51 e4       	ldi	r21, 0x41	; 65
    2ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	bc 01       	movw	r22, r24
    2ffc:	cd 01       	movw	r24, r26
    2ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	9a a3       	std	Y+34, r25	; 0x22
    3008:	89 a3       	std	Y+33, r24	; 0x21
    300a:	0f c0       	rjmp	.+30     	; 0x302a <LCD_VoidInit+0x202>
    300c:	88 ec       	ldi	r24, 0xC8	; 200
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	98 a3       	std	Y+32, r25	; 0x20
    3012:	8f 8f       	std	Y+31, r24	; 0x1f
    3014:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3016:	98 a1       	ldd	r25, Y+32	; 0x20
    3018:	01 97       	sbiw	r24, 0x01	; 1
    301a:	f1 f7       	brne	.-4      	; 0x3018 <LCD_VoidInit+0x1f0>
    301c:	98 a3       	std	Y+32, r25	; 0x20
    301e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3020:	89 a1       	ldd	r24, Y+33	; 0x21
    3022:	9a a1       	ldd	r25, Y+34	; 0x22
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	9a a3       	std	Y+34, r25	; 0x22
    3028:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    302a:	89 a1       	ldd	r24, Y+33	; 0x21
    302c:	9a a1       	ldd	r25, Y+34	; 0x22
    302e:	00 97       	sbiw	r24, 0x00	; 0
    3030:	69 f7       	brne	.-38     	; 0x300c <LCD_VoidInit+0x1e4>
    3032:	14 c0       	rjmp	.+40     	; 0x305c <LCD_VoidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3034:	6b a1       	ldd	r22, Y+35	; 0x23
    3036:	7c a1       	ldd	r23, Y+36	; 0x24
    3038:	8d a1       	ldd	r24, Y+37	; 0x25
    303a:	9e a1       	ldd	r25, Y+38	; 0x26
    303c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	9a a3       	std	Y+34, r25	; 0x22
    3046:	89 a3       	std	Y+33, r24	; 0x21
    3048:	89 a1       	ldd	r24, Y+33	; 0x21
    304a:	9a a1       	ldd	r25, Y+34	; 0x22
    304c:	9e 8f       	std	Y+30, r25	; 0x1e
    304e:	8d 8f       	std	Y+29, r24	; 0x1d
    3050:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3052:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3054:	01 97       	sbiw	r24, 0x01	; 1
    3056:	f1 f7       	brne	.-4      	; 0x3054 <LCD_VoidInit+0x22c>
    3058:	9e 8f       	std	Y+30, r25	; 0x1e
    305a:	8d 8f       	std	Y+29, r24	; 0x1d
	/*WAIT 39us*/
	_delay_ms(1);
	LCD_VoidSendCommand(LCD_CursorON,lcd);
    305c:	29 ad       	ldd	r18, Y+57	; 0x39
    305e:	3a ad       	ldd	r19, Y+58	; 0x3a
    3060:	8e e0       	ldi	r24, 0x0E	; 14
    3062:	b9 01       	movw	r22, r18
    3064:	0e 94 4b 12 	call	0x2496	; 0x2496 <LCD_VoidSendCommand>
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	a0 e8       	ldi	r26, 0x80	; 128
    306e:	bf e3       	ldi	r27, 0x3F	; 63
    3070:	89 8f       	std	Y+25, r24	; 0x19
    3072:	9a 8f       	std	Y+26, r25	; 0x1a
    3074:	ab 8f       	std	Y+27, r26	; 0x1b
    3076:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3078:	69 8d       	ldd	r22, Y+25	; 0x19
    307a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    307c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    307e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	4a ef       	ldi	r20, 0xFA	; 250
    3086:	54 e4       	ldi	r21, 0x44	; 68
    3088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	8d 8b       	std	Y+21, r24	; 0x15
    3092:	9e 8b       	std	Y+22, r25	; 0x16
    3094:	af 8b       	std	Y+23, r26	; 0x17
    3096:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3098:	6d 89       	ldd	r22, Y+21	; 0x15
    309a:	7e 89       	ldd	r23, Y+22	; 0x16
    309c:	8f 89       	ldd	r24, Y+23	; 0x17
    309e:	98 8d       	ldd	r25, Y+24	; 0x18
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e8       	ldi	r20, 0x80	; 128
    30a6:	5f e3       	ldi	r21, 0x3F	; 63
    30a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30ac:	88 23       	and	r24, r24
    30ae:	2c f4       	brge	.+10     	; 0x30ba <LCD_VoidInit+0x292>
		__ticks = 1;
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	9c 8b       	std	Y+20, r25	; 0x14
    30b6:	8b 8b       	std	Y+19, r24	; 0x13
    30b8:	3f c0       	rjmp	.+126    	; 0x3138 <LCD_VoidInit+0x310>
	else if (__tmp > 65535)
    30ba:	6d 89       	ldd	r22, Y+21	; 0x15
    30bc:	7e 89       	ldd	r23, Y+22	; 0x16
    30be:	8f 89       	ldd	r24, Y+23	; 0x17
    30c0:	98 8d       	ldd	r25, Y+24	; 0x18
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	3f ef       	ldi	r19, 0xFF	; 255
    30c6:	4f e7       	ldi	r20, 0x7F	; 127
    30c8:	57 e4       	ldi	r21, 0x47	; 71
    30ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ce:	18 16       	cp	r1, r24
    30d0:	4c f5       	brge	.+82     	; 0x3124 <LCD_VoidInit+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d2:	69 8d       	ldd	r22, Y+25	; 0x19
    30d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	40 e2       	ldi	r20, 0x20	; 32
    30e0:	51 e4       	ldi	r21, 0x41	; 65
    30e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	bc 01       	movw	r22, r24
    30ec:	cd 01       	movw	r24, r26
    30ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	9c 8b       	std	Y+20, r25	; 0x14
    30f8:	8b 8b       	std	Y+19, r24	; 0x13
    30fa:	0f c0       	rjmp	.+30     	; 0x311a <LCD_VoidInit+0x2f2>
    30fc:	88 ec       	ldi	r24, 0xC8	; 200
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	9a 8b       	std	Y+18, r25	; 0x12
    3102:	89 8b       	std	Y+17, r24	; 0x11
    3104:	89 89       	ldd	r24, Y+17	; 0x11
    3106:	9a 89       	ldd	r25, Y+18	; 0x12
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	f1 f7       	brne	.-4      	; 0x3108 <LCD_VoidInit+0x2e0>
    310c:	9a 8b       	std	Y+18, r25	; 0x12
    310e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3110:	8b 89       	ldd	r24, Y+19	; 0x13
    3112:	9c 89       	ldd	r25, Y+20	; 0x14
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	9c 8b       	std	Y+20, r25	; 0x14
    3118:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    311a:	8b 89       	ldd	r24, Y+19	; 0x13
    311c:	9c 89       	ldd	r25, Y+20	; 0x14
    311e:	00 97       	sbiw	r24, 0x00	; 0
    3120:	69 f7       	brne	.-38     	; 0x30fc <LCD_VoidInit+0x2d4>
    3122:	14 c0       	rjmp	.+40     	; 0x314c <LCD_VoidInit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3124:	6d 89       	ldd	r22, Y+21	; 0x15
    3126:	7e 89       	ldd	r23, Y+22	; 0x16
    3128:	8f 89       	ldd	r24, Y+23	; 0x17
    312a:	98 8d       	ldd	r25, Y+24	; 0x18
    312c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	9c 8b       	std	Y+20, r25	; 0x14
    3136:	8b 8b       	std	Y+19, r24	; 0x13
    3138:	8b 89       	ldd	r24, Y+19	; 0x13
    313a:	9c 89       	ldd	r25, Y+20	; 0x14
    313c:	98 8b       	std	Y+16, r25	; 0x10
    313e:	8f 87       	std	Y+15, r24	; 0x0f
    3140:	8f 85       	ldd	r24, Y+15	; 0x0f
    3142:	98 89       	ldd	r25, Y+16	; 0x10
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	f1 f7       	brne	.-4      	; 0x3144 <LCD_VoidInit+0x31c>
    3148:	98 8b       	std	Y+16, r25	; 0x10
    314a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*LCD Clear Display*/
	LCD_VoidSendCommand(LCD_ClearDisplay,lcd);
    314c:	29 ad       	ldd	r18, Y+57	; 0x39
    314e:	3a ad       	ldd	r19, Y+58	; 0x3a
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	b9 01       	movw	r22, r18
    3154:	0e 94 4b 12 	call	0x2496	; 0x2496 <LCD_VoidSendCommand>
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	a0 e8       	ldi	r26, 0x80	; 128
    315e:	bf e3       	ldi	r27, 0x3F	; 63
    3160:	8b 87       	std	Y+11, r24	; 0x0b
    3162:	9c 87       	std	Y+12, r25	; 0x0c
    3164:	ad 87       	std	Y+13, r26	; 0x0d
    3166:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3168:	6b 85       	ldd	r22, Y+11	; 0x0b
    316a:	7c 85       	ldd	r23, Y+12	; 0x0c
    316c:	8d 85       	ldd	r24, Y+13	; 0x0d
    316e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	4a ef       	ldi	r20, 0xFA	; 250
    3176:	54 e4       	ldi	r21, 0x44	; 68
    3178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	8f 83       	std	Y+7, r24	; 0x07
    3182:	98 87       	std	Y+8, r25	; 0x08
    3184:	a9 87       	std	Y+9, r26	; 0x09
    3186:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3188:	6f 81       	ldd	r22, Y+7	; 0x07
    318a:	78 85       	ldd	r23, Y+8	; 0x08
    318c:	89 85       	ldd	r24, Y+9	; 0x09
    318e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	40 e8       	ldi	r20, 0x80	; 128
    3196:	5f e3       	ldi	r21, 0x3F	; 63
    3198:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    319c:	88 23       	and	r24, r24
    319e:	2c f4       	brge	.+10     	; 0x31aa <LCD_VoidInit+0x382>
		__ticks = 1;
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	9e 83       	std	Y+6, r25	; 0x06
    31a6:	8d 83       	std	Y+5, r24	; 0x05
    31a8:	3f c0       	rjmp	.+126    	; 0x3228 <LCD_VoidInit+0x400>
	else if (__tmp > 65535)
    31aa:	6f 81       	ldd	r22, Y+7	; 0x07
    31ac:	78 85       	ldd	r23, Y+8	; 0x08
    31ae:	89 85       	ldd	r24, Y+9	; 0x09
    31b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	3f ef       	ldi	r19, 0xFF	; 255
    31b6:	4f e7       	ldi	r20, 0x7F	; 127
    31b8:	57 e4       	ldi	r21, 0x47	; 71
    31ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31be:	18 16       	cp	r1, r24
    31c0:	4c f5       	brge	.+82     	; 0x3214 <LCD_VoidInit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e2       	ldi	r20, 0x20	; 32
    31d0:	51 e4       	ldi	r21, 0x41	; 65
    31d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	9e 83       	std	Y+6, r25	; 0x06
    31e8:	8d 83       	std	Y+5, r24	; 0x05
    31ea:	0f c0       	rjmp	.+30     	; 0x320a <LCD_VoidInit+0x3e2>
    31ec:	88 ec       	ldi	r24, 0xC8	; 200
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	9c 83       	std	Y+4, r25	; 0x04
    31f2:	8b 83       	std	Y+3, r24	; 0x03
    31f4:	8b 81       	ldd	r24, Y+3	; 0x03
    31f6:	9c 81       	ldd	r25, Y+4	; 0x04
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <LCD_VoidInit+0x3d0>
    31fc:	9c 83       	std	Y+4, r25	; 0x04
    31fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3200:	8d 81       	ldd	r24, Y+5	; 0x05
    3202:	9e 81       	ldd	r25, Y+6	; 0x06
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	9e 83       	std	Y+6, r25	; 0x06
    3208:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320a:	8d 81       	ldd	r24, Y+5	; 0x05
    320c:	9e 81       	ldd	r25, Y+6	; 0x06
    320e:	00 97       	sbiw	r24, 0x00	; 0
    3210:	69 f7       	brne	.-38     	; 0x31ec <LCD_VoidInit+0x3c4>
    3212:	14 c0       	rjmp	.+40     	; 0x323c <LCD_VoidInit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3214:	6f 81       	ldd	r22, Y+7	; 0x07
    3216:	78 85       	ldd	r23, Y+8	; 0x08
    3218:	89 85       	ldd	r24, Y+9	; 0x09
    321a:	9a 85       	ldd	r25, Y+10	; 0x0a
    321c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	9e 83       	std	Y+6, r25	; 0x06
    3226:	8d 83       	std	Y+5, r24	; 0x05
    3228:	8d 81       	ldd	r24, Y+5	; 0x05
    322a:	9e 81       	ldd	r25, Y+6	; 0x06
    322c:	9a 83       	std	Y+2, r25	; 0x02
    322e:	89 83       	std	Y+1, r24	; 0x01
    3230:	89 81       	ldd	r24, Y+1	; 0x01
    3232:	9a 81       	ldd	r25, Y+2	; 0x02
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	f1 f7       	brne	.-4      	; 0x3234 <LCD_VoidInit+0x40c>
    3238:	9a 83       	std	Y+2, r25	; 0x02
    323a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    323c:	ea 96       	adiw	r28, 0x3a	; 58
    323e:	0f b6       	in	r0, 0x3f	; 63
    3240:	f8 94       	cli
    3242:	de bf       	out	0x3e, r29	; 62
    3244:	0f be       	out	0x3f, r0	; 63
    3246:	cd bf       	out	0x3d, r28	; 61
    3248:	cf 91       	pop	r28
    324a:	df 91       	pop	r29
    324c:	08 95       	ret

0000324e <LCD_VoidSendString>:

void LCD_VoidSendString(u8 *Address_String,LCD_Info *lcd){
    324e:	df 93       	push	r29
    3250:	cf 93       	push	r28
    3252:	00 d0       	rcall	.+0      	; 0x3254 <LCD_VoidSendString+0x6>
    3254:	00 d0       	rcall	.+0      	; 0x3256 <LCD_VoidSendString+0x8>
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
    325a:	9a 83       	std	Y+2, r25	; 0x02
    325c:	89 83       	std	Y+1, r24	; 0x01
    325e:	7c 83       	std	Y+4, r23	; 0x04
    3260:	6b 83       	std	Y+3, r22	; 0x03
    3262:	0d c0       	rjmp	.+26     	; 0x327e <LCD_VoidSendString+0x30>

	while (*Address_String != '\0') {
		// Send the current character to the LCD
		LCD_VoidSendChar(*Address_String, lcd);
    3264:	e9 81       	ldd	r30, Y+1	; 0x01
    3266:	fa 81       	ldd	r31, Y+2	; 0x02
    3268:	80 81       	ld	r24, Z
    326a:	2b 81       	ldd	r18, Y+3	; 0x03
    326c:	3c 81       	ldd	r19, Y+4	; 0x04
    326e:	b9 01       	movw	r22, r18
    3270:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_VoidSendChar>
		Address_String++; // Move to the next character
    3274:	89 81       	ldd	r24, Y+1	; 0x01
    3276:	9a 81       	ldd	r25, Y+2	; 0x02
    3278:	01 96       	adiw	r24, 0x01	; 1
    327a:	9a 83       	std	Y+2, r25	; 0x02
    327c:	89 83       	std	Y+1, r24	; 0x01

}

void LCD_VoidSendString(u8 *Address_String,LCD_Info *lcd){

	while (*Address_String != '\0') {
    327e:	e9 81       	ldd	r30, Y+1	; 0x01
    3280:	fa 81       	ldd	r31, Y+2	; 0x02
    3282:	80 81       	ld	r24, Z
    3284:	88 23       	and	r24, r24
    3286:	71 f7       	brne	.-36     	; 0x3264 <LCD_VoidSendString+0x16>
		// Send the current character to the LCD
		LCD_VoidSendChar(*Address_String, lcd);
		Address_String++; // Move to the next character
	}
}
    3288:	0f 90       	pop	r0
    328a:	0f 90       	pop	r0
    328c:	0f 90       	pop	r0
    328e:	0f 90       	pop	r0
    3290:	cf 91       	pop	r28
    3292:	df 91       	pop	r29
    3294:	08 95       	ret

00003296 <LCD_VoidGoToXY>:
void LCD_VoidGoToXY(u8 Local_XPosition,u8 Local_YPosition, LCD_Info *lcd) {
    3296:	df 93       	push	r29
    3298:	cf 93       	push	r28
    329a:	00 d0       	rcall	.+0      	; 0x329c <LCD_VoidGoToXY+0x6>
    329c:	00 d0       	rcall	.+0      	; 0x329e <LCD_VoidGoToXY+0x8>
    329e:	0f 92       	push	r0
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
    32a4:	8a 83       	std	Y+2, r24	; 0x02
    32a6:	6b 83       	std	Y+3, r22	; 0x03
    32a8:	5d 83       	std	Y+5, r21	; 0x05
    32aa:	4c 83       	std	Y+4, r20	; 0x04
	u8 Address = 0;
    32ac:	19 82       	std	Y+1, r1	; 0x01
	/* Calculate the DDRAM address based on the row and column */
	if(Local_YPosition == 0) {
    32ae:	8b 81       	ldd	r24, Y+3	; 0x03
    32b0:	88 23       	and	r24, r24
    32b2:	19 f4       	brne	.+6      	; 0x32ba <LCD_VoidGoToXY+0x24>
		Address = LCD_FirstLine + Local_XPosition;
    32b4:	8a 81       	ldd	r24, Y+2	; 0x02
    32b6:	89 83       	std	Y+1, r24	; 0x01
    32b8:	03 c0       	rjmp	.+6      	; 0x32c0 <LCD_VoidGoToXY+0x2a>
	} else {
		Address = LCD_SecoundLine + Local_XPosition;
    32ba:	8a 81       	ldd	r24, Y+2	; 0x02
    32bc:	80 5c       	subi	r24, 0xC0	; 192
    32be:	89 83       	std	Y+1, r24	; 0x01
	}
	/* Send the command to set the DDRAM address */
	LCD_VoidSendCommand(LCD_SetAddressDDRAM | Address, lcd);
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	80 68       	ori	r24, 0x80	; 128
    32c4:	2c 81       	ldd	r18, Y+4	; 0x04
    32c6:	3d 81       	ldd	r19, Y+5	; 0x05
    32c8:	b9 01       	movw	r22, r18
    32ca:	0e 94 4b 12 	call	0x2496	; 0x2496 <LCD_VoidSendCommand>
}
    32ce:	0f 90       	pop	r0
    32d0:	0f 90       	pop	r0
    32d2:	0f 90       	pop	r0
    32d4:	0f 90       	pop	r0
    32d6:	0f 90       	pop	r0
    32d8:	cf 91       	pop	r28
    32da:	df 91       	pop	r29
    32dc:	08 95       	ret

000032de <LCD_VoidSpecialCharacter>:

void LCD_VoidSpecialCharacter(u8 *pattern,u8 location, LCD_Info *lcd){
    32de:	df 93       	push	r29
    32e0:	cf 93       	push	r28
    32e2:	00 d0       	rcall	.+0      	; 0x32e4 <LCD_VoidSpecialCharacter+0x6>
    32e4:	00 d0       	rcall	.+0      	; 0x32e6 <LCD_VoidSpecialCharacter+0x8>
    32e6:	00 d0       	rcall	.+0      	; 0x32e8 <LCD_VoidSpecialCharacter+0xa>
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	9b 83       	std	Y+3, r25	; 0x03
    32ee:	8a 83       	std	Y+2, r24	; 0x02
    32f0:	6c 83       	std	Y+4, r22	; 0x04
    32f2:	5e 83       	std	Y+6, r21	; 0x06
    32f4:	4d 83       	std	Y+5, r20	; 0x05
	LCD_VoidSendCommand(LCD_SetAddressCGRAM+(location*8),lcd);
    32f6:	8c 81       	ldd	r24, Y+4	; 0x04
    32f8:	88 2f       	mov	r24, r24
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	08 96       	adiw	r24, 0x08	; 8
    32fe:	88 0f       	add	r24, r24
    3300:	99 1f       	adc	r25, r25
    3302:	88 0f       	add	r24, r24
    3304:	99 1f       	adc	r25, r25
    3306:	88 0f       	add	r24, r24
    3308:	99 1f       	adc	r25, r25
    330a:	2d 81       	ldd	r18, Y+5	; 0x05
    330c:	3e 81       	ldd	r19, Y+6	; 0x06
    330e:	b9 01       	movw	r22, r18
    3310:	0e 94 4b 12 	call	0x2496	; 0x2496 <LCD_VoidSendCommand>
	/* Sending the bitmap to CGRAM */
	for(u8 i=0;i<8;i++){
    3314:	19 82       	std	Y+1, r1	; 0x01
    3316:	11 c0       	rjmp	.+34     	; 0x333a <LCD_VoidSpecialCharacter+0x5c>
		LCD_VoidSendChar(pattern[i],lcd);
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	28 2f       	mov	r18, r24
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	8a 81       	ldd	r24, Y+2	; 0x02
    3320:	9b 81       	ldd	r25, Y+3	; 0x03
    3322:	fc 01       	movw	r30, r24
    3324:	e2 0f       	add	r30, r18
    3326:	f3 1f       	adc	r31, r19
    3328:	80 81       	ld	r24, Z
    332a:	2d 81       	ldd	r18, Y+5	; 0x05
    332c:	3e 81       	ldd	r19, Y+6	; 0x06
    332e:	b9 01       	movw	r22, r18
    3330:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_VoidSendChar>
}

void LCD_VoidSpecialCharacter(u8 *pattern,u8 location, LCD_Info *lcd){
	LCD_VoidSendCommand(LCD_SetAddressCGRAM+(location*8),lcd);
	/* Sending the bitmap to CGRAM */
	for(u8 i=0;i<8;i++){
    3334:	89 81       	ldd	r24, Y+1	; 0x01
    3336:	8f 5f       	subi	r24, 0xFF	; 255
    3338:	89 83       	std	Y+1, r24	; 0x01
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	88 30       	cpi	r24, 0x08	; 8
    333e:	60 f3       	brcs	.-40     	; 0x3318 <LCD_VoidSpecialCharacter+0x3a>
		LCD_VoidSendChar(pattern[i],lcd);
	}
	/*	Send the cursor to DDRAM + choose location */
	LCD_VoidGoToXY(1,1,lcd);
    3340:	2d 81       	ldd	r18, Y+5	; 0x05
    3342:	3e 81       	ldd	r19, Y+6	; 0x06
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	61 e0       	ldi	r22, 0x01	; 1
    3348:	a9 01       	movw	r20, r18
    334a:	0e 94 4b 19 	call	0x3296	; 0x3296 <LCD_VoidGoToXY>
	LCD_VoidSendChar(location,lcd);
    334e:	2d 81       	ldd	r18, Y+5	; 0x05
    3350:	3e 81       	ldd	r19, Y+6	; 0x06
    3352:	8c 81       	ldd	r24, Y+4	; 0x04
    3354:	b9 01       	movw	r22, r18
    3356:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_VoidSendChar>
}
    335a:	26 96       	adiw	r28, 0x06	; 6
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	de bf       	out	0x3e, r29	; 62
    3362:	0f be       	out	0x3f, r0	; 63
    3364:	cd bf       	out	0x3d, r28	; 61
    3366:	cf 91       	pop	r28
    3368:	df 91       	pop	r29
    336a:	08 95       	ret

0000336c <LCD_VoidSendInt>:
LCD_VoidSendInt(u32 Recieved_Number,LCD_Info *lcd){
    336c:	df 93       	push	r29
    336e:	cf 93       	push	r28
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
    3374:	6a 97       	sbiw	r28, 0x1a	; 26
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	de bf       	out	0x3e, r29	; 62
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	cd bf       	out	0x3d, r28	; 61
    3380:	6d 8b       	std	Y+21, r22	; 0x15
    3382:	7e 8b       	std	Y+22, r23	; 0x16
    3384:	8f 8b       	std	Y+23, r24	; 0x17
    3386:	98 8f       	std	Y+24, r25	; 0x18
    3388:	5a 8f       	std	Y+26, r21	; 0x1a
    338a:	49 8f       	std	Y+25, r20	; 0x19
	u8 NumAsString[LCD_StringMax]={' '};
    338c:	8a e0       	ldi	r24, 0x0A	; 10
    338e:	fe 01       	movw	r30, r28
    3390:	3b 96       	adiw	r30, 0x0b	; 11
    3392:	df 01       	movw	r26, r30
    3394:	98 2f       	mov	r25, r24
    3396:	1d 92       	st	X+, r1
    3398:	9a 95       	dec	r25
    339a:	e9 f7       	brne	.-6      	; 0x3396 <LCD_VoidSendInt+0x2a>
    339c:	80 e2       	ldi	r24, 0x20	; 32
    339e:	8b 87       	std	Y+11, r24	; 0x0b
	s32 LCD_StringCounter=0,FORCOUNTER;
    33a0:	1f 82       	std	Y+7, r1	; 0x07
    33a2:	18 86       	std	Y+8, r1	; 0x08
    33a4:	19 86       	std	Y+9, r1	; 0x09
    33a6:	1a 86       	std	Y+10, r1	; 0x0a
	u8 temp,Err=1;
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	89 83       	std	Y+1, r24	; 0x01

	if(Recieved_Number==0){
    33ac:	8d 89       	ldd	r24, Y+21	; 0x15
    33ae:	9e 89       	ldd	r25, Y+22	; 0x16
    33b0:	af 89       	ldd	r26, Y+23	; 0x17
    33b2:	b8 8d       	ldd	r27, Y+24	; 0x18
    33b4:	00 97       	sbiw	r24, 0x00	; 0
    33b6:	a1 05       	cpc	r26, r1
    33b8:	b1 05       	cpc	r27, r1
    33ba:	09 f0       	breq	.+2      	; 0x33be <LCD_VoidSendInt+0x52>
    33bc:	50 c0       	rjmp	.+160    	; 0x345e <LCD_VoidSendInt+0xf2>
		LCD_VoidSendChar('0',lcd);
    33be:	29 8d       	ldd	r18, Y+25	; 0x19
    33c0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    33c2:	80 e3       	ldi	r24, 0x30	; 48
    33c4:	b9 01       	movw	r22, r18
    33c6:	0e 94 73 13 	call	0x26e6	; 0x26e6 <LCD_VoidSendChar>
    33ca:	52 c0       	rjmp	.+164    	; 0x3470 <LCD_VoidSendInt+0x104>
	}
	else{
		while(Recieved_Number!=0)
		{
			temp=Recieved_Number%10;
    33cc:	8d 89       	ldd	r24, Y+21	; 0x15
    33ce:	9e 89       	ldd	r25, Y+22	; 0x16
    33d0:	af 89       	ldd	r26, Y+23	; 0x17
    33d2:	b8 8d       	ldd	r27, Y+24	; 0x18
    33d4:	2a e0       	ldi	r18, 0x0A	; 10
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	40 e0       	ldi	r20, 0x00	; 0
    33da:	50 e0       	ldi	r21, 0x00	; 0
    33dc:	bc 01       	movw	r22, r24
    33de:	cd 01       	movw	r24, r26
    33e0:	0e 94 c7 1c 	call	0x398e	; 0x398e <__udivmodsi4>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	8a 83       	std	Y+2, r24	; 0x02
			Recieved_Number=Recieved_Number-temp;
    33ea:	8a 81       	ldd	r24, Y+2	; 0x02
    33ec:	28 2f       	mov	r18, r24
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	40 e0       	ldi	r20, 0x00	; 0
    33f2:	50 e0       	ldi	r21, 0x00	; 0
    33f4:	8d 89       	ldd	r24, Y+21	; 0x15
    33f6:	9e 89       	ldd	r25, Y+22	; 0x16
    33f8:	af 89       	ldd	r26, Y+23	; 0x17
    33fa:	b8 8d       	ldd	r27, Y+24	; 0x18
    33fc:	82 1b       	sub	r24, r18
    33fe:	93 0b       	sbc	r25, r19
    3400:	a4 0b       	sbc	r26, r20
    3402:	b5 0b       	sbc	r27, r21
    3404:	8d 8b       	std	Y+21, r24	; 0x15
    3406:	9e 8b       	std	Y+22, r25	; 0x16
    3408:	af 8b       	std	Y+23, r26	; 0x17
    340a:	b8 8f       	std	Y+24, r27	; 0x18
			NumAsString[LCD_StringCounter]=temp;
    340c:	8f 81       	ldd	r24, Y+7	; 0x07
    340e:	98 85       	ldd	r25, Y+8	; 0x08
    3410:	a9 85       	ldd	r26, Y+9	; 0x09
    3412:	ba 85       	ldd	r27, Y+10	; 0x0a
    3414:	9e 01       	movw	r18, r28
    3416:	25 5f       	subi	r18, 0xF5	; 245
    3418:	3f 4f       	sbci	r19, 0xFF	; 255
    341a:	f9 01       	movw	r30, r18
    341c:	e8 0f       	add	r30, r24
    341e:	f9 1f       	adc	r31, r25
    3420:	8a 81       	ldd	r24, Y+2	; 0x02
    3422:	80 83       	st	Z, r24
			Recieved_Number=Recieved_Number/10;
    3424:	8d 89       	ldd	r24, Y+21	; 0x15
    3426:	9e 89       	ldd	r25, Y+22	; 0x16
    3428:	af 89       	ldd	r26, Y+23	; 0x17
    342a:	b8 8d       	ldd	r27, Y+24	; 0x18
    342c:	2a e0       	ldi	r18, 0x0A	; 10
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	40 e0       	ldi	r20, 0x00	; 0
    3432:	50 e0       	ldi	r21, 0x00	; 0
    3434:	bc 01       	movw	r22, r24
    3436:	cd 01       	movw	r24, r26
    3438:	0e 94 c7 1c 	call	0x398e	; 0x398e <__udivmodsi4>
    343c:	da 01       	movw	r26, r20
    343e:	c9 01       	movw	r24, r18
    3440:	8d 8b       	std	Y+21, r24	; 0x15
    3442:	9e 8b       	std	Y+22, r25	; 0x16
    3444:	af 8b       	std	Y+23, r26	; 0x17
    3446:	b8 8f       	std	Y+24, r27	; 0x18
			LCD_StringCounter++;
    3448:	8f 81       	ldd	r24, Y+7	; 0x07
    344a:	98 85       	ldd	r25, Y+8	; 0x08
    344c:	a9 85       	ldd	r26, Y+9	; 0x09
    344e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3450:	01 96       	adiw	r24, 0x01	; 1
    3452:	a1 1d       	adc	r26, r1
    3454:	b1 1d       	adc	r27, r1
    3456:	8f 83       	std	Y+7, r24	; 0x07
    3458:	98 87       	std	Y+8, r25	; 0x08
    345a:	a9 87       	std	Y+9, r26	; 0x09
    345c:	ba 87       	std	Y+10, r27	; 0x0a

	if(Recieved_Number==0){
		LCD_VoidSendChar('0',lcd);
	}
	else{
		while(Recieved_Number!=0)
    345e:	8d 89       	ldd	r24, Y+21	; 0x15
    3460:	9e 89       	ldd	r25, Y+22	; 0x16
    3462:	af 89       	ldd	r26, Y+23	; 0x17
    3464:	b8 8d       	ldd	r27, Y+24	; 0x18
    3466:	00 97       	sbiw	r24, 0x00	; 0
    3468:	a1 05       	cpc	r26, r1
    346a:	b1 05       	cpc	r27, r1
    346c:	09 f0       	breq	.+2      	; 0x3470 <LCD_VoidSendInt+0x104>
    346e:	ae cf       	rjmp	.-164    	; 0x33cc <LCD_VoidSendInt+0x60>
			Recieved_Number=Recieved_Number/10;
			LCD_StringCounter++;

		}
	}
	for(FORCOUNTER=(LCD_StringCounter-1);FORCOUNTER>=0;FORCOUNTER--){
    3470:	8f 81       	ldd	r24, Y+7	; 0x07
    3472:	98 85       	ldd	r25, Y+8	; 0x08
    3474:	a9 85       	ldd	r26, Y+9	; 0x09
    3476:	ba 85       	ldd	r27, Y+10	; 0x0a
    3478:	01 97       	sbiw	r24, 0x01	; 1
    347a:	a1 09       	sbc	r26, r1
    347c:	b1 09       	sbc	r27, r1
    347e:	8b 83       	std	Y+3, r24	; 0x03
    3480:	9c 83       	std	Y+4, r25	; 0x04
    3482:	ad 83       	std	Y+5, r26	; 0x05
    3484:	be 83       	std	Y+6, r27	; 0x06
    3486:	1d c0       	rjmp	.+58     	; 0x34c2 <LCD_VoidSendInt+0x156>
	Err=LCD_VoidSendCharRepeat((NumAsString[FORCOUNTER]+48),lcd);
    3488:	8b 81       	ldd	r24, Y+3	; 0x03
    348a:	9c 81       	ldd	r25, Y+4	; 0x04
    348c:	ad 81       	ldd	r26, Y+5	; 0x05
    348e:	be 81       	ldd	r27, Y+6	; 0x06
    3490:	9e 01       	movw	r18, r28
    3492:	25 5f       	subi	r18, 0xF5	; 245
    3494:	3f 4f       	sbci	r19, 0xFF	; 255
    3496:	f9 01       	movw	r30, r18
    3498:	e8 0f       	add	r30, r24
    349a:	f9 1f       	adc	r31, r25
    349c:	80 81       	ld	r24, Z
    349e:	80 5d       	subi	r24, 0xD0	; 208
    34a0:	29 8d       	ldd	r18, Y+25	; 0x19
    34a2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    34a4:	b9 01       	movw	r22, r18
    34a6:	0e 94 d5 15 	call	0x2baa	; 0x2baa <LCD_VoidSendCharRepeat>
    34aa:	89 83       	std	Y+1, r24	; 0x01
			Recieved_Number=Recieved_Number/10;
			LCD_StringCounter++;

		}
	}
	for(FORCOUNTER=(LCD_StringCounter-1);FORCOUNTER>=0;FORCOUNTER--){
    34ac:	8b 81       	ldd	r24, Y+3	; 0x03
    34ae:	9c 81       	ldd	r25, Y+4	; 0x04
    34b0:	ad 81       	ldd	r26, Y+5	; 0x05
    34b2:	be 81       	ldd	r27, Y+6	; 0x06
    34b4:	01 97       	sbiw	r24, 0x01	; 1
    34b6:	a1 09       	sbc	r26, r1
    34b8:	b1 09       	sbc	r27, r1
    34ba:	8b 83       	std	Y+3, r24	; 0x03
    34bc:	9c 83       	std	Y+4, r25	; 0x04
    34be:	ad 83       	std	Y+5, r26	; 0x05
    34c0:	be 83       	std	Y+6, r27	; 0x06
    34c2:	8b 81       	ldd	r24, Y+3	; 0x03
    34c4:	9c 81       	ldd	r25, Y+4	; 0x04
    34c6:	ad 81       	ldd	r26, Y+5	; 0x05
    34c8:	be 81       	ldd	r27, Y+6	; 0x06
    34ca:	bb 23       	and	r27, r27
    34cc:	ec f6       	brge	.-70     	; 0x3488 <LCD_VoidSendInt+0x11c>
		//LCD_VoidSendChar(NumAsString[FORCOUNTER],lcd);
		//if(Err==0){
		//	break;
		//}
	}
	LCD_VoidGoToXY(0,0,lcd);
    34ce:	29 8d       	ldd	r18, Y+25	; 0x19
    34d0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    34d2:	80 e0       	ldi	r24, 0x00	; 0
    34d4:	60 e0       	ldi	r22, 0x00	; 0
    34d6:	a9 01       	movw	r20, r18
    34d8:	0e 94 4b 19 	call	0x3296	; 0x3296 <LCD_VoidGoToXY>
		//LCD_VoidSendCommand(0x01,lcd);
	DIO_ErrStateSetPinDirection(PORT_D,PIN_0,DIO_OUT);
    34dc:	84 e4       	ldi	r24, 0x44	; 68
    34de:	60 e0       	ldi	r22, 0x00	; 0
    34e0:	41 e0       	ldi	r20, 0x01	; 1
    34e2:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinValue(PORT_D,PIN_0,DIO_HIGH);
    34e6:	84 e4       	ldi	r24, 0x44	; 68
    34e8:	60 e0       	ldi	r22, 0x00	; 0
    34ea:	41 e0       	ldi	r20, 0x01	; 1
    34ec:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
}
    34f0:	6a 96       	adiw	r28, 0x1a	; 26
    34f2:	0f b6       	in	r0, 0x3f	; 63
    34f4:	f8 94       	cli
    34f6:	de bf       	out	0x3e, r29	; 62
    34f8:	0f be       	out	0x3f, r0	; 63
    34fa:	cd bf       	out	0x3d, r28	; 61
    34fc:	cf 91       	pop	r28
    34fe:	df 91       	pop	r29
    3500:	08 95       	ret

00003502 <KP_ErrStateInit>:
		{'7','8','9','/'},
		{'4','5','6','*'},
		{'1','2','3','-'},
		{'C','0','=','+'}
};
void KP_ErrStateInit(KeypadRow_PORT_PIN *KP_RPP_INFO,KeypadCol_PORT_PIN *KP_CPP_INFO){
    3502:	df 93       	push	r29
    3504:	cf 93       	push	r28
    3506:	00 d0       	rcall	.+0      	; 0x3508 <KP_ErrStateInit+0x6>
    3508:	00 d0       	rcall	.+0      	; 0x350a <KP_ErrStateInit+0x8>
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
    350e:	9a 83       	std	Y+2, r25	; 0x02
    3510:	89 83       	std	Y+1, r24	; 0x01
    3512:	7c 83       	std	Y+4, r23	; 0x04
    3514:	6b 83       	std	Y+3, r22	; 0x03
	//u8 ROW,COL,ReadPin;
	//KPRPORT ROWP=KP_ROW_PORT1;
	//KPCPORT COLP=KP_COL_PORT1;
		DIO_ErrStateSetPinDirection(PORT_C,KP_RPP_INFO->ROW_PIN1,DIO_OUT);
    3516:	e9 81       	ldd	r30, Y+1	; 0x01
    3518:	fa 81       	ldd	r31, Y+2	; 0x02
    351a:	91 81       	ldd	r25, Z+1	; 0x01
    351c:	83 e4       	ldi	r24, 0x43	; 67
    351e:	69 2f       	mov	r22, r25
    3520:	41 e0       	ldi	r20, 0x01	; 1
    3522:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_RPP_INFO->ROW_PIN2,DIO_OUT);
    3526:	e9 81       	ldd	r30, Y+1	; 0x01
    3528:	fa 81       	ldd	r31, Y+2	; 0x02
    352a:	93 81       	ldd	r25, Z+3	; 0x03
    352c:	83 e4       	ldi	r24, 0x43	; 67
    352e:	69 2f       	mov	r22, r25
    3530:	41 e0       	ldi	r20, 0x01	; 1
    3532:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_RPP_INFO->ROW_PIN3,DIO_OUT);
    3536:	e9 81       	ldd	r30, Y+1	; 0x01
    3538:	fa 81       	ldd	r31, Y+2	; 0x02
    353a:	95 81       	ldd	r25, Z+5	; 0x05
    353c:	83 e4       	ldi	r24, 0x43	; 67
    353e:	69 2f       	mov	r22, r25
    3540:	41 e0       	ldi	r20, 0x01	; 1
    3542:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_RPP_INFO->ROW_PIN4,DIO_OUT);
    3546:	e9 81       	ldd	r30, Y+1	; 0x01
    3548:	fa 81       	ldd	r31, Y+2	; 0x02
    354a:	97 81       	ldd	r25, Z+7	; 0x07
    354c:	83 e4       	ldi	r24, 0x43	; 67
    354e:	69 2f       	mov	r22, r25
    3550:	41 e0       	ldi	r20, 0x01	; 1
    3552:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_CPP_INFO->COL_PIN1,DIO_IN);
    3556:	eb 81       	ldd	r30, Y+3	; 0x03
    3558:	fc 81       	ldd	r31, Y+4	; 0x04
    355a:	91 81       	ldd	r25, Z+1	; 0x01
    355c:	83 e4       	ldi	r24, 0x43	; 67
    355e:	69 2f       	mov	r22, r25
    3560:	40 e0       	ldi	r20, 0x00	; 0
    3562:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_CPP_INFO->COL_PIN2,DIO_IN);
    3566:	eb 81       	ldd	r30, Y+3	; 0x03
    3568:	fc 81       	ldd	r31, Y+4	; 0x04
    356a:	93 81       	ldd	r25, Z+3	; 0x03
    356c:	83 e4       	ldi	r24, 0x43	; 67
    356e:	69 2f       	mov	r22, r25
    3570:	40 e0       	ldi	r20, 0x00	; 0
    3572:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_CPP_INFO->COL_PIN3,DIO_IN);
    3576:	eb 81       	ldd	r30, Y+3	; 0x03
    3578:	fc 81       	ldd	r31, Y+4	; 0x04
    357a:	95 81       	ldd	r25, Z+5	; 0x05
    357c:	83 e4       	ldi	r24, 0x43	; 67
    357e:	69 2f       	mov	r22, r25
    3580:	40 e0       	ldi	r20, 0x00	; 0
    3582:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_CPP_INFO->COL_PIN4,DIO_IN);
    3586:	eb 81       	ldd	r30, Y+3	; 0x03
    3588:	fc 81       	ldd	r31, Y+4	; 0x04
    358a:	97 81       	ldd	r25, Z+7	; 0x07
    358c:	83 e4       	ldi	r24, 0x43	; 67
    358e:	69 2f       	mov	r22, r25
    3590:	40 e0       	ldi	r20, 0x00	; 0
    3592:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinValue(PORT_C,KP_RPP_INFO->ROW_PIN1,DIO_HIGH);
    3596:	e9 81       	ldd	r30, Y+1	; 0x01
    3598:	fa 81       	ldd	r31, Y+2	; 0x02
    359a:	91 81       	ldd	r25, Z+1	; 0x01
    359c:	83 e4       	ldi	r24, 0x43	; 67
    359e:	69 2f       	mov	r22, r25
    35a0:	41 e0       	ldi	r20, 0x01	; 1
    35a2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_RPP_INFO->ROW_PIN2,DIO_HIGH);
    35a6:	e9 81       	ldd	r30, Y+1	; 0x01
    35a8:	fa 81       	ldd	r31, Y+2	; 0x02
    35aa:	93 81       	ldd	r25, Z+3	; 0x03
    35ac:	83 e4       	ldi	r24, 0x43	; 67
    35ae:	69 2f       	mov	r22, r25
    35b0:	41 e0       	ldi	r20, 0x01	; 1
    35b2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_RPP_INFO->ROW_PIN3,DIO_HIGH);
    35b6:	e9 81       	ldd	r30, Y+1	; 0x01
    35b8:	fa 81       	ldd	r31, Y+2	; 0x02
    35ba:	95 81       	ldd	r25, Z+5	; 0x05
    35bc:	83 e4       	ldi	r24, 0x43	; 67
    35be:	69 2f       	mov	r22, r25
    35c0:	41 e0       	ldi	r20, 0x01	; 1
    35c2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_RPP_INFO->ROW_PIN4,DIO_HIGH);
    35c6:	e9 81       	ldd	r30, Y+1	; 0x01
    35c8:	fa 81       	ldd	r31, Y+2	; 0x02
    35ca:	97 81       	ldd	r25, Z+7	; 0x07
    35cc:	83 e4       	ldi	r24, 0x43	; 67
    35ce:	69 2f       	mov	r22, r25
    35d0:	41 e0       	ldi	r20, 0x01	; 1
    35d2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_CPP_INFO->COL_PIN1,DIO_HIGH);
    35d6:	eb 81       	ldd	r30, Y+3	; 0x03
    35d8:	fc 81       	ldd	r31, Y+4	; 0x04
    35da:	91 81       	ldd	r25, Z+1	; 0x01
    35dc:	83 e4       	ldi	r24, 0x43	; 67
    35de:	69 2f       	mov	r22, r25
    35e0:	41 e0       	ldi	r20, 0x01	; 1
    35e2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_CPP_INFO->COL_PIN2,DIO_HIGH);
    35e6:	eb 81       	ldd	r30, Y+3	; 0x03
    35e8:	fc 81       	ldd	r31, Y+4	; 0x04
    35ea:	93 81       	ldd	r25, Z+3	; 0x03
    35ec:	83 e4       	ldi	r24, 0x43	; 67
    35ee:	69 2f       	mov	r22, r25
    35f0:	41 e0       	ldi	r20, 0x01	; 1
    35f2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_CPP_INFO->COL_PIN3,DIO_HIGH);
    35f6:	eb 81       	ldd	r30, Y+3	; 0x03
    35f8:	fc 81       	ldd	r31, Y+4	; 0x04
    35fa:	95 81       	ldd	r25, Z+5	; 0x05
    35fc:	83 e4       	ldi	r24, 0x43	; 67
    35fe:	69 2f       	mov	r22, r25
    3600:	41 e0       	ldi	r20, 0x01	; 1
    3602:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_CPP_INFO->COL_PIN4,DIO_HIGH);
    3606:	eb 81       	ldd	r30, Y+3	; 0x03
    3608:	fc 81       	ldd	r31, Y+4	; 0x04
    360a:	97 81       	ldd	r25, Z+7	; 0x07
    360c:	83 e4       	ldi	r24, 0x43	; 67
    360e:	69 2f       	mov	r22, r25
    3610:	41 e0       	ldi	r20, 0x01	; 1
    3612:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>

}
    3616:	0f 90       	pop	r0
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	0f 90       	pop	r0
    361e:	cf 91       	pop	r28
    3620:	df 91       	pop	r29
    3622:	08 95       	ret

00003624 <KP_ErrStateRead>:
KP_ErrState	KP_ErrStateRead(KeypadRow_PORT_PIN *KP_RPP_INFO,KeypadCol_PORT_PIN *KP_CPP_INFO,u8 *ReadValue){
    3624:	df 93       	push	r29
    3626:	cf 93       	push	r28
    3628:	cd b7       	in	r28, 0x3d	; 61
    362a:	de b7       	in	r29, 0x3e	; 62
    362c:	69 97       	sbiw	r28, 0x19	; 25
    362e:	0f b6       	in	r0, 0x3f	; 63
    3630:	f8 94       	cli
    3632:	de bf       	out	0x3e, r29	; 62
    3634:	0f be       	out	0x3f, r0	; 63
    3636:	cd bf       	out	0x3d, r28	; 61
    3638:	9c 8b       	std	Y+20, r25	; 0x14
    363a:	8b 8b       	std	Y+19, r24	; 0x13
    363c:	7e 8b       	std	Y+22, r23	; 0x16
    363e:	6d 8b       	std	Y+21, r22	; 0x15
    3640:	58 8f       	std	Y+24, r21	; 0x18
    3642:	4f 8b       	std	Y+23, r20	; 0x17
	u8 ROW,COL,ReadPin;
	u8 ErrVal;
	//_delay_ms(100);
	for(ROW=0;ROW<4;ROW++){
    3644:	19 8a       	std	Y+17, r1	; 0x11
    3646:	cf c0       	rjmp	.+414    	; 0x37e6 <KP_ErrStateRead+0x1c2>
		DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_LOW);
    3648:	83 e4       	ldi	r24, 0x43	; 67
    364a:	69 89       	ldd	r22, Y+17	; 0x11
    364c:	40 e0       	ldi	r20, 0x00	; 0
    364e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>

		for(COL=4;COL<8;COL++){
    3652:	84 e0       	ldi	r24, 0x04	; 4
    3654:	88 8b       	std	Y+16, r24	; 0x10
    3656:	bb c0       	rjmp	.+374    	; 0x37ce <KP_ErrStateRead+0x1aa>
			ErrVal=DIO_ErrStateReadPinValue(PORT_C,COL,&ReadPin);
    3658:	9e 01       	movw	r18, r28
    365a:	2e 5e       	subi	r18, 0xEE	; 238
    365c:	3f 4f       	sbci	r19, 0xFF	; 255
    365e:	83 e4       	ldi	r24, 0x43	; 67
    3660:	68 89       	ldd	r22, Y+16	; 0x10
    3662:	a9 01       	movw	r20, r18
    3664:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_ErrStateReadPinValue>
    3668:	8f 87       	std	Y+15, r24	; 0x0f
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	a0 ef       	ldi	r26, 0xF0	; 240
    3670:	b1 e4       	ldi	r27, 0x41	; 65
    3672:	8b 87       	std	Y+11, r24	; 0x0b
    3674:	9c 87       	std	Y+12, r25	; 0x0c
    3676:	ad 87       	std	Y+13, r26	; 0x0d
    3678:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    367a:	6b 85       	ldd	r22, Y+11	; 0x0b
    367c:	7c 85       	ldd	r23, Y+12	; 0x0c
    367e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3680:	9e 85       	ldd	r25, Y+14	; 0x0e
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	4a ef       	ldi	r20, 0xFA	; 250
    3688:	54 e4       	ldi	r21, 0x44	; 68
    368a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	8f 83       	std	Y+7, r24	; 0x07
    3694:	98 87       	std	Y+8, r25	; 0x08
    3696:	a9 87       	std	Y+9, r26	; 0x09
    3698:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    369a:	6f 81       	ldd	r22, Y+7	; 0x07
    369c:	78 85       	ldd	r23, Y+8	; 0x08
    369e:	89 85       	ldd	r24, Y+9	; 0x09
    36a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	40 e8       	ldi	r20, 0x80	; 128
    36a8:	5f e3       	ldi	r21, 0x3F	; 63
    36aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36ae:	88 23       	and	r24, r24
    36b0:	2c f4       	brge	.+10     	; 0x36bc <KP_ErrStateRead+0x98>
		__ticks = 1;
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	9e 83       	std	Y+6, r25	; 0x06
    36b8:	8d 83       	std	Y+5, r24	; 0x05
    36ba:	3f c0       	rjmp	.+126    	; 0x373a <KP_ErrStateRead+0x116>
	else if (__tmp > 65535)
    36bc:	6f 81       	ldd	r22, Y+7	; 0x07
    36be:	78 85       	ldd	r23, Y+8	; 0x08
    36c0:	89 85       	ldd	r24, Y+9	; 0x09
    36c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	3f ef       	ldi	r19, 0xFF	; 255
    36c8:	4f e7       	ldi	r20, 0x7F	; 127
    36ca:	57 e4       	ldi	r21, 0x47	; 71
    36cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36d0:	18 16       	cp	r1, r24
    36d2:	4c f5       	brge	.+82     	; 0x3726 <KP_ErrStateRead+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    36d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    36d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36da:	9e 85       	ldd	r25, Y+14	; 0x0e
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	40 e2       	ldi	r20, 0x20	; 32
    36e2:	51 e4       	ldi	r21, 0x41	; 65
    36e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e8:	dc 01       	movw	r26, r24
    36ea:	cb 01       	movw	r24, r22
    36ec:	bc 01       	movw	r22, r24
    36ee:	cd 01       	movw	r24, r26
    36f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f4:	dc 01       	movw	r26, r24
    36f6:	cb 01       	movw	r24, r22
    36f8:	9e 83       	std	Y+6, r25	; 0x06
    36fa:	8d 83       	std	Y+5, r24	; 0x05
    36fc:	0f c0       	rjmp	.+30     	; 0x371c <KP_ErrStateRead+0xf8>
    36fe:	88 ec       	ldi	r24, 0xC8	; 200
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	9c 83       	std	Y+4, r25	; 0x04
    3704:	8b 83       	std	Y+3, r24	; 0x03
    3706:	8b 81       	ldd	r24, Y+3	; 0x03
    3708:	9c 81       	ldd	r25, Y+4	; 0x04
    370a:	01 97       	sbiw	r24, 0x01	; 1
    370c:	f1 f7       	brne	.-4      	; 0x370a <KP_ErrStateRead+0xe6>
    370e:	9c 83       	std	Y+4, r25	; 0x04
    3710:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3712:	8d 81       	ldd	r24, Y+5	; 0x05
    3714:	9e 81       	ldd	r25, Y+6	; 0x06
    3716:	01 97       	sbiw	r24, 0x01	; 1
    3718:	9e 83       	std	Y+6, r25	; 0x06
    371a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    371c:	8d 81       	ldd	r24, Y+5	; 0x05
    371e:	9e 81       	ldd	r25, Y+6	; 0x06
    3720:	00 97       	sbiw	r24, 0x00	; 0
    3722:	69 f7       	brne	.-38     	; 0x36fe <KP_ErrStateRead+0xda>
    3724:	14 c0       	rjmp	.+40     	; 0x374e <KP_ErrStateRead+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3726:	6f 81       	ldd	r22, Y+7	; 0x07
    3728:	78 85       	ldd	r23, Y+8	; 0x08
    372a:	89 85       	ldd	r24, Y+9	; 0x09
    372c:	9a 85       	ldd	r25, Y+10	; 0x0a
    372e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	9e 83       	std	Y+6, r25	; 0x06
    3738:	8d 83       	std	Y+5, r24	; 0x05
    373a:	8d 81       	ldd	r24, Y+5	; 0x05
    373c:	9e 81       	ldd	r25, Y+6	; 0x06
    373e:	9a 83       	std	Y+2, r25	; 0x02
    3740:	89 83       	std	Y+1, r24	; 0x01
    3742:	89 81       	ldd	r24, Y+1	; 0x01
    3744:	9a 81       	ldd	r25, Y+2	; 0x02
    3746:	01 97       	sbiw	r24, 0x01	; 1
    3748:	f1 f7       	brne	.-4      	; 0x3746 <KP_ErrStateRead+0x122>
    374a:	9a 83       	std	Y+2, r25	; 0x02
    374c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(30);
			if(ErrVal==DIO_OK&&ReadPin==0){
    374e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3750:	88 23       	and	r24, r24
    3752:	d1 f5       	brne	.+116    	; 0x37c8 <KP_ErrStateRead+0x1a4>
    3754:	8a 89       	ldd	r24, Y+18	; 0x12
    3756:	88 23       	and	r24, r24
    3758:	b9 f5       	brne	.+110    	; 0x37c8 <KP_ErrStateRead+0x1a4>
				DIO_ErrStateSetPinDirection(PORT_D,PIN_0,DIO_OUT);
    375a:	84 e4       	ldi	r24, 0x44	; 68
    375c:	60 e0       	ldi	r22, 0x00	; 0
    375e:	41 e0       	ldi	r20, 0x01	; 1
    3760:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
				DIO_ErrStateSetPinValue(PORT_D,PIN_0,DIO_HIGH);
    3764:	84 e4       	ldi	r24, 0x44	; 68
    3766:	60 e0       	ldi	r22, 0x00	; 0
    3768:	41 e0       	ldi	r20, 0x01	; 1
    376a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
				DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_HIGH);
    376e:	83 e4       	ldi	r24, 0x43	; 67
    3770:	69 89       	ldd	r22, Y+17	; 0x11
    3772:	41 e0       	ldi	r20, 0x01	; 1
    3774:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
				//_delay_ms(30);
				*ReadValue =KP_Arr[ROW][COL-4];
    3778:	89 89       	ldd	r24, Y+17	; 0x11
    377a:	48 2f       	mov	r20, r24
    377c:	50 e0       	ldi	r21, 0x00	; 0
    377e:	88 89       	ldd	r24, Y+16	; 0x10
    3780:	88 2f       	mov	r24, r24
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	9c 01       	movw	r18, r24
    3786:	24 50       	subi	r18, 0x04	; 4
    3788:	30 40       	sbci	r19, 0x00	; 0
    378a:	ca 01       	movw	r24, r20
    378c:	88 0f       	add	r24, r24
    378e:	99 1f       	adc	r25, r25
    3790:	88 0f       	add	r24, r24
    3792:	99 1f       	adc	r25, r25
    3794:	82 0f       	add	r24, r18
    3796:	93 1f       	adc	r25, r19
    3798:	fc 01       	movw	r30, r24
    379a:	e4 58       	subi	r30, 0x84	; 132
    379c:	ff 4f       	sbci	r31, 0xFF	; 255
    379e:	80 81       	ld	r24, Z
    37a0:	ef 89       	ldd	r30, Y+23	; 0x17
    37a2:	f8 8d       	ldd	r31, Y+24	; 0x18
    37a4:	80 83       	st	Z, r24
    37a6:	0b c0       	rjmp	.+22     	; 0x37be <KP_ErrStateRead+0x19a>
				// test could be removed
				while(ReadPin==0){
					DIO_ErrStateReadPinValue(PORT_C,COL,&ReadPin);
    37a8:	9e 01       	movw	r18, r28
    37aa:	2e 5e       	subi	r18, 0xEE	; 238
    37ac:	3f 4f       	sbci	r19, 0xFF	; 255
    37ae:	83 e4       	ldi	r24, 0x43	; 67
    37b0:	68 89       	ldd	r22, Y+16	; 0x10
    37b2:	a9 01       	movw	r20, r18
    37b4:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_ErrStateReadPinValue>
					if(ReadPin==1)
    37b8:	8a 89       	ldd	r24, Y+18	; 0x12
    37ba:	81 30       	cpi	r24, 0x01	; 1
    37bc:	19 f0       	breq	.+6      	; 0x37c4 <KP_ErrStateRead+0x1a0>
				DIO_ErrStateSetPinValue(PORT_D,PIN_0,DIO_HIGH);
				DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_HIGH);
				//_delay_ms(30);
				*ReadValue =KP_Arr[ROW][COL-4];
				// test could be removed
				while(ReadPin==0){
    37be:	8a 89       	ldd	r24, Y+18	; 0x12
    37c0:	88 23       	and	r24, r24
    37c2:	91 f3       	breq	.-28     	; 0x37a8 <KP_ErrStateRead+0x184>
					DIO_ErrStateReadPinValue(PORT_C,COL,&ReadPin);
					if(ReadPin==1)
						break;
				}
				return OK;
    37c4:	19 8e       	std	Y+25, r1	; 0x19
    37c6:	15 c0       	rjmp	.+42     	; 0x37f2 <KP_ErrStateRead+0x1ce>
	u8 ErrVal;
	//_delay_ms(100);
	for(ROW=0;ROW<4;ROW++){
		DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_LOW);

		for(COL=4;COL<8;COL++){
    37c8:	88 89       	ldd	r24, Y+16	; 0x10
    37ca:	8f 5f       	subi	r24, 0xFF	; 255
    37cc:	88 8b       	std	Y+16, r24	; 0x10
    37ce:	88 89       	ldd	r24, Y+16	; 0x10
    37d0:	88 30       	cpi	r24, 0x08	; 8
    37d2:	08 f4       	brcc	.+2      	; 0x37d6 <KP_ErrStateRead+0x1b2>
    37d4:	41 cf       	rjmp	.-382    	; 0x3658 <KP_ErrStateRead+0x34>
						break;
				}
				return OK;
			}
		}
		DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_HIGH);
    37d6:	83 e4       	ldi	r24, 0x43	; 67
    37d8:	69 89       	ldd	r22, Y+17	; 0x11
    37da:	41 e0       	ldi	r20, 0x01	; 1
    37dc:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
}
KP_ErrState	KP_ErrStateRead(KeypadRow_PORT_PIN *KP_RPP_INFO,KeypadCol_PORT_PIN *KP_CPP_INFO,u8 *ReadValue){
	u8 ROW,COL,ReadPin;
	u8 ErrVal;
	//_delay_ms(100);
	for(ROW=0;ROW<4;ROW++){
    37e0:	89 89       	ldd	r24, Y+17	; 0x11
    37e2:	8f 5f       	subi	r24, 0xFF	; 255
    37e4:	89 8b       	std	Y+17, r24	; 0x11
    37e6:	89 89       	ldd	r24, Y+17	; 0x11
    37e8:	84 30       	cpi	r24, 0x04	; 4
    37ea:	08 f4       	brcc	.+2      	; 0x37ee <KP_ErrStateRead+0x1ca>
    37ec:	2d cf       	rjmp	.-422    	; 0x3648 <KP_ErrStateRead+0x24>
				return OK;
			}
		}
		DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_HIGH);
	}
	return Error;
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	89 8f       	std	Y+25, r24	; 0x19
    37f2:	89 8d       	ldd	r24, Y+25	; 0x19
	//Flag=0;
}
    37f4:	69 96       	adiw	r28, 0x19	; 25
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	f8 94       	cli
    37fa:	de bf       	out	0x3e, r29	; 62
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	cd bf       	out	0x3d, r28	; 61
    3800:	cf 91       	pop	r28
    3802:	df 91       	pop	r29
    3804:	08 95       	ret

00003806 <main>:

//Led_info Led={PORT_D,PIN_0,Source_Connection};

//KeypadRow_PORT_PIN row={PORT_C,PIN_0,PORT_C,PIN_1,PORT_C,PIN_2,PORT_C,PIN_3};
//KeypadCol_PORT_PIN col={PORT_C,PIN_4,PORT_C,PIN_5,PORT_C,PIN_6,PORT_C,PIN_7};
void main(){
    3806:	df 93       	push	r29
    3808:	cf 93       	push	r28
    380a:	cd b7       	in	r28, 0x3d	; 61
    380c:	de b7       	in	r29, 0x3e	; 62
    380e:	6b 97       	sbiw	r28, 0x1b	; 27
    3810:	0f b6       	in	r0, 0x3f	; 63
    3812:	f8 94       	cli
    3814:	de bf       	out	0x3e, r29	; 62
    3816:	0f be       	out	0x3f, r0	; 63
    3818:	cd bf       	out	0x3d, r28	; 61
	LCD_Info lcd={RS_PORT,RS_PIN,RW_PORT,RW_PIN,E_PORT,E_PIN,DATA_PORT};
    381a:	ce 01       	movw	r24, r28
    381c:	40 96       	adiw	r24, 0x10	; 16
    381e:	98 8f       	std	Y+24, r25	; 0x18
    3820:	8f 8b       	std	Y+23, r24	; 0x17
    3822:	ec e8       	ldi	r30, 0x8C	; 140
    3824:	f0 e0       	ldi	r31, 0x00	; 0
    3826:	fa 8f       	std	Y+26, r31	; 0x1a
    3828:	e9 8f       	std	Y+25, r30	; 0x19
    382a:	f7 e0       	ldi	r31, 0x07	; 7
    382c:	fb 8f       	std	Y+27, r31	; 0x1b
    382e:	e9 8d       	ldd	r30, Y+25	; 0x19
    3830:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3832:	00 80       	ld	r0, Z
    3834:	89 8d       	ldd	r24, Y+25	; 0x19
    3836:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3838:	01 96       	adiw	r24, 0x01	; 1
    383a:	9a 8f       	std	Y+26, r25	; 0x1a
    383c:	89 8f       	std	Y+25, r24	; 0x19
    383e:	ef 89       	ldd	r30, Y+23	; 0x17
    3840:	f8 8d       	ldd	r31, Y+24	; 0x18
    3842:	00 82       	st	Z, r0
    3844:	8f 89       	ldd	r24, Y+23	; 0x17
    3846:	98 8d       	ldd	r25, Y+24	; 0x18
    3848:	01 96       	adiw	r24, 0x01	; 1
    384a:	98 8f       	std	Y+24, r25	; 0x18
    384c:	8f 8b       	std	Y+23, r24	; 0x17
    384e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3850:	91 50       	subi	r25, 0x01	; 1
    3852:	9b 8f       	std	Y+27, r25	; 0x1b
    3854:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3856:	ee 23       	and	r30, r30
    3858:	51 f7       	brne	.-44     	; 0x382e <main+0x28>
LCD_VoidInit(&lcd);
    385a:	ce 01       	movw	r24, r28
    385c:	40 96       	adiw	r24, 0x10	; 16
    385e:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_VoidInit>
//u32 x=1256;
	u8 local_adcRead;
	ADC_ErrStateInit();
    3862:	0e 94 96 0b 	call	0x172c	; 0x172c <ADC_ErrStateInit>
	DIO_ErrStateSetGroupDirection(PORT_A,DIO_IN);
    3866:	81 e4       	ldi	r24, 0x41	; 65
    3868:	60 e0       	ldi	r22, 0x00	; 0
    386a:	0e 94 a6 0a 	call	0x154c	; 0x154c <DIO_ErrStateSetGroupDirection>
	DIO_ErrStateSetGroupDirection(PORT_C,DIO_OUT);
    386e:	83 e4       	ldi	r24, 0x43	; 67
    3870:	61 e0       	ldi	r22, 0x01	; 1
    3872:	0e 94 a6 0a 	call	0x154c	; 0x154c <DIO_ErrStateSetGroupDirection>

			//DIO_ErrStateSetPortValue(PORT_C,local_adcRead);
			//_delay_ms(500);

	while(1){
		local_adcRead=ADC_ErrStateReadValue(PIN_0);
    3876:	80 e0       	ldi	r24, 0x00	; 0
    3878:	0e 94 c7 0b 	call	0x178e	; 0x178e <ADC_ErrStateReadValue>
    387c:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_VoidSendInt(local_adcRead,&lcd);
    387e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3880:	88 2f       	mov	r24, r24
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	a0 e0       	ldi	r26, 0x00	; 0
    3886:	b0 e0       	ldi	r27, 0x00	; 0
    3888:	9e 01       	movw	r18, r28
    388a:	20 5f       	subi	r18, 0xF0	; 240
    388c:	3f 4f       	sbci	r19, 0xFF	; 255
    388e:	bc 01       	movw	r22, r24
    3890:	cd 01       	movw	r24, r26
    3892:	a9 01       	movw	r20, r18
    3894:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_VoidSendInt>
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	a8 ec       	ldi	r26, 0xC8	; 200
    389e:	b2 e4       	ldi	r27, 0x42	; 66
    38a0:	8b 87       	std	Y+11, r24	; 0x0b
    38a2:	9c 87       	std	Y+12, r25	; 0x0c
    38a4:	ad 87       	std	Y+13, r26	; 0x0d
    38a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    38aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    38ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    38ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    38b0:	20 e0       	ldi	r18, 0x00	; 0
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	4a ef       	ldi	r20, 0xFA	; 250
    38b6:	54 e4       	ldi	r21, 0x44	; 68
    38b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38bc:	dc 01       	movw	r26, r24
    38be:	cb 01       	movw	r24, r22
    38c0:	8f 83       	std	Y+7, r24	; 0x07
    38c2:	98 87       	std	Y+8, r25	; 0x08
    38c4:	a9 87       	std	Y+9, r26	; 0x09
    38c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38c8:	6f 81       	ldd	r22, Y+7	; 0x07
    38ca:	78 85       	ldd	r23, Y+8	; 0x08
    38cc:	89 85       	ldd	r24, Y+9	; 0x09
    38ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	40 e8       	ldi	r20, 0x80	; 128
    38d6:	5f e3       	ldi	r21, 0x3F	; 63
    38d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38dc:	88 23       	and	r24, r24
    38de:	2c f4       	brge	.+10     	; 0x38ea <main+0xe4>
		__ticks = 1;
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	9e 83       	std	Y+6, r25	; 0x06
    38e6:	8d 83       	std	Y+5, r24	; 0x05
    38e8:	3f c0       	rjmp	.+126    	; 0x3968 <main+0x162>
	else if (__tmp > 65535)
    38ea:	6f 81       	ldd	r22, Y+7	; 0x07
    38ec:	78 85       	ldd	r23, Y+8	; 0x08
    38ee:	89 85       	ldd	r24, Y+9	; 0x09
    38f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38f2:	20 e0       	ldi	r18, 0x00	; 0
    38f4:	3f ef       	ldi	r19, 0xFF	; 255
    38f6:	4f e7       	ldi	r20, 0x7F	; 127
    38f8:	57 e4       	ldi	r21, 0x47	; 71
    38fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38fe:	18 16       	cp	r1, r24
    3900:	4c f5       	brge	.+82     	; 0x3954 <main+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3902:	6b 85       	ldd	r22, Y+11	; 0x0b
    3904:	7c 85       	ldd	r23, Y+12	; 0x0c
    3906:	8d 85       	ldd	r24, Y+13	; 0x0d
    3908:	9e 85       	ldd	r25, Y+14	; 0x0e
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	40 e2       	ldi	r20, 0x20	; 32
    3910:	51 e4       	ldi	r21, 0x41	; 65
    3912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3916:	dc 01       	movw	r26, r24
    3918:	cb 01       	movw	r24, r22
    391a:	bc 01       	movw	r22, r24
    391c:	cd 01       	movw	r24, r26
    391e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	9e 83       	std	Y+6, r25	; 0x06
    3928:	8d 83       	std	Y+5, r24	; 0x05
    392a:	0f c0       	rjmp	.+30     	; 0x394a <main+0x144>
    392c:	88 ec       	ldi	r24, 0xC8	; 200
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	9c 83       	std	Y+4, r25	; 0x04
    3932:	8b 83       	std	Y+3, r24	; 0x03
    3934:	8b 81       	ldd	r24, Y+3	; 0x03
    3936:	9c 81       	ldd	r25, Y+4	; 0x04
    3938:	01 97       	sbiw	r24, 0x01	; 1
    393a:	f1 f7       	brne	.-4      	; 0x3938 <main+0x132>
    393c:	9c 83       	std	Y+4, r25	; 0x04
    393e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3940:	8d 81       	ldd	r24, Y+5	; 0x05
    3942:	9e 81       	ldd	r25, Y+6	; 0x06
    3944:	01 97       	sbiw	r24, 0x01	; 1
    3946:	9e 83       	std	Y+6, r25	; 0x06
    3948:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    394a:	8d 81       	ldd	r24, Y+5	; 0x05
    394c:	9e 81       	ldd	r25, Y+6	; 0x06
    394e:	00 97       	sbiw	r24, 0x00	; 0
    3950:	69 f7       	brne	.-38     	; 0x392c <main+0x126>
    3952:	14 c0       	rjmp	.+40     	; 0x397c <main+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3954:	6f 81       	ldd	r22, Y+7	; 0x07
    3956:	78 85       	ldd	r23, Y+8	; 0x08
    3958:	89 85       	ldd	r24, Y+9	; 0x09
    395a:	9a 85       	ldd	r25, Y+10	; 0x0a
    395c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3960:	dc 01       	movw	r26, r24
    3962:	cb 01       	movw	r24, r22
    3964:	9e 83       	std	Y+6, r25	; 0x06
    3966:	8d 83       	std	Y+5, r24	; 0x05
    3968:	8d 81       	ldd	r24, Y+5	; 0x05
    396a:	9e 81       	ldd	r25, Y+6	; 0x06
    396c:	9a 83       	std	Y+2, r25	; 0x02
    396e:	89 83       	std	Y+1, r24	; 0x01
    3970:	89 81       	ldd	r24, Y+1	; 0x01
    3972:	9a 81       	ldd	r25, Y+2	; 0x02
    3974:	01 97       	sbiw	r24, 0x01	; 1
    3976:	f1 f7       	brne	.-4      	; 0x3974 <main+0x16e>
    3978:	9a 83       	std	Y+2, r25	; 0x02
    397a:	89 83       	std	Y+1, r24	; 0x01

		//LCD_VoidSendChar(' ',&lcd);
_delay_ms(100);
LCD_VoidGoToXY(0,0,&lcd);
    397c:	9e 01       	movw	r18, r28
    397e:	20 5f       	subi	r18, 0xF0	; 240
    3980:	3f 4f       	sbci	r19, 0xFF	; 255
    3982:	80 e0       	ldi	r24, 0x00	; 0
    3984:	60 e0       	ldi	r22, 0x00	; 0
    3986:	a9 01       	movw	r20, r18
    3988:	0e 94 4b 19 	call	0x3296	; 0x3296 <LCD_VoidGoToXY>
    398c:	74 cf       	rjmp	.-280    	; 0x3876 <main+0x70>

0000398e <__udivmodsi4>:
    398e:	a1 e2       	ldi	r26, 0x21	; 33
    3990:	1a 2e       	mov	r1, r26
    3992:	aa 1b       	sub	r26, r26
    3994:	bb 1b       	sub	r27, r27
    3996:	fd 01       	movw	r30, r26
    3998:	0d c0       	rjmp	.+26     	; 0x39b4 <__udivmodsi4_ep>

0000399a <__udivmodsi4_loop>:
    399a:	aa 1f       	adc	r26, r26
    399c:	bb 1f       	adc	r27, r27
    399e:	ee 1f       	adc	r30, r30
    39a0:	ff 1f       	adc	r31, r31
    39a2:	a2 17       	cp	r26, r18
    39a4:	b3 07       	cpc	r27, r19
    39a6:	e4 07       	cpc	r30, r20
    39a8:	f5 07       	cpc	r31, r21
    39aa:	20 f0       	brcs	.+8      	; 0x39b4 <__udivmodsi4_ep>
    39ac:	a2 1b       	sub	r26, r18
    39ae:	b3 0b       	sbc	r27, r19
    39b0:	e4 0b       	sbc	r30, r20
    39b2:	f5 0b       	sbc	r31, r21

000039b4 <__udivmodsi4_ep>:
    39b4:	66 1f       	adc	r22, r22
    39b6:	77 1f       	adc	r23, r23
    39b8:	88 1f       	adc	r24, r24
    39ba:	99 1f       	adc	r25, r25
    39bc:	1a 94       	dec	r1
    39be:	69 f7       	brne	.-38     	; 0x399a <__udivmodsi4_loop>
    39c0:	60 95       	com	r22
    39c2:	70 95       	com	r23
    39c4:	80 95       	com	r24
    39c6:	90 95       	com	r25
    39c8:	9b 01       	movw	r18, r22
    39ca:	ac 01       	movw	r20, r24
    39cc:	bd 01       	movw	r22, r26
    39ce:	cf 01       	movw	r24, r30
    39d0:	08 95       	ret

000039d2 <__prologue_saves__>:
    39d2:	2f 92       	push	r2
    39d4:	3f 92       	push	r3
    39d6:	4f 92       	push	r4
    39d8:	5f 92       	push	r5
    39da:	6f 92       	push	r6
    39dc:	7f 92       	push	r7
    39de:	8f 92       	push	r8
    39e0:	9f 92       	push	r9
    39e2:	af 92       	push	r10
    39e4:	bf 92       	push	r11
    39e6:	cf 92       	push	r12
    39e8:	df 92       	push	r13
    39ea:	ef 92       	push	r14
    39ec:	ff 92       	push	r15
    39ee:	0f 93       	push	r16
    39f0:	1f 93       	push	r17
    39f2:	cf 93       	push	r28
    39f4:	df 93       	push	r29
    39f6:	cd b7       	in	r28, 0x3d	; 61
    39f8:	de b7       	in	r29, 0x3e	; 62
    39fa:	ca 1b       	sub	r28, r26
    39fc:	db 0b       	sbc	r29, r27
    39fe:	0f b6       	in	r0, 0x3f	; 63
    3a00:	f8 94       	cli
    3a02:	de bf       	out	0x3e, r29	; 62
    3a04:	0f be       	out	0x3f, r0	; 63
    3a06:	cd bf       	out	0x3d, r28	; 61
    3a08:	09 94       	ijmp

00003a0a <__epilogue_restores__>:
    3a0a:	2a 88       	ldd	r2, Y+18	; 0x12
    3a0c:	39 88       	ldd	r3, Y+17	; 0x11
    3a0e:	48 88       	ldd	r4, Y+16	; 0x10
    3a10:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a12:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a14:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a16:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a18:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a1a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a1c:	b9 84       	ldd	r11, Y+9	; 0x09
    3a1e:	c8 84       	ldd	r12, Y+8	; 0x08
    3a20:	df 80       	ldd	r13, Y+7	; 0x07
    3a22:	ee 80       	ldd	r14, Y+6	; 0x06
    3a24:	fd 80       	ldd	r15, Y+5	; 0x05
    3a26:	0c 81       	ldd	r16, Y+4	; 0x04
    3a28:	1b 81       	ldd	r17, Y+3	; 0x03
    3a2a:	aa 81       	ldd	r26, Y+2	; 0x02
    3a2c:	b9 81       	ldd	r27, Y+1	; 0x01
    3a2e:	ce 0f       	add	r28, r30
    3a30:	d1 1d       	adc	r29, r1
    3a32:	0f b6       	in	r0, 0x3f	; 63
    3a34:	f8 94       	cli
    3a36:	de bf       	out	0x3e, r29	; 62
    3a38:	0f be       	out	0x3f, r0	; 63
    3a3a:	cd bf       	out	0x3d, r28	; 61
    3a3c:	ed 01       	movw	r28, r26
    3a3e:	08 95       	ret

00003a40 <_exit>:
    3a40:	f8 94       	cli

00003a42 <__stop_program>:
    3a42:	ff cf       	rjmp	.-2      	; 0x3a42 <__stop_program>
