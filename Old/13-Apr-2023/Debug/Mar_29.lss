
Mar_29.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000420e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  0000420e  000042a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080018e  0080018e  000043d0  2**0
                  ALLOC
  3 .stab         00005910  00000000  00000000  000043d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003dd4  00000000  00000000  00009ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000dab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000dc54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000de46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00010251  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000115d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000127b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00012970  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00012c66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000135d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__vector_1>
       8:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__vector_2>
       c:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 84 20 	call	0x4108	; 0x4108 <main>
      8a:	0c 94 05 21 	jmp	0x420a	; 0x420a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ce 20 	jmp	0x419c	; 0x419c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ea 20 	jmp	0x41d4	; 0x41d4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 da 20 	jmp	0x41b4	; 0x41b4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f6 20 	jmp	0x41ec	; 0x41ec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 da 20 	jmp	0x41b4	; 0x41b4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f6 20 	jmp	0x41ec	; 0x41ec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ce 20 	jmp	0x419c	; 0x419c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ea 20 	jmp	0x41d4	; 0x41d4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d6 20 	jmp	0x41ac	; 0x41ac <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f2 20 	jmp	0x41e4	; 0x41e4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 da 20 	jmp	0x41b4	; 0x41b4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f6 20 	jmp	0x41ec	; 0x41ec <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 da 20 	jmp	0x41b4	; 0x41b4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f6 20 	jmp	0x41ec	; 0x41ec <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 da 20 	jmp	0x41b4	; 0x41b4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f6 20 	jmp	0x41ec	; 0x41ec <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 de 20 	jmp	0x41bc	; 0x41bc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 fa 20 	jmp	0x41f4	; 0x41f4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 d6 20 	jmp	0x41ac	; 0x41ac <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 f2 20 	jmp	0x41e4	; 0x41e4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <WDT_voidEnable>:
 *      Author: Mazen
 */

#include "Watchdog_Interface.h"
void WDT_voidEnable(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
SET_BIT(WDTCR_Reg,WDTCR_WDE);
     e36:	a1 e4       	ldi	r26, 0x41	; 65
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e1 e4       	ldi	r30, 0x41	; 65
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	88 60       	ori	r24, 0x08	; 8
     e42:	8c 93       	st	X, r24

}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <WDT_voidDisable>:
void WDT_voidDisable(void){
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
WDTCR_Reg=(1<<WDTCR_WDTOE)|(1<<WDTCR_WDE);
     e52:	e1 e4       	ldi	r30, 0x41	; 65
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	88 e1       	ldi	r24, 0x18	; 24
     e58:	80 83       	st	Z, r24
WDTCR_Reg=0;
     e5a:	e1 e4       	ldi	r30, 0x41	; 65
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	10 82       	st	Z, r1
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <WDT_ErrStateSleep>:
WDErr WDT_ErrStateSleep(u8 SleepTime){
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <WDT_ErrStateSleep+0x6>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	89 83       	std	Y+1, r24	; 0x01
if(SleepTime<8){
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	88 30       	cpi	r24, 0x08	; 8
     e76:	88 f4       	brcc	.+34     	; 0xe9a <WDT_ErrStateSleep+0x34>
	WDTCR_Reg&=0b11111000;
     e78:	a1 e4       	ldi	r26, 0x41	; 65
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e1 e4       	ldi	r30, 0x41	; 65
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	88 7f       	andi	r24, 0xF8	; 248
     e84:	8c 93       	st	X, r24
	WDTCR_Reg|=SleepTime;
     e86:	a1 e4       	ldi	r26, 0x41	; 65
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e1 e4       	ldi	r30, 0x41	; 65
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	90 81       	ld	r25, Z
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	89 2b       	or	r24, r25
     e94:	8c 93       	st	X, r24
}
else{
	return WDTime_Wrong;
}
return WDTime_OK;
     e96:	1a 82       	std	Y+2, r1	; 0x02
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <WDT_ErrStateSleep+0x38>
if(SleepTime<8){
	WDTCR_Reg&=0b11111000;
	WDTCR_Reg|=SleepTime;
}
else{
	return WDTime_Wrong;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	8a 83       	std	Y+2, r24	; 0x02
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
}
return WDTime_OK;
}
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <T0_VoidInit>:


#include "Timer0_Interface.h"
static void (*T0_pvCallBackfun)(void)=Null;
u32 IFCOND;
void T0_VoidInit(void){
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <T0_VoidInit+0x6>
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <T0_VoidInit+0x8>
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
	/* Setting Prescaler*/
	Prescale;
     eb6:	a3 e5       	ldi	r26, 0x53	; 83
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e3 e5       	ldi	r30, 0x53	; 83
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	8e 7f       	andi	r24, 0xFE	; 254
     ec2:	8c 93       	st	X, r24
     ec4:	a3 e5       	ldi	r26, 0x53	; 83
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e3 e5       	ldi	r30, 0x53	; 83
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	82 60       	ori	r24, 0x02	; 2
     ed0:	8c 93       	st	X, r24
     ed2:	a3 e5       	ldi	r26, 0x53	; 83
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e3 e5       	ldi	r30, 0x53	; 83
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8b 7f       	andi	r24, 0xFB	; 251
     ede:	8c 93       	st	X, r24
	u16 Ticktime,Presc=8;
     ee0:	88 e0       	ldi	r24, 0x08	; 8
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
	//Presc depends on Prescaler Number 8, 64, 256, 1024
	Ticktime=(float)Presc/(float)FCPU;
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	9a 81       	ldd	r25, Y+2	; 0x02
     eec:	cc 01       	movw	r24, r24
     eee:	a0 e0       	ldi	r26, 0x00	; 0
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	bc 01       	movw	r22, r24
     ef4:	cd 01       	movw	r24, r26
     ef6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	bc 01       	movw	r22, r24
     f00:	cd 01       	movw	r24, r26
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	51 e4       	ldi	r21, 0x41	; 65
     f0a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	bc 01       	movw	r22, r24
     f14:	cd 01       	movw	r24, r26
     f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	9c 83       	std	Y+4, r25	; 0x04
     f20:	8b 83       	std	Y+3, r24	; 0x03

	/* Clear Down Counting */

#elif T0_Type==T0_CTC
	/* Setting CTC Mode On */
	CLEAR_BIT(TCCR0_Reg,TCCR0_WGM00);
     f22:	a3 e5       	ldi	r26, 0x53	; 83
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e3 e5       	ldi	r30, 0x53	; 83
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	8f 7b       	andi	r24, 0xBF	; 191
     f2e:	8c 93       	st	X, r24
	SET_BIT(TCCR0_Reg,TCCR0_WGM01);
     f30:	a3 e5       	ldi	r26, 0x53	; 83
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e3 e5       	ldi	r30, 0x53	; 83
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	88 60       	ori	r24, 0x08	; 8
     f3c:	8c 93       	st	X, r24

	/* Enable T0 Interrupt */
	SET_BIT(TIMSK_Reg,TIMSK_OCIE0);
     f3e:	a9 e5       	ldi	r26, 0x59	; 89
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e9 e5       	ldi	r30, 0x59	; 89
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	82 60       	ori	r24, 0x02	; 2
     f4a:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK_Reg,TIMSK_TOIE0);
     f4c:	a9 e5       	ldi	r26, 0x59	; 89
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e9 e5       	ldi	r30, 0x59	; 89
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	8e 7f       	andi	r24, 0xFE	; 254
     f58:	8c 93       	st	X, r24
	// Increase CMT -> Increase DutyCycle
#elif T0_FPWM==T0_FPWM_CLRCTC
	SetFPWMType;
#endif
#endif
}
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <Timer0_VoidSetOCR0>:
void Timer0_VoidSetOCR0(u8 OCR0_Value,u16 *Counter){
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <Timer0_VoidSetOCR0+0x6>
     f6e:	0f 92       	push	r0
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	7b 83       	std	Y+3, r23	; 0x03
     f78:	6a 83       	std	Y+2, r22	; 0x02
	OCR0_Reg=OCR0_Value;
     f7a:	ec e5       	ldi	r30, 0x5C	; 92
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	80 83       	st	Z, r24
	IFCOND=*Counter;
     f82:	ea 81       	ldd	r30, Y+2	; 0x02
     f84:	fb 81       	ldd	r31, Y+3	; 0x03
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	cc 01       	movw	r24, r24
     f8c:	a0 e0       	ldi	r26, 0x00	; 0
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	80 93 9f 01 	sts	0x019F, r24
     f94:	90 93 a0 01 	sts	0x01A0, r25
     f98:	a0 93 a1 01 	sts	0x01A1, r26
     f9c:	b0 93 a2 01 	sts	0x01A2, r27
}
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <Timer0_u8SetCallBack>:
u8 Timer0_u8SetCallBack(void (*Copy_pvCallBackfun)(void)){
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <Timer0_u8SetCallBack+0x6>
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	9a 83       	std	Y+2, r25	; 0x02
     fba:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackfun!=Null){
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	49 f0       	breq	.+18     	; 0xfd6 <Timer0_u8SetCallBack+0x2a>
		T0_pvCallBackfun=Copy_pvCallBackfun;
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	90 93 8f 01 	sts	0x018F, r25
     fcc:	80 93 8e 01 	sts	0x018E, r24
		return 1;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	8b 83       	std	Y+3, r24	; 0x03
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <Timer0_u8SetCallBack+0x2c>
	}
	else
		/*Nothing*/
		return 0;
     fd6:	1b 82       	std	Y+3, r1	; 0x03
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
}
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <__vector_10>:
//ISR(TIMER0_COMP_VECT)
void __vector_10(void) __attribute__((signal));
void __vector_10(void){
     fe6:	1f 92       	push	r1
     fe8:	0f 92       	push	r0
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	0f 92       	push	r0
     fee:	11 24       	eor	r1, r1
     ff0:	2f 93       	push	r18
     ff2:	3f 93       	push	r19
     ff4:	4f 93       	push	r20
     ff6:	5f 93       	push	r21
     ff8:	6f 93       	push	r22
     ffa:	7f 93       	push	r23
     ffc:	8f 93       	push	r24
     ffe:	9f 93       	push	r25
    1000:	af 93       	push	r26
    1002:	bf 93       	push	r27
    1004:	ef 93       	push	r30
    1006:	ff 93       	push	r31
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
	static u16 counter=0;
	counter++;
    1010:	80 91 90 01 	lds	r24, 0x0190
    1014:	90 91 91 01 	lds	r25, 0x0191
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	90 93 91 01 	sts	0x0191, r25
    101e:	80 93 90 01 	sts	0x0190, r24
	if(counter==IFCOND){
    1022:	80 91 90 01 	lds	r24, 0x0190
    1026:	90 91 91 01 	lds	r25, 0x0191
    102a:	9c 01       	movw	r18, r24
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	80 91 9f 01 	lds	r24, 0x019F
    1034:	90 91 a0 01 	lds	r25, 0x01A0
    1038:	a0 91 a1 01 	lds	r26, 0x01A1
    103c:	b0 91 a2 01 	lds	r27, 0x01A2
    1040:	28 17       	cp	r18, r24
    1042:	39 07       	cpc	r19, r25
    1044:	4a 07       	cpc	r20, r26
    1046:	5b 07       	cpc	r21, r27
    1048:	49 f4       	brne	.+18     	; 0x105c <__vector_10+0x76>
		//if(T0_pvCallBackfun!=Null){
		T0_pvCallBackfun();
    104a:	e0 91 8e 01 	lds	r30, 0x018E
    104e:	f0 91 8f 01 	lds	r31, 0x018F
    1052:	09 95       	icall
		counter=0;
    1054:	10 92 91 01 	sts	0x0191, r1
    1058:	10 92 90 01 	sts	0x0190, r1
		//}
	}
}
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	ff 91       	pop	r31
    1062:	ef 91       	pop	r30
    1064:	bf 91       	pop	r27
    1066:	af 91       	pop	r26
    1068:	9f 91       	pop	r25
    106a:	8f 91       	pop	r24
    106c:	7f 91       	pop	r23
    106e:	6f 91       	pop	r22
    1070:	5f 91       	pop	r21
    1072:	4f 91       	pop	r20
    1074:	3f 91       	pop	r19
    1076:	2f 91       	pop	r18
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	0f 90       	pop	r0
    107e:	1f 90       	pop	r1
    1080:	18 95       	reti

00001082 <SPI_voidInitSPIMaster>:
 *  Created on: Apr 8, 2023
 *      Author: Mazen
 */
#include "../DIO/DIO_Interface.h"
#include "SPI_Interface.h"
void SPI_voidInitSPIMaster(void){
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
	DIO_ErrStateSetPinDirection(PORT_B,PIN_5,DIO_OUT);
    108a:	82 e4       	ldi	r24, 0x42	; 66
    108c:	65 e0       	ldi	r22, 0x05	; 5
    108e:	41 e0       	ldi	r20, 0x01	; 1
    1090:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(PORT_B,PIN_6,DIO_IN);
    1094:	82 e4       	ldi	r24, 0x42	; 66
    1096:	66 e0       	ldi	r22, 0x06	; 6
    1098:	40 e0       	ldi	r20, 0x00	; 0
    109a:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(PORT_B,PIN_7,DIO_OUT);
    109e:	82 e4       	ldi	r24, 0x42	; 66
    10a0:	67 e0       	ldi	r22, 0x07	; 7
    10a2:	41 e0       	ldi	r20, 0x01	; 1
    10a4:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
	/* Slave Select Pin */
	DIO_ErrStateSetPinDirection(PORT_A,PIN_7,DIO_OUT);
    10a8:	81 e4       	ldi	r24, 0x41	; 65
    10aa:	67 e0       	ldi	r22, 0x07	; 7
    10ac:	41 e0       	ldi	r20, 0x01	; 1
    10ae:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
	/* Prescaler 16  */
	SET_BIT(SPCR_Reg,0);
    10b2:	ad e2       	ldi	r26, 0x2D	; 45
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	ed e2       	ldi	r30, 0x2D	; 45
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	81 60       	ori	r24, 0x01	; 1
    10be:	8c 93       	st	X, r24
	/* CPH */
	SET_BIT(SPCR_Reg,2);
    10c0:	ad e2       	ldi	r26, 0x2D	; 45
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	ed e2       	ldi	r30, 0x2D	; 45
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	84 60       	ori	r24, 0x04	; 4
    10cc:	8c 93       	st	X, r24
	/* CPOL */
	SET_BIT(SPCR_Reg,3);
    10ce:	ad e2       	ldi	r26, 0x2D	; 45
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	ed e2       	ldi	r30, 0x2D	; 45
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	88 60       	ori	r24, 0x08	; 8
    10da:	8c 93       	st	X, r24
	/* Master Select */
	SET_BIT(SPCR_Reg,4);
    10dc:	ad e2       	ldi	r26, 0x2D	; 45
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	ed e2       	ldi	r30, 0x2D	; 45
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	80 61       	ori	r24, 0x10	; 16
    10e8:	8c 93       	st	X, r24
	/* LSB */
	SET_BIT(SPCR_Reg,5);
    10ea:	ad e2       	ldi	r26, 0x2D	; 45
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	ed e2       	ldi	r30, 0x2D	; 45
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	80 62       	ori	r24, 0x20	; 32
    10f6:	8c 93       	st	X, r24
	/* SPI Enable */
	SET_BIT(SPCR_Reg,6);
    10f8:	ad e2       	ldi	r26, 0x2D	; 45
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	ed e2       	ldi	r30, 0x2D	; 45
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	80 64       	ori	r24, 0x40	; 64
    1104:	8c 93       	st	X, r24

}
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <SPI_u8SendReceive>:
u8 SPI_u8SendReceive(u8 data){
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	0f 92       	push	r0
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	89 83       	std	Y+1, r24	; 0x01

	DIO_ErrStateSetPinValue(PORT_A,PIN_7,DIO_LOW);
    1118:	81 e4       	ldi	r24, 0x41	; 65
    111a:	67 e0       	ldi	r22, 0x07	; 7
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
	SPDR_Reg=data;
    1122:	ef e2       	ldi	r30, 0x2F	; 47
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	80 83       	st	Z, r24
	while(GET_BIT(SPSR_Reg,7)==0);
    112a:	ee e2       	ldi	r30, 0x2E	; 46
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	88 23       	and	r24, r24
    1132:	dc f7       	brge	.-10     	; 0x112a <SPI_u8SendReceive+0x1e>
	//DIO_ErrStateSetPinValue(PORT_A,PIN_7,DIO_HIGH);
	return SPDR_Reg;
    1134:	ef e2       	ldi	r30, 0x2F	; 47
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
}
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <INT2_VoidSETINT2>:
 *      Author: Mazen
 */
#include "EXTINT2_Interface.h"
void (*INT2_CallbackAddress)(void)=Null;

void INT2_VoidSETINT2(void){
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
EnableGlobalInterrupt();
    114a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <EnableGlobalInterrupt>
ENABLEINT2_GICR_Reg;
    114e:	ab e5       	ldi	r26, 0x5B	; 91
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	eb e5       	ldi	r30, 0x5B	; 91
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	80 62       	ori	r24, 0x20	; 32
    115a:	8c 93       	st	X, r24
ENABLEINT2_FALLING_EDGE;
    115c:	a4 e5       	ldi	r26, 0x54	; 84
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e4 e5       	ldi	r30, 0x54	; 84
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	80 64       	ori	r24, 0x40	; 64
    1168:	8c 93       	st	X, r24
}
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <INT2_SetCallBack>:
INT2_Err INT2_SetCallBack(void (*INT2CB)(void)){
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <INT2_SetCallBack+0x6>
    1176:	0f 92       	push	r0
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	9a 83       	std	Y+2, r25	; 0x02
    117e:	89 83       	std	Y+1, r24	; 0x01
	if(INT2CB!=Null){
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	49 f0       	breq	.+18     	; 0x119a <INT2_SetCallBack+0x2a>
	INT2CB=INT2_CallbackAddress;
    1188:	80 91 92 01 	lds	r24, 0x0192
    118c:	90 91 93 01 	lds	r25, 0x0193
    1190:	9a 83       	std	Y+2, r25	; 0x02
    1192:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		return INT2_PTR_NULL;
	}
	return INT2_PTR_OK;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	8b 83       	std	Y+3, r24	; 0x03
    1198:	02 c0       	rjmp	.+4      	; 0x119e <INT2_SetCallBack+0x2e>
	if(INT2CB!=Null){
	INT2CB=INT2_CallbackAddress;
	}
	else
	{
		return INT2_PTR_NULL;
    119a:	82 e0       	ldi	r24, 0x02	; 2
    119c:	8b 83       	std	Y+3, r24	; 0x03
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return INT2_PTR_OK;
}
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void){
    11ac:	1f 92       	push	r1
    11ae:	0f 92       	push	r0
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	0f 92       	push	r0
    11b4:	11 24       	eor	r1, r1
    11b6:	2f 93       	push	r18
    11b8:	3f 93       	push	r19
    11ba:	4f 93       	push	r20
    11bc:	5f 93       	push	r21
    11be:	6f 93       	push	r22
    11c0:	7f 93       	push	r23
    11c2:	8f 93       	push	r24
    11c4:	9f 93       	push	r25
    11c6:	af 93       	push	r26
    11c8:	bf 93       	push	r27
    11ca:	ef 93       	push	r30
    11cc:	ff 93       	push	r31
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
if(INT2_CallbackAddress!=Null){
    11d6:	80 91 92 01 	lds	r24, 0x0192
    11da:	90 91 93 01 	lds	r25, 0x0193
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	29 f0       	breq	.+10     	; 0x11ec <__vector_3+0x40>
	INT2_CallbackAddress();
    11e2:	e0 91 92 01 	lds	r30, 0x0192
    11e6:	f0 91 93 01 	lds	r31, 0x0193
    11ea:	09 95       	icall
}
else{
//Nothing
}
}
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	ff 91       	pop	r31
    11f2:	ef 91       	pop	r30
    11f4:	bf 91       	pop	r27
    11f6:	af 91       	pop	r26
    11f8:	9f 91       	pop	r25
    11fa:	8f 91       	pop	r24
    11fc:	7f 91       	pop	r23
    11fe:	6f 91       	pop	r22
    1200:	5f 91       	pop	r21
    1202:	4f 91       	pop	r20
    1204:	3f 91       	pop	r19
    1206:	2f 91       	pop	r18
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	0f 90       	pop	r0
    120e:	1f 90       	pop	r1
    1210:	18 95       	reti

00001212 <INT1_VoidSETINT1>:
 */
#include "EXTINT1_Interface.h"

void (*INT1_CallbackAddress)(void)=Null;

void INT1_VoidSETINT1(void){
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
	EnableGlobalInterrupt();
    121a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <EnableGlobalInterrupt>
	ENABLEINT1_GICR_Reg;
    121e:	ab e5       	ldi	r26, 0x5B	; 91
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	eb e5       	ldi	r30, 0x5B	; 91
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	80 68       	ori	r24, 0x80	; 128
    122a:	8c 93       	st	X, r24
#if CaseINT1==INT1_LowLevel
	ENABLEINT1_LOW_LEVEL;
    122c:	a5 e5       	ldi	r26, 0x55	; 85
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e5 e5       	ldi	r30, 0x55	; 85
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8b 7f       	andi	r24, 0xFB	; 251
    1238:	8c 93       	st	X, r24
    123a:	a5 e5       	ldi	r26, 0x55	; 85
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e5 e5       	ldi	r30, 0x55	; 85
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	87 7f       	andi	r24, 0xF7	; 247
    1246:	8c 93       	st	X, r24
#endif
#if CaseINT1==INT0_AnyLogicalChange
	ENABLEINT1_ANY_LOGIC;
    1248:	a5 e5       	ldi	r26, 0x55	; 85
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e5 e5       	ldi	r30, 0x55	; 85
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	84 60       	ori	r24, 0x04	; 4
    1254:	8c 93       	st	X, r24
    1256:	a5 e5       	ldi	r26, 0x55	; 85
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e5 e5       	ldi	r30, 0x55	; 85
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	87 7f       	andi	r24, 0xF7	; 247
    1262:	8c 93       	st	X, r24
#endif
#if CaseINT1 ==INT1_FallingEdge
	ENABLEINT1_FALLING_EDGE;
    1264:	a5 e5       	ldi	r26, 0x55	; 85
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e5 e5       	ldi	r30, 0x55	; 85
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	8b 7f       	andi	r24, 0xFB	; 251
    1270:	8c 93       	st	X, r24
    1272:	a5 e5       	ldi	r26, 0x55	; 85
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e5 e5       	ldi	r30, 0x55	; 85
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	88 60       	ori	r24, 0x08	; 8
    127e:	8c 93       	st	X, r24
#endif
#if CaseINT1==INT1_RisingEdge
	ENABLEINT1_RISING_EDGE;
    1280:	a5 e5       	ldi	r26, 0x55	; 85
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e5 e5       	ldi	r30, 0x55	; 85
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	84 60       	ori	r24, 0x04	; 4
    128c:	8c 93       	st	X, r24
    128e:	a5 e5       	ldi	r26, 0x55	; 85
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e5 e5       	ldi	r30, 0x55	; 85
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	88 60       	ori	r24, 0x08	; 8
    129a:	8c 93       	st	X, r24
#endif
}
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <INT1_SetCallBack>:

INT1_Err INT1_SetCallBack(void (*INT1CB)(void)){
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <INT1_SetCallBack+0x6>
    12a8:	0f 92       	push	r0
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	9a 83       	std	Y+2, r25	; 0x02
    12b0:	89 83       	std	Y+1, r24	; 0x01
	if(INT1CB!=Null){
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	49 f0       	breq	.+18     	; 0x12cc <INT1_SetCallBack+0x2a>
	INT1CB=INT1_CallbackAddress;
    12ba:	80 91 94 01 	lds	r24, 0x0194
    12be:	90 91 95 01 	lds	r25, 0x0195
    12c2:	9a 83       	std	Y+2, r25	; 0x02
    12c4:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
		return INT1_PTR_NULL;
	}
	return INT1_PTR_OK;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	8b 83       	std	Y+3, r24	; 0x03
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <INT1_SetCallBack+0x2e>
INT1_Err INT1_SetCallBack(void (*INT1CB)(void)){
	if(INT1CB!=Null){
	INT1CB=INT1_CallbackAddress;
	}
	else{
		return INT1_PTR_NULL;
    12cc:	82 e0       	ldi	r24, 0x02	; 2
    12ce:	8b 83       	std	Y+3, r24	; 0x03
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return INT1_PTR_OK;

}
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <__vector_2>:

void __vector_2 (void) __attribute__((signal));
void __vector_2(void){
    12de:	1f 92       	push	r1
    12e0:	0f 92       	push	r0
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	0f 92       	push	r0
    12e6:	11 24       	eor	r1, r1
    12e8:	2f 93       	push	r18
    12ea:	3f 93       	push	r19
    12ec:	4f 93       	push	r20
    12ee:	5f 93       	push	r21
    12f0:	6f 93       	push	r22
    12f2:	7f 93       	push	r23
    12f4:	8f 93       	push	r24
    12f6:	9f 93       	push	r25
    12f8:	af 93       	push	r26
    12fa:	bf 93       	push	r27
    12fc:	ef 93       	push	r30
    12fe:	ff 93       	push	r31
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
	if(INT1_CallbackAddress!=Null){
    1308:	80 91 94 01 	lds	r24, 0x0194
    130c:	90 91 95 01 	lds	r25, 0x0195
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	29 f0       	breq	.+10     	; 0x131e <__vector_2+0x40>
		INT1_CallbackAddress();
    1314:	e0 91 94 01 	lds	r30, 0x0194
    1318:	f0 91 95 01 	lds	r31, 0x0195
    131c:	09 95       	icall
	}
	else{
		//Do Nothing
	}
}
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	ff 91       	pop	r31
    1324:	ef 91       	pop	r30
    1326:	bf 91       	pop	r27
    1328:	af 91       	pop	r26
    132a:	9f 91       	pop	r25
    132c:	8f 91       	pop	r24
    132e:	7f 91       	pop	r23
    1330:	6f 91       	pop	r22
    1332:	5f 91       	pop	r21
    1334:	4f 91       	pop	r20
    1336:	3f 91       	pop	r19
    1338:	2f 91       	pop	r18
    133a:	0f 90       	pop	r0
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	0f 90       	pop	r0
    1340:	1f 90       	pop	r1
    1342:	18 95       	reti

00001344 <INT0_VoidSETINT0>:
 */

#include "EXTINT0_Interface.h"
void (*INT0_CallbackAddress)(void)=Null;

void INT0_VoidSETINT0(void){
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
	DIO_ErrStateSetPinDirection(PORT_D,PIN_2,DIO_IN);
    134c:	84 e4       	ldi	r24, 0x44	; 68
    134e:	62 e0       	ldi	r22, 0x02	; 2
    1350:	40 e0       	ldi	r20, 0x00	; 0
    1352:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinValue(PORT_D,PIN_2,DIO_HIGH);
    1356:	84 e4       	ldi	r24, 0x44	; 68
    1358:	62 e0       	ldi	r22, 0x02	; 2
    135a:	41 e0       	ldi	r20, 0x01	; 1
    135c:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
	SET_BIT(GICR_Reg,GICR_INT0_BIT);
    1360:	ab e5       	ldi	r26, 0x5B	; 91
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	eb e5       	ldi	r30, 0x5B	; 91
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	80 64       	ori	r24, 0x40	; 64
    136c:	8c 93       	st	X, r24
#elif CaseINT0==INT0_AnyLogicalChange
	ENABLEINT0_ANY_LOGIC;

#elif CaseINT0 ==INT0_FallingEdge
	//ENABLEINT0_FALLING_EDGE;
	CLEAR_BIT(MCUCR_Reg,ISC00);
    136e:	a5 e5       	ldi	r26, 0x55	; 85
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e5 e5       	ldi	r30, 0x55	; 85
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	8e 7f       	andi	r24, 0xFE	; 254
    137a:	8c 93       	st	X, r24
	SET_BIT(MCUCR_Reg,ISC01);
    137c:	a5 e5       	ldi	r26, 0x55	; 85
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e5 e5       	ldi	r30, 0x55	; 85
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	82 60       	ori	r24, 0x02	; 2
    1388:	8c 93       	st	X, r24

#elif CaseINT0==INT0_RisingEdge
	ENABLEINT0_RISING_EDGE;
#endif
}
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <INT0_SetCallBack>:

INT0_Err INT0_SetCallBack(void (*INT0CB)(void)){
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	00 d0       	rcall	.+0      	; 0x1396 <INT0_SetCallBack+0x6>
    1396:	0f 92       	push	r0
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	9a 83       	std	Y+2, r25	; 0x02
    139e:	89 83       	std	Y+1, r24	; 0x01
if(INT0CB != Null){
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	9a 81       	ldd	r25, Y+2	; 0x02
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	49 f0       	breq	.+18     	; 0x13ba <INT0_SetCallBack+0x2a>
	INT0_CallbackAddress=INT0CB;
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	90 93 97 01 	sts	0x0197, r25
    13b0:	80 93 96 01 	sts	0x0196, r24
	}
else{
	return INT0_PTR_NULL;
}
return INT0_PTR_OK;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	8b 83       	std	Y+3, r24	; 0x03
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <INT0_SetCallBack+0x2e>
INT0_Err INT0_SetCallBack(void (*INT0CB)(void)){
if(INT0CB != Null){
	INT0_CallbackAddress=INT0CB;
	}
else{
	return INT0_PTR_NULL;
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	8b 83       	std	Y+3, r24	; 0x03
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
}
return INT0_PTR_OK;
}
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <__vector_1>:

void __vector_1(void) __attribute__((signal));
void __vector_1(void){
    13cc:	1f 92       	push	r1
    13ce:	0f 92       	push	r0
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	0f 92       	push	r0
    13d4:	11 24       	eor	r1, r1
    13d6:	2f 93       	push	r18
    13d8:	3f 93       	push	r19
    13da:	4f 93       	push	r20
    13dc:	5f 93       	push	r21
    13de:	6f 93       	push	r22
    13e0:	7f 93       	push	r23
    13e2:	8f 93       	push	r24
    13e4:	9f 93       	push	r25
    13e6:	af 93       	push	r26
    13e8:	bf 93       	push	r27
    13ea:	ef 93       	push	r30
    13ec:	ff 93       	push	r31
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62

//	if(INT0_CallbackAddress!=Null){
		INT0_CallbackAddress();
    13f6:	e0 91 96 01 	lds	r30, 0x0196
    13fa:	f0 91 97 01 	lds	r31, 0x0197
    13fe:	09 95       	icall

//	}
	//else{
		//nothing
	//}
}
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	ff 91       	pop	r31
    1406:	ef 91       	pop	r30
    1408:	bf 91       	pop	r27
    140a:	af 91       	pop	r26
    140c:	9f 91       	pop	r25
    140e:	8f 91       	pop	r24
    1410:	7f 91       	pop	r23
    1412:	6f 91       	pop	r22
    1414:	5f 91       	pop	r21
    1416:	4f 91       	pop	r20
    1418:	3f 91       	pop	r19
    141a:	2f 91       	pop	r18
    141c:	0f 90       	pop	r0
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	0f 90       	pop	r0
    1422:	1f 90       	pop	r1
    1424:	18 95       	reti

00001426 <DIO_ErrStateSetPinDirection>:
 *      Author: Mazen
 */

#include "DIO_Interface.h"

DIO_Err DIO_ErrStateSetPinDirection(PORT_Name port,PIN_Number pin,Direction direction){
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	28 97       	sbiw	r28, 0x08	; 8
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	6a 83       	std	Y+2, r22	; 0x02
    143e:	4b 83       	std	Y+3, r20	; 0x03
	if(pin>=0 && pin<=7)
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	88 30       	cpi	r24, 0x08	; 8
    1444:	08 f0       	brcs	.+2      	; 0x1448 <DIO_ErrStateSetPinDirection+0x22>
    1446:	f8 c0       	rjmp	.+496    	; 0x1638 <DIO_ErrStateSetPinDirection+0x212>
		{
			if(direction == DIO_OUT)
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	09 f0       	breq	.+2      	; 0x1450 <DIO_ErrStateSetPinDirection+0x2a>
    144e:	73 c0       	rjmp	.+230    	; 0x1536 <DIO_ErrStateSetPinDirection+0x110>
			{
				switch(port)
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	38 87       	std	Y+8, r19	; 0x08
    1458:	2f 83       	std	Y+7, r18	; 0x07
    145a:	8f 81       	ldd	r24, Y+7	; 0x07
    145c:	98 85       	ldd	r25, Y+8	; 0x08
    145e:	82 34       	cpi	r24, 0x42	; 66
    1460:	91 05       	cpc	r25, r1
    1462:	51 f1       	breq	.+84     	; 0x14b8 <DIO_ErrStateSetPinDirection+0x92>
    1464:	2f 81       	ldd	r18, Y+7	; 0x07
    1466:	38 85       	ldd	r19, Y+8	; 0x08
    1468:	23 34       	cpi	r18, 0x43	; 67
    146a:	31 05       	cpc	r19, r1
    146c:	34 f4       	brge	.+12     	; 0x147a <DIO_ErrStateSetPinDirection+0x54>
    146e:	8f 81       	ldd	r24, Y+7	; 0x07
    1470:	98 85       	ldd	r25, Y+8	; 0x08
    1472:	81 34       	cpi	r24, 0x41	; 65
    1474:	91 05       	cpc	r25, r1
    1476:	61 f0       	breq	.+24     	; 0x1490 <DIO_ErrStateSetPinDirection+0x6a>
    1478:	5b c0       	rjmp	.+182    	; 0x1530 <DIO_ErrStateSetPinDirection+0x10a>
    147a:	2f 81       	ldd	r18, Y+7	; 0x07
    147c:	38 85       	ldd	r19, Y+8	; 0x08
    147e:	23 34       	cpi	r18, 0x43	; 67
    1480:	31 05       	cpc	r19, r1
    1482:	71 f1       	breq	.+92     	; 0x14e0 <DIO_ErrStateSetPinDirection+0xba>
    1484:	8f 81       	ldd	r24, Y+7	; 0x07
    1486:	98 85       	ldd	r25, Y+8	; 0x08
    1488:	84 34       	cpi	r24, 0x44	; 68
    148a:	91 05       	cpc	r25, r1
    148c:	e9 f1       	breq	.+122    	; 0x1508 <DIO_ErrStateSetPinDirection+0xe2>
    148e:	50 c0       	rjmp	.+160    	; 0x1530 <DIO_ErrStateSetPinDirection+0x10a>
				{
				case 'A': SET_BIT(DDRA_ITI,pin); break;
    1490:	aa e3       	ldi	r26, 0x3A	; 58
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	ea e3       	ldi	r30, 0x3A	; 58
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_ErrStateSetPinDirection+0x88>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <DIO_ErrStateSetPinDirection+0x84>
    14b2:	84 2b       	or	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	be c0       	rjmp	.+380    	; 0x1634 <DIO_ErrStateSetPinDirection+0x20e>
				case 'B': SET_BIT(DDRB_ITI,pin); break;
    14b8:	a7 e3       	ldi	r26, 0x37	; 55
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e7 e3       	ldi	r30, 0x37	; 55
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 2e       	mov	r0, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <DIO_ErrStateSetPinDirection+0xb0>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <DIO_ErrStateSetPinDirection+0xac>
    14da:	84 2b       	or	r24, r20
    14dc:	8c 93       	st	X, r24
    14de:	aa c0       	rjmp	.+340    	; 0x1634 <DIO_ErrStateSetPinDirection+0x20e>
				case 'C': SET_BIT(DDRC_ITI,pin); break;
    14e0:	a4 e3       	ldi	r26, 0x34	; 52
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e4 e3       	ldi	r30, 0x34	; 52
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	48 2f       	mov	r20, r24
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	02 2e       	mov	r0, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <DIO_ErrStateSetPinDirection+0xd8>
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	0a 94       	dec	r0
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <DIO_ErrStateSetPinDirection+0xd4>
    1502:	84 2b       	or	r24, r20
    1504:	8c 93       	st	X, r24
    1506:	96 c0       	rjmp	.+300    	; 0x1634 <DIO_ErrStateSetPinDirection+0x20e>
				case 'D': SET_BIT(DDRD_ITI,pin); break;
    1508:	a1 e3       	ldi	r26, 0x31	; 49
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e1 e3       	ldi	r30, 0x31	; 49
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	48 2f       	mov	r20, r24
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	02 2e       	mov	r0, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_ErrStateSetPinDirection+0x100>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	0a 94       	dec	r0
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <DIO_ErrStateSetPinDirection+0xfc>
    152a:	84 2b       	or	r24, r20
    152c:	8c 93       	st	X, r24
    152e:	82 c0       	rjmp	.+260    	; 0x1634 <DIO_ErrStateSetPinDirection+0x20e>
				default: return DIO_ERROR_PORT;
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	9e 83       	std	Y+6, r25	; 0x06
    1534:	83 c0       	rjmp	.+262    	; 0x163c <DIO_ErrStateSetPinDirection+0x216>
				}

			}
			else if(direction == DIO_IN)
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	88 23       	and	r24, r24
    153a:	09 f0       	breq	.+2      	; 0x153e <DIO_ErrStateSetPinDirection+0x118>
    153c:	78 c0       	rjmp	.+240    	; 0x162e <DIO_ErrStateSetPinDirection+0x208>
			{
				switch(port)
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	3d 83       	std	Y+5, r19	; 0x05
    1546:	2c 83       	std	Y+4, r18	; 0x04
    1548:	8c 81       	ldd	r24, Y+4	; 0x04
    154a:	9d 81       	ldd	r25, Y+5	; 0x05
    154c:	82 34       	cpi	r24, 0x42	; 66
    154e:	91 05       	cpc	r25, r1
    1550:	61 f1       	breq	.+88     	; 0x15aa <DIO_ErrStateSetPinDirection+0x184>
    1552:	2c 81       	ldd	r18, Y+4	; 0x04
    1554:	3d 81       	ldd	r19, Y+5	; 0x05
    1556:	23 34       	cpi	r18, 0x43	; 67
    1558:	31 05       	cpc	r19, r1
    155a:	34 f4       	brge	.+12     	; 0x1568 <DIO_ErrStateSetPinDirection+0x142>
    155c:	8c 81       	ldd	r24, Y+4	; 0x04
    155e:	9d 81       	ldd	r25, Y+5	; 0x05
    1560:	81 34       	cpi	r24, 0x41	; 65
    1562:	91 05       	cpc	r25, r1
    1564:	69 f0       	breq	.+26     	; 0x1580 <DIO_ErrStateSetPinDirection+0x15a>
    1566:	60 c0       	rjmp	.+192    	; 0x1628 <DIO_ErrStateSetPinDirection+0x202>
    1568:	2c 81       	ldd	r18, Y+4	; 0x04
    156a:	3d 81       	ldd	r19, Y+5	; 0x05
    156c:	23 34       	cpi	r18, 0x43	; 67
    156e:	31 05       	cpc	r19, r1
    1570:	89 f1       	breq	.+98     	; 0x15d4 <DIO_ErrStateSetPinDirection+0x1ae>
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	9d 81       	ldd	r25, Y+5	; 0x05
    1576:	84 34       	cpi	r24, 0x44	; 68
    1578:	91 05       	cpc	r25, r1
    157a:	09 f4       	brne	.+2      	; 0x157e <DIO_ErrStateSetPinDirection+0x158>
    157c:	40 c0       	rjmp	.+128    	; 0x15fe <DIO_ErrStateSetPinDirection+0x1d8>
    157e:	54 c0       	rjmp	.+168    	; 0x1628 <DIO_ErrStateSetPinDirection+0x202>
				{
				case 'A': CLEAR_BIT(DDRA_ITI,pin); break;
    1580:	aa e3       	ldi	r26, 0x3A	; 58
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	ea e3       	ldi	r30, 0x3A	; 58
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <DIO_ErrStateSetPinDirection+0x178>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <DIO_ErrStateSetPinDirection+0x174>
    15a2:	80 95       	com	r24
    15a4:	84 23       	and	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	45 c0       	rjmp	.+138    	; 0x1634 <DIO_ErrStateSetPinDirection+0x20e>
				case 'B': CLEAR_BIT(DDRB_ITI,pin); break;
    15aa:	a7 e3       	ldi	r26, 0x37	; 55
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e7 e3       	ldi	r30, 0x37	; 55
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <DIO_ErrStateSetPinDirection+0x1a2>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <DIO_ErrStateSetPinDirection+0x19e>
    15cc:	80 95       	com	r24
    15ce:	84 23       	and	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	30 c0       	rjmp	.+96     	; 0x1634 <DIO_ErrStateSetPinDirection+0x20e>
				case 'C': CLEAR_BIT(DDRC_ITI,pin); break;
    15d4:	a4 e3       	ldi	r26, 0x34	; 52
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e4 e3       	ldi	r30, 0x34	; 52
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <DIO_ErrStateSetPinDirection+0x1cc>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <DIO_ErrStateSetPinDirection+0x1c8>
    15f6:	80 95       	com	r24
    15f8:	84 23       	and	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	1b c0       	rjmp	.+54     	; 0x1634 <DIO_ErrStateSetPinDirection+0x20e>
				case 'D': CLEAR_BIT(DDRD_ITI,pin); break;
    15fe:	a1 e3       	ldi	r26, 0x31	; 49
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e1 e3       	ldi	r30, 0x31	; 49
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_ErrStateSetPinDirection+0x1f6>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_ErrStateSetPinDirection+0x1f2>
    1620:	80 95       	com	r24
    1622:	84 23       	and	r24, r20
    1624:	8c 93       	st	X, r24
    1626:	06 c0       	rjmp	.+12     	; 0x1634 <DIO_ErrStateSetPinDirection+0x20e>
				default: return DIO_ERROR_PORT;				}
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	9e 83       	std	Y+6, r25	; 0x06
    162c:	07 c0       	rjmp	.+14     	; 0x163c <DIO_ErrStateSetPinDirection+0x216>
			}
			else
				return DIO_ERROR_Direction;
    162e:	23 e0       	ldi	r18, 0x03	; 3
    1630:	2e 83       	std	Y+6, r18	; 0x06
    1632:	04 c0       	rjmp	.+8      	; 0x163c <DIO_ErrStateSetPinDirection+0x216>
		}
	else
		return DIO_ERROR_PIN;
	return DIO_OK;
    1634:	1e 82       	std	Y+6, r1	; 0x06
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_ErrStateSetPinDirection+0x216>
			}
			else
				return DIO_ERROR_Direction;
		}
	else
		return DIO_ERROR_PIN;
    1638:	32 e0       	ldi	r19, 0x02	; 2
    163a:	3e 83       	std	Y+6, r19	; 0x06
    163c:	8e 81       	ldd	r24, Y+6	; 0x06
	return DIO_OK;
}
    163e:	28 96       	adiw	r28, 0x08	; 8
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <DIO_ErrStateSetPinValue>:
DIO_Err DIO_ErrStateSetPinValue(PORT_Name port,PIN_Number pin,Volt val){
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	28 97       	sbiw	r28, 0x08	; 8
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	6a 83       	std	Y+2, r22	; 0x02
    1668:	4b 83       	std	Y+3, r20	; 0x03
	if(pin>=0 && pin<=7)
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	88 30       	cpi	r24, 0x08	; 8
    166e:	08 f0       	brcs	.+2      	; 0x1672 <DIO_ErrStateSetPinValue+0x22>
    1670:	f8 c0       	rjmp	.+496    	; 0x1862 <DIO_ErrStateSetPinValue+0x212>
			{
				if(val == DIO_HIGH)
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	09 f0       	breq	.+2      	; 0x167a <DIO_ErrStateSetPinValue+0x2a>
    1678:	73 c0       	rjmp	.+230    	; 0x1760 <DIO_ErrStateSetPinValue+0x110>
				{
					switch(port)
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	38 87       	std	Y+8, r19	; 0x08
    1682:	2f 83       	std	Y+7, r18	; 0x07
    1684:	8f 81       	ldd	r24, Y+7	; 0x07
    1686:	98 85       	ldd	r25, Y+8	; 0x08
    1688:	82 34       	cpi	r24, 0x42	; 66
    168a:	91 05       	cpc	r25, r1
    168c:	51 f1       	breq	.+84     	; 0x16e2 <DIO_ErrStateSetPinValue+0x92>
    168e:	2f 81       	ldd	r18, Y+7	; 0x07
    1690:	38 85       	ldd	r19, Y+8	; 0x08
    1692:	23 34       	cpi	r18, 0x43	; 67
    1694:	31 05       	cpc	r19, r1
    1696:	34 f4       	brge	.+12     	; 0x16a4 <DIO_ErrStateSetPinValue+0x54>
    1698:	8f 81       	ldd	r24, Y+7	; 0x07
    169a:	98 85       	ldd	r25, Y+8	; 0x08
    169c:	81 34       	cpi	r24, 0x41	; 65
    169e:	91 05       	cpc	r25, r1
    16a0:	61 f0       	breq	.+24     	; 0x16ba <DIO_ErrStateSetPinValue+0x6a>
    16a2:	5b c0       	rjmp	.+182    	; 0x175a <DIO_ErrStateSetPinValue+0x10a>
    16a4:	2f 81       	ldd	r18, Y+7	; 0x07
    16a6:	38 85       	ldd	r19, Y+8	; 0x08
    16a8:	23 34       	cpi	r18, 0x43	; 67
    16aa:	31 05       	cpc	r19, r1
    16ac:	71 f1       	breq	.+92     	; 0x170a <DIO_ErrStateSetPinValue+0xba>
    16ae:	8f 81       	ldd	r24, Y+7	; 0x07
    16b0:	98 85       	ldd	r25, Y+8	; 0x08
    16b2:	84 34       	cpi	r24, 0x44	; 68
    16b4:	91 05       	cpc	r25, r1
    16b6:	e9 f1       	breq	.+122    	; 0x1732 <DIO_ErrStateSetPinValue+0xe2>
    16b8:	50 c0       	rjmp	.+160    	; 0x175a <DIO_ErrStateSetPinValue+0x10a>
					{
					case 'A': SET_BIT(PORTA_ITI,pin); break;
    16ba:	ab e3       	ldi	r26, 0x3B	; 59
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	eb e3       	ldi	r30, 0x3B	; 59
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_ErrStateSetPinValue+0x88>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <DIO_ErrStateSetPinValue+0x84>
    16dc:	84 2b       	or	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	be c0       	rjmp	.+380    	; 0x185e <DIO_ErrStateSetPinValue+0x20e>
					case 'B': SET_BIT(PORTB_ITI,pin); break;
    16e2:	a8 e3       	ldi	r26, 0x38	; 56
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e8 e3       	ldi	r30, 0x38	; 56
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <DIO_ErrStateSetPinValue+0xb0>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <DIO_ErrStateSetPinValue+0xac>
    1704:	84 2b       	or	r24, r20
    1706:	8c 93       	st	X, r24
    1708:	aa c0       	rjmp	.+340    	; 0x185e <DIO_ErrStateSetPinValue+0x20e>
					case 'C': SET_BIT(PORTC_ITI,pin); break;
    170a:	a5 e3       	ldi	r26, 0x35	; 53
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e5 e3       	ldi	r30, 0x35	; 53
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 2e       	mov	r0, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_ErrStateSetPinValue+0xd8>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	0a 94       	dec	r0
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <DIO_ErrStateSetPinValue+0xd4>
    172c:	84 2b       	or	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	96 c0       	rjmp	.+300    	; 0x185e <DIO_ErrStateSetPinValue+0x20e>
					case 'D': SET_BIT(PORTD_ITI,pin); break;
    1732:	a2 e3       	ldi	r26, 0x32	; 50
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e2 e3       	ldi	r30, 0x32	; 50
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 2e       	mov	r0, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <DIO_ErrStateSetPinValue+0x100>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	0a 94       	dec	r0
    1752:	e2 f7       	brpl	.-8      	; 0x174c <DIO_ErrStateSetPinValue+0xfc>
    1754:	84 2b       	or	r24, r20
    1756:	8c 93       	st	X, r24
    1758:	82 c0       	rjmp	.+260    	; 0x185e <DIO_ErrStateSetPinValue+0x20e>
					default: return DIO_ERROR_PORT;
    175a:	91 e0       	ldi	r25, 0x01	; 1
    175c:	9e 83       	std	Y+6, r25	; 0x06
    175e:	83 c0       	rjmp	.+262    	; 0x1866 <DIO_ErrStateSetPinValue+0x216>
					}
				}
				else if(val == DIO_LOW)
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	88 23       	and	r24, r24
    1764:	09 f0       	breq	.+2      	; 0x1768 <DIO_ErrStateSetPinValue+0x118>
    1766:	78 c0       	rjmp	.+240    	; 0x1858 <DIO_ErrStateSetPinValue+0x208>
				{
					switch(port)
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	3d 83       	std	Y+5, r19	; 0x05
    1770:	2c 83       	std	Y+4, r18	; 0x04
    1772:	8c 81       	ldd	r24, Y+4	; 0x04
    1774:	9d 81       	ldd	r25, Y+5	; 0x05
    1776:	82 34       	cpi	r24, 0x42	; 66
    1778:	91 05       	cpc	r25, r1
    177a:	61 f1       	breq	.+88     	; 0x17d4 <DIO_ErrStateSetPinValue+0x184>
    177c:	2c 81       	ldd	r18, Y+4	; 0x04
    177e:	3d 81       	ldd	r19, Y+5	; 0x05
    1780:	23 34       	cpi	r18, 0x43	; 67
    1782:	31 05       	cpc	r19, r1
    1784:	34 f4       	brge	.+12     	; 0x1792 <DIO_ErrStateSetPinValue+0x142>
    1786:	8c 81       	ldd	r24, Y+4	; 0x04
    1788:	9d 81       	ldd	r25, Y+5	; 0x05
    178a:	81 34       	cpi	r24, 0x41	; 65
    178c:	91 05       	cpc	r25, r1
    178e:	69 f0       	breq	.+26     	; 0x17aa <DIO_ErrStateSetPinValue+0x15a>
    1790:	60 c0       	rjmp	.+192    	; 0x1852 <DIO_ErrStateSetPinValue+0x202>
    1792:	2c 81       	ldd	r18, Y+4	; 0x04
    1794:	3d 81       	ldd	r19, Y+5	; 0x05
    1796:	23 34       	cpi	r18, 0x43	; 67
    1798:	31 05       	cpc	r19, r1
    179a:	89 f1       	breq	.+98     	; 0x17fe <DIO_ErrStateSetPinValue+0x1ae>
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	9d 81       	ldd	r25, Y+5	; 0x05
    17a0:	84 34       	cpi	r24, 0x44	; 68
    17a2:	91 05       	cpc	r25, r1
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <DIO_ErrStateSetPinValue+0x158>
    17a6:	40 c0       	rjmp	.+128    	; 0x1828 <DIO_ErrStateSetPinValue+0x1d8>
    17a8:	54 c0       	rjmp	.+168    	; 0x1852 <DIO_ErrStateSetPinValue+0x202>
					{
					case 'A': CLEAR_BIT(PORTA_ITI,pin); break;
    17aa:	ab e3       	ldi	r26, 0x3B	; 59
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	eb e3       	ldi	r30, 0x3B	; 59
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	48 2f       	mov	r20, r24
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <DIO_ErrStateSetPinValue+0x178>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <DIO_ErrStateSetPinValue+0x174>
    17cc:	80 95       	com	r24
    17ce:	84 23       	and	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	45 c0       	rjmp	.+138    	; 0x185e <DIO_ErrStateSetPinValue+0x20e>
					case 'B': CLEAR_BIT(PORTB_ITI,pin); break;
    17d4:	a8 e3       	ldi	r26, 0x38	; 56
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e8 e3       	ldi	r30, 0x38	; 56
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <DIO_ErrStateSetPinValue+0x1a2>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <DIO_ErrStateSetPinValue+0x19e>
    17f6:	80 95       	com	r24
    17f8:	84 23       	and	r24, r20
    17fa:	8c 93       	st	X, r24
    17fc:	30 c0       	rjmp	.+96     	; 0x185e <DIO_ErrStateSetPinValue+0x20e>
					case 'C': CLEAR_BIT(PORTC_ITI,pin); break;
    17fe:	a5 e3       	ldi	r26, 0x35	; 53
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e5 e3       	ldi	r30, 0x35	; 53
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	48 2f       	mov	r20, r24
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	02 2e       	mov	r0, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <DIO_ErrStateSetPinValue+0x1cc>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	0a 94       	dec	r0
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <DIO_ErrStateSetPinValue+0x1c8>
    1820:	80 95       	com	r24
    1822:	84 23       	and	r24, r20
    1824:	8c 93       	st	X, r24
    1826:	1b c0       	rjmp	.+54     	; 0x185e <DIO_ErrStateSetPinValue+0x20e>
					case 'D': CLEAR_BIT(PORTD_ITI,pin); break;
    1828:	a2 e3       	ldi	r26, 0x32	; 50
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e2 e3       	ldi	r30, 0x32	; 50
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 2e       	mov	r0, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <DIO_ErrStateSetPinValue+0x1f6>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	0a 94       	dec	r0
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <DIO_ErrStateSetPinValue+0x1f2>
    184a:	80 95       	com	r24
    184c:	84 23       	and	r24, r20
    184e:	8c 93       	st	X, r24
    1850:	06 c0       	rjmp	.+12     	; 0x185e <DIO_ErrStateSetPinValue+0x20e>
					default: return DIO_ERROR_PORT;					}
    1852:	91 e0       	ldi	r25, 0x01	; 1
    1854:	9e 83       	std	Y+6, r25	; 0x06
    1856:	07 c0       	rjmp	.+14     	; 0x1866 <DIO_ErrStateSetPinValue+0x216>
				}
				else
					return DIO_ERROR_VALUE;
    1858:	24 e0       	ldi	r18, 0x04	; 4
    185a:	2e 83       	std	Y+6, r18	; 0x06
    185c:	04 c0       	rjmp	.+8      	; 0x1866 <DIO_ErrStateSetPinValue+0x216>
			}
		else
			return DIO_ERROR_PIN;
		return DIO_OK;
    185e:	1e 82       	std	Y+6, r1	; 0x06
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <DIO_ErrStateSetPinValue+0x216>
				}
				else
					return DIO_ERROR_VALUE;
			}
		else
			return DIO_ERROR_PIN;
    1862:	32 e0       	ldi	r19, 0x02	; 2
    1864:	3e 83       	std	Y+6, r19	; 0x06
    1866:	8e 81       	ldd	r24, Y+6	; 0x06
		return DIO_OK;
}
    1868:	28 96       	adiw	r28, 0x08	; 8
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <DIO_ErrStateReadPinValue>:
DIO_Err DIO_ErrStateReadPinValue(PORT_Name port,PIN_Number pin,u8 *value){
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	27 97       	sbiw	r28, 0x07	; 7
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	6a 83       	std	Y+2, r22	; 0x02
    1892:	5c 83       	std	Y+4, r21	; 0x04
    1894:	4b 83       	std	Y+3, r20	; 0x03
	if(pin>=0 && pin<=7)
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	88 30       	cpi	r24, 0x08	; 8
    189a:	08 f0       	brcs	.+2      	; 0x189e <DIO_ErrStateReadPinValue+0x24>
    189c:	76 c0       	rjmp	.+236    	; 0x198a <DIO_ErrStateReadPinValue+0x110>
				{
						switch(port)
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	3f 83       	std	Y+7, r19	; 0x07
    18a6:	2e 83       	std	Y+6, r18	; 0x06
    18a8:	4e 81       	ldd	r20, Y+6	; 0x06
    18aa:	5f 81       	ldd	r21, Y+7	; 0x07
    18ac:	42 34       	cpi	r20, 0x42	; 66
    18ae:	51 05       	cpc	r21, r1
    18b0:	59 f1       	breq	.+86     	; 0x1908 <DIO_ErrStateReadPinValue+0x8e>
    18b2:	8e 81       	ldd	r24, Y+6	; 0x06
    18b4:	9f 81       	ldd	r25, Y+7	; 0x07
    18b6:	83 34       	cpi	r24, 0x43	; 67
    18b8:	91 05       	cpc	r25, r1
    18ba:	34 f4       	brge	.+12     	; 0x18c8 <DIO_ErrStateReadPinValue+0x4e>
    18bc:	2e 81       	ldd	r18, Y+6	; 0x06
    18be:	3f 81       	ldd	r19, Y+7	; 0x07
    18c0:	21 34       	cpi	r18, 0x41	; 65
    18c2:	31 05       	cpc	r19, r1
    18c4:	69 f0       	breq	.+26     	; 0x18e0 <DIO_ErrStateReadPinValue+0x66>
    18c6:	5c c0       	rjmp	.+184    	; 0x1980 <DIO_ErrStateReadPinValue+0x106>
    18c8:	4e 81       	ldd	r20, Y+6	; 0x06
    18ca:	5f 81       	ldd	r21, Y+7	; 0x07
    18cc:	43 34       	cpi	r20, 0x43	; 67
    18ce:	51 05       	cpc	r21, r1
    18d0:	79 f1       	breq	.+94     	; 0x1930 <DIO_ErrStateReadPinValue+0xb6>
    18d2:	8e 81       	ldd	r24, Y+6	; 0x06
    18d4:	9f 81       	ldd	r25, Y+7	; 0x07
    18d6:	84 34       	cpi	r24, 0x44	; 68
    18d8:	91 05       	cpc	r25, r1
    18da:	09 f4       	brne	.+2      	; 0x18de <DIO_ErrStateReadPinValue+0x64>
    18dc:	3d c0       	rjmp	.+122    	; 0x1958 <DIO_ErrStateReadPinValue+0xde>
    18de:	50 c0       	rjmp	.+160    	; 0x1980 <DIO_ErrStateReadPinValue+0x106>
						{
						case 'A':*value= GET_BIT(PINA_ITI,pin); break;
    18e0:	e9 e3       	ldi	r30, 0x39	; 57
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a9 01       	movw	r20, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <DIO_ErrStateReadPinValue+0x7e>
    18f4:	55 95       	asr	r21
    18f6:	47 95       	ror	r20
    18f8:	8a 95       	dec	r24
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <DIO_ErrStateReadPinValue+0x7a>
    18fc:	ca 01       	movw	r24, r20
    18fe:	81 70       	andi	r24, 0x01	; 1
    1900:	eb 81       	ldd	r30, Y+3	; 0x03
    1902:	fc 81       	ldd	r31, Y+4	; 0x04
    1904:	80 83       	st	Z, r24
    1906:	3f c0       	rjmp	.+126    	; 0x1986 <DIO_ErrStateReadPinValue+0x10c>
						case 'B':*value= GET_BIT(PINB_ITI,pin); break;
    1908:	e6 e3       	ldi	r30, 0x36	; 54
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	a9 01       	movw	r20, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <DIO_ErrStateReadPinValue+0xa6>
    191c:	55 95       	asr	r21
    191e:	47 95       	ror	r20
    1920:	8a 95       	dec	r24
    1922:	e2 f7       	brpl	.-8      	; 0x191c <DIO_ErrStateReadPinValue+0xa2>
    1924:	ca 01       	movw	r24, r20
    1926:	81 70       	andi	r24, 0x01	; 1
    1928:	eb 81       	ldd	r30, Y+3	; 0x03
    192a:	fc 81       	ldd	r31, Y+4	; 0x04
    192c:	80 83       	st	Z, r24
    192e:	2b c0       	rjmp	.+86     	; 0x1986 <DIO_ErrStateReadPinValue+0x10c>
						case 'C':*value= GET_BIT(PINC_ITI,pin); break;
    1930:	e3 e3       	ldi	r30, 0x33	; 51
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	88 2f       	mov	r24, r24
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	a9 01       	movw	r20, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <DIO_ErrStateReadPinValue+0xce>
    1944:	55 95       	asr	r21
    1946:	47 95       	ror	r20
    1948:	8a 95       	dec	r24
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <DIO_ErrStateReadPinValue+0xca>
    194c:	ca 01       	movw	r24, r20
    194e:	81 70       	andi	r24, 0x01	; 1
    1950:	eb 81       	ldd	r30, Y+3	; 0x03
    1952:	fc 81       	ldd	r31, Y+4	; 0x04
    1954:	80 83       	st	Z, r24
    1956:	17 c0       	rjmp	.+46     	; 0x1986 <DIO_ErrStateReadPinValue+0x10c>
						case 'D':*value= GET_BIT(PIND_ITI,pin); break;
    1958:	e0 e3       	ldi	r30, 0x30	; 48
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a9 01       	movw	r20, r18
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <DIO_ErrStateReadPinValue+0xf6>
    196c:	55 95       	asr	r21
    196e:	47 95       	ror	r20
    1970:	8a 95       	dec	r24
    1972:	e2 f7       	brpl	.-8      	; 0x196c <DIO_ErrStateReadPinValue+0xf2>
    1974:	ca 01       	movw	r24, r20
    1976:	81 70       	andi	r24, 0x01	; 1
    1978:	eb 81       	ldd	r30, Y+3	; 0x03
    197a:	fc 81       	ldd	r31, Y+4	; 0x04
    197c:	80 83       	st	Z, r24
    197e:	03 c0       	rjmp	.+6      	; 0x1986 <DIO_ErrStateReadPinValue+0x10c>
						default: return DIO_ERROR_PORT;
    1980:	51 e0       	ldi	r21, 0x01	; 1
    1982:	5d 83       	std	Y+5, r21	; 0x05
    1984:	04 c0       	rjmp	.+8      	; 0x198e <DIO_ErrStateReadPinValue+0x114>
						}

				}
			else
				return DIO_ERROR_PIN;
			return DIO_OK;
    1986:	1d 82       	std	Y+5, r1	; 0x05
    1988:	02 c0       	rjmp	.+4      	; 0x198e <DIO_ErrStateReadPinValue+0x114>
						default: return DIO_ERROR_PORT;
						}

				}
			else
				return DIO_ERROR_PIN;
    198a:	82 e0       	ldi	r24, 0x02	; 2
    198c:	8d 83       	std	Y+5, r24	; 0x05
    198e:	8d 81       	ldd	r24, Y+5	; 0x05
			return DIO_OK;
}
    1990:	27 96       	adiw	r28, 0x07	; 7
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <DIO_ErrStateSetGroupDirection>:

DIO_Err  DIO_ErrStateSetGroupDirection(PORT_Name port ,Direction direction)
{
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <DIO_ErrStateSetGroupDirection+0x6>
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <DIO_ErrStateSetGroupDirection+0x8>
    19aa:	0f 92       	push	r0
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	6a 83       	std	Y+2, r22	; 0x02
	if (direction <= 0xff && direction>=0x00)
	{
		switch(port)
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	3d 83       	std	Y+5, r19	; 0x05
    19bc:	2c 83       	std	Y+4, r18	; 0x04
    19be:	8c 81       	ldd	r24, Y+4	; 0x04
    19c0:	9d 81       	ldd	r25, Y+5	; 0x05
    19c2:	82 34       	cpi	r24, 0x42	; 66
    19c4:	91 05       	cpc	r25, r1
    19c6:	d9 f0       	breq	.+54     	; 0x19fe <DIO_ErrStateSetGroupDirection+0x5c>
    19c8:	2c 81       	ldd	r18, Y+4	; 0x04
    19ca:	3d 81       	ldd	r19, Y+5	; 0x05
    19cc:	23 34       	cpi	r18, 0x43	; 67
    19ce:	31 05       	cpc	r19, r1
    19d0:	34 f4       	brge	.+12     	; 0x19de <DIO_ErrStateSetGroupDirection+0x3c>
    19d2:	8c 81       	ldd	r24, Y+4	; 0x04
    19d4:	9d 81       	ldd	r25, Y+5	; 0x05
    19d6:	81 34       	cpi	r24, 0x41	; 65
    19d8:	91 05       	cpc	r25, r1
    19da:	61 f0       	breq	.+24     	; 0x19f4 <DIO_ErrStateSetGroupDirection+0x52>
    19dc:	1f c0       	rjmp	.+62     	; 0x1a1c <DIO_ErrStateSetGroupDirection+0x7a>
    19de:	2c 81       	ldd	r18, Y+4	; 0x04
    19e0:	3d 81       	ldd	r19, Y+5	; 0x05
    19e2:	23 34       	cpi	r18, 0x43	; 67
    19e4:	31 05       	cpc	r19, r1
    19e6:	81 f0       	breq	.+32     	; 0x1a08 <DIO_ErrStateSetGroupDirection+0x66>
    19e8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ea:	9d 81       	ldd	r25, Y+5	; 0x05
    19ec:	84 34       	cpi	r24, 0x44	; 68
    19ee:	91 05       	cpc	r25, r1
    19f0:	81 f0       	breq	.+32     	; 0x1a12 <DIO_ErrStateSetGroupDirection+0x70>
    19f2:	14 c0       	rjmp	.+40     	; 0x1a1c <DIO_ErrStateSetGroupDirection+0x7a>
		{
		case 'A': DDRA_ITI =   direction ;break ;
    19f4:	ea e3       	ldi	r30, 0x3A	; 58
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	80 83       	st	Z, r24
    19fc:	12 c0       	rjmp	.+36     	; 0x1a22 <DIO_ErrStateSetGroupDirection+0x80>
		case 'B': DDRB_ITI =   direction ;break ;
    19fe:	e7 e3       	ldi	r30, 0x37	; 55
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	80 83       	st	Z, r24
    1a06:	0d c0       	rjmp	.+26     	; 0x1a22 <DIO_ErrStateSetGroupDirection+0x80>
		case 'C': DDRC_ITI =   direction ;break ;
    1a08:	e4 e3       	ldi	r30, 0x34	; 52
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	80 83       	st	Z, r24
    1a10:	08 c0       	rjmp	.+16     	; 0x1a22 <DIO_ErrStateSetGroupDirection+0x80>
		case 'D': DDRD_ITI =   direction ;break ;
    1a12:	e1 e3       	ldi	r30, 0x31	; 49
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	80 83       	st	Z, r24
    1a1a:	03 c0       	rjmp	.+6      	; 0x1a22 <DIO_ErrStateSetGroupDirection+0x80>
		default :
			return DIO_ERROR_PORT ;
    1a1c:	91 e0       	ldi	r25, 0x01	; 1
    1a1e:	9b 83       	std	Y+3, r25	; 0x03
    1a20:	01 c0       	rjmp	.+2      	; 0x1a24 <DIO_ErrStateSetGroupDirection+0x82>
		}
		return DIO_OK ;
    1a22:	1b 82       	std	Y+3, r1	; 0x03
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	else
	{
		return DIO_ERROR_Direction;
	}
}
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <DIO_ErrStateSetPortValue>:
DIO_Err  DIO_ErrStateSetPortValue(PORT_Name port,Volt val)
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <DIO_ErrStateSetPortValue+0x6>
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <DIO_ErrStateSetPortValue+0x8>
    1a3e:	0f 92       	push	r0
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	6a 83       	std	Y+2, r22	; 0x02
	if (val <= 0xff && val>=0x00)
	{
		switch(port)
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	3d 83       	std	Y+5, r19	; 0x05
    1a50:	2c 83       	std	Y+4, r18	; 0x04
    1a52:	8c 81       	ldd	r24, Y+4	; 0x04
    1a54:	9d 81       	ldd	r25, Y+5	; 0x05
    1a56:	82 34       	cpi	r24, 0x42	; 66
    1a58:	91 05       	cpc	r25, r1
    1a5a:	d9 f0       	breq	.+54     	; 0x1a92 <DIO_ErrStateSetPortValue+0x5c>
    1a5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a60:	23 34       	cpi	r18, 0x43	; 67
    1a62:	31 05       	cpc	r19, r1
    1a64:	34 f4       	brge	.+12     	; 0x1a72 <DIO_ErrStateSetPortValue+0x3c>
    1a66:	8c 81       	ldd	r24, Y+4	; 0x04
    1a68:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6a:	81 34       	cpi	r24, 0x41	; 65
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	61 f0       	breq	.+24     	; 0x1a88 <DIO_ErrStateSetPortValue+0x52>
    1a70:	1f c0       	rjmp	.+62     	; 0x1ab0 <DIO_ErrStateSetPortValue+0x7a>
    1a72:	2c 81       	ldd	r18, Y+4	; 0x04
    1a74:	3d 81       	ldd	r19, Y+5	; 0x05
    1a76:	23 34       	cpi	r18, 0x43	; 67
    1a78:	31 05       	cpc	r19, r1
    1a7a:	81 f0       	breq	.+32     	; 0x1a9c <DIO_ErrStateSetPortValue+0x66>
    1a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a80:	84 34       	cpi	r24, 0x44	; 68
    1a82:	91 05       	cpc	r25, r1
    1a84:	81 f0       	breq	.+32     	; 0x1aa6 <DIO_ErrStateSetPortValue+0x70>
    1a86:	14 c0       	rjmp	.+40     	; 0x1ab0 <DIO_ErrStateSetPortValue+0x7a>
		{
		case 'A':  PORTA_ITI =  val ;break ;
    1a88:	eb e3       	ldi	r30, 0x3B	; 59
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	80 83       	st	Z, r24
    1a90:	12 c0       	rjmp	.+36     	; 0x1ab6 <DIO_ErrStateSetPortValue+0x80>
		case 'B':  PORTB_ITI =  val ;break ;
    1a92:	e8 e3       	ldi	r30, 0x38	; 56
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	80 83       	st	Z, r24
    1a9a:	0d c0       	rjmp	.+26     	; 0x1ab6 <DIO_ErrStateSetPortValue+0x80>
		case 'C':  PORTC_ITI =  val ;break ;
    1a9c:	e5 e3       	ldi	r30, 0x35	; 53
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	80 83       	st	Z, r24
    1aa4:	08 c0       	rjmp	.+16     	; 0x1ab6 <DIO_ErrStateSetPortValue+0x80>
		case 'D':  PORTD_ITI =  val ;break ;
    1aa6:	e2 e3       	ldi	r30, 0x32	; 50
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	80 83       	st	Z, r24
    1aae:	03 c0       	rjmp	.+6      	; 0x1ab6 <DIO_ErrStateSetPortValue+0x80>
		default :
			return DIO_ERROR_PORT ;
    1ab0:	91 e0       	ldi	r25, 0x01	; 1
    1ab2:	9b 83       	std	Y+3, r25	; 0x03
    1ab4:	01 c0       	rjmp	.+2      	; 0x1ab8 <DIO_ErrStateSetPortValue+0x82>
		}
		return DIO_OK ;
    1ab6:	1b 82       	std	Y+3, r1	; 0x03
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
	else
	{
		return DIO_ERROR_VALUE;
	}

}
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <DIO_ErrStateReadGroupValue>:
DIO_Err  DIO_ErrStateReadGroupValue(PORT_Name port ,u8 *value)
{
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <DIO_ErrStateReadGroupValue+0x6>
    1ad0:	00 d0       	rcall	.+0      	; 0x1ad2 <DIO_ErrStateReadGroupValue+0x8>
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <DIO_ErrStateReadGroupValue+0xa>
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	89 83       	std	Y+1, r24	; 0x01
    1ada:	7b 83       	std	Y+3, r23	; 0x03
    1adc:	6a 83       	std	Y+2, r22	; 0x02
	if(value!=Null)
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <DIO_ErrStateReadGroupValue+0x1e>
    1ae6:	41 c0       	rjmp	.+130    	; 0x1b6a <DIO_ErrStateReadGroupValue+0xa0>
	{
		switch(port)
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	3e 83       	std	Y+6, r19	; 0x06
    1af0:	2d 83       	std	Y+5, r18	; 0x05
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	9e 81       	ldd	r25, Y+6	; 0x06
    1af6:	82 34       	cpi	r24, 0x42	; 66
    1af8:	91 05       	cpc	r25, r1
    1afa:	e9 f0       	breq	.+58     	; 0x1b36 <DIO_ErrStateReadGroupValue+0x6c>
    1afc:	2d 81       	ldd	r18, Y+5	; 0x05
    1afe:	3e 81       	ldd	r19, Y+6	; 0x06
    1b00:	23 34       	cpi	r18, 0x43	; 67
    1b02:	31 05       	cpc	r19, r1
    1b04:	34 f4       	brge	.+12     	; 0x1b12 <DIO_ErrStateReadGroupValue+0x48>
    1b06:	8d 81       	ldd	r24, Y+5	; 0x05
    1b08:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0a:	81 34       	cpi	r24, 0x41	; 65
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	61 f0       	breq	.+24     	; 0x1b28 <DIO_ErrStateReadGroupValue+0x5e>
    1b10:	27 c0       	rjmp	.+78     	; 0x1b60 <DIO_ErrStateReadGroupValue+0x96>
    1b12:	2d 81       	ldd	r18, Y+5	; 0x05
    1b14:	3e 81       	ldd	r19, Y+6	; 0x06
    1b16:	23 34       	cpi	r18, 0x43	; 67
    1b18:	31 05       	cpc	r19, r1
    1b1a:	a1 f0       	breq	.+40     	; 0x1b44 <DIO_ErrStateReadGroupValue+0x7a>
    1b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b20:	84 34       	cpi	r24, 0x44	; 68
    1b22:	91 05       	cpc	r25, r1
    1b24:	b1 f0       	breq	.+44     	; 0x1b52 <DIO_ErrStateReadGroupValue+0x88>
    1b26:	1c c0       	rjmp	.+56     	; 0x1b60 <DIO_ErrStateReadGroupValue+0x96>
		{
		case 'A':  *value = PINA_ITI ; break ;
    1b28:	e9 e3       	ldi	r30, 0x39	; 57
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b30:	fb 81       	ldd	r31, Y+3	; 0x03
    1b32:	80 83       	st	Z, r24
    1b34:	18 c0       	rjmp	.+48     	; 0x1b66 <DIO_ErrStateReadGroupValue+0x9c>
		case 'B':  *value = PINB_ITI ; break ;
    1b36:	e6 e3       	ldi	r30, 0x36	; 54
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b3e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b40:	80 83       	st	Z, r24
    1b42:	11 c0       	rjmp	.+34     	; 0x1b66 <DIO_ErrStateReadGroupValue+0x9c>
		case 'C':  *value = PINC_ITI ; break ;
    1b44:	e3 e3       	ldi	r30, 0x33	; 51
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b4c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b4e:	80 83       	st	Z, r24
    1b50:	0a c0       	rjmp	.+20     	; 0x1b66 <DIO_ErrStateReadGroupValue+0x9c>
		case 'D':  *value = PIND_ITI ; break ;
    1b52:	e0 e3       	ldi	r30, 0x30	; 48
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	ea 81       	ldd	r30, Y+2	; 0x02
    1b5a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b5c:	80 83       	st	Z, r24
    1b5e:	03 c0       	rjmp	.+6      	; 0x1b66 <DIO_ErrStateReadGroupValue+0x9c>
		default :
			return DIO_ERROR_PORT ;
    1b60:	91 e0       	ldi	r25, 0x01	; 1
    1b62:	9c 83       	std	Y+4, r25	; 0x04
    1b64:	04 c0       	rjmp	.+8      	; 0x1b6e <DIO_ErrStateReadGroupValue+0xa4>
		}
		return DIO_OK ;
    1b66:	1c 82       	std	Y+4, r1	; 0x04
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <DIO_ErrStateReadGroupValue+0xa4>
	}
	else
	{
		return AddressError;
    1b6a:	25 e0       	ldi	r18, 0x05	; 5
    1b6c:	2c 83       	std	Y+4, r18	; 0x04
    1b6e:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    1b70:	26 96       	adiw	r28, 0x06	; 6
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <UART_VoidInit>:
 *      Author: Mazen
 */

#include "UART_Interface.h"

void UART_VoidInit(void){
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	0f 92       	push	r0
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
	/* Set Baud Rate */
	UBRRH_Reg=51;
    1b8c:	e0 e4       	ldi	r30, 0x40	; 64
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	83 e3       	ldi	r24, 0x33	; 51
    1b92:	80 83       	st	Z, r24
	u8 UCSRC_VAR;
	/* Selecting UCSRC Register */
	SET_BIT(UCSRC_VAR,URSEL);
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	80 68       	ori	r24, 0x80	; 128
    1b98:	89 83       	std	Y+1, r24	; 0x01
	/*  No Interrupt on Receive */
	CLEAR_BIT(UCSRB_Reg,RXCIE);
    1b9a:	aa e2       	ldi	r26, 0x2A	; 42
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	ea e2       	ldi	r30, 0x2A	; 42
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	8f 77       	andi	r24, 0x7F	; 127
    1ba6:	8c 93       	st	X, r24
	/*  No Interrupt on Transmit */
	CLEAR_BIT(UCSRB_Reg,TXCIE);
    1ba8:	aa e2       	ldi	r26, 0x2A	; 42
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	ea e2       	ldi	r30, 0x2A	; 42
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	8f 7b       	andi	r24, 0xBF	; 191
    1bb4:	8c 93       	st	X, r24
	/* Enable Asynchronous */
	CLEAR_BIT(UCSRC_VAR,UMSEL);
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	8f 7b       	andi	r24, 0xBF	; 191
    1bba:	89 83       	std	Y+1, r24	; 0x01
	/* Parity Mode */
	CLEAR_BIT(UCSRC_VAR,UPM0);
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	8f 7e       	andi	r24, 0xEF	; 239
    1bc0:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(UCSRC_VAR,UPM1);
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	8f 7d       	andi	r24, 0xDF	; 223
    1bc6:	89 83       	std	Y+1, r24	; 0x01
	/* 1 Stop Bit */
	CLEAR_BIT(UCSRC_VAR,USBS);
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	87 7f       	andi	r24, 0xF7	; 247
    1bcc:	89 83       	std	Y+1, r24	; 0x01
	/* Data Bits */
	SET_BIT(UCSRC_VAR,UCSZ0);
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	82 60       	ori	r24, 0x02	; 2
    1bd2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_VAR,UCSZ1);
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	84 60       	ori	r24, 0x04	; 4
    1bd8:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(UCSRC_VAR,UCSZ2);
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	8b 7f       	andi	r24, 0xFB	; 251
    1bde:	89 83       	std	Y+1, r24	; 0x01
	/* Set the Value in Register */
	UCSRC_Reg=UCSRC_VAR;
    1be0:	e0 e4       	ldi	r30, 0x40	; 64
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	80 83       	st	Z, r24
	/* Enable Transmit */
	SET_BIT(UCSRB_Reg,TXEN);
    1be8:	aa e2       	ldi	r26, 0x2A	; 42
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	ea e2       	ldi	r30, 0x2A	; 42
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	88 60       	ori	r24, 0x08	; 8
    1bf4:	8c 93       	st	X, r24
	/* Enable Receive */
	SET_BIT(UCSRB_Reg,RXEN);
    1bf6:	aa e2       	ldi	r26, 0x2A	; 42
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	ea e2       	ldi	r30, 0x2A	; 42
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	80 61       	ori	r24, 0x10	; 16
    1c02:	8c 93       	st	X, r24
}
    1c04:	0f 90       	pop	r0
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <UART_VoidSend>:
void UART_VoidSend(u16 Data){
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <UART_VoidSend+0x6>
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	9a 83       	std	Y+2, r25	; 0x02
    1c18:	89 83       	std	Y+1, r24	; 0x01
	/* Wait until transmit finish */
	while( !(UCSRA_Reg&(1<<UDRE)));
    1c1a:	eb e2       	ldi	r30, 0x2B	; 43
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	88 2f       	mov	r24, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	80 72       	andi	r24, 0x20	; 32
    1c26:	90 70       	andi	r25, 0x00	; 0
    1c28:	00 97       	sbiw	r24, 0x00	; 0
    1c2a:	b9 f3       	breq	.-18     	; 0x1c1a <UART_VoidSend+0xe>
	UDR_Reg=Data;
    1c2c:	ec e2       	ldi	r30, 0x2C	; 44
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	80 83       	st	Z, r24

}
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <ADC_ErrStateInit>:

#include "ADC_Interface.h"
static u16 * ADC_pu8Readibg = Null;
static void (*ADC_pvCallBackNotifFunc)(void)=Null;
static u8 ADC_State=ADC_IDLE;
ADC_ErrState ADC_ErrStateInit(void){
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62

	//AVCC With External Cap
	CLEAR_BIT(ADMUX_Reg,REFS0);
    1c46:	a7 e2       	ldi	r26, 0x27	; 39
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e7 e2       	ldi	r30, 0x27	; 39
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	8f 7b       	andi	r24, 0xBF	; 191
    1c52:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX_Reg,REFS1);
    1c54:	a7 e2       	ldi	r26, 0x27	; 39
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e7 e2       	ldi	r30, 0x27	; 39
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	8f 77       	andi	r24, 0x7F	; 127
    1c60:	8c 93       	st	X, r24

	//Left Adjust
	SET_BIT(ADMUX_Reg,ADLAR);
    1c62:	a7 e2       	ldi	r26, 0x27	; 39
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e7 e2       	ldi	r30, 0x27	; 39
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	80 62       	ori	r24, 0x20	; 32
    1c6e:	8c 93       	st	X, r24

	ADCSRA_Reg&=ADC_PRESC_MASK;
    1c70:	a6 e2       	ldi	r26, 0x26	; 38
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e6 e2       	ldi	r30, 0x26	; 38
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	88 7f       	andi	r24, 0xF8	; 248
    1c7c:	8c 93       	st	X, r24
	//Setting Prescale in Config file
	ADCSRA_Reg|=PRESC;
    1c7e:	a6 e2       	ldi	r26, 0x26	; 38
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e6 e2       	ldi	r30, 0x26	; 38
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	82 60       	ori	r24, 0x02	; 2
    1c8a:	8c 93       	st	X, r24
	//Enable
	SET_BIT(ADCSRA_Reg,ADEN);
    1c8c:	a6 e2       	ldi	r26, 0x26	; 38
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e6 e2       	ldi	r30, 0x26	; 38
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	80 68       	ori	r24, 0x80	; 128
    1c98:	8c 93       	st	X, r24
	return ADC_Init_Ok;
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
}
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <ADC_ErrStateConversionSynch>:
ADC_ErrState ADC_ErrStateConversionSynch(u8 PIN,u16 *Val){
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	28 97       	sbiw	r28, 0x08	; 8
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
    1cb6:	8e 83       	std	Y+6, r24	; 0x06
    1cb8:	78 87       	std	Y+8, r23	; 0x08
    1cba:	6f 83       	std	Y+7, r22	; 0x07
	u8 Adc_ErrReturn;
	if(ADC_State==ADC_IDLE){
    1cbc:	80 91 68 01 	lds	r24, 0x0168
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	09 f0       	breq	.+2      	; 0x1cc6 <ADC_ErrStateConversionSynch+0x24>
    1cc4:	5d c0       	rjmp	.+186    	; 0x1d80 <ADC_ErrStateConversionSynch+0xde>
		ADC_State=ADC_BUSY;
    1cc6:	10 92 68 01 	sts	0x0168, r1
		u32 ADC_Local_Counter;
		ADMUX_Reg&=0b11100000;
    1cca:	a7 e2       	ldi	r26, 0x27	; 39
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e7 e2       	ldi	r30, 0x27	; 39
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	80 7e       	andi	r24, 0xE0	; 224
    1cd6:	8c 93       	st	X, r24
		ADMUX_Reg|=PIN;
    1cd8:	a7 e2       	ldi	r26, 0x27	; 39
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e7 e2       	ldi	r30, 0x27	; 39
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	90 81       	ld	r25, Z
    1ce2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce4:	89 2b       	or	r24, r25
    1ce6:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_Reg,ADSC);
    1ce8:	a6 e2       	ldi	r26, 0x26	; 38
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e6 e2       	ldi	r30, 0x26	; 38
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	80 64       	ori	r24, 0x40	; 64
    1cf4:	8c 93       	st	X, r24
    1cf6:	0b c0       	rjmp	.+22     	; 0x1d0e <ADC_ErrStateConversionSynch+0x6c>
		while(((GET_BIT(ADCSRA_Reg,ADIF))==0)&&(ADC_Local_Counter!=ADC_u32Timeout)){
			ADC_Local_Counter++;
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfc:	ab 81       	ldd	r26, Y+3	; 0x03
    1cfe:	bc 81       	ldd	r27, Y+4	; 0x04
    1d00:	01 96       	adiw	r24, 0x01	; 1
    1d02:	a1 1d       	adc	r26, r1
    1d04:	b1 1d       	adc	r27, r1
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	9a 83       	std	Y+2, r25	; 0x02
    1d0a:	ab 83       	std	Y+3, r26	; 0x03
    1d0c:	bc 83       	std	Y+4, r27	; 0x04
		ADC_State=ADC_BUSY;
		u32 ADC_Local_Counter;
		ADMUX_Reg&=0b11100000;
		ADMUX_Reg|=PIN;
		SET_BIT(ADCSRA_Reg,ADSC);
		while(((GET_BIT(ADCSRA_Reg,ADIF))==0)&&(ADC_Local_Counter!=ADC_u32Timeout)){
    1d0e:	e6 e2       	ldi	r30, 0x26	; 38
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	82 95       	swap	r24
    1d16:	8f 70       	andi	r24, 0x0F	; 15
    1d18:	88 2f       	mov	r24, r24
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	81 70       	andi	r24, 0x01	; 1
    1d1e:	90 70       	andi	r25, 0x00	; 0
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	61 f4       	brne	.+24     	; 0x1d3c <ADC_ErrStateConversionSynch+0x9a>
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	9a 81       	ldd	r25, Y+2	; 0x02
    1d28:	ab 81       	ldd	r26, Y+3	; 0x03
    1d2a:	bc 81       	ldd	r27, Y+4	; 0x04
    1d2c:	88 38       	cpi	r24, 0x88	; 136
    1d2e:	23 e1       	ldi	r18, 0x13	; 19
    1d30:	92 07       	cpc	r25, r18
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	a2 07       	cpc	r26, r18
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	b2 07       	cpc	r27, r18
    1d3a:	f1 f6       	brne	.-68     	; 0x1cf8 <ADC_ErrStateConversionSynch+0x56>
			ADC_Local_Counter++;
		}
		if(ADC_Local_Counter==ADC_u32Timeout){
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d40:	ab 81       	ldd	r26, Y+3	; 0x03
    1d42:	bc 81       	ldd	r27, Y+4	; 0x04
    1d44:	88 38       	cpi	r24, 0x88	; 136
    1d46:	23 e1       	ldi	r18, 0x13	; 19
    1d48:	92 07       	cpc	r25, r18
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	a2 07       	cpc	r26, r18
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	b2 07       	cpc	r27, r18
    1d52:	19 f4       	brne	.+6      	; 0x1d5a <ADC_ErrStateConversionSynch+0xb8>
			Adc_ErrReturn= ADC_SynchError;
    1d54:	85 e0       	ldi	r24, 0x05	; 5
    1d56:	8d 83       	std	Y+5, r24	; 0x05
    1d58:	15 c0       	rjmp	.+42     	; 0x1d84 <ADC_ErrStateConversionSynch+0xe2>
		}
		else
		{

			SET_BIT(ADCSRA_Reg,ADIF);
    1d5a:	a6 e2       	ldi	r26, 0x26	; 38
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e6 e2       	ldi	r30, 0x26	; 38
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	80 61       	ori	r24, 0x10	; 16
    1d66:	8c 93       	st	X, r24
			*Val=ADCH_Reg;
    1d68:	e5 e2       	ldi	r30, 0x25	; 37
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	88 2f       	mov	r24, r24
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	ef 81       	ldd	r30, Y+7	; 0x07
    1d74:	f8 85       	ldd	r31, Y+8	; 0x08
    1d76:	91 83       	std	Z+1, r25	; 0x01
    1d78:	80 83       	st	Z, r24
			Adc_ErrReturn=ADC_Synch_Ok;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	8d 83       	std	Y+5, r24	; 0x05
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <ADC_ErrStateConversionSynch+0xe2>
		}
	}
	else{
		Adc_ErrReturn=ADC_Synch_Busy;
    1d80:	83 e0       	ldi	r24, 0x03	; 3
    1d82:	8d 83       	std	Y+5, r24	; 0x05
	}
	ADC_State=ADC_IDLE;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	80 93 68 01 	sts	0x0168, r24
	return Adc_ErrReturn;
    1d8a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d8c:	28 96       	adiw	r28, 0x08	; 8
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	f8 94       	cli
    1d92:	de bf       	out	0x3e, r29	; 62
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	08 95       	ret

00001d9e <ADC_ErrStateConversionASynch>:
ADC_ErrState ADC_ErrStateConversionASynch(u8 PIN,u16 *Val,void (*ADC_pvNotifFunc)(void)){
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	00 d0       	rcall	.+0      	; 0x1da4 <ADC_ErrStateConversionASynch+0x6>
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <ADC_ErrStateConversionASynch+0x8>
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <ADC_ErrStateConversionASynch+0xa>
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	8a 83       	std	Y+2, r24	; 0x02
    1dae:	7c 83       	std	Y+4, r23	; 0x04
    1db0:	6b 83       	std	Y+3, r22	; 0x03
    1db2:	5e 83       	std	Y+6, r21	; 0x06
    1db4:	4d 83       	std	Y+5, r20	; 0x05
	u8 Adc_ErrReturn;
	if(ADC_State==ADC_IDLE){
    1db6:	80 91 68 01 	lds	r24, 0x0168
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	c9 f5       	brne	.+114    	; 0x1e30 <ADC_ErrStateConversionASynch+0x92>

		if(Val==Null || ADC_pvNotifFunc==Null){
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	21 f0       	breq	.+8      	; 0x1dce <ADC_ErrStateConversionASynch+0x30>
    1dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	19 f4       	brne	.+6      	; 0x1dd4 <ADC_ErrStateConversionASynch+0x36>
			Adc_ErrReturn=ADC_ASynchError;
    1dce:	86 e0       	ldi	r24, 0x06	; 6
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	30 c0       	rjmp	.+96     	; 0x1e34 <ADC_ErrStateConversionASynch+0x96>
		}
		else
		{
			ADC_State=ADC_BUSY;
    1dd4:	10 92 68 01 	sts	0x0168, r1
			ADC_pu8Readibg=Val;
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	90 93 99 01 	sts	0x0199, r25
    1de0:	80 93 98 01 	sts	0x0198, r24
			ADC_pvCallBackNotifFunc=ADC_pvNotifFunc;
    1de4:	8d 81       	ldd	r24, Y+5	; 0x05
    1de6:	9e 81       	ldd	r25, Y+6	; 0x06
    1de8:	90 93 9b 01 	sts	0x019B, r25
    1dec:	80 93 9a 01 	sts	0x019A, r24
			/* Clear MUX Register */
			ADMUX_Reg&=0b11100000;
    1df0:	a7 e2       	ldi	r26, 0x27	; 39
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e7 e2       	ldi	r30, 0x27	; 39
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	80 7e       	andi	r24, 0xE0	; 224
    1dfc:	8c 93       	st	X, r24
			/* Set the required channel into MUX bits */
			ADMUX_Reg|=PIN;
    1dfe:	a7 e2       	ldi	r26, 0x27	; 39
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e7 e2       	ldi	r30, 0x27	; 39
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	90 81       	ld	r25, Z
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	89 2b       	or	r24, r25
    1e0c:	8c 93       	st	X, r24
			/* Start Conversion */
			SET_BIT(ADCSRA_Reg,ADSC);
    1e0e:	a6 e2       	ldi	r26, 0x26	; 38
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e6 e2       	ldi	r30, 0x26	; 38
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	80 64       	ori	r24, 0x40	; 64
    1e1a:	8c 93       	st	X, r24
			/* Enable ADC Interrupt */
			SET_BIT(ADCSRA_Reg,ADIE);
    1e1c:	a6 e2       	ldi	r26, 0x26	; 38
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e6 e2       	ldi	r30, 0x26	; 38
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	88 60       	ori	r24, 0x08	; 8
    1e28:	8c 93       	st	X, r24
			Adc_ErrReturn=ADC_ASynch_Ok;
    1e2a:	82 e0       	ldi	r24, 0x02	; 2
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <ADC_ErrStateConversionASynch+0x96>
		}
	}
	else{
		Adc_ErrReturn=ADC_ASynch_Busy;
    1e30:	84 e0       	ldi	r24, 0x04	; 4
    1e32:	89 83       	std	Y+1, r24	; 0x01
	}
	return Adc_ErrReturn;
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e36:	26 96       	adiw	r28, 0x06	; 6
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <__vector_16>:
void __vector_16(void) __attribute__((signal));
void __vector_16(void){
    1e48:	1f 92       	push	r1
    1e4a:	0f 92       	push	r0
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	0f 92       	push	r0
    1e50:	11 24       	eor	r1, r1
    1e52:	2f 93       	push	r18
    1e54:	3f 93       	push	r19
    1e56:	4f 93       	push	r20
    1e58:	5f 93       	push	r21
    1e5a:	6f 93       	push	r22
    1e5c:	7f 93       	push	r23
    1e5e:	8f 93       	push	r24
    1e60:	9f 93       	push	r25
    1e62:	af 93       	push	r26
    1e64:	bf 93       	push	r27
    1e66:	ef 93       	push	r30
    1e68:	ff 93       	push	r31
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
	/* Read adc result */
	*ADC_pu8Readibg= ADCH_Reg;
    1e72:	a0 91 98 01 	lds	r26, 0x0198
    1e76:	b0 91 99 01 	lds	r27, 0x0199
    1e7a:	e5 e2       	ldi	r30, 0x25	; 37
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	88 2f       	mov	r24, r24
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	8d 93       	st	X+, r24
    1e86:	9c 93       	st	X, r25
	/* Invoke Callback NotiFun */
	ADC_pvCallBackNotifFunc();
    1e88:	e0 91 9a 01 	lds	r30, 0x019A
    1e8c:	f0 91 9b 01 	lds	r31, 0x019B
    1e90:	09 95       	icall
	/* Disable ADC Conversion */
	CLEAR_BIT(ADCSRA_Reg,ADIE);
    1e92:	a6 e2       	ldi	r26, 0x26	; 38
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e6 e2       	ldi	r30, 0x26	; 38
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	87 7f       	andi	r24, 0xF7	; 247
    1e9e:	8c 93       	st	X, r24
	ADC_State=ADC_IDLE;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	80 93 68 01 	sts	0x0168, r24
}
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	ff 91       	pop	r31
    1eac:	ef 91       	pop	r30
    1eae:	bf 91       	pop	r27
    1eb0:	af 91       	pop	r26
    1eb2:	9f 91       	pop	r25
    1eb4:	8f 91       	pop	r24
    1eb6:	7f 91       	pop	r23
    1eb8:	6f 91       	pop	r22
    1eba:	5f 91       	pop	r21
    1ebc:	4f 91       	pop	r20
    1ebe:	3f 91       	pop	r19
    1ec0:	2f 91       	pop	r18
    1ec2:	0f 90       	pop	r0
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	0f 90       	pop	r0
    1ec8:	1f 90       	pop	r1
    1eca:	18 95       	reti

00001ecc <EnableGlobalInterrupt>:
 *
 *  Created on: Apr 4, 2023
 *      Author: Mazen
 */
#include "Global_Interrupt_Enable.h"
void EnableGlobalInterrupt(void){
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
	ENABLEINT0_SREG;
    1ed4:	af e5       	ldi	r26, 0x5F	; 95
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	ef e5       	ldi	r30, 0x5F	; 95
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	80 68       	ori	r24, 0x80	; 128
    1ee0:	8c 93       	st	X, r24
}
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <SW_SwitchErrStateGetState>:
 *  Created on: Mar 24, 2023
 *      Author: hisha
 */

#include "Switch_Interface.h"
SwitchErrState  SW_SwitchErrStateGetState(Switch_Info * Switch ,u8 * Result){
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	28 97       	sbiw	r28, 0x08	; 8
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	9c 83       	std	Y+4, r25	; 0x04
    1efe:	8b 83       	std	Y+3, r24	; 0x03
    1f00:	7e 83       	std	Y+6, r23	; 0x06
    1f02:	6d 83       	std	Y+5, r22	; 0x05
	u8 Switch_ErrDirectionReturn;
	u8 Switch_ErrValueReturn;
	if(Switch->ConnectionType==InternalPullUp){
    1f04:	eb 81       	ldd	r30, Y+3	; 0x03
    1f06:	fc 81       	ldd	r31, Y+4	; 0x04
    1f08:	82 81       	ldd	r24, Z+2	; 0x02
    1f0a:	88 23       	and	r24, r24
    1f0c:	c9 f5       	brne	.+114    	; 0x1f80 <SW_SwitchErrStateGetState+0x98>
		Switch_ErrDirectionReturn=DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_IN);
    1f0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f10:	fc 81       	ldd	r31, Y+4	; 0x04
    1f12:	80 81       	ld	r24, Z
    1f14:	eb 81       	ldd	r30, Y+3	; 0x03
    1f16:	fc 81       	ldd	r31, Y+4	; 0x04
    1f18:	91 81       	ldd	r25, Z+1	; 0x01
    1f1a:	69 2f       	mov	r22, r25
    1f1c:	40 e0       	ldi	r20, 0x00	; 0
    1f1e:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
    1f22:	8a 83       	std	Y+2, r24	; 0x02
		if(Switch_ErrDirectionReturn==DIO_ERROR_PORT||Switch_ErrDirectionReturn==DIO_ERROR_Direction||Switch_ErrDirectionReturn==DIO_ERROR_PIN){
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	81 30       	cpi	r24, 0x01	; 1
    1f28:	31 f0       	breq	.+12     	; 0x1f36 <SW_SwitchErrStateGetState+0x4e>
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	83 30       	cpi	r24, 0x03	; 3
    1f2e:	19 f0       	breq	.+6      	; 0x1f36 <SW_SwitchErrStateGetState+0x4e>
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	82 30       	cpi	r24, 0x02	; 2
    1f34:	11 f4       	brne	.+4      	; 0x1f3a <SW_SwitchErrStateGetState+0x52>
			return Switch_Init_Error;
    1f36:	1f 82       	std	Y+7, r1	; 0x07
    1f38:	76 c0       	rjmp	.+236    	; 0x2026 <SW_SwitchErrStateGetState+0x13e>
		}
		else{
			DIO_ErrStateSetPinValue(Switch->SW_Group,Switch->SW_Pin,DIO_HIGH);
    1f3a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f3c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f3e:	80 81       	ld	r24, Z
    1f40:	eb 81       	ldd	r30, Y+3	; 0x03
    1f42:	fc 81       	ldd	r31, Y+4	; 0x04
    1f44:	91 81       	ldd	r25, Z+1	; 0x01
    1f46:	69 2f       	mov	r22, r25
    1f48:	41 e0       	ldi	r20, 0x01	; 1
    1f4a:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
			Switch_ErrValueReturn=DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,Result);
    1f4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f50:	fc 81       	ldd	r31, Y+4	; 0x04
    1f52:	80 81       	ld	r24, Z
    1f54:	eb 81       	ldd	r30, Y+3	; 0x03
    1f56:	fc 81       	ldd	r31, Y+4	; 0x04
    1f58:	91 81       	ldd	r25, Z+1	; 0x01
    1f5a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f5c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f5e:	69 2f       	mov	r22, r25
    1f60:	a9 01       	movw	r20, r18
    1f62:	0e 94 3d 0c 	call	0x187a	; 0x187a <DIO_ErrStateReadPinValue>
    1f66:	89 83       	std	Y+1, r24	; 0x01
			if(Switch_ErrValueReturn==DIO_ERROR_PIN||Switch_ErrValueReturn==DIO_ERROR_PORT){
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	82 30       	cpi	r24, 0x02	; 2
    1f6c:	19 f0       	breq	.+6      	; 0x1f74 <SW_SwitchErrStateGetState+0x8c>
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	19 f4       	brne	.+6      	; 0x1f7a <SW_SwitchErrStateGetState+0x92>
				return Switch_Value_Error;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	8f 83       	std	Y+7, r24	; 0x07
    1f78:	56 c0       	rjmp	.+172    	; 0x2026 <SW_SwitchErrStateGetState+0x13e>
			}
			else
				return Switch_Ok;
    1f7a:	82 e0       	ldi	r24, 0x02	; 2
    1f7c:	8f 83       	std	Y+7, r24	; 0x07
    1f7e:	53 c0       	rjmp	.+166    	; 0x2026 <SW_SwitchErrStateGetState+0x13e>
		}
	}
	else if(Switch->ConnectionType==ExternalPullUp){
    1f80:	eb 81       	ldd	r30, Y+3	; 0x03
    1f82:	fc 81       	ldd	r31, Y+4	; 0x04
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	21 f5       	brne	.+72     	; 0x1fd2 <SW_SwitchErrStateGetState+0xea>
		Switch_ErrDirectionReturn=DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_IN);
    1f8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f8e:	80 81       	ld	r24, Z
    1f90:	eb 81       	ldd	r30, Y+3	; 0x03
    1f92:	fc 81       	ldd	r31, Y+4	; 0x04
    1f94:	91 81       	ldd	r25, Z+1	; 0x01
    1f96:	69 2f       	mov	r22, r25
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
    1f9e:	8a 83       	std	Y+2, r24	; 0x02
		Switch_ErrValueReturn=DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,Result);
    1fa0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fa2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fa4:	80 81       	ld	r24, Z
    1fa6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fa8:	fc 81       	ldd	r31, Y+4	; 0x04
    1faa:	91 81       	ldd	r25, Z+1	; 0x01
    1fac:	2d 81       	ldd	r18, Y+5	; 0x05
    1fae:	3e 81       	ldd	r19, Y+6	; 0x06
    1fb0:	69 2f       	mov	r22, r25
    1fb2:	a9 01       	movw	r20, r18
    1fb4:	0e 94 3d 0c 	call	0x187a	; 0x187a <DIO_ErrStateReadPinValue>
    1fb8:	89 83       	std	Y+1, r24	; 0x01
		if(Switch_ErrValueReturn==DIO_ERROR_PIN||Switch_ErrValueReturn==DIO_ERROR_PORT){
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	82 30       	cpi	r24, 0x02	; 2
    1fbe:	19 f0       	breq	.+6      	; 0x1fc6 <SW_SwitchErrStateGetState+0xde>
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	81 30       	cpi	r24, 0x01	; 1
    1fc4:	19 f4       	brne	.+6      	; 0x1fcc <SW_SwitchErrStateGetState+0xe4>
			return Switch_Value_Error;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	8f 83       	std	Y+7, r24	; 0x07
    1fca:	2d c0       	rjmp	.+90     	; 0x2026 <SW_SwitchErrStateGetState+0x13e>
		}
		else
			return Switch_Ok;
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	8f 83       	std	Y+7, r24	; 0x07
    1fd0:	2a c0       	rjmp	.+84     	; 0x2026 <SW_SwitchErrStateGetState+0x13e>
	}

	else if(Switch->ConnectionType==ExternalPullDown){
    1fd2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd6:	82 81       	ldd	r24, Z+2	; 0x02
    1fd8:	82 30       	cpi	r24, 0x02	; 2
    1fda:	21 f5       	brne	.+72     	; 0x2024 <SW_SwitchErrStateGetState+0x13c>
		Switch_ErrDirectionReturn=DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_IN);
    1fdc:	eb 81       	ldd	r30, Y+3	; 0x03
    1fde:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe0:	80 81       	ld	r24, Z
    1fe2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe6:	91 81       	ldd	r25, Z+1	; 0x01
    1fe8:	69 2f       	mov	r22, r25
    1fea:	40 e0       	ldi	r20, 0x00	; 0
    1fec:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
    1ff0:	8a 83       	std	Y+2, r24	; 0x02
		Switch_ErrValueReturn=DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,Result);
    1ff2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ff4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ff6:	80 81       	ld	r24, Z
    1ff8:	eb 81       	ldd	r30, Y+3	; 0x03
    1ffa:	fc 81       	ldd	r31, Y+4	; 0x04
    1ffc:	91 81       	ldd	r25, Z+1	; 0x01
    1ffe:	2d 81       	ldd	r18, Y+5	; 0x05
    2000:	3e 81       	ldd	r19, Y+6	; 0x06
    2002:	69 2f       	mov	r22, r25
    2004:	a9 01       	movw	r20, r18
    2006:	0e 94 3d 0c 	call	0x187a	; 0x187a <DIO_ErrStateReadPinValue>
    200a:	89 83       	std	Y+1, r24	; 0x01
		if(Switch_ErrValueReturn==DIO_ERROR_PIN||Switch_ErrValueReturn==DIO_ERROR_PORT){
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	82 30       	cpi	r24, 0x02	; 2
    2010:	19 f0       	breq	.+6      	; 0x2018 <SW_SwitchErrStateGetState+0x130>
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	81 30       	cpi	r24, 0x01	; 1
    2016:	19 f4       	brne	.+6      	; 0x201e <SW_SwitchErrStateGetState+0x136>
			return Switch_Value_Error;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	8f 83       	std	Y+7, r24	; 0x07
    201c:	04 c0       	rjmp	.+8      	; 0x2026 <SW_SwitchErrStateGetState+0x13e>
		}
		else
			return Switch_Ok;
    201e:	82 e0       	ldi	r24, 0x02	; 2
    2020:	8f 83       	std	Y+7, r24	; 0x07
    2022:	01 c0       	rjmp	.+2      	; 0x2026 <SW_SwitchErrStateGetState+0x13e>
    2024:	02 c0       	rjmp	.+4      	; 0x202a <SW_SwitchErrStateGetState+0x142>
	}

}
    2026:	8f 81       	ldd	r24, Y+7	; 0x07
    2028:	88 87       	std	Y+8, r24	; 0x08
    202a:	88 85       	ldd	r24, Y+8	; 0x08
    202c:	28 96       	adiw	r28, 0x08	; 8
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <SevSeg_SevErrStateSetNumber>:
		SevSegCC_6 ,
		SevSegCC_7 ,
		SevSegCC_8 ,
		SevSegCC_9
};
SevErrState SevSeg_SevErrStateSetNumber(u8 INPUT_NUMBER , SevSeg_info * SevenSegment1){
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	00 d0       	rcall	.+0      	; 0x2044 <SevSeg_SevErrStateSetNumber+0x6>
    2044:	00 d0       	rcall	.+0      	; 0x2046 <SevSeg_SevErrStateSetNumber+0x8>
    2046:	00 d0       	rcall	.+0      	; 0x2048 <SevSeg_SevErrStateSetNumber+0xa>
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	8b 83       	std	Y+3, r24	; 0x03
    204e:	7d 83       	std	Y+5, r23	; 0x05
    2050:	6c 83       	std	Y+4, r22	; 0x04
	u8 ErrStateDirection,ErrStateValue; // anode 1 // cathode 0 Enable
	ErrStateDirection=DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,DIO_OUT);
    2052:	ec 81       	ldd	r30, Y+4	; 0x04
    2054:	fd 81       	ldd	r31, Y+5	; 0x05
    2056:	81 81       	ldd	r24, Z+1	; 0x01
    2058:	61 e0       	ldi	r22, 0x01	; 1
    205a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_ErrStateSetGroupDirection>
    205e:	8a 83       	std	Y+2, r24	; 0x02
	if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction)
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	81 30       	cpi	r24, 0x01	; 1
    2064:	19 f0       	breq	.+6      	; 0x206c <SevSeg_SevErrStateSetNumber+0x2e>
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	83 30       	cpi	r24, 0x03	; 3
    206a:	19 f4       	brne	.+6      	; 0x2072 <SevSeg_SevErrStateSetNumber+0x34>
	{
		return Group_ERROR;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	8e 83       	std	Y+6, r24	; 0x06
    2070:	8c c0       	rjmp	.+280    	; 0x218a <SevSeg_SevErrStateSetNumber+0x14c>
	}
	else{
		if(SevenSegment1->SevSeg_Type==CA){
    2072:	ec 81       	ldd	r30, Y+4	; 0x04
    2074:	fd 81       	ldd	r31, Y+5	; 0x05
    2076:	80 81       	ld	r24, Z
    2078:	88 23       	and	r24, r24
    207a:	09 f0       	breq	.+2      	; 0x207e <SevSeg_SevErrStateSetNumber+0x40>
    207c:	3f c0       	rjmp	.+126    	; 0x20fc <SevSeg_SevErrStateSetNumber+0xbe>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    207e:	ec 81       	ldd	r30, Y+4	; 0x04
    2080:	fd 81       	ldd	r31, Y+5	; 0x05
    2082:	82 81       	ldd	r24, Z+2	; 0x02
    2084:	ec 81       	ldd	r30, Y+4	; 0x04
    2086:	fd 81       	ldd	r31, Y+5	; 0x05
    2088:	93 81       	ldd	r25, Z+3	; 0x03
    208a:	69 2f       	mov	r22, r25
    208c:	41 e0       	ldi	r20, 0x01	; 1
    208e:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
    2092:	8a 83       	std	Y+2, r24	; 0x02
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	81 30       	cpi	r24, 0x01	; 1
    2098:	31 f0       	breq	.+12     	; 0x20a6 <SevSeg_SevErrStateSetNumber+0x68>
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	83 30       	cpi	r24, 0x03	; 3
    209e:	19 f0       	breq	.+6      	; 0x20a6 <SevSeg_SevErrStateSetNumber+0x68>
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	82 30       	cpi	r24, 0x02	; 2
    20a4:	19 f4       	brne	.+6      	; 0x20ac <SevSeg_SevErrStateSetNumber+0x6e>
				return Group_ERROR;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	8e 83       	std	Y+6, r24	; 0x06
    20aa:	6f c0       	rjmp	.+222    	; 0x218a <SevSeg_SevErrStateSetNumber+0x14c>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
    20ac:	ec 81       	ldd	r30, Y+4	; 0x04
    20ae:	fd 81       	ldd	r31, Y+5	; 0x05
    20b0:	82 81       	ldd	r24, Z+2	; 0x02
    20b2:	ec 81       	ldd	r30, Y+4	; 0x04
    20b4:	fd 81       	ldd	r31, Y+5	; 0x05
    20b6:	93 81       	ldd	r25, Z+3	; 0x03
    20b8:	69 2f       	mov	r22, r25
    20ba:	41 e0       	ldi	r20, 0x01	; 1
    20bc:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
    20c0:	89 83       	std	Y+1, r24	; 0x01
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	81 30       	cpi	r24, 0x01	; 1
    20c6:	31 f0       	breq	.+12     	; 0x20d4 <SevSeg_SevErrStateSetNumber+0x96>
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	84 30       	cpi	r24, 0x04	; 4
    20cc:	19 f0       	breq	.+6      	; 0x20d4 <SevSeg_SevErrStateSetNumber+0x96>
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	82 30       	cpi	r24, 0x02	; 2
    20d2:	11 f4       	brne	.+4      	; 0x20d8 <SevSeg_SevErrStateSetNumber+0x9a>
					return Number_Error;
    20d4:	1e 82       	std	Y+6, r1	; 0x06
    20d6:	59 c0       	rjmp	.+178    	; 0x218a <SevSeg_SevErrStateSetNumber+0x14c>
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[INPUT_NUMBER]);
    20d8:	ec 81       	ldd	r30, Y+4	; 0x04
    20da:	fd 81       	ldd	r31, Y+5	; 0x05
    20dc:	21 81       	ldd	r18, Z+1	; 0x01
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	88 2f       	mov	r24, r24
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	fc 01       	movw	r30, r24
    20e6:	e7 59       	subi	r30, 0x97	; 151
    20e8:	fe 4f       	sbci	r31, 0xFE	; 254
    20ea:	90 81       	ld	r25, Z
    20ec:	82 2f       	mov	r24, r18
    20ee:	69 2f       	mov	r22, r25
    20f0:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <DIO_ErrStateSetPortValue>
    20f4:	89 83       	std	Y+1, r24	; 0x01
					if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((INPUT_NUMBER <0 )&&(INPUT_NUMBER>9))){
						return Number_Error;
					}
					else
						return Seven_OK;
    20f6:	82 e0       	ldi	r24, 0x02	; 2
    20f8:	8e 83       	std	Y+6, r24	; 0x06
    20fa:	47 c0       	rjmp	.+142    	; 0x218a <SevSeg_SevErrStateSetNumber+0x14c>
				}
			}
		}
		else if(SevenSegment1->SevSeg_Type==CC){
    20fc:	ec 81       	ldd	r30, Y+4	; 0x04
    20fe:	fd 81       	ldd	r31, Y+5	; 0x05
    2100:	80 81       	ld	r24, Z
    2102:	81 30       	cpi	r24, 0x01	; 1
    2104:	09 f0       	breq	.+2      	; 0x2108 <SevSeg_SevErrStateSetNumber+0xca>
    2106:	3f c0       	rjmp	.+126    	; 0x2186 <SevSeg_SevErrStateSetNumber+0x148>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    2108:	ec 81       	ldd	r30, Y+4	; 0x04
    210a:	fd 81       	ldd	r31, Y+5	; 0x05
    210c:	82 81       	ldd	r24, Z+2	; 0x02
    210e:	ec 81       	ldd	r30, Y+4	; 0x04
    2110:	fd 81       	ldd	r31, Y+5	; 0x05
    2112:	93 81       	ldd	r25, Z+3	; 0x03
    2114:	69 2f       	mov	r22, r25
    2116:	41 e0       	ldi	r20, 0x01	; 1
    2118:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
    211c:	8a 83       	std	Y+2, r24	; 0x02
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	81 30       	cpi	r24, 0x01	; 1
    2122:	31 f0       	breq	.+12     	; 0x2130 <SevSeg_SevErrStateSetNumber+0xf2>
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	83 30       	cpi	r24, 0x03	; 3
    2128:	19 f0       	breq	.+6      	; 0x2130 <SevSeg_SevErrStateSetNumber+0xf2>
    212a:	8a 81       	ldd	r24, Y+2	; 0x02
    212c:	82 30       	cpi	r24, 0x02	; 2
    212e:	19 f4       	brne	.+6      	; 0x2136 <SevSeg_SevErrStateSetNumber+0xf8>
				return Group_ERROR;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	8e 83       	std	Y+6, r24	; 0x06
    2134:	2a c0       	rjmp	.+84     	; 0x218a <SevSeg_SevErrStateSetNumber+0x14c>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
    2136:	ec 81       	ldd	r30, Y+4	; 0x04
    2138:	fd 81       	ldd	r31, Y+5	; 0x05
    213a:	82 81       	ldd	r24, Z+2	; 0x02
    213c:	ec 81       	ldd	r30, Y+4	; 0x04
    213e:	fd 81       	ldd	r31, Y+5	; 0x05
    2140:	93 81       	ldd	r25, Z+3	; 0x03
    2142:	69 2f       	mov	r22, r25
    2144:	40 e0       	ldi	r20, 0x00	; 0
    2146:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
    214a:	89 83       	std	Y+1, r24	; 0x01
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	81 30       	cpi	r24, 0x01	; 1
    2150:	31 f0       	breq	.+12     	; 0x215e <SevSeg_SevErrStateSetNumber+0x120>
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	84 30       	cpi	r24, 0x04	; 4
    2156:	19 f0       	breq	.+6      	; 0x215e <SevSeg_SevErrStateSetNumber+0x120>
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	82 30       	cpi	r24, 0x02	; 2
    215c:	11 f4       	brne	.+4      	; 0x2162 <SevSeg_SevErrStateSetNumber+0x124>
					return Number_Error;
    215e:	1e 82       	std	Y+6, r1	; 0x06
    2160:	14 c0       	rjmp	.+40     	; 0x218a <SevSeg_SevErrStateSetNumber+0x14c>
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[INPUT_NUMBER]);
    2162:	ec 81       	ldd	r30, Y+4	; 0x04
    2164:	fd 81       	ldd	r31, Y+5	; 0x05
    2166:	21 81       	ldd	r18, Z+1	; 0x01
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	88 2f       	mov	r24, r24
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	fc 01       	movw	r30, r24
    2170:	ed 58       	subi	r30, 0x8D	; 141
    2172:	fe 4f       	sbci	r31, 0xFE	; 254
    2174:	90 81       	ld	r25, Z
    2176:	82 2f       	mov	r24, r18
    2178:	69 2f       	mov	r22, r25
    217a:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <DIO_ErrStateSetPortValue>
    217e:	89 83       	std	Y+1, r24	; 0x01
					if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((INPUT_NUMBER <0) &&(INPUT_NUMBER>9))){
						return Number_Error;
					}
					else
						return Seven_OK;
    2180:	82 e0       	ldi	r24, 0x02	; 2
    2182:	8e 83       	std	Y+6, r24	; 0x06
    2184:	02 c0       	rjmp	.+4      	; 0x218a <SevSeg_SevErrStateSetNumber+0x14c>
				}
			}
		}
	}
	return Seven_OK;
    2186:	82 e0       	ldi	r24, 0x02	; 2
    2188:	8e 83       	std	Y+6, r24	; 0x06
    218a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    218c:	26 96       	adiw	r28, 0x06	; 6
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <SevSeg_SevErrStateDisplayRange>:

SevErrState    SevSeg_SevErrStateDisplayRange(SevSeg_info * SevenSegment1 , u8 Copy_start , u8 Copy_End ){
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	ef 97       	sbiw	r28, 0x3f	; 63
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	9c af       	std	Y+60, r25	; 0x3c
    21b4:	8b af       	std	Y+59, r24	; 0x3b
    21b6:	6d af       	std	Y+61, r22	; 0x3d
    21b8:	4e af       	std	Y+62, r20	; 0x3e
	u8 ErrStateDirection,ErrStateValue;
	DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,DIO_OUT);
    21ba:	eb ad       	ldd	r30, Y+59	; 0x3b
    21bc:	fc ad       	ldd	r31, Y+60	; 0x3c
    21be:	81 81       	ldd	r24, Z+1	; 0x01
    21c0:	61 e0       	ldi	r22, 0x01	; 1
    21c2:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_ErrStateSetGroupDirection>
	if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction)
    21c6:	8a ad       	ldd	r24, Y+58	; 0x3a
    21c8:	81 30       	cpi	r24, 0x01	; 1
    21ca:	19 f0       	breq	.+6      	; 0x21d2 <SevSeg_SevErrStateDisplayRange+0x34>
    21cc:	8a ad       	ldd	r24, Y+58	; 0x3a
    21ce:	83 30       	cpi	r24, 0x03	; 3
    21d0:	19 f4       	brne	.+6      	; 0x21d8 <SevSeg_SevErrStateDisplayRange+0x3a>
	{
		return Group_ERROR;
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	8f af       	std	Y+63, r24	; 0x3f
    21d6:	57 c2       	rjmp	.+1198   	; 0x2686 <SevSeg_SevErrStateDisplayRange+0x4e8>
	}
	else{
		if(SevenSegment1->SevSeg_Type==CA){
    21d8:	eb ad       	ldd	r30, Y+59	; 0x3b
    21da:	fc ad       	ldd	r31, Y+60	; 0x3c
    21dc:	80 81       	ld	r24, Z
    21de:	88 23       	and	r24, r24
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <SevSeg_SevErrStateDisplayRange+0x46>
    21e2:	25 c1       	rjmp	.+586    	; 0x242e <SevSeg_SevErrStateDisplayRange+0x290>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    21e4:	eb ad       	ldd	r30, Y+59	; 0x3b
    21e6:	fc ad       	ldd	r31, Y+60	; 0x3c
    21e8:	82 81       	ldd	r24, Z+2	; 0x02
    21ea:	eb ad       	ldd	r30, Y+59	; 0x3b
    21ec:	fc ad       	ldd	r31, Y+60	; 0x3c
    21ee:	93 81       	ldd	r25, Z+3	; 0x03
    21f0:	69 2f       	mov	r22, r25
    21f2:	41 e0       	ldi	r20, 0x01	; 1
    21f4:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
    21f8:	8a af       	std	Y+58, r24	; 0x3a
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    21fa:	8a ad       	ldd	r24, Y+58	; 0x3a
    21fc:	81 30       	cpi	r24, 0x01	; 1
    21fe:	31 f0       	breq	.+12     	; 0x220c <SevSeg_SevErrStateDisplayRange+0x6e>
    2200:	8a ad       	ldd	r24, Y+58	; 0x3a
    2202:	83 30       	cpi	r24, 0x03	; 3
    2204:	19 f0       	breq	.+6      	; 0x220c <SevSeg_SevErrStateDisplayRange+0x6e>
    2206:	8a ad       	ldd	r24, Y+58	; 0x3a
    2208:	82 30       	cpi	r24, 0x02	; 2
    220a:	19 f4       	brne	.+6      	; 0x2212 <SevSeg_SevErrStateDisplayRange+0x74>
				return Group_ERROR;
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	8f af       	std	Y+63, r24	; 0x3f
    2210:	3a c2       	rjmp	.+1140   	; 0x2686 <SevSeg_SevErrStateDisplayRange+0x4e8>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
    2212:	eb ad       	ldd	r30, Y+59	; 0x3b
    2214:	fc ad       	ldd	r31, Y+60	; 0x3c
    2216:	82 81       	ldd	r24, Z+2	; 0x02
    2218:	eb ad       	ldd	r30, Y+59	; 0x3b
    221a:	fc ad       	ldd	r31, Y+60	; 0x3c
    221c:	93 81       	ldd	r25, Z+3	; 0x03
    221e:	69 2f       	mov	r22, r25
    2220:	41 e0       	ldi	r20, 0x01	; 1
    2222:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
    2226:	89 af       	std	Y+57, r24	; 0x39
				if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((Copy_start <0) &&(Copy_End>9))){
					return Number_Error;
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[Copy_start]);
    2228:	eb ad       	ldd	r30, Y+59	; 0x3b
    222a:	fc ad       	ldd	r31, Y+60	; 0x3c
    222c:	21 81       	ldd	r18, Z+1	; 0x01
    222e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2230:	88 2f       	mov	r24, r24
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	fc 01       	movw	r30, r24
    2236:	e7 59       	subi	r30, 0x97	; 151
    2238:	fe 4f       	sbci	r31, 0xFE	; 254
    223a:	90 81       	ld	r25, Z
    223c:	82 2f       	mov	r24, r18
    223e:	69 2f       	mov	r22, r25
    2240:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <DIO_ErrStateSetPortValue>
    2244:	89 af       	std	Y+57, r24	; 0x39
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	aa ef       	ldi	r26, 0xFA	; 250
    224c:	b3 e4       	ldi	r27, 0x43	; 67
    224e:	8d ab       	std	Y+53, r24	; 0x35
    2250:	9e ab       	std	Y+54, r25	; 0x36
    2252:	af ab       	std	Y+55, r26	; 0x37
    2254:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2256:	6d a9       	ldd	r22, Y+53	; 0x35
    2258:	7e a9       	ldd	r23, Y+54	; 0x36
    225a:	8f a9       	ldd	r24, Y+55	; 0x37
    225c:	98 ad       	ldd	r25, Y+56	; 0x38
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	4a ef       	ldi	r20, 0xFA	; 250
    2264:	54 e4       	ldi	r21, 0x44	; 68
    2266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	89 ab       	std	Y+49, r24	; 0x31
    2270:	9a ab       	std	Y+50, r25	; 0x32
    2272:	ab ab       	std	Y+51, r26	; 0x33
    2274:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2276:	69 a9       	ldd	r22, Y+49	; 0x31
    2278:	7a a9       	ldd	r23, Y+50	; 0x32
    227a:	8b a9       	ldd	r24, Y+51	; 0x33
    227c:	9c a9       	ldd	r25, Y+52	; 0x34
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	40 e8       	ldi	r20, 0x80	; 128
    2284:	5f e3       	ldi	r21, 0x3F	; 63
    2286:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    228a:	88 23       	and	r24, r24
    228c:	2c f4       	brge	.+10     	; 0x2298 <SevSeg_SevErrStateDisplayRange+0xfa>
		__ticks = 1;
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	98 ab       	std	Y+48, r25	; 0x30
    2294:	8f a7       	std	Y+47, r24	; 0x2f
    2296:	3f c0       	rjmp	.+126    	; 0x2316 <SevSeg_SevErrStateDisplayRange+0x178>
	else if (__tmp > 65535)
    2298:	69 a9       	ldd	r22, Y+49	; 0x31
    229a:	7a a9       	ldd	r23, Y+50	; 0x32
    229c:	8b a9       	ldd	r24, Y+51	; 0x33
    229e:	9c a9       	ldd	r25, Y+52	; 0x34
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	3f ef       	ldi	r19, 0xFF	; 255
    22a4:	4f e7       	ldi	r20, 0x7F	; 127
    22a6:	57 e4       	ldi	r21, 0x47	; 71
    22a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ac:	18 16       	cp	r1, r24
    22ae:	4c f5       	brge	.+82     	; 0x2302 <SevSeg_SevErrStateDisplayRange+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b0:	6d a9       	ldd	r22, Y+53	; 0x35
    22b2:	7e a9       	ldd	r23, Y+54	; 0x36
    22b4:	8f a9       	ldd	r24, Y+55	; 0x37
    22b6:	98 ad       	ldd	r25, Y+56	; 0x38
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e2       	ldi	r20, 0x20	; 32
    22be:	51 e4       	ldi	r21, 0x41	; 65
    22c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	bc 01       	movw	r22, r24
    22ca:	cd 01       	movw	r24, r26
    22cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	98 ab       	std	Y+48, r25	; 0x30
    22d6:	8f a7       	std	Y+47, r24	; 0x2f
    22d8:	0f c0       	rjmp	.+30     	; 0x22f8 <SevSeg_SevErrStateDisplayRange+0x15a>
    22da:	88 ec       	ldi	r24, 0xC8	; 200
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	9e a7       	std	Y+46, r25	; 0x2e
    22e0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    22e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	f1 f7       	brne	.-4      	; 0x22e6 <SevSeg_SevErrStateDisplayRange+0x148>
    22ea:	9e a7       	std	Y+46, r25	; 0x2e
    22ec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    22f0:	98 a9       	ldd	r25, Y+48	; 0x30
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	98 ab       	std	Y+48, r25	; 0x30
    22f6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22fa:	98 a9       	ldd	r25, Y+48	; 0x30
    22fc:	00 97       	sbiw	r24, 0x00	; 0
    22fe:	69 f7       	brne	.-38     	; 0x22da <SevSeg_SevErrStateDisplayRange+0x13c>
    2300:	14 c0       	rjmp	.+40     	; 0x232a <SevSeg_SevErrStateDisplayRange+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2302:	69 a9       	ldd	r22, Y+49	; 0x31
    2304:	7a a9       	ldd	r23, Y+50	; 0x32
    2306:	8b a9       	ldd	r24, Y+51	; 0x33
    2308:	9c a9       	ldd	r25, Y+52	; 0x34
    230a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	98 ab       	std	Y+48, r25	; 0x30
    2314:	8f a7       	std	Y+47, r24	; 0x2f
    2316:	8f a5       	ldd	r24, Y+47	; 0x2f
    2318:	98 a9       	ldd	r25, Y+48	; 0x30
    231a:	9c a7       	std	Y+44, r25	; 0x2c
    231c:	8b a7       	std	Y+43, r24	; 0x2b
    231e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2320:	9c a5       	ldd	r25, Y+44	; 0x2c
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <SevSeg_SevErrStateDisplayRange+0x184>
    2326:	9c a7       	std	Y+44, r25	; 0x2c
    2328:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(500);
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[Copy_End]);
    232a:	eb ad       	ldd	r30, Y+59	; 0x3b
    232c:	fc ad       	ldd	r31, Y+60	; 0x3c
    232e:	21 81       	ldd	r18, Z+1	; 0x01
    2330:	8e ad       	ldd	r24, Y+62	; 0x3e
    2332:	88 2f       	mov	r24, r24
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	fc 01       	movw	r30, r24
    2338:	e7 59       	subi	r30, 0x97	; 151
    233a:	fe 4f       	sbci	r31, 0xFE	; 254
    233c:	90 81       	ld	r25, Z
    233e:	82 2f       	mov	r24, r18
    2340:	69 2f       	mov	r22, r25
    2342:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <DIO_ErrStateSetPortValue>
    2346:	89 af       	std	Y+57, r24	; 0x39
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	aa ef       	ldi	r26, 0xFA	; 250
    234e:	b3 e4       	ldi	r27, 0x43	; 67
    2350:	8f a3       	std	Y+39, r24	; 0x27
    2352:	98 a7       	std	Y+40, r25	; 0x28
    2354:	a9 a7       	std	Y+41, r26	; 0x29
    2356:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2358:	6f a1       	ldd	r22, Y+39	; 0x27
    235a:	78 a5       	ldd	r23, Y+40	; 0x28
    235c:	89 a5       	ldd	r24, Y+41	; 0x29
    235e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	4a ef       	ldi	r20, 0xFA	; 250
    2366:	54 e4       	ldi	r21, 0x44	; 68
    2368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	8b a3       	std	Y+35, r24	; 0x23
    2372:	9c a3       	std	Y+36, r25	; 0x24
    2374:	ad a3       	std	Y+37, r26	; 0x25
    2376:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2378:	6b a1       	ldd	r22, Y+35	; 0x23
    237a:	7c a1       	ldd	r23, Y+36	; 0x24
    237c:	8d a1       	ldd	r24, Y+37	; 0x25
    237e:	9e a1       	ldd	r25, Y+38	; 0x26
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e8       	ldi	r20, 0x80	; 128
    2386:	5f e3       	ldi	r21, 0x3F	; 63
    2388:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    238c:	88 23       	and	r24, r24
    238e:	2c f4       	brge	.+10     	; 0x239a <SevSeg_SevErrStateDisplayRange+0x1fc>
		__ticks = 1;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9a a3       	std	Y+34, r25	; 0x22
    2396:	89 a3       	std	Y+33, r24	; 0x21
    2398:	3f c0       	rjmp	.+126    	; 0x2418 <SevSeg_SevErrStateDisplayRange+0x27a>
	else if (__tmp > 65535)
    239a:	6b a1       	ldd	r22, Y+35	; 0x23
    239c:	7c a1       	ldd	r23, Y+36	; 0x24
    239e:	8d a1       	ldd	r24, Y+37	; 0x25
    23a0:	9e a1       	ldd	r25, Y+38	; 0x26
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	3f ef       	ldi	r19, 0xFF	; 255
    23a6:	4f e7       	ldi	r20, 0x7F	; 127
    23a8:	57 e4       	ldi	r21, 0x47	; 71
    23aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ae:	18 16       	cp	r1, r24
    23b0:	4c f5       	brge	.+82     	; 0x2404 <SevSeg_SevErrStateDisplayRange+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b2:	6f a1       	ldd	r22, Y+39	; 0x27
    23b4:	78 a5       	ldd	r23, Y+40	; 0x28
    23b6:	89 a5       	ldd	r24, Y+41	; 0x29
    23b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e2       	ldi	r20, 0x20	; 32
    23c0:	51 e4       	ldi	r21, 0x41	; 65
    23c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9a a3       	std	Y+34, r25	; 0x22
    23d8:	89 a3       	std	Y+33, r24	; 0x21
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <SevSeg_SevErrStateDisplayRange+0x25c>
    23dc:	88 ec       	ldi	r24, 0xC8	; 200
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	98 a3       	std	Y+32, r25	; 0x20
    23e2:	8f 8f       	std	Y+31, r24	; 0x1f
    23e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23e6:	98 a1       	ldd	r25, Y+32	; 0x20
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <SevSeg_SevErrStateDisplayRange+0x24a>
    23ec:	98 a3       	std	Y+32, r25	; 0x20
    23ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f0:	89 a1       	ldd	r24, Y+33	; 0x21
    23f2:	9a a1       	ldd	r25, Y+34	; 0x22
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	9a a3       	std	Y+34, r25	; 0x22
    23f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fa:	89 a1       	ldd	r24, Y+33	; 0x21
    23fc:	9a a1       	ldd	r25, Y+34	; 0x22
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	69 f7       	brne	.-38     	; 0x23dc <SevSeg_SevErrStateDisplayRange+0x23e>
    2402:	3f c1       	rjmp	.+638    	; 0x2682 <SevSeg_SevErrStateDisplayRange+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2404:	6b a1       	ldd	r22, Y+35	; 0x23
    2406:	7c a1       	ldd	r23, Y+36	; 0x24
    2408:	8d a1       	ldd	r24, Y+37	; 0x25
    240a:	9e a1       	ldd	r25, Y+38	; 0x26
    240c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	9a a3       	std	Y+34, r25	; 0x22
    2416:	89 a3       	std	Y+33, r24	; 0x21
    2418:	89 a1       	ldd	r24, Y+33	; 0x21
    241a:	9a a1       	ldd	r25, Y+34	; 0x22
    241c:	9e 8f       	std	Y+30, r25	; 0x1e
    241e:	8d 8f       	std	Y+29, r24	; 0x1d
    2420:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2422:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <SevSeg_SevErrStateDisplayRange+0x286>
    2428:	9e 8f       	std	Y+30, r25	; 0x1e
    242a:	8d 8f       	std	Y+29, r24	; 0x1d
    242c:	2a c1       	rjmp	.+596    	; 0x2682 <SevSeg_SevErrStateDisplayRange+0x4e4>
					_delay_ms(500);
				}
			}
		}
		else if(SevenSegment1->SevSeg_Type==CC){
    242e:	eb ad       	ldd	r30, Y+59	; 0x3b
    2430:	fc ad       	ldd	r31, Y+60	; 0x3c
    2432:	80 81       	ld	r24, Z
    2434:	81 30       	cpi	r24, 0x01	; 1
    2436:	09 f0       	breq	.+2      	; 0x243a <SevSeg_SevErrStateDisplayRange+0x29c>
    2438:	24 c1       	rjmp	.+584    	; 0x2682 <SevSeg_SevErrStateDisplayRange+0x4e4>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    243a:	eb ad       	ldd	r30, Y+59	; 0x3b
    243c:	fc ad       	ldd	r31, Y+60	; 0x3c
    243e:	82 81       	ldd	r24, Z+2	; 0x02
    2440:	eb ad       	ldd	r30, Y+59	; 0x3b
    2442:	fc ad       	ldd	r31, Y+60	; 0x3c
    2444:	93 81       	ldd	r25, Z+3	; 0x03
    2446:	69 2f       	mov	r22, r25
    2448:	41 e0       	ldi	r20, 0x01	; 1
    244a:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
    244e:	8a af       	std	Y+58, r24	; 0x3a
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    2450:	8a ad       	ldd	r24, Y+58	; 0x3a
    2452:	81 30       	cpi	r24, 0x01	; 1
    2454:	31 f0       	breq	.+12     	; 0x2462 <SevSeg_SevErrStateDisplayRange+0x2c4>
    2456:	8a ad       	ldd	r24, Y+58	; 0x3a
    2458:	83 30       	cpi	r24, 0x03	; 3
    245a:	19 f0       	breq	.+6      	; 0x2462 <SevSeg_SevErrStateDisplayRange+0x2c4>
    245c:	8a ad       	ldd	r24, Y+58	; 0x3a
    245e:	82 30       	cpi	r24, 0x02	; 2
    2460:	19 f4       	brne	.+6      	; 0x2468 <SevSeg_SevErrStateDisplayRange+0x2ca>
				return Group_ERROR;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	8f af       	std	Y+63, r24	; 0x3f
    2466:	0f c1       	rjmp	.+542    	; 0x2686 <SevSeg_SevErrStateDisplayRange+0x4e8>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
    2468:	eb ad       	ldd	r30, Y+59	; 0x3b
    246a:	fc ad       	ldd	r31, Y+60	; 0x3c
    246c:	82 81       	ldd	r24, Z+2	; 0x02
    246e:	eb ad       	ldd	r30, Y+59	; 0x3b
    2470:	fc ad       	ldd	r31, Y+60	; 0x3c
    2472:	93 81       	ldd	r25, Z+3	; 0x03
    2474:	69 2f       	mov	r22, r25
    2476:	40 e0       	ldi	r20, 0x00	; 0
    2478:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
    247c:	89 af       	std	Y+57, r24	; 0x39
				if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((Copy_start <0) &&(Copy_End>9))){
					return Number_Error;
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[Copy_start]);
    247e:	eb ad       	ldd	r30, Y+59	; 0x3b
    2480:	fc ad       	ldd	r31, Y+60	; 0x3c
    2482:	21 81       	ldd	r18, Z+1	; 0x01
    2484:	8d ad       	ldd	r24, Y+61	; 0x3d
    2486:	88 2f       	mov	r24, r24
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	fc 01       	movw	r30, r24
    248c:	ed 58       	subi	r30, 0x8D	; 141
    248e:	fe 4f       	sbci	r31, 0xFE	; 254
    2490:	90 81       	ld	r25, Z
    2492:	82 2f       	mov	r24, r18
    2494:	69 2f       	mov	r22, r25
    2496:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <DIO_ErrStateSetPortValue>
    249a:	89 af       	std	Y+57, r24	; 0x39
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	aa ef       	ldi	r26, 0xFA	; 250
    24a2:	b3 e4       	ldi	r27, 0x43	; 67
    24a4:	89 8f       	std	Y+25, r24	; 0x19
    24a6:	9a 8f       	std	Y+26, r25	; 0x1a
    24a8:	ab 8f       	std	Y+27, r26	; 0x1b
    24aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ac:	69 8d       	ldd	r22, Y+25	; 0x19
    24ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	4a ef       	ldi	r20, 0xFA	; 250
    24ba:	54 e4       	ldi	r21, 0x44	; 68
    24bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	8d 8b       	std	Y+21, r24	; 0x15
    24c6:	9e 8b       	std	Y+22, r25	; 0x16
    24c8:	af 8b       	std	Y+23, r26	; 0x17
    24ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24cc:	6d 89       	ldd	r22, Y+21	; 0x15
    24ce:	7e 89       	ldd	r23, Y+22	; 0x16
    24d0:	8f 89       	ldd	r24, Y+23	; 0x17
    24d2:	98 8d       	ldd	r25, Y+24	; 0x18
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e8       	ldi	r20, 0x80	; 128
    24da:	5f e3       	ldi	r21, 0x3F	; 63
    24dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24e0:	88 23       	and	r24, r24
    24e2:	2c f4       	brge	.+10     	; 0x24ee <SevSeg_SevErrStateDisplayRange+0x350>
		__ticks = 1;
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	9c 8b       	std	Y+20, r25	; 0x14
    24ea:	8b 8b       	std	Y+19, r24	; 0x13
    24ec:	3f c0       	rjmp	.+126    	; 0x256c <SevSeg_SevErrStateDisplayRange+0x3ce>
	else if (__tmp > 65535)
    24ee:	6d 89       	ldd	r22, Y+21	; 0x15
    24f0:	7e 89       	ldd	r23, Y+22	; 0x16
    24f2:	8f 89       	ldd	r24, Y+23	; 0x17
    24f4:	98 8d       	ldd	r25, Y+24	; 0x18
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	3f ef       	ldi	r19, 0xFF	; 255
    24fa:	4f e7       	ldi	r20, 0x7F	; 127
    24fc:	57 e4       	ldi	r21, 0x47	; 71
    24fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2502:	18 16       	cp	r1, r24
    2504:	4c f5       	brge	.+82     	; 0x2558 <SevSeg_SevErrStateDisplayRange+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2506:	69 8d       	ldd	r22, Y+25	; 0x19
    2508:	7a 8d       	ldd	r23, Y+26	; 0x1a
    250a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    250c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e2       	ldi	r20, 0x20	; 32
    2514:	51 e4       	ldi	r21, 0x41	; 65
    2516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	bc 01       	movw	r22, r24
    2520:	cd 01       	movw	r24, r26
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	9c 8b       	std	Y+20, r25	; 0x14
    252c:	8b 8b       	std	Y+19, r24	; 0x13
    252e:	0f c0       	rjmp	.+30     	; 0x254e <SevSeg_SevErrStateDisplayRange+0x3b0>
    2530:	88 ec       	ldi	r24, 0xC8	; 200
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	9a 8b       	std	Y+18, r25	; 0x12
    2536:	89 8b       	std	Y+17, r24	; 0x11
    2538:	89 89       	ldd	r24, Y+17	; 0x11
    253a:	9a 89       	ldd	r25, Y+18	; 0x12
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <SevSeg_SevErrStateDisplayRange+0x39e>
    2540:	9a 8b       	std	Y+18, r25	; 0x12
    2542:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2544:	8b 89       	ldd	r24, Y+19	; 0x13
    2546:	9c 89       	ldd	r25, Y+20	; 0x14
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	9c 8b       	std	Y+20, r25	; 0x14
    254c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254e:	8b 89       	ldd	r24, Y+19	; 0x13
    2550:	9c 89       	ldd	r25, Y+20	; 0x14
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	69 f7       	brne	.-38     	; 0x2530 <SevSeg_SevErrStateDisplayRange+0x392>
    2556:	14 c0       	rjmp	.+40     	; 0x2580 <SevSeg_SevErrStateDisplayRange+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2558:	6d 89       	ldd	r22, Y+21	; 0x15
    255a:	7e 89       	ldd	r23, Y+22	; 0x16
    255c:	8f 89       	ldd	r24, Y+23	; 0x17
    255e:	98 8d       	ldd	r25, Y+24	; 0x18
    2560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9c 8b       	std	Y+20, r25	; 0x14
    256a:	8b 8b       	std	Y+19, r24	; 0x13
    256c:	8b 89       	ldd	r24, Y+19	; 0x13
    256e:	9c 89       	ldd	r25, Y+20	; 0x14
    2570:	98 8b       	std	Y+16, r25	; 0x10
    2572:	8f 87       	std	Y+15, r24	; 0x0f
    2574:	8f 85       	ldd	r24, Y+15	; 0x0f
    2576:	98 89       	ldd	r25, Y+16	; 0x10
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	f1 f7       	brne	.-4      	; 0x2578 <SevSeg_SevErrStateDisplayRange+0x3da>
    257c:	98 8b       	std	Y+16, r25	; 0x10
    257e:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[Copy_End]);
    2580:	eb ad       	ldd	r30, Y+59	; 0x3b
    2582:	fc ad       	ldd	r31, Y+60	; 0x3c
    2584:	21 81       	ldd	r18, Z+1	; 0x01
    2586:	8e ad       	ldd	r24, Y+62	; 0x3e
    2588:	88 2f       	mov	r24, r24
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	fc 01       	movw	r30, r24
    258e:	ed 58       	subi	r30, 0x8D	; 141
    2590:	fe 4f       	sbci	r31, 0xFE	; 254
    2592:	90 81       	ld	r25, Z
    2594:	82 2f       	mov	r24, r18
    2596:	69 2f       	mov	r22, r25
    2598:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <DIO_ErrStateSetPortValue>
    259c:	89 af       	std	Y+57, r24	; 0x39
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	aa ef       	ldi	r26, 0xFA	; 250
    25a4:	b3 e4       	ldi	r27, 0x43	; 67
    25a6:	8b 87       	std	Y+11, r24	; 0x0b
    25a8:	9c 87       	std	Y+12, r25	; 0x0c
    25aa:	ad 87       	std	Y+13, r26	; 0x0d
    25ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	4a ef       	ldi	r20, 0xFA	; 250
    25bc:	54 e4       	ldi	r21, 0x44	; 68
    25be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	8f 83       	std	Y+7, r24	; 0x07
    25c8:	98 87       	std	Y+8, r25	; 0x08
    25ca:	a9 87       	std	Y+9, r26	; 0x09
    25cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ce:	6f 81       	ldd	r22, Y+7	; 0x07
    25d0:	78 85       	ldd	r23, Y+8	; 0x08
    25d2:	89 85       	ldd	r24, Y+9	; 0x09
    25d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e8       	ldi	r20, 0x80	; 128
    25dc:	5f e3       	ldi	r21, 0x3F	; 63
    25de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25e2:	88 23       	and	r24, r24
    25e4:	2c f4       	brge	.+10     	; 0x25f0 <SevSeg_SevErrStateDisplayRange+0x452>
		__ticks = 1;
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	9e 83       	std	Y+6, r25	; 0x06
    25ec:	8d 83       	std	Y+5, r24	; 0x05
    25ee:	3f c0       	rjmp	.+126    	; 0x266e <SevSeg_SevErrStateDisplayRange+0x4d0>
	else if (__tmp > 65535)
    25f0:	6f 81       	ldd	r22, Y+7	; 0x07
    25f2:	78 85       	ldd	r23, Y+8	; 0x08
    25f4:	89 85       	ldd	r24, Y+9	; 0x09
    25f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	3f ef       	ldi	r19, 0xFF	; 255
    25fc:	4f e7       	ldi	r20, 0x7F	; 127
    25fe:	57 e4       	ldi	r21, 0x47	; 71
    2600:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2604:	18 16       	cp	r1, r24
    2606:	4c f5       	brge	.+82     	; 0x265a <SevSeg_SevErrStateDisplayRange+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2608:	6b 85       	ldd	r22, Y+11	; 0x0b
    260a:	7c 85       	ldd	r23, Y+12	; 0x0c
    260c:	8d 85       	ldd	r24, Y+13	; 0x0d
    260e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e2       	ldi	r20, 0x20	; 32
    2616:	51 e4       	ldi	r21, 0x41	; 65
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	bc 01       	movw	r22, r24
    2622:	cd 01       	movw	r24, r26
    2624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	9e 83       	std	Y+6, r25	; 0x06
    262e:	8d 83       	std	Y+5, r24	; 0x05
    2630:	0f c0       	rjmp	.+30     	; 0x2650 <SevSeg_SevErrStateDisplayRange+0x4b2>
    2632:	88 ec       	ldi	r24, 0xC8	; 200
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	9c 83       	std	Y+4, r25	; 0x04
    2638:	8b 83       	std	Y+3, r24	; 0x03
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	9c 81       	ldd	r25, Y+4	; 0x04
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <SevSeg_SevErrStateDisplayRange+0x4a0>
    2642:	9c 83       	std	Y+4, r25	; 0x04
    2644:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2646:	8d 81       	ldd	r24, Y+5	; 0x05
    2648:	9e 81       	ldd	r25, Y+6	; 0x06
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	9e 83       	std	Y+6, r25	; 0x06
    264e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2650:	8d 81       	ldd	r24, Y+5	; 0x05
    2652:	9e 81       	ldd	r25, Y+6	; 0x06
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	69 f7       	brne	.-38     	; 0x2632 <SevSeg_SevErrStateDisplayRange+0x494>
    2658:	14 c0       	rjmp	.+40     	; 0x2682 <SevSeg_SevErrStateDisplayRange+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265a:	6f 81       	ldd	r22, Y+7	; 0x07
    265c:	78 85       	ldd	r23, Y+8	; 0x08
    265e:	89 85       	ldd	r24, Y+9	; 0x09
    2660:	9a 85       	ldd	r25, Y+10	; 0x0a
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	9e 83       	std	Y+6, r25	; 0x06
    266c:	8d 83       	std	Y+5, r24	; 0x05
    266e:	8d 81       	ldd	r24, Y+5	; 0x05
    2670:	9e 81       	ldd	r25, Y+6	; 0x06
    2672:	9a 83       	std	Y+2, r25	; 0x02
    2674:	89 83       	std	Y+1, r24	; 0x01
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	9a 81       	ldd	r25, Y+2	; 0x02
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <SevSeg_SevErrStateDisplayRange+0x4dc>
    267e:	9a 83       	std	Y+2, r25	; 0x02
    2680:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(500);
				}
			}
		}
	}
	return Seven_OK;
    2682:	82 e0       	ldi	r24, 0x02	; 2
    2684:	8f af       	std	Y+63, r24	; 0x3f
    2686:	8f ad       	ldd	r24, Y+63	; 0x3f

}
    2688:	ef 96       	adiw	r28, 0x3f	; 63
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	cf 91       	pop	r28
    2696:	df 91       	pop	r29
    2698:	08 95       	ret

0000269a <SevSeg_SevErrStateDisplayMax>:

SevErrState SevSeg_SevErrStateDisplayMax(SevSeg_info * SevenSegment1){
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
    26a2:	a3 97       	sbiw	r28, 0x23	; 35
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	de bf       	out	0x3e, r29	; 62
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	cd bf       	out	0x3d, r28	; 61
    26ae:	9a a3       	std	Y+34, r25	; 0x22
    26b0:	89 a3       	std	Y+33, r24	; 0x21
	u8 ErrStateDirection,ErrStateValue; // anode 1 // cathode 0 Enable
	ErrStateDirection=DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,DIO_OUT);
    26b2:	e9 a1       	ldd	r30, Y+33	; 0x21
    26b4:	fa a1       	ldd	r31, Y+34	; 0x22
    26b6:	81 81       	ldd	r24, Z+1	; 0x01
    26b8:	61 e0       	ldi	r22, 0x01	; 1
    26ba:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_ErrStateSetGroupDirection>
    26be:	88 a3       	std	Y+32, r24	; 0x20
	if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction)
    26c0:	88 a1       	ldd	r24, Y+32	; 0x20
    26c2:	81 30       	cpi	r24, 0x01	; 1
    26c4:	19 f0       	breq	.+6      	; 0x26cc <SevSeg_SevErrStateDisplayMax+0x32>
    26c6:	88 a1       	ldd	r24, Y+32	; 0x20
    26c8:	83 30       	cpi	r24, 0x03	; 3
    26ca:	19 f4       	brne	.+6      	; 0x26d2 <SevSeg_SevErrStateDisplayMax+0x38>
	{
		return Group_ERROR;
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	8b a3       	std	Y+35, r24	; 0x23
    26d0:	92 c1       	rjmp	.+804    	; 0x29f6 <SevSeg_SevErrStateDisplayMax+0x35c>
	}
	else{
		if(SevenSegment1->SevSeg_Type==CA){
    26d2:	e9 a1       	ldd	r30, Y+33	; 0x21
    26d4:	fa a1       	ldd	r31, Y+34	; 0x22
    26d6:	80 81       	ld	r24, Z
    26d8:	88 23       	and	r24, r24
    26da:	09 f0       	breq	.+2      	; 0x26de <SevSeg_SevErrStateDisplayMax+0x44>
    26dc:	c2 c0       	rjmp	.+388    	; 0x2862 <SevSeg_SevErrStateDisplayMax+0x1c8>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    26de:	e9 a1       	ldd	r30, Y+33	; 0x21
    26e0:	fa a1       	ldd	r31, Y+34	; 0x22
    26e2:	82 81       	ldd	r24, Z+2	; 0x02
    26e4:	e9 a1       	ldd	r30, Y+33	; 0x21
    26e6:	fa a1       	ldd	r31, Y+34	; 0x22
    26e8:	93 81       	ldd	r25, Z+3	; 0x03
    26ea:	69 2f       	mov	r22, r25
    26ec:	41 e0       	ldi	r20, 0x01	; 1
    26ee:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
    26f2:	88 a3       	std	Y+32, r24	; 0x20
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    26f4:	88 a1       	ldd	r24, Y+32	; 0x20
    26f6:	81 30       	cpi	r24, 0x01	; 1
    26f8:	31 f0       	breq	.+12     	; 0x2706 <SevSeg_SevErrStateDisplayMax+0x6c>
    26fa:	88 a1       	ldd	r24, Y+32	; 0x20
    26fc:	83 30       	cpi	r24, 0x03	; 3
    26fe:	19 f0       	breq	.+6      	; 0x2706 <SevSeg_SevErrStateDisplayMax+0x6c>
    2700:	88 a1       	ldd	r24, Y+32	; 0x20
    2702:	82 30       	cpi	r24, 0x02	; 2
    2704:	19 f4       	brne	.+6      	; 0x270c <SevSeg_SevErrStateDisplayMax+0x72>
				return Group_ERROR;
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	8b a3       	std	Y+35, r24	; 0x23
    270a:	75 c1       	rjmp	.+746    	; 0x29f6 <SevSeg_SevErrStateDisplayMax+0x35c>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
    270c:	e9 a1       	ldd	r30, Y+33	; 0x21
    270e:	fa a1       	ldd	r31, Y+34	; 0x22
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	e9 a1       	ldd	r30, Y+33	; 0x21
    2714:	fa a1       	ldd	r31, Y+34	; 0x22
    2716:	93 81       	ldd	r25, Z+3	; 0x03
    2718:	69 2f       	mov	r22, r25
    271a:	41 e0       	ldi	r20, 0x01	; 1
    271c:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
    2720:	8f 8f       	std	Y+31, r24	; 0x1f
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    2722:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2724:	81 30       	cpi	r24, 0x01	; 1
    2726:	31 f0       	breq	.+12     	; 0x2734 <SevSeg_SevErrStateDisplayMax+0x9a>
    2728:	8f 8d       	ldd	r24, Y+31	; 0x1f
    272a:	84 30       	cpi	r24, 0x04	; 4
    272c:	19 f0       	breq	.+6      	; 0x2734 <SevSeg_SevErrStateDisplayMax+0x9a>
    272e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2730:	82 30       	cpi	r24, 0x02	; 2
    2732:	11 f4       	brne	.+4      	; 0x2738 <SevSeg_SevErrStateDisplayMax+0x9e>
					return Number_Error;
    2734:	1b a2       	std	Y+35, r1	; 0x23
    2736:	5f c1       	rjmp	.+702    	; 0x29f6 <SevSeg_SevErrStateDisplayMax+0x35c>
				}
				else{
					for(u8 i=0;i<10;i++){
    2738:	1e 8e       	std	Y+30, r1	; 0x1e
    273a:	84 c0       	rjmp	.+264    	; 0x2844 <SevSeg_SevErrStateDisplayMax+0x1aa>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[i]);
    273c:	e9 a1       	ldd	r30, Y+33	; 0x21
    273e:	fa a1       	ldd	r31, Y+34	; 0x22
    2740:	21 81       	ldd	r18, Z+1	; 0x01
    2742:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2744:	88 2f       	mov	r24, r24
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	fc 01       	movw	r30, r24
    274a:	e7 59       	subi	r30, 0x97	; 151
    274c:	fe 4f       	sbci	r31, 0xFE	; 254
    274e:	90 81       	ld	r25, Z
    2750:	82 2f       	mov	r24, r18
    2752:	69 2f       	mov	r22, r25
    2754:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <DIO_ErrStateSetPortValue>
    2758:	8f 8f       	std	Y+31, r24	; 0x1f
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	a6 e1       	ldi	r26, 0x16	; 22
    2760:	b3 e4       	ldi	r27, 0x43	; 67
    2762:	89 8f       	std	Y+25, r24	; 0x19
    2764:	9a 8f       	std	Y+26, r25	; 0x1a
    2766:	ab 8f       	std	Y+27, r26	; 0x1b
    2768:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    276a:	69 8d       	ldd	r22, Y+25	; 0x19
    276c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    276e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2770:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	4a ef       	ldi	r20, 0xFA	; 250
    2778:	54 e4       	ldi	r21, 0x44	; 68
    277a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	8d 8b       	std	Y+21, r24	; 0x15
    2784:	9e 8b       	std	Y+22, r25	; 0x16
    2786:	af 8b       	std	Y+23, r26	; 0x17
    2788:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    278a:	6d 89       	ldd	r22, Y+21	; 0x15
    278c:	7e 89       	ldd	r23, Y+22	; 0x16
    278e:	8f 89       	ldd	r24, Y+23	; 0x17
    2790:	98 8d       	ldd	r25, Y+24	; 0x18
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	40 e8       	ldi	r20, 0x80	; 128
    2798:	5f e3       	ldi	r21, 0x3F	; 63
    279a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    279e:	88 23       	and	r24, r24
    27a0:	2c f4       	brge	.+10     	; 0x27ac <SevSeg_SevErrStateDisplayMax+0x112>
		__ticks = 1;
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	9c 8b       	std	Y+20, r25	; 0x14
    27a8:	8b 8b       	std	Y+19, r24	; 0x13
    27aa:	3f c0       	rjmp	.+126    	; 0x282a <SevSeg_SevErrStateDisplayMax+0x190>
	else if (__tmp > 65535)
    27ac:	6d 89       	ldd	r22, Y+21	; 0x15
    27ae:	7e 89       	ldd	r23, Y+22	; 0x16
    27b0:	8f 89       	ldd	r24, Y+23	; 0x17
    27b2:	98 8d       	ldd	r25, Y+24	; 0x18
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	3f ef       	ldi	r19, 0xFF	; 255
    27b8:	4f e7       	ldi	r20, 0x7F	; 127
    27ba:	57 e4       	ldi	r21, 0x47	; 71
    27bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27c0:	18 16       	cp	r1, r24
    27c2:	4c f5       	brge	.+82     	; 0x2816 <SevSeg_SevErrStateDisplayMax+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c4:	69 8d       	ldd	r22, Y+25	; 0x19
    27c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e2       	ldi	r20, 0x20	; 32
    27d2:	51 e4       	ldi	r21, 0x41	; 65
    27d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	bc 01       	movw	r22, r24
    27de:	cd 01       	movw	r24, r26
    27e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	9c 8b       	std	Y+20, r25	; 0x14
    27ea:	8b 8b       	std	Y+19, r24	; 0x13
    27ec:	0f c0       	rjmp	.+30     	; 0x280c <SevSeg_SevErrStateDisplayMax+0x172>
    27ee:	88 ec       	ldi	r24, 0xC8	; 200
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	9a 8b       	std	Y+18, r25	; 0x12
    27f4:	89 8b       	std	Y+17, r24	; 0x11
    27f6:	89 89       	ldd	r24, Y+17	; 0x11
    27f8:	9a 89       	ldd	r25, Y+18	; 0x12
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	f1 f7       	brne	.-4      	; 0x27fa <SevSeg_SevErrStateDisplayMax+0x160>
    27fe:	9a 8b       	std	Y+18, r25	; 0x12
    2800:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2802:	8b 89       	ldd	r24, Y+19	; 0x13
    2804:	9c 89       	ldd	r25, Y+20	; 0x14
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	9c 8b       	std	Y+20, r25	; 0x14
    280a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280c:	8b 89       	ldd	r24, Y+19	; 0x13
    280e:	9c 89       	ldd	r25, Y+20	; 0x14
    2810:	00 97       	sbiw	r24, 0x00	; 0
    2812:	69 f7       	brne	.-38     	; 0x27ee <SevSeg_SevErrStateDisplayMax+0x154>
    2814:	14 c0       	rjmp	.+40     	; 0x283e <SevSeg_SevErrStateDisplayMax+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2816:	6d 89       	ldd	r22, Y+21	; 0x15
    2818:	7e 89       	ldd	r23, Y+22	; 0x16
    281a:	8f 89       	ldd	r24, Y+23	; 0x17
    281c:	98 8d       	ldd	r25, Y+24	; 0x18
    281e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	9c 8b       	std	Y+20, r25	; 0x14
    2828:	8b 8b       	std	Y+19, r24	; 0x13
    282a:	8b 89       	ldd	r24, Y+19	; 0x13
    282c:	9c 89       	ldd	r25, Y+20	; 0x14
    282e:	98 8b       	std	Y+16, r25	; 0x10
    2830:	8f 87       	std	Y+15, r24	; 0x0f
    2832:	8f 85       	ldd	r24, Y+15	; 0x0f
    2834:	98 89       	ldd	r25, Y+16	; 0x10
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	f1 f7       	brne	.-4      	; 0x2836 <SevSeg_SevErrStateDisplayMax+0x19c>
    283a:	98 8b       	std	Y+16, r25	; 0x10
    283c:	8f 87       	std	Y+15, r24	; 0x0f
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
					return Number_Error;
				}
				else{
					for(u8 i=0;i<10;i++){
    283e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2840:	8f 5f       	subi	r24, 0xFF	; 255
    2842:	8e 8f       	std	Y+30, r24	; 0x1e
    2844:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2846:	8a 30       	cpi	r24, 0x0A	; 10
    2848:	08 f4       	brcc	.+2      	; 0x284c <SevSeg_SevErrStateDisplayMax+0x1b2>
    284a:	78 cf       	rjmp	.-272    	; 0x273c <SevSeg_SevErrStateDisplayMax+0xa2>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[i]);
						_delay_ms(150);
					}
					if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE){
    284c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    284e:	81 30       	cpi	r24, 0x01	; 1
    2850:	19 f0       	breq	.+6      	; 0x2858 <SevSeg_SevErrStateDisplayMax+0x1be>
    2852:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2854:	84 30       	cpi	r24, 0x04	; 4
    2856:	11 f4       	brne	.+4      	; 0x285c <SevSeg_SevErrStateDisplayMax+0x1c2>
						return Number_Error;
    2858:	1b a2       	std	Y+35, r1	; 0x23
    285a:	cd c0       	rjmp	.+410    	; 0x29f6 <SevSeg_SevErrStateDisplayMax+0x35c>
					}
					else
						return Seven_OK;
    285c:	82 e0       	ldi	r24, 0x02	; 2
    285e:	8b a3       	std	Y+35, r24	; 0x23
    2860:	ca c0       	rjmp	.+404    	; 0x29f6 <SevSeg_SevErrStateDisplayMax+0x35c>
				}
			}
		}
		else if(SevenSegment1->SevSeg_Type==CC){
    2862:	e9 a1       	ldd	r30, Y+33	; 0x21
    2864:	fa a1       	ldd	r31, Y+34	; 0x22
    2866:	80 81       	ld	r24, Z
    2868:	81 30       	cpi	r24, 0x01	; 1
    286a:	09 f0       	breq	.+2      	; 0x286e <SevSeg_SevErrStateDisplayMax+0x1d4>
    286c:	c2 c0       	rjmp	.+388    	; 0x29f2 <SevSeg_SevErrStateDisplayMax+0x358>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    286e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2870:	fa a1       	ldd	r31, Y+34	; 0x22
    2872:	82 81       	ldd	r24, Z+2	; 0x02
    2874:	e9 a1       	ldd	r30, Y+33	; 0x21
    2876:	fa a1       	ldd	r31, Y+34	; 0x22
    2878:	93 81       	ldd	r25, Z+3	; 0x03
    287a:	69 2f       	mov	r22, r25
    287c:	41 e0       	ldi	r20, 0x01	; 1
    287e:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
    2882:	88 a3       	std	Y+32, r24	; 0x20
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    2884:	88 a1       	ldd	r24, Y+32	; 0x20
    2886:	81 30       	cpi	r24, 0x01	; 1
    2888:	31 f0       	breq	.+12     	; 0x2896 <SevSeg_SevErrStateDisplayMax+0x1fc>
    288a:	88 a1       	ldd	r24, Y+32	; 0x20
    288c:	83 30       	cpi	r24, 0x03	; 3
    288e:	19 f0       	breq	.+6      	; 0x2896 <SevSeg_SevErrStateDisplayMax+0x1fc>
    2890:	88 a1       	ldd	r24, Y+32	; 0x20
    2892:	82 30       	cpi	r24, 0x02	; 2
    2894:	19 f4       	brne	.+6      	; 0x289c <SevSeg_SevErrStateDisplayMax+0x202>
				return Group_ERROR;
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	8b a3       	std	Y+35, r24	; 0x23
    289a:	ad c0       	rjmp	.+346    	; 0x29f6 <SevSeg_SevErrStateDisplayMax+0x35c>
			}
			else
				{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
    289c:	e9 a1       	ldd	r30, Y+33	; 0x21
    289e:	fa a1       	ldd	r31, Y+34	; 0x22
    28a0:	82 81       	ldd	r24, Z+2	; 0x02
    28a2:	e9 a1       	ldd	r30, Y+33	; 0x21
    28a4:	fa a1       	ldd	r31, Y+34	; 0x22
    28a6:	93 81       	ldd	r25, Z+3	; 0x03
    28a8:	69 2f       	mov	r22, r25
    28aa:	40 e0       	ldi	r20, 0x00	; 0
    28ac:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
    28b0:	8f 8f       	std	Y+31, r24	; 0x1f
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    28b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28b4:	81 30       	cpi	r24, 0x01	; 1
    28b6:	31 f0       	breq	.+12     	; 0x28c4 <SevSeg_SevErrStateDisplayMax+0x22a>
    28b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28ba:	84 30       	cpi	r24, 0x04	; 4
    28bc:	19 f0       	breq	.+6      	; 0x28c4 <SevSeg_SevErrStateDisplayMax+0x22a>
    28be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28c0:	82 30       	cpi	r24, 0x02	; 2
    28c2:	11 f4       	brne	.+4      	; 0x28c8 <SevSeg_SevErrStateDisplayMax+0x22e>
					return Number_Error;
    28c4:	1b a2       	std	Y+35, r1	; 0x23
    28c6:	97 c0       	rjmp	.+302    	; 0x29f6 <SevSeg_SevErrStateDisplayMax+0x35c>
				}
				else{
					for(u8 i=0;i<10;i++){
    28c8:	1d 8e       	std	Y+29, r1	; 0x1d
    28ca:	84 c0       	rjmp	.+264    	; 0x29d4 <SevSeg_SevErrStateDisplayMax+0x33a>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[i]);
    28cc:	e9 a1       	ldd	r30, Y+33	; 0x21
    28ce:	fa a1       	ldd	r31, Y+34	; 0x22
    28d0:	21 81       	ldd	r18, Z+1	; 0x01
    28d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28d4:	88 2f       	mov	r24, r24
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	fc 01       	movw	r30, r24
    28da:	ed 58       	subi	r30, 0x8D	; 141
    28dc:	fe 4f       	sbci	r31, 0xFE	; 254
    28de:	90 81       	ld	r25, Z
    28e0:	82 2f       	mov	r24, r18
    28e2:	69 2f       	mov	r22, r25
    28e4:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <DIO_ErrStateSetPortValue>
    28e8:	8f 8f       	std	Y+31, r24	; 0x1f
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	a6 e1       	ldi	r26, 0x16	; 22
    28f0:	b3 e4       	ldi	r27, 0x43	; 67
    28f2:	8b 87       	std	Y+11, r24	; 0x0b
    28f4:	9c 87       	std	Y+12, r25	; 0x0c
    28f6:	ad 87       	std	Y+13, r26	; 0x0d
    28f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    28fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    28fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2900:	9e 85       	ldd	r25, Y+14	; 0x0e
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	4a ef       	ldi	r20, 0xFA	; 250
    2908:	54 e4       	ldi	r21, 0x44	; 68
    290a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	8f 83       	std	Y+7, r24	; 0x07
    2914:	98 87       	std	Y+8, r25	; 0x08
    2916:	a9 87       	std	Y+9, r26	; 0x09
    2918:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    291a:	6f 81       	ldd	r22, Y+7	; 0x07
    291c:	78 85       	ldd	r23, Y+8	; 0x08
    291e:	89 85       	ldd	r24, Y+9	; 0x09
    2920:	9a 85       	ldd	r25, Y+10	; 0x0a
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e8       	ldi	r20, 0x80	; 128
    2928:	5f e3       	ldi	r21, 0x3F	; 63
    292a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    292e:	88 23       	and	r24, r24
    2930:	2c f4       	brge	.+10     	; 0x293c <SevSeg_SevErrStateDisplayMax+0x2a2>
		__ticks = 1;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	9e 83       	std	Y+6, r25	; 0x06
    2938:	8d 83       	std	Y+5, r24	; 0x05
    293a:	3f c0       	rjmp	.+126    	; 0x29ba <SevSeg_SevErrStateDisplayMax+0x320>
	else if (__tmp > 65535)
    293c:	6f 81       	ldd	r22, Y+7	; 0x07
    293e:	78 85       	ldd	r23, Y+8	; 0x08
    2940:	89 85       	ldd	r24, Y+9	; 0x09
    2942:	9a 85       	ldd	r25, Y+10	; 0x0a
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	3f ef       	ldi	r19, 0xFF	; 255
    2948:	4f e7       	ldi	r20, 0x7F	; 127
    294a:	57 e4       	ldi	r21, 0x47	; 71
    294c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2950:	18 16       	cp	r1, r24
    2952:	4c f5       	brge	.+82     	; 0x29a6 <SevSeg_SevErrStateDisplayMax+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2954:	6b 85       	ldd	r22, Y+11	; 0x0b
    2956:	7c 85       	ldd	r23, Y+12	; 0x0c
    2958:	8d 85       	ldd	r24, Y+13	; 0x0d
    295a:	9e 85       	ldd	r25, Y+14	; 0x0e
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	40 e2       	ldi	r20, 0x20	; 32
    2962:	51 e4       	ldi	r21, 0x41	; 65
    2964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	bc 01       	movw	r22, r24
    296e:	cd 01       	movw	r24, r26
    2970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	9e 83       	std	Y+6, r25	; 0x06
    297a:	8d 83       	std	Y+5, r24	; 0x05
    297c:	0f c0       	rjmp	.+30     	; 0x299c <SevSeg_SevErrStateDisplayMax+0x302>
    297e:	88 ec       	ldi	r24, 0xC8	; 200
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	9c 83       	std	Y+4, r25	; 0x04
    2984:	8b 83       	std	Y+3, r24	; 0x03
    2986:	8b 81       	ldd	r24, Y+3	; 0x03
    2988:	9c 81       	ldd	r25, Y+4	; 0x04
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <SevSeg_SevErrStateDisplayMax+0x2f0>
    298e:	9c 83       	std	Y+4, r25	; 0x04
    2990:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2992:	8d 81       	ldd	r24, Y+5	; 0x05
    2994:	9e 81       	ldd	r25, Y+6	; 0x06
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	9e 83       	std	Y+6, r25	; 0x06
    299a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299c:	8d 81       	ldd	r24, Y+5	; 0x05
    299e:	9e 81       	ldd	r25, Y+6	; 0x06
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	69 f7       	brne	.-38     	; 0x297e <SevSeg_SevErrStateDisplayMax+0x2e4>
    29a4:	14 c0       	rjmp	.+40     	; 0x29ce <SevSeg_SevErrStateDisplayMax+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a6:	6f 81       	ldd	r22, Y+7	; 0x07
    29a8:	78 85       	ldd	r23, Y+8	; 0x08
    29aa:	89 85       	ldd	r24, Y+9	; 0x09
    29ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	9e 83       	std	Y+6, r25	; 0x06
    29b8:	8d 83       	std	Y+5, r24	; 0x05
    29ba:	8d 81       	ldd	r24, Y+5	; 0x05
    29bc:	9e 81       	ldd	r25, Y+6	; 0x06
    29be:	9a 83       	std	Y+2, r25	; 0x02
    29c0:	89 83       	std	Y+1, r24	; 0x01
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	9a 81       	ldd	r25, Y+2	; 0x02
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	f1 f7       	brne	.-4      	; 0x29c6 <SevSeg_SevErrStateDisplayMax+0x32c>
    29ca:	9a 83       	std	Y+2, r25	; 0x02
    29cc:	89 83       	std	Y+1, r24	; 0x01
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
					return Number_Error;
				}
				else{
					for(u8 i=0;i<10;i++){
    29ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29d0:	8f 5f       	subi	r24, 0xFF	; 255
    29d2:	8d 8f       	std	Y+29, r24	; 0x1d
    29d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29d6:	8a 30       	cpi	r24, 0x0A	; 10
    29d8:	08 f4       	brcc	.+2      	; 0x29dc <SevSeg_SevErrStateDisplayMax+0x342>
    29da:	78 cf       	rjmp	.-272    	; 0x28cc <SevSeg_SevErrStateDisplayMax+0x232>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[i]);
						_delay_ms(150);
					}
					if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE){
    29dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29de:	81 30       	cpi	r24, 0x01	; 1
    29e0:	19 f0       	breq	.+6      	; 0x29e8 <SevSeg_SevErrStateDisplayMax+0x34e>
    29e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29e4:	84 30       	cpi	r24, 0x04	; 4
    29e6:	11 f4       	brne	.+4      	; 0x29ec <SevSeg_SevErrStateDisplayMax+0x352>
						return Number_Error;
    29e8:	1b a2       	std	Y+35, r1	; 0x23
    29ea:	05 c0       	rjmp	.+10     	; 0x29f6 <SevSeg_SevErrStateDisplayMax+0x35c>
					}
					else
						return Seven_OK;
    29ec:	82 e0       	ldi	r24, 0x02	; 2
    29ee:	8b a3       	std	Y+35, r24	; 0x23
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <SevSeg_SevErrStateDisplayMax+0x35c>
				}
			}
		}
	}
	return Seven_OK;
    29f2:	82 e0       	ldi	r24, 0x02	; 2
    29f4:	8b a3       	std	Y+35, r24	; 0x23
    29f6:	8b a1       	ldd	r24, Y+35	; 0x23
}
    29f8:	a3 96       	adiw	r28, 0x23	; 35
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	cd bf       	out	0x3d, r28	; 61
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	08 95       	ret

00002a0a <Led_LedErrStateTurnOn>:
 */
#include "../../Common/Definition.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "Led_Interface.h"

LedErrState	Led_LedErrStateTurnOn(Led_info *Led){
    2a0a:	df 93       	push	r29
    2a0c:	cf 93       	push	r28
    2a0e:	00 d0       	rcall	.+0      	; 0x2a10 <Led_LedErrStateTurnOn+0x6>
    2a10:	00 d0       	rcall	.+0      	; 0x2a12 <Led_LedErrStateTurnOn+0x8>
    2a12:	0f 92       	push	r0
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	9c 83       	std	Y+4, r25	; 0x04
    2a1a:	8b 83       	std	Y+3, r24	; 0x03
	u8 SetPinErrReturn;
	u8 SetValueErrReturnON;

	SetPinErrReturn=DIO_ErrStateSetPinDirection(Led->Led_Group,Led->Led_Pin,DIO_OUT);
    2a1c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a1e:	fc 81       	ldd	r31, Y+4	; 0x04
    2a20:	80 81       	ld	r24, Z
    2a22:	eb 81       	ldd	r30, Y+3	; 0x03
    2a24:	fc 81       	ldd	r31, Y+4	; 0x04
    2a26:	91 81       	ldd	r25, Z+1	; 0x01
    2a28:	69 2f       	mov	r22, r25
    2a2a:	41 e0       	ldi	r20, 0x01	; 1
    2a2c:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
    2a30:	8a 83       	std	Y+2, r24	; 0x02
	if(SetPinErrReturn==DIO_ERROR_PORT||SetPinErrReturn==DIO_ERROR_Direction||SetPinErrReturn==DIO_ERROR_PIN){
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	81 30       	cpi	r24, 0x01	; 1
    2a36:	31 f0       	breq	.+12     	; 0x2a44 <Led_LedErrStateTurnOn+0x3a>
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	83 30       	cpi	r24, 0x03	; 3
    2a3c:	19 f0       	breq	.+6      	; 0x2a44 <Led_LedErrStateTurnOn+0x3a>
    2a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a40:	82 30       	cpi	r24, 0x02	; 2
    2a42:	19 f4       	brne	.+6      	; 0x2a4a <Led_LedErrStateTurnOn+0x40>
		return LED_INIT_Error;
    2a44:	86 e0       	ldi	r24, 0x06	; 6
    2a46:	8d 83       	std	Y+5, r24	; 0x05
    2a48:	3e c0       	rjmp	.+124    	; 0x2ac6 <Led_LedErrStateTurnOn+0xbc>
	}
	else{
		if(Led->ConnectionType==Source_Connection){
    2a4a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a4c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a4e:	82 81       	ldd	r24, Z+2	; 0x02
    2a50:	88 23       	and	r24, r24
    2a52:	c9 f4       	brne	.+50     	; 0x2a86 <Led_LedErrStateTurnOn+0x7c>
			// HIGH = ON
			SetValueErrReturnON=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_HIGH);
    2a54:	eb 81       	ldd	r30, Y+3	; 0x03
    2a56:	fc 81       	ldd	r31, Y+4	; 0x04
    2a58:	80 81       	ld	r24, Z
    2a5a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a5c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a5e:	91 81       	ldd	r25, Z+1	; 0x01
    2a60:	69 2f       	mov	r22, r25
    2a62:	41 e0       	ldi	r20, 0x01	; 1
    2a64:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
    2a68:	89 83       	std	Y+1, r24	; 0x01
			if(SetValueErrReturnON==DIO_ERROR_PORT||SetValueErrReturnON==DIO_ERROR_VALUE||SetValueErrReturnON==DIO_ERROR_PIN){
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	81 30       	cpi	r24, 0x01	; 1
    2a6e:	31 f0       	breq	.+12     	; 0x2a7c <Led_LedErrStateTurnOn+0x72>
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	84 30       	cpi	r24, 0x04	; 4
    2a74:	19 f0       	breq	.+6      	; 0x2a7c <Led_LedErrStateTurnOn+0x72>
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	82 30       	cpi	r24, 0x02	; 2
    2a7a:	19 f4       	brne	.+6      	; 0x2a82 <Led_LedErrStateTurnOn+0x78>
				return LED_ON_Error;
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	8d 83       	std	Y+5, r24	; 0x05
    2a80:	22 c0       	rjmp	.+68     	; 0x2ac6 <Led_LedErrStateTurnOn+0xbc>
			}
			else
				return LED_ON_OK;
    2a82:	1d 82       	std	Y+5, r1	; 0x05
    2a84:	20 c0       	rjmp	.+64     	; 0x2ac6 <Led_LedErrStateTurnOn+0xbc>
		}
		else if(Led->ConnectionType==Sink_Connection){
    2a86:	eb 81       	ldd	r30, Y+3	; 0x03
    2a88:	fc 81       	ldd	r31, Y+4	; 0x04
    2a8a:	82 81       	ldd	r24, Z+2	; 0x02
    2a8c:	81 30       	cpi	r24, 0x01	; 1
    2a8e:	c9 f4       	brne	.+50     	; 0x2ac2 <Led_LedErrStateTurnOn+0xb8>
			// LOW = ON
			SetValueErrReturnON=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_LOW);
    2a90:	eb 81       	ldd	r30, Y+3	; 0x03
    2a92:	fc 81       	ldd	r31, Y+4	; 0x04
    2a94:	80 81       	ld	r24, Z
    2a96:	eb 81       	ldd	r30, Y+3	; 0x03
    2a98:	fc 81       	ldd	r31, Y+4	; 0x04
    2a9a:	91 81       	ldd	r25, Z+1	; 0x01
    2a9c:	69 2f       	mov	r22, r25
    2a9e:	40 e0       	ldi	r20, 0x00	; 0
    2aa0:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
    2aa4:	89 83       	std	Y+1, r24	; 0x01
			if(SetValueErrReturnON==DIO_ERROR_PORT||SetValueErrReturnON==DIO_ERROR_VALUE||SetValueErrReturnON==DIO_ERROR_PIN){
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
    2aa8:	81 30       	cpi	r24, 0x01	; 1
    2aaa:	31 f0       	breq	.+12     	; 0x2ab8 <Led_LedErrStateTurnOn+0xae>
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	84 30       	cpi	r24, 0x04	; 4
    2ab0:	19 f0       	breq	.+6      	; 0x2ab8 <Led_LedErrStateTurnOn+0xae>
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	82 30       	cpi	r24, 0x02	; 2
    2ab6:	19 f4       	brne	.+6      	; 0x2abe <Led_LedErrStateTurnOn+0xb4>
				return LED_ON_Error;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	8d 83       	std	Y+5, r24	; 0x05
    2abc:	04 c0       	rjmp	.+8      	; 0x2ac6 <Led_LedErrStateTurnOn+0xbc>
			}
			else
				return LED_ON_OK;
    2abe:	1d 82       	std	Y+5, r1	; 0x05
    2ac0:	02 c0       	rjmp	.+4      	; 0x2ac6 <Led_LedErrStateTurnOn+0xbc>
		}
		else
			return LED_Connection_Error;
    2ac2:	84 e0       	ldi	r24, 0x04	; 4
    2ac4:	8d 83       	std	Y+5, r24	; 0x05
    2ac6:	8d 81       	ldd	r24, Y+5	; 0x05

	}
}
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <Led_LedErrStateTurnOff>:


LedErrState	Led_LedErrStateTurnOff(Led_info *Led){
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <Led_LedErrStateTurnOff+0x6>
    2ade:	00 d0       	rcall	.+0      	; 0x2ae0 <Led_LedErrStateTurnOff+0x8>
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	9b 83       	std	Y+3, r25	; 0x03
    2ae6:	8a 83       	std	Y+2, r24	; 0x02
	u8 SetValueErrReturnOFF;
	if(Led->ConnectionType==Source_Connection){
    2ae8:	ea 81       	ldd	r30, Y+2	; 0x02
    2aea:	fb 81       	ldd	r31, Y+3	; 0x03
    2aec:	82 81       	ldd	r24, Z+2	; 0x02
    2aee:	88 23       	and	r24, r24
    2af0:	d1 f4       	brne	.+52     	; 0x2b26 <Led_LedErrStateTurnOff+0x4e>
		// HIGH = ON
		SetValueErrReturnOFF=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_LOW);
    2af2:	ea 81       	ldd	r30, Y+2	; 0x02
    2af4:	fb 81       	ldd	r31, Y+3	; 0x03
    2af6:	80 81       	ld	r24, Z
    2af8:	ea 81       	ldd	r30, Y+2	; 0x02
    2afa:	fb 81       	ldd	r31, Y+3	; 0x03
    2afc:	91 81       	ldd	r25, Z+1	; 0x01
    2afe:	69 2f       	mov	r22, r25
    2b00:	40 e0       	ldi	r20, 0x00	; 0
    2b02:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
    2b06:	89 83       	std	Y+1, r24	; 0x01
		if(SetValueErrReturnOFF==DIO_ERROR_PORT||SetValueErrReturnOFF==DIO_ERROR_VALUE||SetValueErrReturnOFF==DIO_ERROR_PIN){
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	81 30       	cpi	r24, 0x01	; 1
    2b0c:	31 f0       	breq	.+12     	; 0x2b1a <Led_LedErrStateTurnOff+0x42>
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	84 30       	cpi	r24, 0x04	; 4
    2b12:	19 f0       	breq	.+6      	; 0x2b1a <Led_LedErrStateTurnOff+0x42>
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	82 30       	cpi	r24, 0x02	; 2
    2b18:	19 f4       	brne	.+6      	; 0x2b20 <Led_LedErrStateTurnOff+0x48>
			return LED_OFF_Error;
    2b1a:	83 e0       	ldi	r24, 0x03	; 3
    2b1c:	8c 83       	std	Y+4, r24	; 0x04
    2b1e:	24 c0       	rjmp	.+72     	; 0x2b68 <Led_LedErrStateTurnOff+0x90>
		}
		else
			return LED_OFF_OK;
    2b20:	82 e0       	ldi	r24, 0x02	; 2
    2b22:	8c 83       	std	Y+4, r24	; 0x04
    2b24:	21 c0       	rjmp	.+66     	; 0x2b68 <Led_LedErrStateTurnOff+0x90>
	}
else if(Led->ConnectionType==Sink_Connection){
    2b26:	ea 81       	ldd	r30, Y+2	; 0x02
    2b28:	fb 81       	ldd	r31, Y+3	; 0x03
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
    2b2c:	81 30       	cpi	r24, 0x01	; 1
    2b2e:	d1 f4       	brne	.+52     	; 0x2b64 <Led_LedErrStateTurnOff+0x8c>
	// LOW = ON
	SetValueErrReturnOFF=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_HIGH);
    2b30:	ea 81       	ldd	r30, Y+2	; 0x02
    2b32:	fb 81       	ldd	r31, Y+3	; 0x03
    2b34:	80 81       	ld	r24, Z
    2b36:	ea 81       	ldd	r30, Y+2	; 0x02
    2b38:	fb 81       	ldd	r31, Y+3	; 0x03
    2b3a:	91 81       	ldd	r25, Z+1	; 0x01
    2b3c:	69 2f       	mov	r22, r25
    2b3e:	41 e0       	ldi	r20, 0x01	; 1
    2b40:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
    2b44:	89 83       	std	Y+1, r24	; 0x01
	if(SetValueErrReturnOFF==DIO_ERROR_PORT||SetValueErrReturnOFF==DIO_ERROR_VALUE||SetValueErrReturnOFF==DIO_ERROR_PIN){
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	81 30       	cpi	r24, 0x01	; 1
    2b4a:	31 f0       	breq	.+12     	; 0x2b58 <Led_LedErrStateTurnOff+0x80>
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	84 30       	cpi	r24, 0x04	; 4
    2b50:	19 f0       	breq	.+6      	; 0x2b58 <Led_LedErrStateTurnOff+0x80>
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	82 30       	cpi	r24, 0x02	; 2
    2b56:	19 f4       	brne	.+6      	; 0x2b5e <Led_LedErrStateTurnOff+0x86>
		return LED_OFF_Error;
    2b58:	83 e0       	ldi	r24, 0x03	; 3
    2b5a:	8c 83       	std	Y+4, r24	; 0x04
    2b5c:	05 c0       	rjmp	.+10     	; 0x2b68 <Led_LedErrStateTurnOff+0x90>
	}
	else
		return LED_OFF_OK;
    2b5e:	82 e0       	ldi	r24, 0x02	; 2
    2b60:	8c 83       	std	Y+4, r24	; 0x04
    2b62:	02 c0       	rjmp	.+4      	; 0x2b68 <Led_LedErrStateTurnOff+0x90>
}
else
	return LED_Connection_Error;
    2b64:	84 e0       	ldi	r24, 0x04	; 4
    2b66:	8c 83       	std	Y+4, r24	; 0x04
    2b68:	8c 81       	ldd	r24, Y+4	; 0x04

}
    2b6a:	0f 90       	pop	r0
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	cf 91       	pop	r28
    2b74:	df 91       	pop	r29
    2b76:	08 95       	ret

00002b78 <LCD_VoidSendCommand>:
 */
#include"../../MCAL/DIO/DIO_Interface.h"
#include "LCD_Interface.h"
#include <stdlib.h>

void LCD_VoidSendCommand(u8 Local_Command,LCD_Info *lcd){
    2b78:	df 93       	push	r29
    2b7a:	cf 93       	push	r28
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	6f 97       	sbiw	r28, 0x1f	; 31
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	f8 94       	cli
    2b86:	de bf       	out	0x3e, r29	; 62
    2b88:	0f be       	out	0x3f, r0	; 63
    2b8a:	cd bf       	out	0x3d, r28	; 61
    2b8c:	8d 8f       	std	Y+29, r24	; 0x1d
    2b8e:	7f 8f       	std	Y+31, r23	; 0x1f
    2b90:	6e 8f       	std	Y+30, r22	; 0x1e
	/*RS->LOw*/
	DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_LOW);
    2b92:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2b94:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2b96:	80 81       	ld	r24, Z
    2b98:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2b9a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2b9c:	91 81       	ldd	r25, Z+1	; 0x01
    2b9e:	69 2f       	mov	r22, r25
    2ba0:	40 e0       	ldi	r20, 0x00	; 0
    2ba2:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
	/*RW-> LOW*/
	DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    2ba6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2ba8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2baa:	82 81       	ldd	r24, Z+2	; 0x02
    2bac:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2bae:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2bb0:	93 81       	ldd	r25, Z+3	; 0x03
    2bb2:	69 2f       	mov	r22, r25
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
	/*Group = Command*/
	DIO_ErrStateSetPortValue(lcd->Data_group,Local_Command);
    2bba:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2bbc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2bbe:	86 81       	ldd	r24, Z+6	; 0x06
    2bc0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2bc2:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <DIO_ErrStateSetPortValue>
	/*Enable*/
	DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    2bc6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2bc8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2bca:	84 81       	ldd	r24, Z+4	; 0x04
    2bcc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2bce:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2bd0:	95 81       	ldd	r25, Z+5	; 0x05
    2bd2:	69 2f       	mov	r22, r25
    2bd4:	41 e0       	ldi	r20, 0x01	; 1
    2bd6:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	a0 e8       	ldi	r26, 0x80	; 128
    2be0:	bf e3       	ldi	r27, 0x3F	; 63
    2be2:	89 8f       	std	Y+25, r24	; 0x19
    2be4:	9a 8f       	std	Y+26, r25	; 0x1a
    2be6:	ab 8f       	std	Y+27, r26	; 0x1b
    2be8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bea:	69 8d       	ldd	r22, Y+25	; 0x19
    2bec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	4a ef       	ldi	r20, 0xFA	; 250
    2bf8:	54 e4       	ldi	r21, 0x44	; 68
    2bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	8d 8b       	std	Y+21, r24	; 0x15
    2c04:	9e 8b       	std	Y+22, r25	; 0x16
    2c06:	af 8b       	std	Y+23, r26	; 0x17
    2c08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c10:	98 8d       	ldd	r25, Y+24	; 0x18
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	40 e8       	ldi	r20, 0x80	; 128
    2c18:	5f e3       	ldi	r21, 0x3F	; 63
    2c1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c1e:	88 23       	and	r24, r24
    2c20:	2c f4       	brge	.+10     	; 0x2c2c <LCD_VoidSendCommand+0xb4>
		__ticks = 1;
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	9c 8b       	std	Y+20, r25	; 0x14
    2c28:	8b 8b       	std	Y+19, r24	; 0x13
    2c2a:	3f c0       	rjmp	.+126    	; 0x2caa <LCD_VoidSendCommand+0x132>
	else if (__tmp > 65535)
    2c2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c30:	8f 89       	ldd	r24, Y+23	; 0x17
    2c32:	98 8d       	ldd	r25, Y+24	; 0x18
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	3f ef       	ldi	r19, 0xFF	; 255
    2c38:	4f e7       	ldi	r20, 0x7F	; 127
    2c3a:	57 e4       	ldi	r21, 0x47	; 71
    2c3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c40:	18 16       	cp	r1, r24
    2c42:	4c f5       	brge	.+82     	; 0x2c96 <LCD_VoidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c44:	69 8d       	ldd	r22, Y+25	; 0x19
    2c46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e2       	ldi	r20, 0x20	; 32
    2c52:	51 e4       	ldi	r21, 0x41	; 65
    2c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	bc 01       	movw	r22, r24
    2c5e:	cd 01       	movw	r24, r26
    2c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	9c 8b       	std	Y+20, r25	; 0x14
    2c6a:	8b 8b       	std	Y+19, r24	; 0x13
    2c6c:	0f c0       	rjmp	.+30     	; 0x2c8c <LCD_VoidSendCommand+0x114>
    2c6e:	88 ec       	ldi	r24, 0xC8	; 200
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	9a 8b       	std	Y+18, r25	; 0x12
    2c74:	89 8b       	std	Y+17, r24	; 0x11
    2c76:	89 89       	ldd	r24, Y+17	; 0x11
    2c78:	9a 89       	ldd	r25, Y+18	; 0x12
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	f1 f7       	brne	.-4      	; 0x2c7a <LCD_VoidSendCommand+0x102>
    2c7e:	9a 8b       	std	Y+18, r25	; 0x12
    2c80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c82:	8b 89       	ldd	r24, Y+19	; 0x13
    2c84:	9c 89       	ldd	r25, Y+20	; 0x14
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	9c 8b       	std	Y+20, r25	; 0x14
    2c8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	69 f7       	brne	.-38     	; 0x2c6e <LCD_VoidSendCommand+0xf6>
    2c94:	14 c0       	rjmp	.+40     	; 0x2cbe <LCD_VoidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c96:	6d 89       	ldd	r22, Y+21	; 0x15
    2c98:	7e 89       	ldd	r23, Y+22	; 0x16
    2c9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	9c 8b       	std	Y+20, r25	; 0x14
    2ca8:	8b 8b       	std	Y+19, r24	; 0x13
    2caa:	8b 89       	ldd	r24, Y+19	; 0x13
    2cac:	9c 89       	ldd	r25, Y+20	; 0x14
    2cae:	98 8b       	std	Y+16, r25	; 0x10
    2cb0:	8f 87       	std	Y+15, r24	; 0x0f
    2cb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cb4:	98 89       	ldd	r25, Y+16	; 0x10
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	f1 f7       	brne	.-4      	; 0x2cb6 <LCD_VoidSendCommand+0x13e>
    2cba:	98 8b       	std	Y+16, r25	; 0x10
    2cbc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    2cbe:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2cc0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2cc2:	84 81       	ldd	r24, Z+4	; 0x04
    2cc4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2cc6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2cc8:	95 81       	ldd	r25, Z+5	; 0x05
    2cca:	69 2f       	mov	r22, r25
    2ccc:	40 e0       	ldi	r20, 0x00	; 0
    2cce:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	a0 e8       	ldi	r26, 0x80	; 128
    2cd8:	bf e3       	ldi	r27, 0x3F	; 63
    2cda:	8b 87       	std	Y+11, r24	; 0x0b
    2cdc:	9c 87       	std	Y+12, r25	; 0x0c
    2cde:	ad 87       	std	Y+13, r26	; 0x0d
    2ce0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	4a ef       	ldi	r20, 0xFA	; 250
    2cf0:	54 e4       	ldi	r21, 0x44	; 68
    2cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	8f 83       	std	Y+7, r24	; 0x07
    2cfc:	98 87       	std	Y+8, r25	; 0x08
    2cfe:	a9 87       	std	Y+9, r26	; 0x09
    2d00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d02:	6f 81       	ldd	r22, Y+7	; 0x07
    2d04:	78 85       	ldd	r23, Y+8	; 0x08
    2d06:	89 85       	ldd	r24, Y+9	; 0x09
    2d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	40 e8       	ldi	r20, 0x80	; 128
    2d10:	5f e3       	ldi	r21, 0x3F	; 63
    2d12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d16:	88 23       	and	r24, r24
    2d18:	2c f4       	brge	.+10     	; 0x2d24 <LCD_VoidSendCommand+0x1ac>
		__ticks = 1;
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	9e 83       	std	Y+6, r25	; 0x06
    2d20:	8d 83       	std	Y+5, r24	; 0x05
    2d22:	3f c0       	rjmp	.+126    	; 0x2da2 <LCD_VoidSendCommand+0x22a>
	else if (__tmp > 65535)
    2d24:	6f 81       	ldd	r22, Y+7	; 0x07
    2d26:	78 85       	ldd	r23, Y+8	; 0x08
    2d28:	89 85       	ldd	r24, Y+9	; 0x09
    2d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	3f ef       	ldi	r19, 0xFF	; 255
    2d30:	4f e7       	ldi	r20, 0x7F	; 127
    2d32:	57 e4       	ldi	r21, 0x47	; 71
    2d34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d38:	18 16       	cp	r1, r24
    2d3a:	4c f5       	brge	.+82     	; 0x2d8e <LCD_VoidSendCommand+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e2       	ldi	r20, 0x20	; 32
    2d4a:	51 e4       	ldi	r21, 0x41	; 65
    2d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	bc 01       	movw	r22, r24
    2d56:	cd 01       	movw	r24, r26
    2d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	9e 83       	std	Y+6, r25	; 0x06
    2d62:	8d 83       	std	Y+5, r24	; 0x05
    2d64:	0f c0       	rjmp	.+30     	; 0x2d84 <LCD_VoidSendCommand+0x20c>
    2d66:	88 ec       	ldi	r24, 0xC8	; 200
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	9c 83       	std	Y+4, r25	; 0x04
    2d6c:	8b 83       	std	Y+3, r24	; 0x03
    2d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d70:	9c 81       	ldd	r25, Y+4	; 0x04
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	f1 f7       	brne	.-4      	; 0x2d72 <LCD_VoidSendCommand+0x1fa>
    2d76:	9c 83       	std	Y+4, r25	; 0x04
    2d78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	9e 83       	std	Y+6, r25	; 0x06
    2d82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d84:	8d 81       	ldd	r24, Y+5	; 0x05
    2d86:	9e 81       	ldd	r25, Y+6	; 0x06
    2d88:	00 97       	sbiw	r24, 0x00	; 0
    2d8a:	69 f7       	brne	.-38     	; 0x2d66 <LCD_VoidSendCommand+0x1ee>
    2d8c:	14 c0       	rjmp	.+40     	; 0x2db6 <LCD_VoidSendCommand+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d90:	78 85       	ldd	r23, Y+8	; 0x08
    2d92:	89 85       	ldd	r24, Y+9	; 0x09
    2d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	9e 83       	std	Y+6, r25	; 0x06
    2da0:	8d 83       	std	Y+5, r24	; 0x05
    2da2:	8d 81       	ldd	r24, Y+5	; 0x05
    2da4:	9e 81       	ldd	r25, Y+6	; 0x06
    2da6:	9a 83       	std	Y+2, r25	; 0x02
    2da8:	89 83       	std	Y+1, r24	; 0x01
    2daa:	89 81       	ldd	r24, Y+1	; 0x01
    2dac:	9a 81       	ldd	r25, Y+2	; 0x02
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	f1 f7       	brne	.-4      	; 0x2dae <LCD_VoidSendCommand+0x236>
    2db2:	9a 83       	std	Y+2, r25	; 0x02
    2db4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	if(Local_Command==0x01)
    2db6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2db8:	81 30       	cpi	r24, 0x01	; 1
    2dba:	39 f4       	brne	.+14     	; 0x2dca <LCD_VoidSendCommand+0x252>
		LCD_VoidGoToXY(0,0,lcd);
    2dbc:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2dbe:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	60 e0       	ldi	r22, 0x00	; 0
    2dc4:	a9 01       	movw	r20, r18
    2dc6:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <LCD_VoidGoToXY>
}
    2dca:	6f 96       	adiw	r28, 0x1f	; 31
    2dcc:	0f b6       	in	r0, 0x3f	; 63
    2dce:	f8 94       	cli
    2dd0:	de bf       	out	0x3e, r29	; 62
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	cd bf       	out	0x3d, r28	; 61
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <LCD_VoidSendChar>:

u8 LCD_VoidSendChar(u8 Local_Char,LCD_Info *lcd,LCD_Line_Info *Type)
{
    2ddc:	0f 93       	push	r16
    2dde:	1f 93       	push	r17
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	c9 55       	subi	r28, 0x59	; 89
    2dea:	d0 40       	sbci	r29, 0x00	; 0
    2dec:	0f b6       	in	r0, 0x3f	; 63
    2dee:	f8 94       	cli
    2df0:	de bf       	out	0x3e, r29	; 62
    2df2:	0f be       	out	0x3f, r0	; 63
    2df4:	cd bf       	out	0x3d, r28	; 61
    2df6:	fe 01       	movw	r30, r28
    2df8:	eb 5a       	subi	r30, 0xAB	; 171
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	80 83       	st	Z, r24
    2dfe:	fe 01       	movw	r30, r28
    2e00:	ea 5a       	subi	r30, 0xAA	; 170
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	71 83       	std	Z+1, r23	; 0x01
    2e06:	60 83       	st	Z, r22
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e8 5a       	subi	r30, 0xA8	; 168
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	51 83       	std	Z+1, r21	; 0x01
    2e10:	40 83       	st	Z, r20
	static u8 SwitchingCounter;
	static u8 SecondLineCounter,FirstLineCounter;

	if(Type->OneLine==NO&&Type->TwoLines==YES){
    2e12:	fe 01       	movw	r30, r28
    2e14:	e8 5a       	subi	r30, 0xA8	; 168
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	01 90       	ld	r0, Z+
    2e1a:	f0 81       	ld	r31, Z
    2e1c:	e0 2d       	mov	r30, r0
    2e1e:	80 81       	ld	r24, Z
    2e20:	88 23       	and	r24, r24
    2e22:	09 f0       	breq	.+2      	; 0x2e26 <LCD_VoidSendChar+0x4a>
    2e24:	12 c3       	rjmp	.+1572   	; 0x344a <LCD_VoidSendChar+0x66e>
    2e26:	fe 01       	movw	r30, r28
    2e28:	e8 5a       	subi	r30, 0xA8	; 168
    2e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2c:	01 90       	ld	r0, Z+
    2e2e:	f0 81       	ld	r31, Z
    2e30:	e0 2d       	mov	r30, r0
    2e32:	81 81       	ldd	r24, Z+1	; 0x01
    2e34:	81 30       	cpi	r24, 0x01	; 1
    2e36:	09 f0       	breq	.+2      	; 0x2e3a <LCD_VoidSendChar+0x5e>
    2e38:	08 c3       	rjmp	.+1552   	; 0x344a <LCD_VoidSendChar+0x66e>
		if(SwitchingCounter<16){
    2e3a:	80 91 9e 01 	lds	r24, 0x019E
    2e3e:	80 31       	cpi	r24, 0x10	; 16
    2e40:	08 f0       	brcs	.+2      	; 0x2e44 <LCD_VoidSendChar+0x68>
    2e42:	a3 c1       	rjmp	.+838    	; 0x318a <LCD_VoidSendChar+0x3ae>
			LCD_VoidGoToXY(FirstLineCounter,0,lcd);
    2e44:	80 91 9c 01 	lds	r24, 0x019C
    2e48:	fe 01       	movw	r30, r28
    2e4a:	ea 5a       	subi	r30, 0xAA	; 170
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	20 81       	ld	r18, Z
    2e50:	31 81       	ldd	r19, Z+1	; 0x01
    2e52:	60 e0       	ldi	r22, 0x00	; 0
    2e54:	a9 01       	movw	r20, r18
    2e56:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <LCD_VoidGoToXY>
			/*RS->LOw*/
			DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	ea 5a       	subi	r30, 0xAA	; 170
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	01 90       	ld	r0, Z+
    2e62:	f0 81       	ld	r31, Z
    2e64:	e0 2d       	mov	r30, r0
    2e66:	80 81       	ld	r24, Z
    2e68:	fe 01       	movw	r30, r28
    2e6a:	ea 5a       	subi	r30, 0xAA	; 170
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	01 90       	ld	r0, Z+
    2e70:	f0 81       	ld	r31, Z
    2e72:	e0 2d       	mov	r30, r0
    2e74:	91 81       	ldd	r25, Z+1	; 0x01
    2e76:	69 2f       	mov	r22, r25
    2e78:	41 e0       	ldi	r20, 0x01	; 1
    2e7a:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
			/*RW-> LOW*/
			DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    2e7e:	fe 01       	movw	r30, r28
    2e80:	ea 5a       	subi	r30, 0xAA	; 170
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	01 90       	ld	r0, Z+
    2e86:	f0 81       	ld	r31, Z
    2e88:	e0 2d       	mov	r30, r0
    2e8a:	82 81       	ldd	r24, Z+2	; 0x02
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	ea 5a       	subi	r30, 0xAA	; 170
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	01 90       	ld	r0, Z+
    2e94:	f0 81       	ld	r31, Z
    2e96:	e0 2d       	mov	r30, r0
    2e98:	93 81       	ldd	r25, Z+3	; 0x03
    2e9a:	69 2f       	mov	r22, r25
    2e9c:	40 e0       	ldi	r20, 0x00	; 0
    2e9e:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
			/*Group = Command*/
			DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	ea 5a       	subi	r30, 0xAA	; 170
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	01 90       	ld	r0, Z+
    2eaa:	f0 81       	ld	r31, Z
    2eac:	e0 2d       	mov	r30, r0
    2eae:	86 81       	ldd	r24, Z+6	; 0x06
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	eb 5a       	subi	r30, 0xAB	; 171
    2eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb6:	60 81       	ld	r22, Z
    2eb8:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <DIO_ErrStateSetPortValue>
			/*Enable*/
			DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	ea 5a       	subi	r30, 0xAA	; 170
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	01 90       	ld	r0, Z+
    2ec4:	f0 81       	ld	r31, Z
    2ec6:	e0 2d       	mov	r30, r0
    2ec8:	84 81       	ldd	r24, Z+4	; 0x04
    2eca:	fe 01       	movw	r30, r28
    2ecc:	ea 5a       	subi	r30, 0xAA	; 170
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	01 90       	ld	r0, Z+
    2ed2:	f0 81       	ld	r31, Z
    2ed4:	e0 2d       	mov	r30, r0
    2ed6:	95 81       	ldd	r25, Z+5	; 0x05
    2ed8:	69 2f       	mov	r22, r25
    2eda:	41 e0       	ldi	r20, 0x01	; 1
    2edc:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	ef 5a       	subi	r30, 0xAF	; 175
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	a0 e8       	ldi	r26, 0x80	; 128
    2eec:	bf e3       	ldi	r27, 0x3F	; 63
    2eee:	80 83       	st	Z, r24
    2ef0:	91 83       	std	Z+1, r25	; 0x01
    2ef2:	a2 83       	std	Z+2, r26	; 0x02
    2ef4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef6:	8e 01       	movw	r16, r28
    2ef8:	03 5b       	subi	r16, 0xB3	; 179
    2efa:	1f 4f       	sbci	r17, 0xFF	; 255
    2efc:	fe 01       	movw	r30, r28
    2efe:	ef 5a       	subi	r30, 0xAF	; 175
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	60 81       	ld	r22, Z
    2f04:	71 81       	ldd	r23, Z+1	; 0x01
    2f06:	82 81       	ldd	r24, Z+2	; 0x02
    2f08:	93 81       	ldd	r25, Z+3	; 0x03
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	4a ef       	ldi	r20, 0xFA	; 250
    2f10:	54 e4       	ldi	r21, 0x44	; 68
    2f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	f8 01       	movw	r30, r16
    2f1c:	80 83       	st	Z, r24
    2f1e:	91 83       	std	Z+1, r25	; 0x01
    2f20:	a2 83       	std	Z+2, r26	; 0x02
    2f22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f24:	fe 01       	movw	r30, r28
    2f26:	e3 5b       	subi	r30, 0xB3	; 179
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	60 81       	ld	r22, Z
    2f2c:	71 81       	ldd	r23, Z+1	; 0x01
    2f2e:	82 81       	ldd	r24, Z+2	; 0x02
    2f30:	93 81       	ldd	r25, Z+3	; 0x03
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 e8       	ldi	r20, 0x80	; 128
    2f38:	5f e3       	ldi	r21, 0x3F	; 63
    2f3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f3e:	88 23       	and	r24, r24
    2f40:	44 f4       	brge	.+16     	; 0x2f52 <LCD_VoidSendChar+0x176>
		__ticks = 1;
    2f42:	fe 01       	movw	r30, r28
    2f44:	e5 5b       	subi	r30, 0xB5	; 181
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	91 83       	std	Z+1, r25	; 0x01
    2f4e:	80 83       	st	Z, r24
    2f50:	64 c0       	rjmp	.+200    	; 0x301a <LCD_VoidSendChar+0x23e>
	else if (__tmp > 65535)
    2f52:	fe 01       	movw	r30, r28
    2f54:	e3 5b       	subi	r30, 0xB3	; 179
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	60 81       	ld	r22, Z
    2f5a:	71 81       	ldd	r23, Z+1	; 0x01
    2f5c:	82 81       	ldd	r24, Z+2	; 0x02
    2f5e:	93 81       	ldd	r25, Z+3	; 0x03
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	3f ef       	ldi	r19, 0xFF	; 255
    2f64:	4f e7       	ldi	r20, 0x7F	; 127
    2f66:	57 e4       	ldi	r21, 0x47	; 71
    2f68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f6c:	18 16       	cp	r1, r24
    2f6e:	0c f0       	brlt	.+2      	; 0x2f72 <LCD_VoidSendChar+0x196>
    2f70:	43 c0       	rjmp	.+134    	; 0x2ff8 <LCD_VoidSendChar+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f72:	fe 01       	movw	r30, r28
    2f74:	ef 5a       	subi	r30, 0xAF	; 175
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	60 81       	ld	r22, Z
    2f7a:	71 81       	ldd	r23, Z+1	; 0x01
    2f7c:	82 81       	ldd	r24, Z+2	; 0x02
    2f7e:	93 81       	ldd	r25, Z+3	; 0x03
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e2       	ldi	r20, 0x20	; 32
    2f86:	51 e4       	ldi	r21, 0x41	; 65
    2f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	8e 01       	movw	r16, r28
    2f92:	05 5b       	subi	r16, 0xB5	; 181
    2f94:	1f 4f       	sbci	r17, 0xFF	; 255
    2f96:	bc 01       	movw	r22, r24
    2f98:	cd 01       	movw	r24, r26
    2f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	f8 01       	movw	r30, r16
    2fa4:	91 83       	std	Z+1, r25	; 0x01
    2fa6:	80 83       	st	Z, r24
    2fa8:	1f c0       	rjmp	.+62     	; 0x2fe8 <LCD_VoidSendChar+0x20c>
    2faa:	fe 01       	movw	r30, r28
    2fac:	e7 5b       	subi	r30, 0xB7	; 183
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	88 ec       	ldi	r24, 0xC8	; 200
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	91 83       	std	Z+1, r25	; 0x01
    2fb6:	80 83       	st	Z, r24
    2fb8:	fe 01       	movw	r30, r28
    2fba:	e7 5b       	subi	r30, 0xB7	; 183
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	80 81       	ld	r24, Z
    2fc0:	91 81       	ldd	r25, Z+1	; 0x01
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	f1 f7       	brne	.-4      	; 0x2fc2 <LCD_VoidSendChar+0x1e6>
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	e7 5b       	subi	r30, 0xB7	; 183
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	91 83       	std	Z+1, r25	; 0x01
    2fce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd0:	de 01       	movw	r26, r28
    2fd2:	a5 5b       	subi	r26, 0xB5	; 181
    2fd4:	bf 4f       	sbci	r27, 0xFF	; 255
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	e5 5b       	subi	r30, 0xB5	; 181
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	80 81       	ld	r24, Z
    2fde:	91 81       	ldd	r25, Z+1	; 0x01
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	11 96       	adiw	r26, 0x01	; 1
    2fe4:	9c 93       	st	X, r25
    2fe6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e5 5b       	subi	r30, 0xB5	; 181
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	00 97       	sbiw	r24, 0x00	; 0
    2ff4:	d1 f6       	brne	.-76     	; 0x2faa <LCD_VoidSendChar+0x1ce>
    2ff6:	27 c0       	rjmp	.+78     	; 0x3046 <LCD_VoidSendChar+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff8:	8e 01       	movw	r16, r28
    2ffa:	05 5b       	subi	r16, 0xB5	; 181
    2ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ffe:	fe 01       	movw	r30, r28
    3000:	e3 5b       	subi	r30, 0xB3	; 179
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	60 81       	ld	r22, Z
    3006:	71 81       	ldd	r23, Z+1	; 0x01
    3008:	82 81       	ldd	r24, Z+2	; 0x02
    300a:	93 81       	ldd	r25, Z+3	; 0x03
    300c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	f8 01       	movw	r30, r16
    3016:	91 83       	std	Z+1, r25	; 0x01
    3018:	80 83       	st	Z, r24
    301a:	de 01       	movw	r26, r28
    301c:	a9 5b       	subi	r26, 0xB9	; 185
    301e:	bf 4f       	sbci	r27, 0xFF	; 255
    3020:	fe 01       	movw	r30, r28
    3022:	e5 5b       	subi	r30, 0xB5	; 181
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	80 81       	ld	r24, Z
    3028:	91 81       	ldd	r25, Z+1	; 0x01
    302a:	8d 93       	st	X+, r24
    302c:	9c 93       	st	X, r25
    302e:	fe 01       	movw	r30, r28
    3030:	e9 5b       	subi	r30, 0xB9	; 185
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	80 81       	ld	r24, Z
    3036:	91 81       	ldd	r25, Z+1	; 0x01
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	f1 f7       	brne	.-4      	; 0x3038 <LCD_VoidSendChar+0x25c>
    303c:	fe 01       	movw	r30, r28
    303e:	e9 5b       	subi	r30, 0xB9	; 185
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	91 83       	std	Z+1, r25	; 0x01
    3044:	80 83       	st	Z, r24
			_delay_ms(1);
			DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    3046:	fe 01       	movw	r30, r28
    3048:	ea 5a       	subi	r30, 0xAA	; 170
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	01 90       	ld	r0, Z+
    304e:	f0 81       	ld	r31, Z
    3050:	e0 2d       	mov	r30, r0
    3052:	84 81       	ldd	r24, Z+4	; 0x04
    3054:	fe 01       	movw	r30, r28
    3056:	ea 5a       	subi	r30, 0xAA	; 170
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	01 90       	ld	r0, Z+
    305c:	f0 81       	ld	r31, Z
    305e:	e0 2d       	mov	r30, r0
    3060:	95 81       	ldd	r25, Z+5	; 0x05
    3062:	69 2f       	mov	r22, r25
    3064:	40 e0       	ldi	r20, 0x00	; 0
    3066:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
    306a:	fe 01       	movw	r30, r28
    306c:	ed 5b       	subi	r30, 0xBD	; 189
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	a0 e8       	ldi	r26, 0x80	; 128
    3076:	bf e3       	ldi	r27, 0x3F	; 63
    3078:	80 83       	st	Z, r24
    307a:	91 83       	std	Z+1, r25	; 0x01
    307c:	a2 83       	std	Z+2, r26	; 0x02
    307e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3080:	8e 01       	movw	r16, r28
    3082:	01 5c       	subi	r16, 0xC1	; 193
    3084:	1f 4f       	sbci	r17, 0xFF	; 255
    3086:	fe 01       	movw	r30, r28
    3088:	ed 5b       	subi	r30, 0xBD	; 189
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	60 81       	ld	r22, Z
    308e:	71 81       	ldd	r23, Z+1	; 0x01
    3090:	82 81       	ldd	r24, Z+2	; 0x02
    3092:	93 81       	ldd	r25, Z+3	; 0x03
    3094:	20 e0       	ldi	r18, 0x00	; 0
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	4a ef       	ldi	r20, 0xFA	; 250
    309a:	54 e4       	ldi	r21, 0x44	; 68
    309c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	f8 01       	movw	r30, r16
    30a6:	80 83       	st	Z, r24
    30a8:	91 83       	std	Z+1, r25	; 0x01
    30aa:	a2 83       	std	Z+2, r26	; 0x02
    30ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30ae:	fe 01       	movw	r30, r28
    30b0:	ff 96       	adiw	r30, 0x3f	; 63
    30b2:	60 81       	ld	r22, Z
    30b4:	71 81       	ldd	r23, Z+1	; 0x01
    30b6:	82 81       	ldd	r24, Z+2	; 0x02
    30b8:	93 81       	ldd	r25, Z+3	; 0x03
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	40 e8       	ldi	r20, 0x80	; 128
    30c0:	5f e3       	ldi	r21, 0x3F	; 63
    30c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30c6:	88 23       	and	r24, r24
    30c8:	2c f4       	brge	.+10     	; 0x30d4 <LCD_VoidSendChar+0x2f8>
		__ticks = 1;
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	9e af       	std	Y+62, r25	; 0x3e
    30d0:	8d af       	std	Y+61, r24	; 0x3d
    30d2:	46 c0       	rjmp	.+140    	; 0x3160 <LCD_VoidSendChar+0x384>
	else if (__tmp > 65535)
    30d4:	fe 01       	movw	r30, r28
    30d6:	ff 96       	adiw	r30, 0x3f	; 63
    30d8:	60 81       	ld	r22, Z
    30da:	71 81       	ldd	r23, Z+1	; 0x01
    30dc:	82 81       	ldd	r24, Z+2	; 0x02
    30de:	93 81       	ldd	r25, Z+3	; 0x03
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	3f ef       	ldi	r19, 0xFF	; 255
    30e4:	4f e7       	ldi	r20, 0x7F	; 127
    30e6:	57 e4       	ldi	r21, 0x47	; 71
    30e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ec:	18 16       	cp	r1, r24
    30ee:	64 f5       	brge	.+88     	; 0x3148 <LCD_VoidSendChar+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f0:	fe 01       	movw	r30, r28
    30f2:	ed 5b       	subi	r30, 0xBD	; 189
    30f4:	ff 4f       	sbci	r31, 0xFF	; 255
    30f6:	60 81       	ld	r22, Z
    30f8:	71 81       	ldd	r23, Z+1	; 0x01
    30fa:	82 81       	ldd	r24, Z+2	; 0x02
    30fc:	93 81       	ldd	r25, Z+3	; 0x03
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	40 e2       	ldi	r20, 0x20	; 32
    3104:	51 e4       	ldi	r21, 0x41	; 65
    3106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	bc 01       	movw	r22, r24
    3110:	cd 01       	movw	r24, r26
    3112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	9e af       	std	Y+62, r25	; 0x3e
    311c:	8d af       	std	Y+61, r24	; 0x3d
    311e:	0f c0       	rjmp	.+30     	; 0x313e <LCD_VoidSendChar+0x362>
    3120:	88 ec       	ldi	r24, 0xC8	; 200
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	9c af       	std	Y+60, r25	; 0x3c
    3126:	8b af       	std	Y+59, r24	; 0x3b
    3128:	8b ad       	ldd	r24, Y+59	; 0x3b
    312a:	9c ad       	ldd	r25, Y+60	; 0x3c
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	f1 f7       	brne	.-4      	; 0x312c <LCD_VoidSendChar+0x350>
    3130:	9c af       	std	Y+60, r25	; 0x3c
    3132:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3134:	8d ad       	ldd	r24, Y+61	; 0x3d
    3136:	9e ad       	ldd	r25, Y+62	; 0x3e
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	9e af       	std	Y+62, r25	; 0x3e
    313c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3140:	9e ad       	ldd	r25, Y+62	; 0x3e
    3142:	00 97       	sbiw	r24, 0x00	; 0
    3144:	69 f7       	brne	.-38     	; 0x3120 <LCD_VoidSendChar+0x344>
    3146:	16 c0       	rjmp	.+44     	; 0x3174 <LCD_VoidSendChar+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3148:	fe 01       	movw	r30, r28
    314a:	ff 96       	adiw	r30, 0x3f	; 63
    314c:	60 81       	ld	r22, Z
    314e:	71 81       	ldd	r23, Z+1	; 0x01
    3150:	82 81       	ldd	r24, Z+2	; 0x02
    3152:	93 81       	ldd	r25, Z+3	; 0x03
    3154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	9e af       	std	Y+62, r25	; 0x3e
    315e:	8d af       	std	Y+61, r24	; 0x3d
    3160:	8d ad       	ldd	r24, Y+61	; 0x3d
    3162:	9e ad       	ldd	r25, Y+62	; 0x3e
    3164:	9a af       	std	Y+58, r25	; 0x3a
    3166:	89 af       	std	Y+57, r24	; 0x39
    3168:	89 ad       	ldd	r24, Y+57	; 0x39
    316a:	9a ad       	ldd	r25, Y+58	; 0x3a
    316c:	01 97       	sbiw	r24, 0x01	; 1
    316e:	f1 f7       	brne	.-4      	; 0x316c <LCD_VoidSendChar+0x390>
    3170:	9a af       	std	Y+58, r25	; 0x3a
    3172:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1);
			SwitchingCounter++;
    3174:	80 91 9e 01 	lds	r24, 0x019E
    3178:	8f 5f       	subi	r24, 0xFF	; 255
    317a:	80 93 9e 01 	sts	0x019E, r24
			FirstLineCounter++;
    317e:	80 91 9c 01 	lds	r24, 0x019C
    3182:	8f 5f       	subi	r24, 0xFF	; 255
    3184:	80 93 9c 01 	sts	0x019C, r24
    3188:	c8 c2       	rjmp	.+1424   	; 0x371a <LCD_VoidSendChar+0x93e>
		}
		else if(SwitchingCounter>15&&SwitchingCounter<32){
    318a:	80 91 9e 01 	lds	r24, 0x019E
    318e:	80 31       	cpi	r24, 0x10	; 16
    3190:	08 f4       	brcc	.+2      	; 0x3194 <LCD_VoidSendChar+0x3b8>
    3192:	54 c1       	rjmp	.+680    	; 0x343c <LCD_VoidSendChar+0x660>
    3194:	80 91 9e 01 	lds	r24, 0x019E
    3198:	80 32       	cpi	r24, 0x20	; 32
    319a:	08 f0       	brcs	.+2      	; 0x319e <LCD_VoidSendChar+0x3c2>
    319c:	4f c1       	rjmp	.+670    	; 0x343c <LCD_VoidSendChar+0x660>
			LCD_VoidGoToXY(SecondLineCounter,1,lcd);
    319e:	80 91 9d 01 	lds	r24, 0x019D
    31a2:	fe 01       	movw	r30, r28
    31a4:	ea 5a       	subi	r30, 0xAA	; 170
    31a6:	ff 4f       	sbci	r31, 0xFF	; 255
    31a8:	20 81       	ld	r18, Z
    31aa:	31 81       	ldd	r19, Z+1	; 0x01
    31ac:	61 e0       	ldi	r22, 0x01	; 1
    31ae:	a9 01       	movw	r20, r18
    31b0:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <LCD_VoidGoToXY>
			/*RS->LOw*/
			DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    31b4:	fe 01       	movw	r30, r28
    31b6:	ea 5a       	subi	r30, 0xAA	; 170
    31b8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ba:	01 90       	ld	r0, Z+
    31bc:	f0 81       	ld	r31, Z
    31be:	e0 2d       	mov	r30, r0
    31c0:	80 81       	ld	r24, Z
    31c2:	fe 01       	movw	r30, r28
    31c4:	ea 5a       	subi	r30, 0xAA	; 170
    31c6:	ff 4f       	sbci	r31, 0xFF	; 255
    31c8:	01 90       	ld	r0, Z+
    31ca:	f0 81       	ld	r31, Z
    31cc:	e0 2d       	mov	r30, r0
    31ce:	91 81       	ldd	r25, Z+1	; 0x01
    31d0:	69 2f       	mov	r22, r25
    31d2:	41 e0       	ldi	r20, 0x01	; 1
    31d4:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
			/*RW-> LOW*/
			DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    31d8:	fe 01       	movw	r30, r28
    31da:	ea 5a       	subi	r30, 0xAA	; 170
    31dc:	ff 4f       	sbci	r31, 0xFF	; 255
    31de:	01 90       	ld	r0, Z+
    31e0:	f0 81       	ld	r31, Z
    31e2:	e0 2d       	mov	r30, r0
    31e4:	82 81       	ldd	r24, Z+2	; 0x02
    31e6:	fe 01       	movw	r30, r28
    31e8:	ea 5a       	subi	r30, 0xAA	; 170
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	01 90       	ld	r0, Z+
    31ee:	f0 81       	ld	r31, Z
    31f0:	e0 2d       	mov	r30, r0
    31f2:	93 81       	ldd	r25, Z+3	; 0x03
    31f4:	69 2f       	mov	r22, r25
    31f6:	40 e0       	ldi	r20, 0x00	; 0
    31f8:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
			/*Group = Command*/
			DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    31fc:	fe 01       	movw	r30, r28
    31fe:	ea 5a       	subi	r30, 0xAA	; 170
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	01 90       	ld	r0, Z+
    3204:	f0 81       	ld	r31, Z
    3206:	e0 2d       	mov	r30, r0
    3208:	86 81       	ldd	r24, Z+6	; 0x06
    320a:	fe 01       	movw	r30, r28
    320c:	eb 5a       	subi	r30, 0xAB	; 171
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	60 81       	ld	r22, Z
    3212:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <DIO_ErrStateSetPortValue>
			/*Enable*/
			DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    3216:	fe 01       	movw	r30, r28
    3218:	ea 5a       	subi	r30, 0xAA	; 170
    321a:	ff 4f       	sbci	r31, 0xFF	; 255
    321c:	01 90       	ld	r0, Z+
    321e:	f0 81       	ld	r31, Z
    3220:	e0 2d       	mov	r30, r0
    3222:	84 81       	ldd	r24, Z+4	; 0x04
    3224:	fe 01       	movw	r30, r28
    3226:	ea 5a       	subi	r30, 0xAA	; 170
    3228:	ff 4f       	sbci	r31, 0xFF	; 255
    322a:	01 90       	ld	r0, Z+
    322c:	f0 81       	ld	r31, Z
    322e:	e0 2d       	mov	r30, r0
    3230:	95 81       	ldd	r25, Z+5	; 0x05
    3232:	69 2f       	mov	r22, r25
    3234:	41 e0       	ldi	r20, 0x01	; 1
    3236:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	a0 e8       	ldi	r26, 0x80	; 128
    3240:	bf e3       	ldi	r27, 0x3F	; 63
    3242:	8d ab       	std	Y+53, r24	; 0x35
    3244:	9e ab       	std	Y+54, r25	; 0x36
    3246:	af ab       	std	Y+55, r26	; 0x37
    3248:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    324a:	6d a9       	ldd	r22, Y+53	; 0x35
    324c:	7e a9       	ldd	r23, Y+54	; 0x36
    324e:	8f a9       	ldd	r24, Y+55	; 0x37
    3250:	98 ad       	ldd	r25, Y+56	; 0x38
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	4a ef       	ldi	r20, 0xFA	; 250
    3258:	54 e4       	ldi	r21, 0x44	; 68
    325a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	89 ab       	std	Y+49, r24	; 0x31
    3264:	9a ab       	std	Y+50, r25	; 0x32
    3266:	ab ab       	std	Y+51, r26	; 0x33
    3268:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    326a:	69 a9       	ldd	r22, Y+49	; 0x31
    326c:	7a a9       	ldd	r23, Y+50	; 0x32
    326e:	8b a9       	ldd	r24, Y+51	; 0x33
    3270:	9c a9       	ldd	r25, Y+52	; 0x34
    3272:	20 e0       	ldi	r18, 0x00	; 0
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	40 e8       	ldi	r20, 0x80	; 128
    3278:	5f e3       	ldi	r21, 0x3F	; 63
    327a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    327e:	88 23       	and	r24, r24
    3280:	2c f4       	brge	.+10     	; 0x328c <LCD_VoidSendChar+0x4b0>
		__ticks = 1;
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	98 ab       	std	Y+48, r25	; 0x30
    3288:	8f a7       	std	Y+47, r24	; 0x2f
    328a:	3f c0       	rjmp	.+126    	; 0x330a <LCD_VoidSendChar+0x52e>
	else if (__tmp > 65535)
    328c:	69 a9       	ldd	r22, Y+49	; 0x31
    328e:	7a a9       	ldd	r23, Y+50	; 0x32
    3290:	8b a9       	ldd	r24, Y+51	; 0x33
    3292:	9c a9       	ldd	r25, Y+52	; 0x34
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	3f ef       	ldi	r19, 0xFF	; 255
    3298:	4f e7       	ldi	r20, 0x7F	; 127
    329a:	57 e4       	ldi	r21, 0x47	; 71
    329c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32a0:	18 16       	cp	r1, r24
    32a2:	4c f5       	brge	.+82     	; 0x32f6 <LCD_VoidSendChar+0x51a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a4:	6d a9       	ldd	r22, Y+53	; 0x35
    32a6:	7e a9       	ldd	r23, Y+54	; 0x36
    32a8:	8f a9       	ldd	r24, Y+55	; 0x37
    32aa:	98 ad       	ldd	r25, Y+56	; 0x38
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	40 e2       	ldi	r20, 0x20	; 32
    32b2:	51 e4       	ldi	r21, 0x41	; 65
    32b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	bc 01       	movw	r22, r24
    32be:	cd 01       	movw	r24, r26
    32c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	98 ab       	std	Y+48, r25	; 0x30
    32ca:	8f a7       	std	Y+47, r24	; 0x2f
    32cc:	0f c0       	rjmp	.+30     	; 0x32ec <LCD_VoidSendChar+0x510>
    32ce:	88 ec       	ldi	r24, 0xC8	; 200
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	9e a7       	std	Y+46, r25	; 0x2e
    32d4:	8d a7       	std	Y+45, r24	; 0x2d
    32d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    32d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	f1 f7       	brne	.-4      	; 0x32da <LCD_VoidSendChar+0x4fe>
    32de:	9e a7       	std	Y+46, r25	; 0x2e
    32e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    32e4:	98 a9       	ldd	r25, Y+48	; 0x30
    32e6:	01 97       	sbiw	r24, 0x01	; 1
    32e8:	98 ab       	std	Y+48, r25	; 0x30
    32ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ee:	98 a9       	ldd	r25, Y+48	; 0x30
    32f0:	00 97       	sbiw	r24, 0x00	; 0
    32f2:	69 f7       	brne	.-38     	; 0x32ce <LCD_VoidSendChar+0x4f2>
    32f4:	14 c0       	rjmp	.+40     	; 0x331e <LCD_VoidSendChar+0x542>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f6:	69 a9       	ldd	r22, Y+49	; 0x31
    32f8:	7a a9       	ldd	r23, Y+50	; 0x32
    32fa:	8b a9       	ldd	r24, Y+51	; 0x33
    32fc:	9c a9       	ldd	r25, Y+52	; 0x34
    32fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	98 ab       	std	Y+48, r25	; 0x30
    3308:	8f a7       	std	Y+47, r24	; 0x2f
    330a:	8f a5       	ldd	r24, Y+47	; 0x2f
    330c:	98 a9       	ldd	r25, Y+48	; 0x30
    330e:	9c a7       	std	Y+44, r25	; 0x2c
    3310:	8b a7       	std	Y+43, r24	; 0x2b
    3312:	8b a5       	ldd	r24, Y+43	; 0x2b
    3314:	9c a5       	ldd	r25, Y+44	; 0x2c
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	f1 f7       	brne	.-4      	; 0x3316 <LCD_VoidSendChar+0x53a>
    331a:	9c a7       	std	Y+44, r25	; 0x2c
    331c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    331e:	fe 01       	movw	r30, r28
    3320:	ea 5a       	subi	r30, 0xAA	; 170
    3322:	ff 4f       	sbci	r31, 0xFF	; 255
    3324:	01 90       	ld	r0, Z+
    3326:	f0 81       	ld	r31, Z
    3328:	e0 2d       	mov	r30, r0
    332a:	84 81       	ldd	r24, Z+4	; 0x04
    332c:	fe 01       	movw	r30, r28
    332e:	ea 5a       	subi	r30, 0xAA	; 170
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	01 90       	ld	r0, Z+
    3334:	f0 81       	ld	r31, Z
    3336:	e0 2d       	mov	r30, r0
    3338:	95 81       	ldd	r25, Z+5	; 0x05
    333a:	69 2f       	mov	r22, r25
    333c:	40 e0       	ldi	r20, 0x00	; 0
    333e:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
    3342:	80 e0       	ldi	r24, 0x00	; 0
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	a0 e8       	ldi	r26, 0x80	; 128
    3348:	bf e3       	ldi	r27, 0x3F	; 63
    334a:	8f a3       	std	Y+39, r24	; 0x27
    334c:	98 a7       	std	Y+40, r25	; 0x28
    334e:	a9 a7       	std	Y+41, r26	; 0x29
    3350:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3352:	6f a1       	ldd	r22, Y+39	; 0x27
    3354:	78 a5       	ldd	r23, Y+40	; 0x28
    3356:	89 a5       	ldd	r24, Y+41	; 0x29
    3358:	9a a5       	ldd	r25, Y+42	; 0x2a
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	4a ef       	ldi	r20, 0xFA	; 250
    3360:	54 e4       	ldi	r21, 0x44	; 68
    3362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	8b a3       	std	Y+35, r24	; 0x23
    336c:	9c a3       	std	Y+36, r25	; 0x24
    336e:	ad a3       	std	Y+37, r26	; 0x25
    3370:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3372:	6b a1       	ldd	r22, Y+35	; 0x23
    3374:	7c a1       	ldd	r23, Y+36	; 0x24
    3376:	8d a1       	ldd	r24, Y+37	; 0x25
    3378:	9e a1       	ldd	r25, Y+38	; 0x26
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	40 e8       	ldi	r20, 0x80	; 128
    3380:	5f e3       	ldi	r21, 0x3F	; 63
    3382:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3386:	88 23       	and	r24, r24
    3388:	2c f4       	brge	.+10     	; 0x3394 <LCD_VoidSendChar+0x5b8>
		__ticks = 1;
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	9a a3       	std	Y+34, r25	; 0x22
    3390:	89 a3       	std	Y+33, r24	; 0x21
    3392:	3f c0       	rjmp	.+126    	; 0x3412 <LCD_VoidSendChar+0x636>
	else if (__tmp > 65535)
    3394:	6b a1       	ldd	r22, Y+35	; 0x23
    3396:	7c a1       	ldd	r23, Y+36	; 0x24
    3398:	8d a1       	ldd	r24, Y+37	; 0x25
    339a:	9e a1       	ldd	r25, Y+38	; 0x26
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	3f ef       	ldi	r19, 0xFF	; 255
    33a0:	4f e7       	ldi	r20, 0x7F	; 127
    33a2:	57 e4       	ldi	r21, 0x47	; 71
    33a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33a8:	18 16       	cp	r1, r24
    33aa:	4c f5       	brge	.+82     	; 0x33fe <LCD_VoidSendChar+0x622>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ac:	6f a1       	ldd	r22, Y+39	; 0x27
    33ae:	78 a5       	ldd	r23, Y+40	; 0x28
    33b0:	89 a5       	ldd	r24, Y+41	; 0x29
    33b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	40 e2       	ldi	r20, 0x20	; 32
    33ba:	51 e4       	ldi	r21, 0x41	; 65
    33bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	bc 01       	movw	r22, r24
    33c6:	cd 01       	movw	r24, r26
    33c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	9a a3       	std	Y+34, r25	; 0x22
    33d2:	89 a3       	std	Y+33, r24	; 0x21
    33d4:	0f c0       	rjmp	.+30     	; 0x33f4 <LCD_VoidSendChar+0x618>
    33d6:	88 ec       	ldi	r24, 0xC8	; 200
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	98 a3       	std	Y+32, r25	; 0x20
    33dc:	8f 8f       	std	Y+31, r24	; 0x1f
    33de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33e0:	98 a1       	ldd	r25, Y+32	; 0x20
    33e2:	01 97       	sbiw	r24, 0x01	; 1
    33e4:	f1 f7       	brne	.-4      	; 0x33e2 <LCD_VoidSendChar+0x606>
    33e6:	98 a3       	std	Y+32, r25	; 0x20
    33e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ea:	89 a1       	ldd	r24, Y+33	; 0x21
    33ec:	9a a1       	ldd	r25, Y+34	; 0x22
    33ee:	01 97       	sbiw	r24, 0x01	; 1
    33f0:	9a a3       	std	Y+34, r25	; 0x22
    33f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33f4:	89 a1       	ldd	r24, Y+33	; 0x21
    33f6:	9a a1       	ldd	r25, Y+34	; 0x22
    33f8:	00 97       	sbiw	r24, 0x00	; 0
    33fa:	69 f7       	brne	.-38     	; 0x33d6 <LCD_VoidSendChar+0x5fa>
    33fc:	14 c0       	rjmp	.+40     	; 0x3426 <LCD_VoidSendChar+0x64a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3400:	7c a1       	ldd	r23, Y+36	; 0x24
    3402:	8d a1       	ldd	r24, Y+37	; 0x25
    3404:	9e a1       	ldd	r25, Y+38	; 0x26
    3406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	9a a3       	std	Y+34, r25	; 0x22
    3410:	89 a3       	std	Y+33, r24	; 0x21
    3412:	89 a1       	ldd	r24, Y+33	; 0x21
    3414:	9a a1       	ldd	r25, Y+34	; 0x22
    3416:	9e 8f       	std	Y+30, r25	; 0x1e
    3418:	8d 8f       	std	Y+29, r24	; 0x1d
    341a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    341c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    341e:	01 97       	sbiw	r24, 0x01	; 1
    3420:	f1 f7       	brne	.-4      	; 0x341e <LCD_VoidSendChar+0x642>
    3422:	9e 8f       	std	Y+30, r25	; 0x1e
    3424:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
			SwitchingCounter++;
    3426:	80 91 9e 01 	lds	r24, 0x019E
    342a:	8f 5f       	subi	r24, 0xFF	; 255
    342c:	80 93 9e 01 	sts	0x019E, r24
			SecondLineCounter++;
    3430:	80 91 9d 01 	lds	r24, 0x019D
    3434:	8f 5f       	subi	r24, 0xFF	; 255
    3436:	80 93 9d 01 	sts	0x019D, r24
    343a:	6f c1       	rjmp	.+734    	; 0x371a <LCD_VoidSendChar+0x93e>
		}
		else{
			SwitchingCounter=0;
    343c:	10 92 9e 01 	sts	0x019E, r1
			FirstLineCounter=0;
    3440:	10 92 9c 01 	sts	0x019C, r1
			SecondLineCounter=0;
    3444:	10 92 9d 01 	sts	0x019D, r1
    3448:	68 c1       	rjmp	.+720    	; 0x371a <LCD_VoidSendChar+0x93e>
			//LCD_VoidSendCommand(0x01,lcd);
		}
	}
	else if(Type->OneLine==YES&&Type->TwoLines==NO){
    344a:	fe 01       	movw	r30, r28
    344c:	e8 5a       	subi	r30, 0xA8	; 168
    344e:	ff 4f       	sbci	r31, 0xFF	; 255
    3450:	01 90       	ld	r0, Z+
    3452:	f0 81       	ld	r31, Z
    3454:	e0 2d       	mov	r30, r0
    3456:	80 81       	ld	r24, Z
    3458:	81 30       	cpi	r24, 0x01	; 1
    345a:	09 f0       	breq	.+2      	; 0x345e <LCD_VoidSendChar+0x682>
    345c:	5e c1       	rjmp	.+700    	; 0x371a <LCD_VoidSendChar+0x93e>
    345e:	fe 01       	movw	r30, r28
    3460:	e8 5a       	subi	r30, 0xA8	; 168
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	01 90       	ld	r0, Z+
    3466:	f0 81       	ld	r31, Z
    3468:	e0 2d       	mov	r30, r0
    346a:	81 81       	ldd	r24, Z+1	; 0x01
    346c:	88 23       	and	r24, r24
    346e:	09 f0       	breq	.+2      	; 0x3472 <LCD_VoidSendChar+0x696>
    3470:	54 c1       	rjmp	.+680    	; 0x371a <LCD_VoidSendChar+0x93e>
			if(SwitchingCounter<16&&Local_Char!='\0'){
    3472:	80 91 9e 01 	lds	r24, 0x019E
    3476:	80 31       	cpi	r24, 0x10	; 16
    3478:	08 f0       	brcs	.+2      	; 0x347c <LCD_VoidSendChar+0x6a0>
    347a:	4b c1       	rjmp	.+662    	; 0x3712 <LCD_VoidSendChar+0x936>
    347c:	fe 01       	movw	r30, r28
    347e:	eb 5a       	subi	r30, 0xAB	; 171
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	80 81       	ld	r24, Z
    3484:	88 23       	and	r24, r24
    3486:	09 f4       	brne	.+2      	; 0x348a <LCD_VoidSendChar+0x6ae>
    3488:	44 c1       	rjmp	.+648    	; 0x3712 <LCD_VoidSendChar+0x936>
				//LCD_VoidGoToXY(0,0,lcd);
				/*RS->LOw*/
				DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    348a:	fe 01       	movw	r30, r28
    348c:	ea 5a       	subi	r30, 0xAA	; 170
    348e:	ff 4f       	sbci	r31, 0xFF	; 255
    3490:	01 90       	ld	r0, Z+
    3492:	f0 81       	ld	r31, Z
    3494:	e0 2d       	mov	r30, r0
    3496:	80 81       	ld	r24, Z
    3498:	fe 01       	movw	r30, r28
    349a:	ea 5a       	subi	r30, 0xAA	; 170
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	01 90       	ld	r0, Z+
    34a0:	f0 81       	ld	r31, Z
    34a2:	e0 2d       	mov	r30, r0
    34a4:	91 81       	ldd	r25, Z+1	; 0x01
    34a6:	69 2f       	mov	r22, r25
    34a8:	41 e0       	ldi	r20, 0x01	; 1
    34aa:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
				/*RW-> LOW*/
				DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    34ae:	fe 01       	movw	r30, r28
    34b0:	ea 5a       	subi	r30, 0xAA	; 170
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	01 90       	ld	r0, Z+
    34b6:	f0 81       	ld	r31, Z
    34b8:	e0 2d       	mov	r30, r0
    34ba:	82 81       	ldd	r24, Z+2	; 0x02
    34bc:	fe 01       	movw	r30, r28
    34be:	ea 5a       	subi	r30, 0xAA	; 170
    34c0:	ff 4f       	sbci	r31, 0xFF	; 255
    34c2:	01 90       	ld	r0, Z+
    34c4:	f0 81       	ld	r31, Z
    34c6:	e0 2d       	mov	r30, r0
    34c8:	93 81       	ldd	r25, Z+3	; 0x03
    34ca:	69 2f       	mov	r22, r25
    34cc:	40 e0       	ldi	r20, 0x00	; 0
    34ce:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
				/*Group = Command*/
				DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    34d2:	fe 01       	movw	r30, r28
    34d4:	ea 5a       	subi	r30, 0xAA	; 170
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	01 90       	ld	r0, Z+
    34da:	f0 81       	ld	r31, Z
    34dc:	e0 2d       	mov	r30, r0
    34de:	86 81       	ldd	r24, Z+6	; 0x06
    34e0:	fe 01       	movw	r30, r28
    34e2:	eb 5a       	subi	r30, 0xAB	; 171
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	60 81       	ld	r22, Z
    34e8:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <DIO_ErrStateSetPortValue>
				/*Enable*/
				DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    34ec:	fe 01       	movw	r30, r28
    34ee:	ea 5a       	subi	r30, 0xAA	; 170
    34f0:	ff 4f       	sbci	r31, 0xFF	; 255
    34f2:	01 90       	ld	r0, Z+
    34f4:	f0 81       	ld	r31, Z
    34f6:	e0 2d       	mov	r30, r0
    34f8:	84 81       	ldd	r24, Z+4	; 0x04
    34fa:	fe 01       	movw	r30, r28
    34fc:	ea 5a       	subi	r30, 0xAA	; 170
    34fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3500:	01 90       	ld	r0, Z+
    3502:	f0 81       	ld	r31, Z
    3504:	e0 2d       	mov	r30, r0
    3506:	95 81       	ldd	r25, Z+5	; 0x05
    3508:	69 2f       	mov	r22, r25
    350a:	41 e0       	ldi	r20, 0x01	; 1
    350c:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	a0 e8       	ldi	r26, 0x80	; 128
    3516:	bf e3       	ldi	r27, 0x3F	; 63
    3518:	89 8f       	std	Y+25, r24	; 0x19
    351a:	9a 8f       	std	Y+26, r25	; 0x1a
    351c:	ab 8f       	std	Y+27, r26	; 0x1b
    351e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3520:	69 8d       	ldd	r22, Y+25	; 0x19
    3522:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3524:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3526:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	4a ef       	ldi	r20, 0xFA	; 250
    352e:	54 e4       	ldi	r21, 0x44	; 68
    3530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	8d 8b       	std	Y+21, r24	; 0x15
    353a:	9e 8b       	std	Y+22, r25	; 0x16
    353c:	af 8b       	std	Y+23, r26	; 0x17
    353e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3540:	6d 89       	ldd	r22, Y+21	; 0x15
    3542:	7e 89       	ldd	r23, Y+22	; 0x16
    3544:	8f 89       	ldd	r24, Y+23	; 0x17
    3546:	98 8d       	ldd	r25, Y+24	; 0x18
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	40 e8       	ldi	r20, 0x80	; 128
    354e:	5f e3       	ldi	r21, 0x3F	; 63
    3550:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3554:	88 23       	and	r24, r24
    3556:	2c f4       	brge	.+10     	; 0x3562 <LCD_VoidSendChar+0x786>
		__ticks = 1;
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	9c 8b       	std	Y+20, r25	; 0x14
    355e:	8b 8b       	std	Y+19, r24	; 0x13
    3560:	3f c0       	rjmp	.+126    	; 0x35e0 <LCD_VoidSendChar+0x804>
	else if (__tmp > 65535)
    3562:	6d 89       	ldd	r22, Y+21	; 0x15
    3564:	7e 89       	ldd	r23, Y+22	; 0x16
    3566:	8f 89       	ldd	r24, Y+23	; 0x17
    3568:	98 8d       	ldd	r25, Y+24	; 0x18
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	3f ef       	ldi	r19, 0xFF	; 255
    356e:	4f e7       	ldi	r20, 0x7F	; 127
    3570:	57 e4       	ldi	r21, 0x47	; 71
    3572:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3576:	18 16       	cp	r1, r24
    3578:	4c f5       	brge	.+82     	; 0x35cc <LCD_VoidSendChar+0x7f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    357a:	69 8d       	ldd	r22, Y+25	; 0x19
    357c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    357e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3580:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	40 e2       	ldi	r20, 0x20	; 32
    3588:	51 e4       	ldi	r21, 0x41	; 65
    358a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    358e:	dc 01       	movw	r26, r24
    3590:	cb 01       	movw	r24, r22
    3592:	bc 01       	movw	r22, r24
    3594:	cd 01       	movw	r24, r26
    3596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359a:	dc 01       	movw	r26, r24
    359c:	cb 01       	movw	r24, r22
    359e:	9c 8b       	std	Y+20, r25	; 0x14
    35a0:	8b 8b       	std	Y+19, r24	; 0x13
    35a2:	0f c0       	rjmp	.+30     	; 0x35c2 <LCD_VoidSendChar+0x7e6>
    35a4:	88 ec       	ldi	r24, 0xC8	; 200
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	9a 8b       	std	Y+18, r25	; 0x12
    35aa:	89 8b       	std	Y+17, r24	; 0x11
    35ac:	89 89       	ldd	r24, Y+17	; 0x11
    35ae:	9a 89       	ldd	r25, Y+18	; 0x12
    35b0:	01 97       	sbiw	r24, 0x01	; 1
    35b2:	f1 f7       	brne	.-4      	; 0x35b0 <LCD_VoidSendChar+0x7d4>
    35b4:	9a 8b       	std	Y+18, r25	; 0x12
    35b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35b8:	8b 89       	ldd	r24, Y+19	; 0x13
    35ba:	9c 89       	ldd	r25, Y+20	; 0x14
    35bc:	01 97       	sbiw	r24, 0x01	; 1
    35be:	9c 8b       	std	Y+20, r25	; 0x14
    35c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c2:	8b 89       	ldd	r24, Y+19	; 0x13
    35c4:	9c 89       	ldd	r25, Y+20	; 0x14
    35c6:	00 97       	sbiw	r24, 0x00	; 0
    35c8:	69 f7       	brne	.-38     	; 0x35a4 <LCD_VoidSendChar+0x7c8>
    35ca:	14 c0       	rjmp	.+40     	; 0x35f4 <LCD_VoidSendChar+0x818>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35cc:	6d 89       	ldd	r22, Y+21	; 0x15
    35ce:	7e 89       	ldd	r23, Y+22	; 0x16
    35d0:	8f 89       	ldd	r24, Y+23	; 0x17
    35d2:	98 8d       	ldd	r25, Y+24	; 0x18
    35d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	9c 8b       	std	Y+20, r25	; 0x14
    35de:	8b 8b       	std	Y+19, r24	; 0x13
    35e0:	8b 89       	ldd	r24, Y+19	; 0x13
    35e2:	9c 89       	ldd	r25, Y+20	; 0x14
    35e4:	98 8b       	std	Y+16, r25	; 0x10
    35e6:	8f 87       	std	Y+15, r24	; 0x0f
    35e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ea:	98 89       	ldd	r25, Y+16	; 0x10
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	f1 f7       	brne	.-4      	; 0x35ec <LCD_VoidSendChar+0x810>
    35f0:	98 8b       	std	Y+16, r25	; 0x10
    35f2:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1);
				DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    35f4:	fe 01       	movw	r30, r28
    35f6:	ea 5a       	subi	r30, 0xAA	; 170
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	01 90       	ld	r0, Z+
    35fc:	f0 81       	ld	r31, Z
    35fe:	e0 2d       	mov	r30, r0
    3600:	84 81       	ldd	r24, Z+4	; 0x04
    3602:	fe 01       	movw	r30, r28
    3604:	ea 5a       	subi	r30, 0xAA	; 170
    3606:	ff 4f       	sbci	r31, 0xFF	; 255
    3608:	01 90       	ld	r0, Z+
    360a:	f0 81       	ld	r31, Z
    360c:	e0 2d       	mov	r30, r0
    360e:	95 81       	ldd	r25, Z+5	; 0x05
    3610:	69 2f       	mov	r22, r25
    3612:	40 e0       	ldi	r20, 0x00	; 0
    3614:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	a0 e8       	ldi	r26, 0x80	; 128
    361e:	bf e3       	ldi	r27, 0x3F	; 63
    3620:	8b 87       	std	Y+11, r24	; 0x0b
    3622:	9c 87       	std	Y+12, r25	; 0x0c
    3624:	ad 87       	std	Y+13, r26	; 0x0d
    3626:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3628:	6b 85       	ldd	r22, Y+11	; 0x0b
    362a:	7c 85       	ldd	r23, Y+12	; 0x0c
    362c:	8d 85       	ldd	r24, Y+13	; 0x0d
    362e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3630:	20 e0       	ldi	r18, 0x00	; 0
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	4a ef       	ldi	r20, 0xFA	; 250
    3636:	54 e4       	ldi	r21, 0x44	; 68
    3638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	8f 83       	std	Y+7, r24	; 0x07
    3642:	98 87       	std	Y+8, r25	; 0x08
    3644:	a9 87       	std	Y+9, r26	; 0x09
    3646:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3648:	6f 81       	ldd	r22, Y+7	; 0x07
    364a:	78 85       	ldd	r23, Y+8	; 0x08
    364c:	89 85       	ldd	r24, Y+9	; 0x09
    364e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	40 e8       	ldi	r20, 0x80	; 128
    3656:	5f e3       	ldi	r21, 0x3F	; 63
    3658:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    365c:	88 23       	and	r24, r24
    365e:	2c f4       	brge	.+10     	; 0x366a <LCD_VoidSendChar+0x88e>
		__ticks = 1;
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	9e 83       	std	Y+6, r25	; 0x06
    3666:	8d 83       	std	Y+5, r24	; 0x05
    3668:	3f c0       	rjmp	.+126    	; 0x36e8 <LCD_VoidSendChar+0x90c>
	else if (__tmp > 65535)
    366a:	6f 81       	ldd	r22, Y+7	; 0x07
    366c:	78 85       	ldd	r23, Y+8	; 0x08
    366e:	89 85       	ldd	r24, Y+9	; 0x09
    3670:	9a 85       	ldd	r25, Y+10	; 0x0a
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	3f ef       	ldi	r19, 0xFF	; 255
    3676:	4f e7       	ldi	r20, 0x7F	; 127
    3678:	57 e4       	ldi	r21, 0x47	; 71
    367a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    367e:	18 16       	cp	r1, r24
    3680:	4c f5       	brge	.+82     	; 0x36d4 <LCD_VoidSendChar+0x8f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3682:	6b 85       	ldd	r22, Y+11	; 0x0b
    3684:	7c 85       	ldd	r23, Y+12	; 0x0c
    3686:	8d 85       	ldd	r24, Y+13	; 0x0d
    3688:	9e 85       	ldd	r25, Y+14	; 0x0e
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	40 e2       	ldi	r20, 0x20	; 32
    3690:	51 e4       	ldi	r21, 0x41	; 65
    3692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	bc 01       	movw	r22, r24
    369c:	cd 01       	movw	r24, r26
    369e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	9e 83       	std	Y+6, r25	; 0x06
    36a8:	8d 83       	std	Y+5, r24	; 0x05
    36aa:	0f c0       	rjmp	.+30     	; 0x36ca <LCD_VoidSendChar+0x8ee>
    36ac:	88 ec       	ldi	r24, 0xC8	; 200
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	9c 83       	std	Y+4, r25	; 0x04
    36b2:	8b 83       	std	Y+3, r24	; 0x03
    36b4:	8b 81       	ldd	r24, Y+3	; 0x03
    36b6:	9c 81       	ldd	r25, Y+4	; 0x04
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	f1 f7       	brne	.-4      	; 0x36b8 <LCD_VoidSendChar+0x8dc>
    36bc:	9c 83       	std	Y+4, r25	; 0x04
    36be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c0:	8d 81       	ldd	r24, Y+5	; 0x05
    36c2:	9e 81       	ldd	r25, Y+6	; 0x06
    36c4:	01 97       	sbiw	r24, 0x01	; 1
    36c6:	9e 83       	std	Y+6, r25	; 0x06
    36c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ca:	8d 81       	ldd	r24, Y+5	; 0x05
    36cc:	9e 81       	ldd	r25, Y+6	; 0x06
    36ce:	00 97       	sbiw	r24, 0x00	; 0
    36d0:	69 f7       	brne	.-38     	; 0x36ac <LCD_VoidSendChar+0x8d0>
    36d2:	14 c0       	rjmp	.+40     	; 0x36fc <LCD_VoidSendChar+0x920>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d4:	6f 81       	ldd	r22, Y+7	; 0x07
    36d6:	78 85       	ldd	r23, Y+8	; 0x08
    36d8:	89 85       	ldd	r24, Y+9	; 0x09
    36da:	9a 85       	ldd	r25, Y+10	; 0x0a
    36dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	9e 83       	std	Y+6, r25	; 0x06
    36e6:	8d 83       	std	Y+5, r24	; 0x05
    36e8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ea:	9e 81       	ldd	r25, Y+6	; 0x06
    36ec:	9a 83       	std	Y+2, r25	; 0x02
    36ee:	89 83       	std	Y+1, r24	; 0x01
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	9a 81       	ldd	r25, Y+2	; 0x02
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	f1 f7       	brne	.-4      	; 0x36f4 <LCD_VoidSendChar+0x918>
    36f8:	9a 83       	std	Y+2, r25	; 0x02
    36fa:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1);
				SwitchingCounter++;
    36fc:	80 91 9e 01 	lds	r24, 0x019E
    3700:	8f 5f       	subi	r24, 0xFF	; 255
    3702:	80 93 9e 01 	sts	0x019E, r24
				FirstLineCounter++;
    3706:	80 91 9c 01 	lds	r24, 0x019C
    370a:	8f 5f       	subi	r24, 0xFF	; 255
    370c:	80 93 9c 01 	sts	0x019C, r24
    3710:	04 c0       	rjmp	.+8      	; 0x371a <LCD_VoidSendChar+0x93e>
			}
			else{
				FirstLineCounter=0;
    3712:	10 92 9c 01 	sts	0x019C, r1
				SwitchingCounter=0;
    3716:	10 92 9e 01 	sts	0x019E, r1
				//LCD_VoidSendCommand(0x01,lcd);
			}
		}
	return 0;
    371a:	80 e0       	ldi	r24, 0x00	; 0

}
    371c:	c7 5a       	subi	r28, 0xA7	; 167
    371e:	df 4f       	sbci	r29, 0xFF	; 255
    3720:	0f b6       	in	r0, 0x3f	; 63
    3722:	f8 94       	cli
    3724:	de bf       	out	0x3e, r29	; 62
    3726:	0f be       	out	0x3f, r0	; 63
    3728:	cd bf       	out	0x3d, r28	; 61
    372a:	cf 91       	pop	r28
    372c:	df 91       	pop	r29
    372e:	1f 91       	pop	r17
    3730:	0f 91       	pop	r16
    3732:	08 95       	ret

00003734 <LCD_VoidInit>:
void LCD_VoidInit(LCD_Info *lcd){
    3734:	df 93       	push	r29
    3736:	cf 93       	push	r28
    3738:	cd b7       	in	r28, 0x3d	; 61
    373a:	de b7       	in	r29, 0x3e	; 62
    373c:	ea 97       	sbiw	r28, 0x3a	; 58
    373e:	0f b6       	in	r0, 0x3f	; 63
    3740:	f8 94       	cli
    3742:	de bf       	out	0x3e, r29	; 62
    3744:	0f be       	out	0x3f, r0	; 63
    3746:	cd bf       	out	0x3d, r28	; 61
    3748:	9a af       	std	Y+58, r25	; 0x3a
    374a:	89 af       	std	Y+57, r24	; 0x39
	/*Set Directions*/
	DIO_ErrStateSetPinDirection(lcd->RS_group,lcd->RS_pin,DIO_OUT);
    374c:	e9 ad       	ldd	r30, Y+57	; 0x39
    374e:	fa ad       	ldd	r31, Y+58	; 0x3a
    3750:	80 81       	ld	r24, Z
    3752:	e9 ad       	ldd	r30, Y+57	; 0x39
    3754:	fa ad       	ldd	r31, Y+58	; 0x3a
    3756:	91 81       	ldd	r25, Z+1	; 0x01
    3758:	69 2f       	mov	r22, r25
    375a:	41 e0       	ldi	r20, 0x01	; 1
    375c:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->RW_group,lcd->RW_pin,DIO_OUT);
    3760:	e9 ad       	ldd	r30, Y+57	; 0x39
    3762:	fa ad       	ldd	r31, Y+58	; 0x3a
    3764:	82 81       	ldd	r24, Z+2	; 0x02
    3766:	e9 ad       	ldd	r30, Y+57	; 0x39
    3768:	fa ad       	ldd	r31, Y+58	; 0x3a
    376a:	93 81       	ldd	r25, Z+3	; 0x03
    376c:	69 2f       	mov	r22, r25
    376e:	41 e0       	ldi	r20, 0x01	; 1
    3770:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->E_group,lcd->E_pin,DIO_OUT);
    3774:	e9 ad       	ldd	r30, Y+57	; 0x39
    3776:	fa ad       	ldd	r31, Y+58	; 0x3a
    3778:	84 81       	ldd	r24, Z+4	; 0x04
    377a:	e9 ad       	ldd	r30, Y+57	; 0x39
    377c:	fa ad       	ldd	r31, Y+58	; 0x3a
    377e:	95 81       	ldd	r25, Z+5	; 0x05
    3780:	69 2f       	mov	r22, r25
    3782:	41 e0       	ldi	r20, 0x01	; 1
    3784:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetGroupDirection(lcd->Data_group,0xFF);
    3788:	e9 ad       	ldd	r30, Y+57	; 0x39
    378a:	fa ad       	ldd	r31, Y+58	; 0x3a
    378c:	86 81       	ldd	r24, Z+6	; 0x06
    378e:	6f ef       	ldi	r22, 0xFF	; 255
    3790:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_ErrStateSetGroupDirection>
    3794:	80 e0       	ldi	r24, 0x00	; 0
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	a0 e2       	ldi	r26, 0x20	; 32
    379a:	b2 e4       	ldi	r27, 0x42	; 66
    379c:	8d ab       	std	Y+53, r24	; 0x35
    379e:	9e ab       	std	Y+54, r25	; 0x36
    37a0:	af ab       	std	Y+55, r26	; 0x37
    37a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37a4:	6d a9       	ldd	r22, Y+53	; 0x35
    37a6:	7e a9       	ldd	r23, Y+54	; 0x36
    37a8:	8f a9       	ldd	r24, Y+55	; 0x37
    37aa:	98 ad       	ldd	r25, Y+56	; 0x38
    37ac:	20 e0       	ldi	r18, 0x00	; 0
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	4a ef       	ldi	r20, 0xFA	; 250
    37b2:	54 e4       	ldi	r21, 0x44	; 68
    37b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	89 ab       	std	Y+49, r24	; 0x31
    37be:	9a ab       	std	Y+50, r25	; 0x32
    37c0:	ab ab       	std	Y+51, r26	; 0x33
    37c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    37c4:	69 a9       	ldd	r22, Y+49	; 0x31
    37c6:	7a a9       	ldd	r23, Y+50	; 0x32
    37c8:	8b a9       	ldd	r24, Y+51	; 0x33
    37ca:	9c a9       	ldd	r25, Y+52	; 0x34
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	40 e8       	ldi	r20, 0x80	; 128
    37d2:	5f e3       	ldi	r21, 0x3F	; 63
    37d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37d8:	88 23       	and	r24, r24
    37da:	2c f4       	brge	.+10     	; 0x37e6 <LCD_VoidInit+0xb2>
		__ticks = 1;
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	98 ab       	std	Y+48, r25	; 0x30
    37e2:	8f a7       	std	Y+47, r24	; 0x2f
    37e4:	3f c0       	rjmp	.+126    	; 0x3864 <LCD_VoidInit+0x130>
	else if (__tmp > 65535)
    37e6:	69 a9       	ldd	r22, Y+49	; 0x31
    37e8:	7a a9       	ldd	r23, Y+50	; 0x32
    37ea:	8b a9       	ldd	r24, Y+51	; 0x33
    37ec:	9c a9       	ldd	r25, Y+52	; 0x34
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	3f ef       	ldi	r19, 0xFF	; 255
    37f2:	4f e7       	ldi	r20, 0x7F	; 127
    37f4:	57 e4       	ldi	r21, 0x47	; 71
    37f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37fa:	18 16       	cp	r1, r24
    37fc:	4c f5       	brge	.+82     	; 0x3850 <LCD_VoidInit+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37fe:	6d a9       	ldd	r22, Y+53	; 0x35
    3800:	7e a9       	ldd	r23, Y+54	; 0x36
    3802:	8f a9       	ldd	r24, Y+55	; 0x37
    3804:	98 ad       	ldd	r25, Y+56	; 0x38
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	40 e2       	ldi	r20, 0x20	; 32
    380c:	51 e4       	ldi	r21, 0x41	; 65
    380e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	bc 01       	movw	r22, r24
    3818:	cd 01       	movw	r24, r26
    381a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	98 ab       	std	Y+48, r25	; 0x30
    3824:	8f a7       	std	Y+47, r24	; 0x2f
    3826:	0f c0       	rjmp	.+30     	; 0x3846 <LCD_VoidInit+0x112>
    3828:	88 ec       	ldi	r24, 0xC8	; 200
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	9e a7       	std	Y+46, r25	; 0x2e
    382e:	8d a7       	std	Y+45, r24	; 0x2d
    3830:	8d a5       	ldd	r24, Y+45	; 0x2d
    3832:	9e a5       	ldd	r25, Y+46	; 0x2e
    3834:	01 97       	sbiw	r24, 0x01	; 1
    3836:	f1 f7       	brne	.-4      	; 0x3834 <LCD_VoidInit+0x100>
    3838:	9e a7       	std	Y+46, r25	; 0x2e
    383a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    383c:	8f a5       	ldd	r24, Y+47	; 0x2f
    383e:	98 a9       	ldd	r25, Y+48	; 0x30
    3840:	01 97       	sbiw	r24, 0x01	; 1
    3842:	98 ab       	std	Y+48, r25	; 0x30
    3844:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3846:	8f a5       	ldd	r24, Y+47	; 0x2f
    3848:	98 a9       	ldd	r25, Y+48	; 0x30
    384a:	00 97       	sbiw	r24, 0x00	; 0
    384c:	69 f7       	brne	.-38     	; 0x3828 <LCD_VoidInit+0xf4>
    384e:	14 c0       	rjmp	.+40     	; 0x3878 <LCD_VoidInit+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3850:	69 a9       	ldd	r22, Y+49	; 0x31
    3852:	7a a9       	ldd	r23, Y+50	; 0x32
    3854:	8b a9       	ldd	r24, Y+51	; 0x33
    3856:	9c a9       	ldd	r25, Y+52	; 0x34
    3858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	98 ab       	std	Y+48, r25	; 0x30
    3862:	8f a7       	std	Y+47, r24	; 0x2f
    3864:	8f a5       	ldd	r24, Y+47	; 0x2f
    3866:	98 a9       	ldd	r25, Y+48	; 0x30
    3868:	9c a7       	std	Y+44, r25	; 0x2c
    386a:	8b a7       	std	Y+43, r24	; 0x2b
    386c:	8b a5       	ldd	r24, Y+43	; 0x2b
    386e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3870:	01 97       	sbiw	r24, 0x01	; 1
    3872:	f1 f7       	brne	.-4      	; 0x3870 <LCD_VoidInit+0x13c>
    3874:	9c a7       	std	Y+44, r25	; 0x2c
    3876:	8b a7       	std	Y+43, r24	; 0x2b
	/*Wait more than 30 ms*/
	_delay_ms(40);
	/*Sent function set*/
	LCD_VoidSendCommand(LCD_Set8Bit2Line5x8,lcd);
    3878:	29 ad       	ldd	r18, Y+57	; 0x39
    387a:	3a ad       	ldd	r19, Y+58	; 0x3a
    387c:	88 e3       	ldi	r24, 0x38	; 56
    387e:	b9 01       	movw	r22, r18
    3880:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_VoidSendCommand>
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	a0 e8       	ldi	r26, 0x80	; 128
    388a:	bf e3       	ldi	r27, 0x3F	; 63
    388c:	8f a3       	std	Y+39, r24	; 0x27
    388e:	98 a7       	std	Y+40, r25	; 0x28
    3890:	a9 a7       	std	Y+41, r26	; 0x29
    3892:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3894:	6f a1       	ldd	r22, Y+39	; 0x27
    3896:	78 a5       	ldd	r23, Y+40	; 0x28
    3898:	89 a5       	ldd	r24, Y+41	; 0x29
    389a:	9a a5       	ldd	r25, Y+42	; 0x2a
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	4a ef       	ldi	r20, 0xFA	; 250
    38a2:	54 e4       	ldi	r21, 0x44	; 68
    38a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a8:	dc 01       	movw	r26, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	8b a3       	std	Y+35, r24	; 0x23
    38ae:	9c a3       	std	Y+36, r25	; 0x24
    38b0:	ad a3       	std	Y+37, r26	; 0x25
    38b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38b4:	6b a1       	ldd	r22, Y+35	; 0x23
    38b6:	7c a1       	ldd	r23, Y+36	; 0x24
    38b8:	8d a1       	ldd	r24, Y+37	; 0x25
    38ba:	9e a1       	ldd	r25, Y+38	; 0x26
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	40 e8       	ldi	r20, 0x80	; 128
    38c2:	5f e3       	ldi	r21, 0x3F	; 63
    38c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38c8:	88 23       	and	r24, r24
    38ca:	2c f4       	brge	.+10     	; 0x38d6 <LCD_VoidInit+0x1a2>
		__ticks = 1;
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	9a a3       	std	Y+34, r25	; 0x22
    38d2:	89 a3       	std	Y+33, r24	; 0x21
    38d4:	3f c0       	rjmp	.+126    	; 0x3954 <LCD_VoidInit+0x220>
	else if (__tmp > 65535)
    38d6:	6b a1       	ldd	r22, Y+35	; 0x23
    38d8:	7c a1       	ldd	r23, Y+36	; 0x24
    38da:	8d a1       	ldd	r24, Y+37	; 0x25
    38dc:	9e a1       	ldd	r25, Y+38	; 0x26
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	3f ef       	ldi	r19, 0xFF	; 255
    38e2:	4f e7       	ldi	r20, 0x7F	; 127
    38e4:	57 e4       	ldi	r21, 0x47	; 71
    38e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38ea:	18 16       	cp	r1, r24
    38ec:	4c f5       	brge	.+82     	; 0x3940 <LCD_VoidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ee:	6f a1       	ldd	r22, Y+39	; 0x27
    38f0:	78 a5       	ldd	r23, Y+40	; 0x28
    38f2:	89 a5       	ldd	r24, Y+41	; 0x29
    38f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	40 e2       	ldi	r20, 0x20	; 32
    38fc:	51 e4       	ldi	r21, 0x41	; 65
    38fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	bc 01       	movw	r22, r24
    3908:	cd 01       	movw	r24, r26
    390a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390e:	dc 01       	movw	r26, r24
    3910:	cb 01       	movw	r24, r22
    3912:	9a a3       	std	Y+34, r25	; 0x22
    3914:	89 a3       	std	Y+33, r24	; 0x21
    3916:	0f c0       	rjmp	.+30     	; 0x3936 <LCD_VoidInit+0x202>
    3918:	88 ec       	ldi	r24, 0xC8	; 200
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	98 a3       	std	Y+32, r25	; 0x20
    391e:	8f 8f       	std	Y+31, r24	; 0x1f
    3920:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3922:	98 a1       	ldd	r25, Y+32	; 0x20
    3924:	01 97       	sbiw	r24, 0x01	; 1
    3926:	f1 f7       	brne	.-4      	; 0x3924 <LCD_VoidInit+0x1f0>
    3928:	98 a3       	std	Y+32, r25	; 0x20
    392a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    392c:	89 a1       	ldd	r24, Y+33	; 0x21
    392e:	9a a1       	ldd	r25, Y+34	; 0x22
    3930:	01 97       	sbiw	r24, 0x01	; 1
    3932:	9a a3       	std	Y+34, r25	; 0x22
    3934:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3936:	89 a1       	ldd	r24, Y+33	; 0x21
    3938:	9a a1       	ldd	r25, Y+34	; 0x22
    393a:	00 97       	sbiw	r24, 0x00	; 0
    393c:	69 f7       	brne	.-38     	; 0x3918 <LCD_VoidInit+0x1e4>
    393e:	14 c0       	rjmp	.+40     	; 0x3968 <LCD_VoidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3940:	6b a1       	ldd	r22, Y+35	; 0x23
    3942:	7c a1       	ldd	r23, Y+36	; 0x24
    3944:	8d a1       	ldd	r24, Y+37	; 0x25
    3946:	9e a1       	ldd	r25, Y+38	; 0x26
    3948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	9a a3       	std	Y+34, r25	; 0x22
    3952:	89 a3       	std	Y+33, r24	; 0x21
    3954:	89 a1       	ldd	r24, Y+33	; 0x21
    3956:	9a a1       	ldd	r25, Y+34	; 0x22
    3958:	9e 8f       	std	Y+30, r25	; 0x1e
    395a:	8d 8f       	std	Y+29, r24	; 0x1d
    395c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    395e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3960:	01 97       	sbiw	r24, 0x01	; 1
    3962:	f1 f7       	brne	.-4      	; 0x3960 <LCD_VoidInit+0x22c>
    3964:	9e 8f       	std	Y+30, r25	; 0x1e
    3966:	8d 8f       	std	Y+29, r24	; 0x1d
	/*WAIT 39us*/
	_delay_ms(1);
	LCD_VoidSendCommand(LCD_CursorON,lcd);
    3968:	29 ad       	ldd	r18, Y+57	; 0x39
    396a:	3a ad       	ldd	r19, Y+58	; 0x3a
    396c:	8e e0       	ldi	r24, 0x0E	; 14
    396e:	b9 01       	movw	r22, r18
    3970:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_VoidSendCommand>
    3974:	80 e0       	ldi	r24, 0x00	; 0
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	a0 e8       	ldi	r26, 0x80	; 128
    397a:	bf e3       	ldi	r27, 0x3F	; 63
    397c:	89 8f       	std	Y+25, r24	; 0x19
    397e:	9a 8f       	std	Y+26, r25	; 0x1a
    3980:	ab 8f       	std	Y+27, r26	; 0x1b
    3982:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3984:	69 8d       	ldd	r22, Y+25	; 0x19
    3986:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3988:	8b 8d       	ldd	r24, Y+27	; 0x1b
    398a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	4a ef       	ldi	r20, 0xFA	; 250
    3992:	54 e4       	ldi	r21, 0x44	; 68
    3994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3998:	dc 01       	movw	r26, r24
    399a:	cb 01       	movw	r24, r22
    399c:	8d 8b       	std	Y+21, r24	; 0x15
    399e:	9e 8b       	std	Y+22, r25	; 0x16
    39a0:	af 8b       	std	Y+23, r26	; 0x17
    39a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39a4:	6d 89       	ldd	r22, Y+21	; 0x15
    39a6:	7e 89       	ldd	r23, Y+22	; 0x16
    39a8:	8f 89       	ldd	r24, Y+23	; 0x17
    39aa:	98 8d       	ldd	r25, Y+24	; 0x18
    39ac:	20 e0       	ldi	r18, 0x00	; 0
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	40 e8       	ldi	r20, 0x80	; 128
    39b2:	5f e3       	ldi	r21, 0x3F	; 63
    39b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39b8:	88 23       	and	r24, r24
    39ba:	2c f4       	brge	.+10     	; 0x39c6 <LCD_VoidInit+0x292>
		__ticks = 1;
    39bc:	81 e0       	ldi	r24, 0x01	; 1
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	9c 8b       	std	Y+20, r25	; 0x14
    39c2:	8b 8b       	std	Y+19, r24	; 0x13
    39c4:	3f c0       	rjmp	.+126    	; 0x3a44 <LCD_VoidInit+0x310>
	else if (__tmp > 65535)
    39c6:	6d 89       	ldd	r22, Y+21	; 0x15
    39c8:	7e 89       	ldd	r23, Y+22	; 0x16
    39ca:	8f 89       	ldd	r24, Y+23	; 0x17
    39cc:	98 8d       	ldd	r25, Y+24	; 0x18
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	3f ef       	ldi	r19, 0xFF	; 255
    39d2:	4f e7       	ldi	r20, 0x7F	; 127
    39d4:	57 e4       	ldi	r21, 0x47	; 71
    39d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39da:	18 16       	cp	r1, r24
    39dc:	4c f5       	brge	.+82     	; 0x3a30 <LCD_VoidInit+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39de:	69 8d       	ldd	r22, Y+25	; 0x19
    39e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	40 e2       	ldi	r20, 0x20	; 32
    39ec:	51 e4       	ldi	r21, 0x41	; 65
    39ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f2:	dc 01       	movw	r26, r24
    39f4:	cb 01       	movw	r24, r22
    39f6:	bc 01       	movw	r22, r24
    39f8:	cd 01       	movw	r24, r26
    39fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39fe:	dc 01       	movw	r26, r24
    3a00:	cb 01       	movw	r24, r22
    3a02:	9c 8b       	std	Y+20, r25	; 0x14
    3a04:	8b 8b       	std	Y+19, r24	; 0x13
    3a06:	0f c0       	rjmp	.+30     	; 0x3a26 <LCD_VoidInit+0x2f2>
    3a08:	88 ec       	ldi	r24, 0xC8	; 200
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	9a 8b       	std	Y+18, r25	; 0x12
    3a0e:	89 8b       	std	Y+17, r24	; 0x11
    3a10:	89 89       	ldd	r24, Y+17	; 0x11
    3a12:	9a 89       	ldd	r25, Y+18	; 0x12
    3a14:	01 97       	sbiw	r24, 0x01	; 1
    3a16:	f1 f7       	brne	.-4      	; 0x3a14 <LCD_VoidInit+0x2e0>
    3a18:	9a 8b       	std	Y+18, r25	; 0x12
    3a1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a20:	01 97       	sbiw	r24, 0x01	; 1
    3a22:	9c 8b       	std	Y+20, r25	; 0x14
    3a24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a26:	8b 89       	ldd	r24, Y+19	; 0x13
    3a28:	9c 89       	ldd	r25, Y+20	; 0x14
    3a2a:	00 97       	sbiw	r24, 0x00	; 0
    3a2c:	69 f7       	brne	.-38     	; 0x3a08 <LCD_VoidInit+0x2d4>
    3a2e:	14 c0       	rjmp	.+40     	; 0x3a58 <LCD_VoidInit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a30:	6d 89       	ldd	r22, Y+21	; 0x15
    3a32:	7e 89       	ldd	r23, Y+22	; 0x16
    3a34:	8f 89       	ldd	r24, Y+23	; 0x17
    3a36:	98 8d       	ldd	r25, Y+24	; 0x18
    3a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a3c:	dc 01       	movw	r26, r24
    3a3e:	cb 01       	movw	r24, r22
    3a40:	9c 8b       	std	Y+20, r25	; 0x14
    3a42:	8b 8b       	std	Y+19, r24	; 0x13
    3a44:	8b 89       	ldd	r24, Y+19	; 0x13
    3a46:	9c 89       	ldd	r25, Y+20	; 0x14
    3a48:	98 8b       	std	Y+16, r25	; 0x10
    3a4a:	8f 87       	std	Y+15, r24	; 0x0f
    3a4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a4e:	98 89       	ldd	r25, Y+16	; 0x10
    3a50:	01 97       	sbiw	r24, 0x01	; 1
    3a52:	f1 f7       	brne	.-4      	; 0x3a50 <LCD_VoidInit+0x31c>
    3a54:	98 8b       	std	Y+16, r25	; 0x10
    3a56:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*LCD Clear Display*/
	LCD_VoidSendCommand(LCD_ClearDisplay,lcd);
    3a58:	29 ad       	ldd	r18, Y+57	; 0x39
    3a5a:	3a ad       	ldd	r19, Y+58	; 0x3a
    3a5c:	81 e0       	ldi	r24, 0x01	; 1
    3a5e:	b9 01       	movw	r22, r18
    3a60:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_VoidSendCommand>
    3a64:	80 e0       	ldi	r24, 0x00	; 0
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	a0 e8       	ldi	r26, 0x80	; 128
    3a6a:	bf e3       	ldi	r27, 0x3F	; 63
    3a6c:	8b 87       	std	Y+11, r24	; 0x0b
    3a6e:	9c 87       	std	Y+12, r25	; 0x0c
    3a70:	ad 87       	std	Y+13, r26	; 0x0d
    3a72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a74:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a76:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a78:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	4a ef       	ldi	r20, 0xFA	; 250
    3a82:	54 e4       	ldi	r21, 0x44	; 68
    3a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a88:	dc 01       	movw	r26, r24
    3a8a:	cb 01       	movw	r24, r22
    3a8c:	8f 83       	std	Y+7, r24	; 0x07
    3a8e:	98 87       	std	Y+8, r25	; 0x08
    3a90:	a9 87       	std	Y+9, r26	; 0x09
    3a92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a94:	6f 81       	ldd	r22, Y+7	; 0x07
    3a96:	78 85       	ldd	r23, Y+8	; 0x08
    3a98:	89 85       	ldd	r24, Y+9	; 0x09
    3a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	30 e0       	ldi	r19, 0x00	; 0
    3aa0:	40 e8       	ldi	r20, 0x80	; 128
    3aa2:	5f e3       	ldi	r21, 0x3F	; 63
    3aa4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3aa8:	88 23       	and	r24, r24
    3aaa:	2c f4       	brge	.+10     	; 0x3ab6 <LCD_VoidInit+0x382>
		__ticks = 1;
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	9e 83       	std	Y+6, r25	; 0x06
    3ab2:	8d 83       	std	Y+5, r24	; 0x05
    3ab4:	3f c0       	rjmp	.+126    	; 0x3b34 <LCD_VoidInit+0x400>
	else if (__tmp > 65535)
    3ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ab8:	78 85       	ldd	r23, Y+8	; 0x08
    3aba:	89 85       	ldd	r24, Y+9	; 0x09
    3abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3abe:	20 e0       	ldi	r18, 0x00	; 0
    3ac0:	3f ef       	ldi	r19, 0xFF	; 255
    3ac2:	4f e7       	ldi	r20, 0x7F	; 127
    3ac4:	57 e4       	ldi	r21, 0x47	; 71
    3ac6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3aca:	18 16       	cp	r1, r24
    3acc:	4c f5       	brge	.+82     	; 0x3b20 <LCD_VoidInit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ace:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ad0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ad2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ad4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ad6:	20 e0       	ldi	r18, 0x00	; 0
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	40 e2       	ldi	r20, 0x20	; 32
    3adc:	51 e4       	ldi	r21, 0x41	; 65
    3ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	bc 01       	movw	r22, r24
    3ae8:	cd 01       	movw	r24, r26
    3aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	9e 83       	std	Y+6, r25	; 0x06
    3af4:	8d 83       	std	Y+5, r24	; 0x05
    3af6:	0f c0       	rjmp	.+30     	; 0x3b16 <LCD_VoidInit+0x3e2>
    3af8:	88 ec       	ldi	r24, 0xC8	; 200
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	9c 83       	std	Y+4, r25	; 0x04
    3afe:	8b 83       	std	Y+3, r24	; 0x03
    3b00:	8b 81       	ldd	r24, Y+3	; 0x03
    3b02:	9c 81       	ldd	r25, Y+4	; 0x04
    3b04:	01 97       	sbiw	r24, 0x01	; 1
    3b06:	f1 f7       	brne	.-4      	; 0x3b04 <LCD_VoidInit+0x3d0>
    3b08:	9c 83       	std	Y+4, r25	; 0x04
    3b0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b10:	01 97       	sbiw	r24, 0x01	; 1
    3b12:	9e 83       	std	Y+6, r25	; 0x06
    3b14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b16:	8d 81       	ldd	r24, Y+5	; 0x05
    3b18:	9e 81       	ldd	r25, Y+6	; 0x06
    3b1a:	00 97       	sbiw	r24, 0x00	; 0
    3b1c:	69 f7       	brne	.-38     	; 0x3af8 <LCD_VoidInit+0x3c4>
    3b1e:	14 c0       	rjmp	.+40     	; 0x3b48 <LCD_VoidInit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b20:	6f 81       	ldd	r22, Y+7	; 0x07
    3b22:	78 85       	ldd	r23, Y+8	; 0x08
    3b24:	89 85       	ldd	r24, Y+9	; 0x09
    3b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	cb 01       	movw	r24, r22
    3b30:	9e 83       	std	Y+6, r25	; 0x06
    3b32:	8d 83       	std	Y+5, r24	; 0x05
    3b34:	8d 81       	ldd	r24, Y+5	; 0x05
    3b36:	9e 81       	ldd	r25, Y+6	; 0x06
    3b38:	9a 83       	std	Y+2, r25	; 0x02
    3b3a:	89 83       	std	Y+1, r24	; 0x01
    3b3c:	89 81       	ldd	r24, Y+1	; 0x01
    3b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b40:	01 97       	sbiw	r24, 0x01	; 1
    3b42:	f1 f7       	brne	.-4      	; 0x3b40 <LCD_VoidInit+0x40c>
    3b44:	9a 83       	std	Y+2, r25	; 0x02
    3b46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    3b48:	ea 96       	adiw	r28, 0x3a	; 58
    3b4a:	0f b6       	in	r0, 0x3f	; 63
    3b4c:	f8 94       	cli
    3b4e:	de bf       	out	0x3e, r29	; 62
    3b50:	0f be       	out	0x3f, r0	; 63
    3b52:	cd bf       	out	0x3d, r28	; 61
    3b54:	cf 91       	pop	r28
    3b56:	df 91       	pop	r29
    3b58:	08 95       	ret

00003b5a <LCD_VoidSendString>:

void LCD_VoidSendString(u8 *Address_String,LCD_Info *lcd,LCD_Line_Info *Type){
    3b5a:	df 93       	push	r29
    3b5c:	cf 93       	push	r28
    3b5e:	00 d0       	rcall	.+0      	; 0x3b60 <LCD_VoidSendString+0x6>
    3b60:	00 d0       	rcall	.+0      	; 0x3b62 <LCD_VoidSendString+0x8>
    3b62:	00 d0       	rcall	.+0      	; 0x3b64 <LCD_VoidSendString+0xa>
    3b64:	cd b7       	in	r28, 0x3d	; 61
    3b66:	de b7       	in	r29, 0x3e	; 62
    3b68:	9a 83       	std	Y+2, r25	; 0x02
    3b6a:	89 83       	std	Y+1, r24	; 0x01
    3b6c:	7c 83       	std	Y+4, r23	; 0x04
    3b6e:	6b 83       	std	Y+3, r22	; 0x03
    3b70:	5e 83       	std	Y+6, r21	; 0x06
    3b72:	4d 83       	std	Y+5, r20	; 0x05
    3b74:	0f c0       	rjmp	.+30     	; 0x3b94 <LCD_VoidSendString+0x3a>

	while (*Address_String != '\0') {
		// Send the current character to the LCD
		LCD_VoidSendChar(*Address_String, lcd,Type);
    3b76:	e9 81       	ldd	r30, Y+1	; 0x01
    3b78:	fa 81       	ldd	r31, Y+2	; 0x02
    3b7a:	80 81       	ld	r24, Z
    3b7c:	2b 81       	ldd	r18, Y+3	; 0x03
    3b7e:	3c 81       	ldd	r19, Y+4	; 0x04
    3b80:	4d 81       	ldd	r20, Y+5	; 0x05
    3b82:	5e 81       	ldd	r21, Y+6	; 0x06
    3b84:	b9 01       	movw	r22, r18
    3b86:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_VoidSendChar>
		Address_String++; // Move to the next character
    3b8a:	89 81       	ldd	r24, Y+1	; 0x01
    3b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b8e:	01 96       	adiw	r24, 0x01	; 1
    3b90:	9a 83       	std	Y+2, r25	; 0x02
    3b92:	89 83       	std	Y+1, r24	; 0x01

}

void LCD_VoidSendString(u8 *Address_String,LCD_Info *lcd,LCD_Line_Info *Type){

	while (*Address_String != '\0') {
    3b94:	e9 81       	ldd	r30, Y+1	; 0x01
    3b96:	fa 81       	ldd	r31, Y+2	; 0x02
    3b98:	80 81       	ld	r24, Z
    3b9a:	88 23       	and	r24, r24
    3b9c:	61 f7       	brne	.-40     	; 0x3b76 <LCD_VoidSendString+0x1c>
		// Send the current character to the LCD
		LCD_VoidSendChar(*Address_String, lcd,Type);
		Address_String++; // Move to the next character
	}
}
    3b9e:	26 96       	adiw	r28, 0x06	; 6
    3ba0:	0f b6       	in	r0, 0x3f	; 63
    3ba2:	f8 94       	cli
    3ba4:	de bf       	out	0x3e, r29	; 62
    3ba6:	0f be       	out	0x3f, r0	; 63
    3ba8:	cd bf       	out	0x3d, r28	; 61
    3baa:	cf 91       	pop	r28
    3bac:	df 91       	pop	r29
    3bae:	08 95       	ret

00003bb0 <LCD_VoidGoToXY>:
void LCD_VoidGoToXY(u8 Local_XPosition,u8 Local_YPosition, LCD_Info *lcd) {
    3bb0:	df 93       	push	r29
    3bb2:	cf 93       	push	r28
    3bb4:	00 d0       	rcall	.+0      	; 0x3bb6 <LCD_VoidGoToXY+0x6>
    3bb6:	00 d0       	rcall	.+0      	; 0x3bb8 <LCD_VoidGoToXY+0x8>
    3bb8:	0f 92       	push	r0
    3bba:	cd b7       	in	r28, 0x3d	; 61
    3bbc:	de b7       	in	r29, 0x3e	; 62
    3bbe:	8a 83       	std	Y+2, r24	; 0x02
    3bc0:	6b 83       	std	Y+3, r22	; 0x03
    3bc2:	5d 83       	std	Y+5, r21	; 0x05
    3bc4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Address = 0;
    3bc6:	19 82       	std	Y+1, r1	; 0x01
	/* Calculate the DDRAM address based on the row and column */
	if(Local_YPosition == 0) {
    3bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bca:	88 23       	and	r24, r24
    3bcc:	19 f4       	brne	.+6      	; 0x3bd4 <LCD_VoidGoToXY+0x24>
		Address = LCD_FirstLine + Local_XPosition;
    3bce:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd0:	89 83       	std	Y+1, r24	; 0x01
    3bd2:	03 c0       	rjmp	.+6      	; 0x3bda <LCD_VoidGoToXY+0x2a>
	} else {
		Address = LCD_SecoundLine + Local_XPosition;
    3bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd6:	80 5c       	subi	r24, 0xC0	; 192
    3bd8:	89 83       	std	Y+1, r24	; 0x01
	}
	/* Send the command to set the DDRAM address */
	LCD_VoidSendCommand(LCD_SetAddressDDRAM | Address, lcd);
    3bda:	89 81       	ldd	r24, Y+1	; 0x01
    3bdc:	80 68       	ori	r24, 0x80	; 128
    3bde:	2c 81       	ldd	r18, Y+4	; 0x04
    3be0:	3d 81       	ldd	r19, Y+5	; 0x05
    3be2:	b9 01       	movw	r22, r18
    3be4:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_VoidSendCommand>
}
    3be8:	0f 90       	pop	r0
    3bea:	0f 90       	pop	r0
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	0f 90       	pop	r0
    3bf2:	cf 91       	pop	r28
    3bf4:	df 91       	pop	r29
    3bf6:	08 95       	ret

00003bf8 <LCD_VoidSpecialCharacter>:

void LCD_VoidSpecialCharacter(u8 *pattern,u8 location, LCD_Info *lcd,LCD_Line_Info *Type){
    3bf8:	df 93       	push	r29
    3bfa:	cf 93       	push	r28
    3bfc:	cd b7       	in	r28, 0x3d	; 61
    3bfe:	de b7       	in	r29, 0x3e	; 62
    3c00:	28 97       	sbiw	r28, 0x08	; 8
    3c02:	0f b6       	in	r0, 0x3f	; 63
    3c04:	f8 94       	cli
    3c06:	de bf       	out	0x3e, r29	; 62
    3c08:	0f be       	out	0x3f, r0	; 63
    3c0a:	cd bf       	out	0x3d, r28	; 61
    3c0c:	9b 83       	std	Y+3, r25	; 0x03
    3c0e:	8a 83       	std	Y+2, r24	; 0x02
    3c10:	6c 83       	std	Y+4, r22	; 0x04
    3c12:	5e 83       	std	Y+6, r21	; 0x06
    3c14:	4d 83       	std	Y+5, r20	; 0x05
    3c16:	38 87       	std	Y+8, r19	; 0x08
    3c18:	2f 83       	std	Y+7, r18	; 0x07
	LCD_VoidSendCommand(LCD_SetAddressCGRAM+(location*8),lcd);
    3c1a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c1c:	88 2f       	mov	r24, r24
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	08 96       	adiw	r24, 0x08	; 8
    3c22:	88 0f       	add	r24, r24
    3c24:	99 1f       	adc	r25, r25
    3c26:	88 0f       	add	r24, r24
    3c28:	99 1f       	adc	r25, r25
    3c2a:	88 0f       	add	r24, r24
    3c2c:	99 1f       	adc	r25, r25
    3c2e:	2d 81       	ldd	r18, Y+5	; 0x05
    3c30:	3e 81       	ldd	r19, Y+6	; 0x06
    3c32:	b9 01       	movw	r22, r18
    3c34:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_VoidSendCommand>
	/* Sending the bitmap to CGRAM */
	for(u8 i=0;i<8;i++){
    3c38:	19 82       	std	Y+1, r1	; 0x01
    3c3a:	13 c0       	rjmp	.+38     	; 0x3c62 <LCD_VoidSpecialCharacter+0x6a>
		LCD_VoidSendChar(pattern[i],lcd,Type);
    3c3c:	89 81       	ldd	r24, Y+1	; 0x01
    3c3e:	28 2f       	mov	r18, r24
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	8a 81       	ldd	r24, Y+2	; 0x02
    3c44:	9b 81       	ldd	r25, Y+3	; 0x03
    3c46:	fc 01       	movw	r30, r24
    3c48:	e2 0f       	add	r30, r18
    3c4a:	f3 1f       	adc	r31, r19
    3c4c:	80 81       	ld	r24, Z
    3c4e:	2d 81       	ldd	r18, Y+5	; 0x05
    3c50:	3e 81       	ldd	r19, Y+6	; 0x06
    3c52:	4f 81       	ldd	r20, Y+7	; 0x07
    3c54:	58 85       	ldd	r21, Y+8	; 0x08
    3c56:	b9 01       	movw	r22, r18
    3c58:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_VoidSendChar>
}

void LCD_VoidSpecialCharacter(u8 *pattern,u8 location, LCD_Info *lcd,LCD_Line_Info *Type){
	LCD_VoidSendCommand(LCD_SetAddressCGRAM+(location*8),lcd);
	/* Sending the bitmap to CGRAM */
	for(u8 i=0;i<8;i++){
    3c5c:	89 81       	ldd	r24, Y+1	; 0x01
    3c5e:	8f 5f       	subi	r24, 0xFF	; 255
    3c60:	89 83       	std	Y+1, r24	; 0x01
    3c62:	89 81       	ldd	r24, Y+1	; 0x01
    3c64:	88 30       	cpi	r24, 0x08	; 8
    3c66:	50 f3       	brcs	.-44     	; 0x3c3c <LCD_VoidSpecialCharacter+0x44>
		LCD_VoidSendChar(pattern[i],lcd,Type);
	}
	/*	Send the cursor to DDRAM + choose location */
	LCD_VoidGoToXY(1,1,lcd);
    3c68:	2d 81       	ldd	r18, Y+5	; 0x05
    3c6a:	3e 81       	ldd	r19, Y+6	; 0x06
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
    3c6e:	61 e0       	ldi	r22, 0x01	; 1
    3c70:	a9 01       	movw	r20, r18
    3c72:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <LCD_VoidGoToXY>
	LCD_VoidSendChar(location,lcd,Type);
    3c76:	2d 81       	ldd	r18, Y+5	; 0x05
    3c78:	3e 81       	ldd	r19, Y+6	; 0x06
    3c7a:	4f 81       	ldd	r20, Y+7	; 0x07
    3c7c:	58 85       	ldd	r21, Y+8	; 0x08
    3c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c80:	b9 01       	movw	r22, r18
    3c82:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_VoidSendChar>
}
    3c86:	28 96       	adiw	r28, 0x08	; 8
    3c88:	0f b6       	in	r0, 0x3f	; 63
    3c8a:	f8 94       	cli
    3c8c:	de bf       	out	0x3e, r29	; 62
    3c8e:	0f be       	out	0x3f, r0	; 63
    3c90:	cd bf       	out	0x3d, r28	; 61
    3c92:	cf 91       	pop	r28
    3c94:	df 91       	pop	r29
    3c96:	08 95       	ret

00003c98 <LCD_VoidSendInt>:
void LCD_VoidSendInt(u32 Recieved_Number,LCD_Info *lcd,LCD_Line_Info *Type){
    3c98:	df 93       	push	r29
    3c9a:	cf 93       	push	r28
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
    3ca0:	6c 97       	sbiw	r28, 0x1c	; 28
    3ca2:	0f b6       	in	r0, 0x3f	; 63
    3ca4:	f8 94       	cli
    3ca6:	de bf       	out	0x3e, r29	; 62
    3ca8:	0f be       	out	0x3f, r0	; 63
    3caa:	cd bf       	out	0x3d, r28	; 61
    3cac:	6d 8b       	std	Y+21, r22	; 0x15
    3cae:	7e 8b       	std	Y+22, r23	; 0x16
    3cb0:	8f 8b       	std	Y+23, r24	; 0x17
    3cb2:	98 8f       	std	Y+24, r25	; 0x18
    3cb4:	5a 8f       	std	Y+26, r21	; 0x1a
    3cb6:	49 8f       	std	Y+25, r20	; 0x19
    3cb8:	3c 8f       	std	Y+28, r19	; 0x1c
    3cba:	2b 8f       	std	Y+27, r18	; 0x1b
	u8 NumAsString[LCD_StringMax]={' '};
    3cbc:	8a e0       	ldi	r24, 0x0A	; 10
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	3b 96       	adiw	r30, 0x0b	; 11
    3cc2:	df 01       	movw	r26, r30
    3cc4:	98 2f       	mov	r25, r24
    3cc6:	1d 92       	st	X+, r1
    3cc8:	9a 95       	dec	r25
    3cca:	e9 f7       	brne	.-6      	; 0x3cc6 <LCD_VoidSendInt+0x2e>
    3ccc:	80 e2       	ldi	r24, 0x20	; 32
    3cce:	8b 87       	std	Y+11, r24	; 0x0b
	s32 LCD_StringCounter=0,FORCOUNTER;
    3cd0:	1f 82       	std	Y+7, r1	; 0x07
    3cd2:	18 86       	std	Y+8, r1	; 0x08
    3cd4:	19 86       	std	Y+9, r1	; 0x09
    3cd6:	1a 86       	std	Y+10, r1	; 0x0a
	u8 temp,Err=1;
    3cd8:	81 e0       	ldi	r24, 0x01	; 1
    3cda:	89 83       	std	Y+1, r24	; 0x01

	if(Recieved_Number==0){
    3cdc:	8d 89       	ldd	r24, Y+21	; 0x15
    3cde:	9e 89       	ldd	r25, Y+22	; 0x16
    3ce0:	af 89       	ldd	r26, Y+23	; 0x17
    3ce2:	b8 8d       	ldd	r27, Y+24	; 0x18
    3ce4:	00 97       	sbiw	r24, 0x00	; 0
    3ce6:	a1 05       	cpc	r26, r1
    3ce8:	b1 05       	cpc	r27, r1
    3cea:	09 f0       	breq	.+2      	; 0x3cee <LCD_VoidSendInt+0x56>
    3cec:	52 c0       	rjmp	.+164    	; 0x3d92 <LCD_VoidSendInt+0xfa>
		LCD_VoidSendChar('0',lcd,Type);
    3cee:	29 8d       	ldd	r18, Y+25	; 0x19
    3cf0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3cf2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3cf4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3cf6:	80 e3       	ldi	r24, 0x30	; 48
    3cf8:	b9 01       	movw	r22, r18
    3cfa:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_VoidSendChar>
    3cfe:	52 c0       	rjmp	.+164    	; 0x3da4 <LCD_VoidSendInt+0x10c>
	}
	else{
		while(Recieved_Number!=0)
		{
			temp=Recieved_Number%10;
    3d00:	8d 89       	ldd	r24, Y+21	; 0x15
    3d02:	9e 89       	ldd	r25, Y+22	; 0x16
    3d04:	af 89       	ldd	r26, Y+23	; 0x17
    3d06:	b8 8d       	ldd	r27, Y+24	; 0x18
    3d08:	2a e0       	ldi	r18, 0x0A	; 10
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	40 e0       	ldi	r20, 0x00	; 0
    3d0e:	50 e0       	ldi	r21, 0x00	; 0
    3d10:	bc 01       	movw	r22, r24
    3d12:	cd 01       	movw	r24, r26
    3d14:	0e 94 ac 20 	call	0x4158	; 0x4158 <__udivmodsi4>
    3d18:	dc 01       	movw	r26, r24
    3d1a:	cb 01       	movw	r24, r22
    3d1c:	8a 83       	std	Y+2, r24	; 0x02
			Recieved_Number=Recieved_Number-temp;
    3d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d20:	28 2f       	mov	r18, r24
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	40 e0       	ldi	r20, 0x00	; 0
    3d26:	50 e0       	ldi	r21, 0x00	; 0
    3d28:	8d 89       	ldd	r24, Y+21	; 0x15
    3d2a:	9e 89       	ldd	r25, Y+22	; 0x16
    3d2c:	af 89       	ldd	r26, Y+23	; 0x17
    3d2e:	b8 8d       	ldd	r27, Y+24	; 0x18
    3d30:	82 1b       	sub	r24, r18
    3d32:	93 0b       	sbc	r25, r19
    3d34:	a4 0b       	sbc	r26, r20
    3d36:	b5 0b       	sbc	r27, r21
    3d38:	8d 8b       	std	Y+21, r24	; 0x15
    3d3a:	9e 8b       	std	Y+22, r25	; 0x16
    3d3c:	af 8b       	std	Y+23, r26	; 0x17
    3d3e:	b8 8f       	std	Y+24, r27	; 0x18
			NumAsString[LCD_StringCounter]=temp;
    3d40:	8f 81       	ldd	r24, Y+7	; 0x07
    3d42:	98 85       	ldd	r25, Y+8	; 0x08
    3d44:	a9 85       	ldd	r26, Y+9	; 0x09
    3d46:	ba 85       	ldd	r27, Y+10	; 0x0a
    3d48:	9e 01       	movw	r18, r28
    3d4a:	25 5f       	subi	r18, 0xF5	; 245
    3d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d4e:	f9 01       	movw	r30, r18
    3d50:	e8 0f       	add	r30, r24
    3d52:	f9 1f       	adc	r31, r25
    3d54:	8a 81       	ldd	r24, Y+2	; 0x02
    3d56:	80 83       	st	Z, r24
			Recieved_Number=Recieved_Number/10;
    3d58:	8d 89       	ldd	r24, Y+21	; 0x15
    3d5a:	9e 89       	ldd	r25, Y+22	; 0x16
    3d5c:	af 89       	ldd	r26, Y+23	; 0x17
    3d5e:	b8 8d       	ldd	r27, Y+24	; 0x18
    3d60:	2a e0       	ldi	r18, 0x0A	; 10
    3d62:	30 e0       	ldi	r19, 0x00	; 0
    3d64:	40 e0       	ldi	r20, 0x00	; 0
    3d66:	50 e0       	ldi	r21, 0x00	; 0
    3d68:	bc 01       	movw	r22, r24
    3d6a:	cd 01       	movw	r24, r26
    3d6c:	0e 94 ac 20 	call	0x4158	; 0x4158 <__udivmodsi4>
    3d70:	da 01       	movw	r26, r20
    3d72:	c9 01       	movw	r24, r18
    3d74:	8d 8b       	std	Y+21, r24	; 0x15
    3d76:	9e 8b       	std	Y+22, r25	; 0x16
    3d78:	af 8b       	std	Y+23, r26	; 0x17
    3d7a:	b8 8f       	std	Y+24, r27	; 0x18
			LCD_StringCounter++;
    3d7c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d7e:	98 85       	ldd	r25, Y+8	; 0x08
    3d80:	a9 85       	ldd	r26, Y+9	; 0x09
    3d82:	ba 85       	ldd	r27, Y+10	; 0x0a
    3d84:	01 96       	adiw	r24, 0x01	; 1
    3d86:	a1 1d       	adc	r26, r1
    3d88:	b1 1d       	adc	r27, r1
    3d8a:	8f 83       	std	Y+7, r24	; 0x07
    3d8c:	98 87       	std	Y+8, r25	; 0x08
    3d8e:	a9 87       	std	Y+9, r26	; 0x09
    3d90:	ba 87       	std	Y+10, r27	; 0x0a

	if(Recieved_Number==0){
		LCD_VoidSendChar('0',lcd,Type);
	}
	else{
		while(Recieved_Number!=0)
    3d92:	8d 89       	ldd	r24, Y+21	; 0x15
    3d94:	9e 89       	ldd	r25, Y+22	; 0x16
    3d96:	af 89       	ldd	r26, Y+23	; 0x17
    3d98:	b8 8d       	ldd	r27, Y+24	; 0x18
    3d9a:	00 97       	sbiw	r24, 0x00	; 0
    3d9c:	a1 05       	cpc	r26, r1
    3d9e:	b1 05       	cpc	r27, r1
    3da0:	09 f0       	breq	.+2      	; 0x3da4 <LCD_VoidSendInt+0x10c>
    3da2:	ae cf       	rjmp	.-164    	; 0x3d00 <LCD_VoidSendInt+0x68>
			Recieved_Number=Recieved_Number/10;
			LCD_StringCounter++;

		}
	}
	for(FORCOUNTER=(LCD_StringCounter-1);FORCOUNTER>=0;FORCOUNTER--){
    3da4:	8f 81       	ldd	r24, Y+7	; 0x07
    3da6:	98 85       	ldd	r25, Y+8	; 0x08
    3da8:	a9 85       	ldd	r26, Y+9	; 0x09
    3daa:	ba 85       	ldd	r27, Y+10	; 0x0a
    3dac:	01 97       	sbiw	r24, 0x01	; 1
    3dae:	a1 09       	sbc	r26, r1
    3db0:	b1 09       	sbc	r27, r1
    3db2:	8b 83       	std	Y+3, r24	; 0x03
    3db4:	9c 83       	std	Y+4, r25	; 0x04
    3db6:	ad 83       	std	Y+5, r26	; 0x05
    3db8:	be 83       	std	Y+6, r27	; 0x06
    3dba:	1f c0       	rjmp	.+62     	; 0x3dfa <LCD_VoidSendInt+0x162>
		Err=LCD_VoidSendChar((NumAsString[FORCOUNTER]+48),lcd,Type);
    3dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    3dc0:	ad 81       	ldd	r26, Y+5	; 0x05
    3dc2:	be 81       	ldd	r27, Y+6	; 0x06
    3dc4:	9e 01       	movw	r18, r28
    3dc6:	25 5f       	subi	r18, 0xF5	; 245
    3dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    3dca:	f9 01       	movw	r30, r18
    3dcc:	e8 0f       	add	r30, r24
    3dce:	f9 1f       	adc	r31, r25
    3dd0:	80 81       	ld	r24, Z
    3dd2:	80 5d       	subi	r24, 0xD0	; 208
    3dd4:	29 8d       	ldd	r18, Y+25	; 0x19
    3dd6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3dd8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3dda:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3ddc:	b9 01       	movw	r22, r18
    3dde:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_VoidSendChar>
    3de2:	89 83       	std	Y+1, r24	; 0x01
			Recieved_Number=Recieved_Number/10;
			LCD_StringCounter++;

		}
	}
	for(FORCOUNTER=(LCD_StringCounter-1);FORCOUNTER>=0;FORCOUNTER--){
    3de4:	8b 81       	ldd	r24, Y+3	; 0x03
    3de6:	9c 81       	ldd	r25, Y+4	; 0x04
    3de8:	ad 81       	ldd	r26, Y+5	; 0x05
    3dea:	be 81       	ldd	r27, Y+6	; 0x06
    3dec:	01 97       	sbiw	r24, 0x01	; 1
    3dee:	a1 09       	sbc	r26, r1
    3df0:	b1 09       	sbc	r27, r1
    3df2:	8b 83       	std	Y+3, r24	; 0x03
    3df4:	9c 83       	std	Y+4, r25	; 0x04
    3df6:	ad 83       	std	Y+5, r26	; 0x05
    3df8:	be 83       	std	Y+6, r27	; 0x06
    3dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    3dfe:	ad 81       	ldd	r26, Y+5	; 0x05
    3e00:	be 81       	ldd	r27, Y+6	; 0x06
    3e02:	bb 23       	and	r27, r27
    3e04:	dc f6       	brge	.-74     	; 0x3dbc <LCD_VoidSendInt+0x124>
		Err=LCD_VoidSendChar((NumAsString[FORCOUNTER]+48),lcd,Type);

	}
	//LCD_VoidSendChar('\0',lcd,Type);

}
    3e06:	6c 96       	adiw	r28, 0x1c	; 28
    3e08:	0f b6       	in	r0, 0x3f	; 63
    3e0a:	f8 94       	cli
    3e0c:	de bf       	out	0x3e, r29	; 62
    3e0e:	0f be       	out	0x3f, r0	; 63
    3e10:	cd bf       	out	0x3d, r28	; 61
    3e12:	cf 91       	pop	r28
    3e14:	df 91       	pop	r29
    3e16:	08 95       	ret

00003e18 <KP_ErrStateInit>:
		{'7','8','9','/'},
		{'4','5','6','*'},
		{'1','2','3','-'},
		{'C','0','=','+'}
};
void KP_ErrStateInit(KeypadRow_PORT_PIN *KP_RPP_INFO,KeypadCol_PORT_PIN *KP_CPP_INFO){
    3e18:	df 93       	push	r29
    3e1a:	cf 93       	push	r28
    3e1c:	00 d0       	rcall	.+0      	; 0x3e1e <KP_ErrStateInit+0x6>
    3e1e:	00 d0       	rcall	.+0      	; 0x3e20 <KP_ErrStateInit+0x8>
    3e20:	cd b7       	in	r28, 0x3d	; 61
    3e22:	de b7       	in	r29, 0x3e	; 62
    3e24:	9a 83       	std	Y+2, r25	; 0x02
    3e26:	89 83       	std	Y+1, r24	; 0x01
    3e28:	7c 83       	std	Y+4, r23	; 0x04
    3e2a:	6b 83       	std	Y+3, r22	; 0x03
	//u8 ROW,COL,ReadPin;
	//KPRPORT ROWP=KP_ROW_PORT1;
	//KPCPORT COLP=KP_COL_PORT1;
		DIO_ErrStateSetPinDirection(PORT_B,KP_RPP_INFO->ROW_PIN1,DIO_OUT);
    3e2c:	e9 81       	ldd	r30, Y+1	; 0x01
    3e2e:	fa 81       	ldd	r31, Y+2	; 0x02
    3e30:	91 81       	ldd	r25, Z+1	; 0x01
    3e32:	82 e4       	ldi	r24, 0x42	; 66
    3e34:	69 2f       	mov	r22, r25
    3e36:	41 e0       	ldi	r20, 0x01	; 1
    3e38:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_B,KP_RPP_INFO->ROW_PIN2,DIO_OUT);
    3e3c:	e9 81       	ldd	r30, Y+1	; 0x01
    3e3e:	fa 81       	ldd	r31, Y+2	; 0x02
    3e40:	93 81       	ldd	r25, Z+3	; 0x03
    3e42:	82 e4       	ldi	r24, 0x42	; 66
    3e44:	69 2f       	mov	r22, r25
    3e46:	41 e0       	ldi	r20, 0x01	; 1
    3e48:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_B,KP_RPP_INFO->ROW_PIN3,DIO_OUT);
    3e4c:	e9 81       	ldd	r30, Y+1	; 0x01
    3e4e:	fa 81       	ldd	r31, Y+2	; 0x02
    3e50:	95 81       	ldd	r25, Z+5	; 0x05
    3e52:	82 e4       	ldi	r24, 0x42	; 66
    3e54:	69 2f       	mov	r22, r25
    3e56:	41 e0       	ldi	r20, 0x01	; 1
    3e58:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_B,KP_RPP_INFO->ROW_PIN4,DIO_OUT);
    3e5c:	e9 81       	ldd	r30, Y+1	; 0x01
    3e5e:	fa 81       	ldd	r31, Y+2	; 0x02
    3e60:	97 81       	ldd	r25, Z+7	; 0x07
    3e62:	82 e4       	ldi	r24, 0x42	; 66
    3e64:	69 2f       	mov	r22, r25
    3e66:	41 e0       	ldi	r20, 0x01	; 1
    3e68:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_B,KP_CPP_INFO->COL_PIN1,DIO_IN);
    3e6c:	eb 81       	ldd	r30, Y+3	; 0x03
    3e6e:	fc 81       	ldd	r31, Y+4	; 0x04
    3e70:	91 81       	ldd	r25, Z+1	; 0x01
    3e72:	82 e4       	ldi	r24, 0x42	; 66
    3e74:	69 2f       	mov	r22, r25
    3e76:	40 e0       	ldi	r20, 0x00	; 0
    3e78:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_B,KP_CPP_INFO->COL_PIN2,DIO_IN);
    3e7c:	eb 81       	ldd	r30, Y+3	; 0x03
    3e7e:	fc 81       	ldd	r31, Y+4	; 0x04
    3e80:	93 81       	ldd	r25, Z+3	; 0x03
    3e82:	82 e4       	ldi	r24, 0x42	; 66
    3e84:	69 2f       	mov	r22, r25
    3e86:	40 e0       	ldi	r20, 0x00	; 0
    3e88:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_B,KP_CPP_INFO->COL_PIN3,DIO_IN);
    3e8c:	eb 81       	ldd	r30, Y+3	; 0x03
    3e8e:	fc 81       	ldd	r31, Y+4	; 0x04
    3e90:	95 81       	ldd	r25, Z+5	; 0x05
    3e92:	82 e4       	ldi	r24, 0x42	; 66
    3e94:	69 2f       	mov	r22, r25
    3e96:	40 e0       	ldi	r20, 0x00	; 0
    3e98:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_B,KP_CPP_INFO->COL_PIN4,DIO_IN);
    3e9c:	eb 81       	ldd	r30, Y+3	; 0x03
    3e9e:	fc 81       	ldd	r31, Y+4	; 0x04
    3ea0:	97 81       	ldd	r25, Z+7	; 0x07
    3ea2:	82 e4       	ldi	r24, 0x42	; 66
    3ea4:	69 2f       	mov	r22, r25
    3ea6:	40 e0       	ldi	r20, 0x00	; 0
    3ea8:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinValue(PORT_B,KP_RPP_INFO->ROW_PIN1,DIO_HIGH);
    3eac:	e9 81       	ldd	r30, Y+1	; 0x01
    3eae:	fa 81       	ldd	r31, Y+2	; 0x02
    3eb0:	91 81       	ldd	r25, Z+1	; 0x01
    3eb2:	82 e4       	ldi	r24, 0x42	; 66
    3eb4:	69 2f       	mov	r22, r25
    3eb6:	41 e0       	ldi	r20, 0x01	; 1
    3eb8:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_B,KP_RPP_INFO->ROW_PIN2,DIO_HIGH);
    3ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    3ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    3ec0:	93 81       	ldd	r25, Z+3	; 0x03
    3ec2:	82 e4       	ldi	r24, 0x42	; 66
    3ec4:	69 2f       	mov	r22, r25
    3ec6:	41 e0       	ldi	r20, 0x01	; 1
    3ec8:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_B,KP_RPP_INFO->ROW_PIN3,DIO_HIGH);
    3ecc:	e9 81       	ldd	r30, Y+1	; 0x01
    3ece:	fa 81       	ldd	r31, Y+2	; 0x02
    3ed0:	95 81       	ldd	r25, Z+5	; 0x05
    3ed2:	82 e4       	ldi	r24, 0x42	; 66
    3ed4:	69 2f       	mov	r22, r25
    3ed6:	41 e0       	ldi	r20, 0x01	; 1
    3ed8:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_B,KP_RPP_INFO->ROW_PIN4,DIO_HIGH);
    3edc:	e9 81       	ldd	r30, Y+1	; 0x01
    3ede:	fa 81       	ldd	r31, Y+2	; 0x02
    3ee0:	97 81       	ldd	r25, Z+7	; 0x07
    3ee2:	82 e4       	ldi	r24, 0x42	; 66
    3ee4:	69 2f       	mov	r22, r25
    3ee6:	41 e0       	ldi	r20, 0x01	; 1
    3ee8:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_B,KP_CPP_INFO->COL_PIN1,DIO_HIGH);
    3eec:	eb 81       	ldd	r30, Y+3	; 0x03
    3eee:	fc 81       	ldd	r31, Y+4	; 0x04
    3ef0:	91 81       	ldd	r25, Z+1	; 0x01
    3ef2:	82 e4       	ldi	r24, 0x42	; 66
    3ef4:	69 2f       	mov	r22, r25
    3ef6:	41 e0       	ldi	r20, 0x01	; 1
    3ef8:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_B,KP_CPP_INFO->COL_PIN2,DIO_HIGH);
    3efc:	eb 81       	ldd	r30, Y+3	; 0x03
    3efe:	fc 81       	ldd	r31, Y+4	; 0x04
    3f00:	93 81       	ldd	r25, Z+3	; 0x03
    3f02:	82 e4       	ldi	r24, 0x42	; 66
    3f04:	69 2f       	mov	r22, r25
    3f06:	41 e0       	ldi	r20, 0x01	; 1
    3f08:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_B,KP_CPP_INFO->COL_PIN3,DIO_HIGH);
    3f0c:	eb 81       	ldd	r30, Y+3	; 0x03
    3f0e:	fc 81       	ldd	r31, Y+4	; 0x04
    3f10:	95 81       	ldd	r25, Z+5	; 0x05
    3f12:	82 e4       	ldi	r24, 0x42	; 66
    3f14:	69 2f       	mov	r22, r25
    3f16:	41 e0       	ldi	r20, 0x01	; 1
    3f18:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_B,KP_CPP_INFO->COL_PIN4,DIO_HIGH);
    3f1c:	eb 81       	ldd	r30, Y+3	; 0x03
    3f1e:	fc 81       	ldd	r31, Y+4	; 0x04
    3f20:	97 81       	ldd	r25, Z+7	; 0x07
    3f22:	82 e4       	ldi	r24, 0x42	; 66
    3f24:	69 2f       	mov	r22, r25
    3f26:	41 e0       	ldi	r20, 0x01	; 1
    3f28:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>

}
    3f2c:	0f 90       	pop	r0
    3f2e:	0f 90       	pop	r0
    3f30:	0f 90       	pop	r0
    3f32:	0f 90       	pop	r0
    3f34:	cf 91       	pop	r28
    3f36:	df 91       	pop	r29
    3f38:	08 95       	ret

00003f3a <KP_ErrStateRead>:
KP_ErrState	KP_ErrStateRead(KeypadRow_PORT_PIN *KP_RPP_INFO,KeypadCol_PORT_PIN *KP_CPP_INFO,u8 *ReadValue){
    3f3a:	df 93       	push	r29
    3f3c:	cf 93       	push	r28
    3f3e:	cd b7       	in	r28, 0x3d	; 61
    3f40:	de b7       	in	r29, 0x3e	; 62
    3f42:	69 97       	sbiw	r28, 0x19	; 25
    3f44:	0f b6       	in	r0, 0x3f	; 63
    3f46:	f8 94       	cli
    3f48:	de bf       	out	0x3e, r29	; 62
    3f4a:	0f be       	out	0x3f, r0	; 63
    3f4c:	cd bf       	out	0x3d, r28	; 61
    3f4e:	9c 8b       	std	Y+20, r25	; 0x14
    3f50:	8b 8b       	std	Y+19, r24	; 0x13
    3f52:	7e 8b       	std	Y+22, r23	; 0x16
    3f54:	6d 8b       	std	Y+21, r22	; 0x15
    3f56:	58 8f       	std	Y+24, r21	; 0x18
    3f58:	4f 8b       	std	Y+23, r20	; 0x17
	u8 ROW,COL,ReadPin;
	u8 ErrVal;
	//_delay_ms(100);
	for(ROW=0;ROW<4;ROW++){
    3f5a:	19 8a       	std	Y+17, r1	; 0x11
    3f5c:	c5 c0       	rjmp	.+394    	; 0x40e8 <KP_ErrStateRead+0x1ae>
		DIO_ErrStateSetPinValue(PORT_B,ROW,DIO_LOW);
    3f5e:	82 e4       	ldi	r24, 0x42	; 66
    3f60:	69 89       	ldd	r22, Y+17	; 0x11
    3f62:	40 e0       	ldi	r20, 0x00	; 0
    3f64:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>

		for(COL=4;COL<8;COL++){
    3f68:	84 e0       	ldi	r24, 0x04	; 4
    3f6a:	88 8b       	std	Y+16, r24	; 0x10
    3f6c:	b1 c0       	rjmp	.+354    	; 0x40d0 <KP_ErrStateRead+0x196>
			ErrVal=DIO_ErrStateReadPinValue(PORT_B,COL,&ReadPin);
    3f6e:	9e 01       	movw	r18, r28
    3f70:	2e 5e       	subi	r18, 0xEE	; 238
    3f72:	3f 4f       	sbci	r19, 0xFF	; 255
    3f74:	82 e4       	ldi	r24, 0x42	; 66
    3f76:	68 89       	ldd	r22, Y+16	; 0x10
    3f78:	a9 01       	movw	r20, r18
    3f7a:	0e 94 3d 0c 	call	0x187a	; 0x187a <DIO_ErrStateReadPinValue>
    3f7e:	8f 87       	std	Y+15, r24	; 0x0f
    3f80:	80 e0       	ldi	r24, 0x00	; 0
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	a0 ef       	ldi	r26, 0xF0	; 240
    3f86:	b1 e4       	ldi	r27, 0x41	; 65
    3f88:	8b 87       	std	Y+11, r24	; 0x0b
    3f8a:	9c 87       	std	Y+12, r25	; 0x0c
    3f8c:	ad 87       	std	Y+13, r26	; 0x0d
    3f8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f90:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f92:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f94:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f96:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	4a ef       	ldi	r20, 0xFA	; 250
    3f9e:	54 e4       	ldi	r21, 0x44	; 68
    3fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa4:	dc 01       	movw	r26, r24
    3fa6:	cb 01       	movw	r24, r22
    3fa8:	8f 83       	std	Y+7, r24	; 0x07
    3faa:	98 87       	std	Y+8, r25	; 0x08
    3fac:	a9 87       	std	Y+9, r26	; 0x09
    3fae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fb0:	6f 81       	ldd	r22, Y+7	; 0x07
    3fb2:	78 85       	ldd	r23, Y+8	; 0x08
    3fb4:	89 85       	ldd	r24, Y+9	; 0x09
    3fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fb8:	20 e0       	ldi	r18, 0x00	; 0
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	40 e8       	ldi	r20, 0x80	; 128
    3fbe:	5f e3       	ldi	r21, 0x3F	; 63
    3fc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fc4:	88 23       	and	r24, r24
    3fc6:	2c f4       	brge	.+10     	; 0x3fd2 <KP_ErrStateRead+0x98>
		__ticks = 1;
    3fc8:	81 e0       	ldi	r24, 0x01	; 1
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	9e 83       	std	Y+6, r25	; 0x06
    3fce:	8d 83       	std	Y+5, r24	; 0x05
    3fd0:	3f c0       	rjmp	.+126    	; 0x4050 <KP_ErrStateRead+0x116>
	else if (__tmp > 65535)
    3fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    3fd4:	78 85       	ldd	r23, Y+8	; 0x08
    3fd6:	89 85       	ldd	r24, Y+9	; 0x09
    3fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fda:	20 e0       	ldi	r18, 0x00	; 0
    3fdc:	3f ef       	ldi	r19, 0xFF	; 255
    3fde:	4f e7       	ldi	r20, 0x7F	; 127
    3fe0:	57 e4       	ldi	r21, 0x47	; 71
    3fe2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fe6:	18 16       	cp	r1, r24
    3fe8:	4c f5       	brge	.+82     	; 0x403c <KP_ErrStateRead+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fea:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fec:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fee:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	40 e2       	ldi	r20, 0x20	; 32
    3ff8:	51 e4       	ldi	r21, 0x41	; 65
    3ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ffe:	dc 01       	movw	r26, r24
    4000:	cb 01       	movw	r24, r22
    4002:	bc 01       	movw	r22, r24
    4004:	cd 01       	movw	r24, r26
    4006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    400a:	dc 01       	movw	r26, r24
    400c:	cb 01       	movw	r24, r22
    400e:	9e 83       	std	Y+6, r25	; 0x06
    4010:	8d 83       	std	Y+5, r24	; 0x05
    4012:	0f c0       	rjmp	.+30     	; 0x4032 <KP_ErrStateRead+0xf8>
    4014:	88 ec       	ldi	r24, 0xC8	; 200
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	9c 83       	std	Y+4, r25	; 0x04
    401a:	8b 83       	std	Y+3, r24	; 0x03
    401c:	8b 81       	ldd	r24, Y+3	; 0x03
    401e:	9c 81       	ldd	r25, Y+4	; 0x04
    4020:	01 97       	sbiw	r24, 0x01	; 1
    4022:	f1 f7       	brne	.-4      	; 0x4020 <KP_ErrStateRead+0xe6>
    4024:	9c 83       	std	Y+4, r25	; 0x04
    4026:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4028:	8d 81       	ldd	r24, Y+5	; 0x05
    402a:	9e 81       	ldd	r25, Y+6	; 0x06
    402c:	01 97       	sbiw	r24, 0x01	; 1
    402e:	9e 83       	std	Y+6, r25	; 0x06
    4030:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4032:	8d 81       	ldd	r24, Y+5	; 0x05
    4034:	9e 81       	ldd	r25, Y+6	; 0x06
    4036:	00 97       	sbiw	r24, 0x00	; 0
    4038:	69 f7       	brne	.-38     	; 0x4014 <KP_ErrStateRead+0xda>
    403a:	14 c0       	rjmp	.+40     	; 0x4064 <KP_ErrStateRead+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    403c:	6f 81       	ldd	r22, Y+7	; 0x07
    403e:	78 85       	ldd	r23, Y+8	; 0x08
    4040:	89 85       	ldd	r24, Y+9	; 0x09
    4042:	9a 85       	ldd	r25, Y+10	; 0x0a
    4044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4048:	dc 01       	movw	r26, r24
    404a:	cb 01       	movw	r24, r22
    404c:	9e 83       	std	Y+6, r25	; 0x06
    404e:	8d 83       	std	Y+5, r24	; 0x05
    4050:	8d 81       	ldd	r24, Y+5	; 0x05
    4052:	9e 81       	ldd	r25, Y+6	; 0x06
    4054:	9a 83       	std	Y+2, r25	; 0x02
    4056:	89 83       	std	Y+1, r24	; 0x01
    4058:	89 81       	ldd	r24, Y+1	; 0x01
    405a:	9a 81       	ldd	r25, Y+2	; 0x02
    405c:	01 97       	sbiw	r24, 0x01	; 1
    405e:	f1 f7       	brne	.-4      	; 0x405c <KP_ErrStateRead+0x122>
    4060:	9a 83       	std	Y+2, r25	; 0x02
    4062:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(30);
			if(ErrVal==DIO_OK&&ReadPin==0){
    4064:	8f 85       	ldd	r24, Y+15	; 0x0f
    4066:	88 23       	and	r24, r24
    4068:	81 f5       	brne	.+96     	; 0x40ca <KP_ErrStateRead+0x190>
    406a:	8a 89       	ldd	r24, Y+18	; 0x12
    406c:	88 23       	and	r24, r24
    406e:	69 f5       	brne	.+90     	; 0x40ca <KP_ErrStateRead+0x190>
				//DIO_ErrStateSetPinDirection(PORT_D,PIN_0,DIO_OUT);
				//DIO_ErrStateSetPinValue(PORT_D,PIN_0,DIO_HIGH);
				DIO_ErrStateSetPinValue(PORT_B,ROW,DIO_HIGH);
    4070:	82 e4       	ldi	r24, 0x42	; 66
    4072:	69 89       	ldd	r22, Y+17	; 0x11
    4074:	41 e0       	ldi	r20, 0x01	; 1
    4076:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
				//_delay_ms(30);
				*ReadValue =KP_Arr[ROW][COL-4];
    407a:	89 89       	ldd	r24, Y+17	; 0x11
    407c:	48 2f       	mov	r20, r24
    407e:	50 e0       	ldi	r21, 0x00	; 0
    4080:	88 89       	ldd	r24, Y+16	; 0x10
    4082:	88 2f       	mov	r24, r24
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	9c 01       	movw	r18, r24
    4088:	24 50       	subi	r18, 0x04	; 4
    408a:	30 40       	sbci	r19, 0x00	; 0
    408c:	ca 01       	movw	r24, r20
    408e:	88 0f       	add	r24, r24
    4090:	99 1f       	adc	r25, r25
    4092:	88 0f       	add	r24, r24
    4094:	99 1f       	adc	r25, r25
    4096:	82 0f       	add	r24, r18
    4098:	93 1f       	adc	r25, r19
    409a:	fc 01       	movw	r30, r24
    409c:	e3 58       	subi	r30, 0x83	; 131
    409e:	fe 4f       	sbci	r31, 0xFE	; 254
    40a0:	80 81       	ld	r24, Z
    40a2:	ef 89       	ldd	r30, Y+23	; 0x17
    40a4:	f8 8d       	ldd	r31, Y+24	; 0x18
    40a6:	80 83       	st	Z, r24
    40a8:	0b c0       	rjmp	.+22     	; 0x40c0 <KP_ErrStateRead+0x186>
				// test could be removed
				while(ReadPin==0){
					DIO_ErrStateReadPinValue(PORT_B,COL,&ReadPin);
    40aa:	9e 01       	movw	r18, r28
    40ac:	2e 5e       	subi	r18, 0xEE	; 238
    40ae:	3f 4f       	sbci	r19, 0xFF	; 255
    40b0:	82 e4       	ldi	r24, 0x42	; 66
    40b2:	68 89       	ldd	r22, Y+16	; 0x10
    40b4:	a9 01       	movw	r20, r18
    40b6:	0e 94 3d 0c 	call	0x187a	; 0x187a <DIO_ErrStateReadPinValue>
					if(ReadPin==1)
    40ba:	8a 89       	ldd	r24, Y+18	; 0x12
    40bc:	81 30       	cpi	r24, 0x01	; 1
    40be:	19 f0       	breq	.+6      	; 0x40c6 <KP_ErrStateRead+0x18c>
				//DIO_ErrStateSetPinValue(PORT_D,PIN_0,DIO_HIGH);
				DIO_ErrStateSetPinValue(PORT_B,ROW,DIO_HIGH);
				//_delay_ms(30);
				*ReadValue =KP_Arr[ROW][COL-4];
				// test could be removed
				while(ReadPin==0){
    40c0:	8a 89       	ldd	r24, Y+18	; 0x12
    40c2:	88 23       	and	r24, r24
    40c4:	91 f3       	breq	.-28     	; 0x40aa <KP_ErrStateRead+0x170>
					DIO_ErrStateReadPinValue(PORT_B,COL,&ReadPin);
					if(ReadPin==1)
						break;
				}
				return OK;
    40c6:	19 8e       	std	Y+25, r1	; 0x19
    40c8:	15 c0       	rjmp	.+42     	; 0x40f4 <KP_ErrStateRead+0x1ba>
	u8 ErrVal;
	//_delay_ms(100);
	for(ROW=0;ROW<4;ROW++){
		DIO_ErrStateSetPinValue(PORT_B,ROW,DIO_LOW);

		for(COL=4;COL<8;COL++){
    40ca:	88 89       	ldd	r24, Y+16	; 0x10
    40cc:	8f 5f       	subi	r24, 0xFF	; 255
    40ce:	88 8b       	std	Y+16, r24	; 0x10
    40d0:	88 89       	ldd	r24, Y+16	; 0x10
    40d2:	88 30       	cpi	r24, 0x08	; 8
    40d4:	08 f4       	brcc	.+2      	; 0x40d8 <KP_ErrStateRead+0x19e>
    40d6:	4b cf       	rjmp	.-362    	; 0x3f6e <KP_ErrStateRead+0x34>
						break;
				}
				return OK;
			}
		}
		DIO_ErrStateSetPinValue(PORT_B,ROW,DIO_HIGH);
    40d8:	82 e4       	ldi	r24, 0x42	; 66
    40da:	69 89       	ldd	r22, Y+17	; 0x11
    40dc:	41 e0       	ldi	r20, 0x01	; 1
    40de:	0e 94 28 0b 	call	0x1650	; 0x1650 <DIO_ErrStateSetPinValue>
}
KP_ErrState	KP_ErrStateRead(KeypadRow_PORT_PIN *KP_RPP_INFO,KeypadCol_PORT_PIN *KP_CPP_INFO,u8 *ReadValue){
	u8 ROW,COL,ReadPin;
	u8 ErrVal;
	//_delay_ms(100);
	for(ROW=0;ROW<4;ROW++){
    40e2:	89 89       	ldd	r24, Y+17	; 0x11
    40e4:	8f 5f       	subi	r24, 0xFF	; 255
    40e6:	89 8b       	std	Y+17, r24	; 0x11
    40e8:	89 89       	ldd	r24, Y+17	; 0x11
    40ea:	84 30       	cpi	r24, 0x04	; 4
    40ec:	08 f4       	brcc	.+2      	; 0x40f0 <KP_ErrStateRead+0x1b6>
    40ee:	37 cf       	rjmp	.-402    	; 0x3f5e <KP_ErrStateRead+0x24>
				return OK;
			}
		}
		DIO_ErrStateSetPinValue(PORT_B,ROW,DIO_HIGH);
	}
	return Error;
    40f0:	81 e0       	ldi	r24, 0x01	; 1
    40f2:	89 8f       	std	Y+25, r24	; 0x19
    40f4:	89 8d       	ldd	r24, Y+25	; 0x19
	//Flag=0;
}
    40f6:	69 96       	adiw	r28, 0x19	; 25
    40f8:	0f b6       	in	r0, 0x3f	; 63
    40fa:	f8 94       	cli
    40fc:	de bf       	out	0x3e, r29	; 62
    40fe:	0f be       	out	0x3f, r0	; 63
    4100:	cd bf       	out	0x3d, r28	; 61
    4102:	cf 91       	pop	r28
    4104:	df 91       	pop	r29
    4106:	08 95       	ret

00004108 <main>:
//KeypadCol_PORT_PIN CPP={KP_COL_PORT1,KP_COL_PIN1,KP_COL_PORT2,KP_COL_PIN2,KP_COL_PORT3,KP_COL_PIN3,KP_COL_PORT4,KP_COL_PIN4};

//Switch_Info PB ={PORT_D,PIN_2,InternalPullUp};
void PWMFun(void);
void main()
{u16 i;
    4108:	df 93       	push	r29
    410a:	cf 93       	push	r28
    410c:	00 d0       	rcall	.+0      	; 0x410e <main+0x6>
    410e:	cd b7       	in	r28, 0x3d	; 61
    4110:	de b7       	in	r29, 0x3e	; 62
	EnableGlobalInterrupt();
    4112:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <EnableGlobalInterrupt>
	T0_VoidInit();
    4116:	0e 94 55 07 	call	0xeaa	; 0xeaa <T0_VoidInit>
	//LCD_VoidInit(&lcd);

	while(1){
		i=5000;
    411a:	88 e8       	ldi	r24, 0x88	; 136
    411c:	93 e1       	ldi	r25, 0x13	; 19
    411e:	9a 83       	std	Y+2, r25	; 0x02
    4120:	89 83       	std	Y+1, r24	; 0x01
		Timer0_VoidSetOCR0(10,&i);
    4122:	8a e0       	ldi	r24, 0x0A	; 10
    4124:	9e 01       	movw	r18, r28
    4126:	2f 5f       	subi	r18, 0xFF	; 255
    4128:	3f 4f       	sbci	r19, 0xFF	; 255
    412a:	b9 01       	movw	r22, r18
    412c:	0e 94 b4 07 	call	0xf68	; 0xf68 <Timer0_VoidSetOCR0>
		Timer0_u8SetCallBack(PWMFun);
    4130:	8d e9       	ldi	r24, 0x9D	; 157
    4132:	90 e2       	ldi	r25, 0x20	; 32
    4134:	0e 94 d6 07 	call	0xfac	; 0xfac <Timer0_u8SetCallBack>
    4138:	f0 cf       	rjmp	.-32     	; 0x411a <main+0x12>

0000413a <PWMFun>:

	}

}

void PWMFun(void){
    413a:	df 93       	push	r29
    413c:	cf 93       	push	r28
    413e:	cd b7       	in	r28, 0x3d	; 61
    4140:	de b7       	in	r29, 0x3e	; 62
	TOGGLE_BIT(PORTA_ITI,PIN_0);
    4142:	ab e3       	ldi	r26, 0x3B	; 59
    4144:	b0 e0       	ldi	r27, 0x00	; 0
    4146:	eb e3       	ldi	r30, 0x3B	; 59
    4148:	f0 e0       	ldi	r31, 0x00	; 0
    414a:	90 81       	ld	r25, Z
    414c:	81 e0       	ldi	r24, 0x01	; 1
    414e:	89 27       	eor	r24, r25
    4150:	8c 93       	st	X, r24
}
    4152:	cf 91       	pop	r28
    4154:	df 91       	pop	r29
    4156:	08 95       	ret

00004158 <__udivmodsi4>:
    4158:	a1 e2       	ldi	r26, 0x21	; 33
    415a:	1a 2e       	mov	r1, r26
    415c:	aa 1b       	sub	r26, r26
    415e:	bb 1b       	sub	r27, r27
    4160:	fd 01       	movw	r30, r26
    4162:	0d c0       	rjmp	.+26     	; 0x417e <__udivmodsi4_ep>

00004164 <__udivmodsi4_loop>:
    4164:	aa 1f       	adc	r26, r26
    4166:	bb 1f       	adc	r27, r27
    4168:	ee 1f       	adc	r30, r30
    416a:	ff 1f       	adc	r31, r31
    416c:	a2 17       	cp	r26, r18
    416e:	b3 07       	cpc	r27, r19
    4170:	e4 07       	cpc	r30, r20
    4172:	f5 07       	cpc	r31, r21
    4174:	20 f0       	brcs	.+8      	; 0x417e <__udivmodsi4_ep>
    4176:	a2 1b       	sub	r26, r18
    4178:	b3 0b       	sbc	r27, r19
    417a:	e4 0b       	sbc	r30, r20
    417c:	f5 0b       	sbc	r31, r21

0000417e <__udivmodsi4_ep>:
    417e:	66 1f       	adc	r22, r22
    4180:	77 1f       	adc	r23, r23
    4182:	88 1f       	adc	r24, r24
    4184:	99 1f       	adc	r25, r25
    4186:	1a 94       	dec	r1
    4188:	69 f7       	brne	.-38     	; 0x4164 <__udivmodsi4_loop>
    418a:	60 95       	com	r22
    418c:	70 95       	com	r23
    418e:	80 95       	com	r24
    4190:	90 95       	com	r25
    4192:	9b 01       	movw	r18, r22
    4194:	ac 01       	movw	r20, r24
    4196:	bd 01       	movw	r22, r26
    4198:	cf 01       	movw	r24, r30
    419a:	08 95       	ret

0000419c <__prologue_saves__>:
    419c:	2f 92       	push	r2
    419e:	3f 92       	push	r3
    41a0:	4f 92       	push	r4
    41a2:	5f 92       	push	r5
    41a4:	6f 92       	push	r6
    41a6:	7f 92       	push	r7
    41a8:	8f 92       	push	r8
    41aa:	9f 92       	push	r9
    41ac:	af 92       	push	r10
    41ae:	bf 92       	push	r11
    41b0:	cf 92       	push	r12
    41b2:	df 92       	push	r13
    41b4:	ef 92       	push	r14
    41b6:	ff 92       	push	r15
    41b8:	0f 93       	push	r16
    41ba:	1f 93       	push	r17
    41bc:	cf 93       	push	r28
    41be:	df 93       	push	r29
    41c0:	cd b7       	in	r28, 0x3d	; 61
    41c2:	de b7       	in	r29, 0x3e	; 62
    41c4:	ca 1b       	sub	r28, r26
    41c6:	db 0b       	sbc	r29, r27
    41c8:	0f b6       	in	r0, 0x3f	; 63
    41ca:	f8 94       	cli
    41cc:	de bf       	out	0x3e, r29	; 62
    41ce:	0f be       	out	0x3f, r0	; 63
    41d0:	cd bf       	out	0x3d, r28	; 61
    41d2:	09 94       	ijmp

000041d4 <__epilogue_restores__>:
    41d4:	2a 88       	ldd	r2, Y+18	; 0x12
    41d6:	39 88       	ldd	r3, Y+17	; 0x11
    41d8:	48 88       	ldd	r4, Y+16	; 0x10
    41da:	5f 84       	ldd	r5, Y+15	; 0x0f
    41dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    41de:	7d 84       	ldd	r7, Y+13	; 0x0d
    41e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    41e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    41e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    41e6:	b9 84       	ldd	r11, Y+9	; 0x09
    41e8:	c8 84       	ldd	r12, Y+8	; 0x08
    41ea:	df 80       	ldd	r13, Y+7	; 0x07
    41ec:	ee 80       	ldd	r14, Y+6	; 0x06
    41ee:	fd 80       	ldd	r15, Y+5	; 0x05
    41f0:	0c 81       	ldd	r16, Y+4	; 0x04
    41f2:	1b 81       	ldd	r17, Y+3	; 0x03
    41f4:	aa 81       	ldd	r26, Y+2	; 0x02
    41f6:	b9 81       	ldd	r27, Y+1	; 0x01
    41f8:	ce 0f       	add	r28, r30
    41fa:	d1 1d       	adc	r29, r1
    41fc:	0f b6       	in	r0, 0x3f	; 63
    41fe:	f8 94       	cli
    4200:	de bf       	out	0x3e, r29	; 62
    4202:	0f be       	out	0x3f, r0	; 63
    4204:	cd bf       	out	0x3d, r28	; 61
    4206:	ed 01       	movw	r28, r26
    4208:	08 95       	ret

0000420a <_exit>:
    420a:	f8 94       	cli

0000420c <__stop_program>:
    420c:	ff cf       	rjmp	.-2      	; 0x420c <__stop_program>
