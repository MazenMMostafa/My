
Mar_29.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004108  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00004108  0000419c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  0080009a  0080009a  000041d6  2**0
                  ALLOC
  3 .stab         000052e0  00000000  00000000  000041d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003fcb  00000000  00000000  000094b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000d483  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000d5c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000d733  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000f37c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00010267  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00011014  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00011174  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00011401  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011bcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__vector_1>
       8:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__vector_2>
       c:	0c 94 75 06 	jmp	0xcea	; 0xcea <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3b       	cpi	r26, 0xB3	; 179
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <main>
      8a:	0c 94 82 20 	jmp	0x4104	; 0x4104 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4b 20 	jmp	0x4096	; 0x4096 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 67 20 	jmp	0x40ce	; 0x40ce <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4b 20 	jmp	0x4096	; 0x4096 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 67 20 	jmp	0x40ce	; 0x40ce <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 57 20 	jmp	0x40ae	; 0x40ae <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5b 20 	jmp	0x40b6	; 0x40b6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 77 20 	jmp	0x40ee	; 0x40ee <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Time_0_Init>:
//u32 Desired;
/*void CallBackTimer0(void(*Timer0)(void)){
	VoidNormalTimer0=Timer0;
}*/

void Time_0_Init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
	SET_BIT(TIMSK,0);
     b5c:	a9 e5       	ldi	r26, 0x59	; 89
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e9 e5       	ldi	r30, 0x59	; 89
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	81 60       	ori	r24, 0x01	; 1
     b68:	8c 93       	st	X, r24
	//CLEAR_BIT(TCCR0,7);
	//SET_BIT(TCCR0,1);
	SET_BIT(TCCR0,6);
     b6a:	a3 e5       	ldi	r26, 0x53	; 83
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e3 e5       	ldi	r30, 0x53	; 83
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 64       	ori	r24, 0x40	; 64
     b76:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 60       	ori	r24, 0x08	; 8
     b84:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 62       	ori	r24, 0x20	; 32
     b92:	8c 93       	st	X, r24
	//CLEAR_BIT(TCCR0,5);
}
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <__vector_11>:
void __vector_11 (void)  __attribute__((signal));
void __vector_11 (void)
{
     b9a:	1f 92       	push	r1
     b9c:	0f 92       	push	r0
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	0f 92       	push	r0
     ba2:	11 24       	eor	r1, r1
     ba4:	8f 93       	push	r24
     ba6:	9f 93       	push	r25
     ba8:	af 93       	push	r26
     baa:	bf 93       	push	r27
     bac:	ef 93       	push	r30
     bae:	ff 93       	push	r31
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
	SWCounts = 1/ TOF;
	//t=(SWCounts - (u32)SWCounts);
//	Preload = 256-(t*256);
	*///if(VoidNormalTimer0!=Null){

	count++;
     bb8:	80 91 9a 00 	lds	r24, 0x009A
     bbc:	90 91 9b 00 	lds	r25, 0x009B
     bc0:	a0 91 9c 00 	lds	r26, 0x009C
     bc4:	b0 91 9d 00 	lds	r27, 0x009D
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	a1 1d       	adc	r26, r1
     bcc:	b1 1d       	adc	r27, r1
     bce:	80 93 9a 00 	sts	0x009A, r24
     bd2:	90 93 9b 00 	sts	0x009B, r25
     bd6:	a0 93 9c 00 	sts	0x009C, r26
     bda:	b0 93 9d 00 	sts	0x009D, r27
	OCR0=125;
     bde:	ec e5       	ldi	r30, 0x5C	; 92
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	8d e7       	ldi	r24, 0x7D	; 125
     be4:	80 83       	st	Z, r24
		if(count == 0)
     be6:	80 91 9a 00 	lds	r24, 0x009A
     bea:	90 91 9b 00 	lds	r25, 0x009B
     bee:	a0 91 9c 00 	lds	r26, 0x009C
     bf2:	b0 91 9d 00 	lds	r27, 0x009D
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	a1 05       	cpc	r26, r1
     bfa:	b1 05       	cpc	r27, r1
     bfc:	49 f4       	brne	.+18     	; 0xc10 <__vector_11+0x76>
		{	TOGGLE_BIT(PORTA_ITI,0);
     bfe:	ab e3       	ldi	r26, 0x3B	; 59
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	eb e3       	ldi	r30, 0x3B	; 59
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	90 81       	ld	r25, Z
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	89 27       	eor	r24, r25
     c0c:	8c 93       	st	X, r24
     c0e:	2b c0       	rjmp	.+86     	; 0xc66 <__vector_11+0xcc>
			//SET CALL BACK FUNCTION
			//count = 0;
			//TCNT0 = 90;

		}
		else if(count == 10)
     c10:	80 91 9a 00 	lds	r24, 0x009A
     c14:	90 91 9b 00 	lds	r25, 0x009B
     c18:	a0 91 9c 00 	lds	r26, 0x009C
     c1c:	b0 91 9d 00 	lds	r27, 0x009D
     c20:	8a 30       	cpi	r24, 0x0A	; 10
     c22:	91 05       	cpc	r25, r1
     c24:	a1 05       	cpc	r26, r1
     c26:	b1 05       	cpc	r27, r1
     c28:	49 f4       	brne	.+18     	; 0xc3c <__vector_11+0xa2>
		{	TOGGLE_BIT(PORTA_ITI,0);
     c2a:	ab e3       	ldi	r26, 0x3B	; 59
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	eb e3       	ldi	r30, 0x3B	; 59
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	90 81       	ld	r25, Z
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	89 27       	eor	r24, r25
     c38:	8c 93       	st	X, r24
     c3a:	15 c0       	rjmp	.+42     	; 0xc66 <__vector_11+0xcc>
			//SET CALL BACK FUNCTION
			//TCNT0 = 90;

		}
		else if(count==20){
     c3c:	80 91 9a 00 	lds	r24, 0x009A
     c40:	90 91 9b 00 	lds	r25, 0x009B
     c44:	a0 91 9c 00 	lds	r26, 0x009C
     c48:	b0 91 9d 00 	lds	r27, 0x009D
     c4c:	84 31       	cpi	r24, 0x14	; 20
     c4e:	91 05       	cpc	r25, r1
     c50:	a1 05       	cpc	r26, r1
     c52:	b1 05       	cpc	r27, r1
     c54:	41 f4       	brne	.+16     	; 0xc66 <__vector_11+0xcc>
			count=0;
     c56:	10 92 9a 00 	sts	0x009A, r1
     c5a:	10 92 9b 00 	sts	0x009B, r1
     c5e:	10 92 9c 00 	sts	0x009C, r1
     c62:	10 92 9d 00 	sts	0x009D, r1
		}

}
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	ff 91       	pop	r31
     c6c:	ef 91       	pop	r30
     c6e:	bf 91       	pop	r27
     c70:	af 91       	pop	r26
     c72:	9f 91       	pop	r25
     c74:	8f 91       	pop	r24
     c76:	0f 90       	pop	r0
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	0f 90       	pop	r0
     c7c:	1f 90       	pop	r1
     c7e:	18 95       	reti

00000c80 <INT2_VoidSETINT2>:
 *      Author: Mazen
 */
#include "EXTINT2_Interface.h"
void (*INT2_CallbackAddress)(void)=Null;

void INT2_VoidSETINT2(void){
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
EnableGlobalInterrupt();
     c88:	0e 94 da 07 	call	0xfb4	; 0xfb4 <EnableGlobalInterrupt>
ENABLEINT2_GICR_Reg;
     c8c:	ab e5       	ldi	r26, 0x5B	; 91
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	eb e5       	ldi	r30, 0x5B	; 91
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	80 62       	ori	r24, 0x20	; 32
     c98:	8c 93       	st	X, r24
ENABLEINT2_FALLING_EDGE;
     c9a:	a4 e5       	ldi	r26, 0x54	; 84
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e4 e5       	ldi	r30, 0x54	; 84
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	80 64       	ori	r24, 0x40	; 64
     ca6:	8c 93       	st	X, r24
}
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <INT2_SetCallBack>:
INT2_Err INT2_SetCallBack(void (*INT2CB)(void)){
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <INT2_SetCallBack+0x6>
     cb4:	0f 92       	push	r0
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	9a 83       	std	Y+2, r25	; 0x02
     cbc:	89 83       	std	Y+1, r24	; 0x01
	if(INT2CB!=Null){
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	49 f0       	breq	.+18     	; 0xcd8 <INT2_SetCallBack+0x2a>
	INT2CB=INT2_CallbackAddress;
     cc6:	80 91 9e 00 	lds	r24, 0x009E
     cca:	90 91 9f 00 	lds	r25, 0x009F
     cce:	9a 83       	std	Y+2, r25	; 0x02
     cd0:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		return INT2_PTR_NULL;
	}
	return INT2_PTR_OK;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	8b 83       	std	Y+3, r24	; 0x03
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <INT2_SetCallBack+0x2e>
	if(INT2CB!=Null){
	INT2CB=INT2_CallbackAddress;
	}
	else
	{
		return INT2_PTR_NULL;
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	8b 83       	std	Y+3, r24	; 0x03
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return INT2_PTR_OK;
}
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void){
     cea:	1f 92       	push	r1
     cec:	0f 92       	push	r0
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	0f 92       	push	r0
     cf2:	11 24       	eor	r1, r1
     cf4:	2f 93       	push	r18
     cf6:	3f 93       	push	r19
     cf8:	4f 93       	push	r20
     cfa:	5f 93       	push	r21
     cfc:	6f 93       	push	r22
     cfe:	7f 93       	push	r23
     d00:	8f 93       	push	r24
     d02:	9f 93       	push	r25
     d04:	af 93       	push	r26
     d06:	bf 93       	push	r27
     d08:	ef 93       	push	r30
     d0a:	ff 93       	push	r31
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
if(INT2_CallbackAddress!=Null){
     d14:	80 91 9e 00 	lds	r24, 0x009E
     d18:	90 91 9f 00 	lds	r25, 0x009F
     d1c:	00 97       	sbiw	r24, 0x00	; 0
     d1e:	29 f0       	breq	.+10     	; 0xd2a <__vector_3+0x40>
	INT2_CallbackAddress();
     d20:	e0 91 9e 00 	lds	r30, 0x009E
     d24:	f0 91 9f 00 	lds	r31, 0x009F
     d28:	09 95       	icall
}
else{
//Nothing
}
}
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	ff 91       	pop	r31
     d30:	ef 91       	pop	r30
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	7f 91       	pop	r23
     d3c:	6f 91       	pop	r22
     d3e:	5f 91       	pop	r21
     d40:	4f 91       	pop	r20
     d42:	3f 91       	pop	r19
     d44:	2f 91       	pop	r18
     d46:	0f 90       	pop	r0
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	0f 90       	pop	r0
     d4c:	1f 90       	pop	r1
     d4e:	18 95       	reti

00000d50 <INT1_VoidSETINT1>:
 */
#include "EXTINT1_Interface.h"

void (*INT1_CallbackAddress)(void)=Null;

void INT1_VoidSETINT1(void){
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
	EnableGlobalInterrupt();
     d58:	0e 94 da 07 	call	0xfb4	; 0xfb4 <EnableGlobalInterrupt>
	ENABLEINT1_GICR_Reg;
     d5c:	ab e5       	ldi	r26, 0x5B	; 91
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	eb e5       	ldi	r30, 0x5B	; 91
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	80 68       	ori	r24, 0x80	; 128
     d68:	8c 93       	st	X, r24
#if CaseINT1==INT1_LowLevel
	ENABLEINT1_LOW_LEVEL;
     d6a:	a5 e5       	ldi	r26, 0x55	; 85
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e5 e5       	ldi	r30, 0x55	; 85
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8b 7f       	andi	r24, 0xFB	; 251
     d76:	8c 93       	st	X, r24
     d78:	a5 e5       	ldi	r26, 0x55	; 85
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e5 e5       	ldi	r30, 0x55	; 85
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	87 7f       	andi	r24, 0xF7	; 247
     d84:	8c 93       	st	X, r24
#endif
#if CaseINT1==INT0_AnyLogicalChange
	ENABLEINT1_ANY_LOGIC;
     d86:	a5 e5       	ldi	r26, 0x55	; 85
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e5 e5       	ldi	r30, 0x55	; 85
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	84 60       	ori	r24, 0x04	; 4
     d92:	8c 93       	st	X, r24
     d94:	a5 e5       	ldi	r26, 0x55	; 85
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e5 e5       	ldi	r30, 0x55	; 85
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	87 7f       	andi	r24, 0xF7	; 247
     da0:	8c 93       	st	X, r24
#endif
#if CaseINT1 ==INT1_FallingEdge
	ENABLEINT1_FALLING_EDGE;
     da2:	a5 e5       	ldi	r26, 0x55	; 85
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e5 e5       	ldi	r30, 0x55	; 85
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	8b 7f       	andi	r24, 0xFB	; 251
     dae:	8c 93       	st	X, r24
     db0:	a5 e5       	ldi	r26, 0x55	; 85
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e5 e5       	ldi	r30, 0x55	; 85
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	88 60       	ori	r24, 0x08	; 8
     dbc:	8c 93       	st	X, r24
#endif
#if CaseINT1==INT1_RisingEdge
	ENABLEINT1_RISING_EDGE;
     dbe:	a5 e5       	ldi	r26, 0x55	; 85
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e5 e5       	ldi	r30, 0x55	; 85
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	84 60       	ori	r24, 0x04	; 4
     dca:	8c 93       	st	X, r24
     dcc:	a5 e5       	ldi	r26, 0x55	; 85
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e5 e5       	ldi	r30, 0x55	; 85
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	88 60       	ori	r24, 0x08	; 8
     dd8:	8c 93       	st	X, r24
#endif
}
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <INT1_SetCallBack>:

INT1_Err INT1_SetCallBack(void (*INT1CB)(void)){
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	00 d0       	rcall	.+0      	; 0xde6 <INT1_SetCallBack+0x6>
     de6:	0f 92       	push	r0
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	9a 83       	std	Y+2, r25	; 0x02
     dee:	89 83       	std	Y+1, r24	; 0x01
	if(INT1CB!=Null){
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	9a 81       	ldd	r25, Y+2	; 0x02
     df4:	00 97       	sbiw	r24, 0x00	; 0
     df6:	49 f0       	breq	.+18     	; 0xe0a <INT1_SetCallBack+0x2a>
	INT1CB=INT1_CallbackAddress;
     df8:	80 91 a0 00 	lds	r24, 0x00A0
     dfc:	90 91 a1 00 	lds	r25, 0x00A1
     e00:	9a 83       	std	Y+2, r25	; 0x02
     e02:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
		return INT1_PTR_NULL;
	}
	return INT1_PTR_OK;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	8b 83       	std	Y+3, r24	; 0x03
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <INT1_SetCallBack+0x2e>
INT1_Err INT1_SetCallBack(void (*INT1CB)(void)){
	if(INT1CB!=Null){
	INT1CB=INT1_CallbackAddress;
	}
	else{
		return INT1_PTR_NULL;
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	8b 83       	std	Y+3, r24	; 0x03
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return INT1_PTR_OK;

}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <__vector_2>:

void __vector_2 (void) __attribute__((signal));
void __vector_2(void){
     e1c:	1f 92       	push	r1
     e1e:	0f 92       	push	r0
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	0f 92       	push	r0
     e24:	11 24       	eor	r1, r1
     e26:	2f 93       	push	r18
     e28:	3f 93       	push	r19
     e2a:	4f 93       	push	r20
     e2c:	5f 93       	push	r21
     e2e:	6f 93       	push	r22
     e30:	7f 93       	push	r23
     e32:	8f 93       	push	r24
     e34:	9f 93       	push	r25
     e36:	af 93       	push	r26
     e38:	bf 93       	push	r27
     e3a:	ef 93       	push	r30
     e3c:	ff 93       	push	r31
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
	if(INT1_CallbackAddress!=Null){
     e46:	80 91 a0 00 	lds	r24, 0x00A0
     e4a:	90 91 a1 00 	lds	r25, 0x00A1
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	29 f0       	breq	.+10     	; 0xe5c <__vector_2+0x40>
		INT1_CallbackAddress();
     e52:	e0 91 a0 00 	lds	r30, 0x00A0
     e56:	f0 91 a1 00 	lds	r31, 0x00A1
     e5a:	09 95       	icall
	}
	else{
		//Do Nothing
	}
}
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	ff 91       	pop	r31
     e62:	ef 91       	pop	r30
     e64:	bf 91       	pop	r27
     e66:	af 91       	pop	r26
     e68:	9f 91       	pop	r25
     e6a:	8f 91       	pop	r24
     e6c:	7f 91       	pop	r23
     e6e:	6f 91       	pop	r22
     e70:	5f 91       	pop	r21
     e72:	4f 91       	pop	r20
     e74:	3f 91       	pop	r19
     e76:	2f 91       	pop	r18
     e78:	0f 90       	pop	r0
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	0f 90       	pop	r0
     e7e:	1f 90       	pop	r1
     e80:	18 95       	reti

00000e82 <INT0_VoidSETINT0>:
 */

#include "EXTINT0_Interface.h"
void (*INT0_CallbackAddress)(void)=Null;

void INT0_VoidSETINT0(void){
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	EnableGlobalInterrupt();
     e8a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <EnableGlobalInterrupt>
	ENABLEINT0_GICR_Reg;
     e8e:	ab e5       	ldi	r26, 0x5B	; 91
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e5       	ldi	r30, 0x5B	; 91
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	80 64       	ori	r24, 0x40	; 64
     e9a:	8c 93       	st	X, r24
#if CaseINT0==INT0_LowLevel
	ENABLEINT0_LOW_LEVEL;
     e9c:	a5 e5       	ldi	r26, 0x55	; 85
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e5 e5       	ldi	r30, 0x55	; 85
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8e 7f       	andi	r24, 0xFE	; 254
     ea8:	8c 93       	st	X, r24
     eaa:	a5 e5       	ldi	r26, 0x55	; 85
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e5 e5       	ldi	r30, 0x55	; 85
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8d 7f       	andi	r24, 0xFD	; 253
     eb6:	8c 93       	st	X, r24
#endif
#if CaseINT0==INT0_AnyLogicalChange
	ENABLEINT0_ANY_LOGIC;
     eb8:	a5 e5       	ldi	r26, 0x55	; 85
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e5 e5       	ldi	r30, 0x55	; 85
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	81 60       	ori	r24, 0x01	; 1
     ec4:	8c 93       	st	X, r24
     ec6:	a5 e5       	ldi	r26, 0x55	; 85
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e5 e5       	ldi	r30, 0x55	; 85
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	8d 7f       	andi	r24, 0xFD	; 253
     ed2:	8c 93       	st	X, r24
#endif
#if CaseINT0 ==INT0_FallingEdge
	ENABLEINT0_FALLING_EDGE;
     ed4:	a5 e5       	ldi	r26, 0x55	; 85
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e5 e5       	ldi	r30, 0x55	; 85
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	8e 7f       	andi	r24, 0xFE	; 254
     ee0:	8c 93       	st	X, r24
     ee2:	a5 e5       	ldi	r26, 0x55	; 85
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e5 e5       	ldi	r30, 0x55	; 85
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	82 60       	ori	r24, 0x02	; 2
     eee:	8c 93       	st	X, r24
#endif
#if CaseINT0==INT0_RisingEdge
	ENABLEINT0_RISING_EDGE;
     ef0:	a5 e5       	ldi	r26, 0x55	; 85
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e5 e5       	ldi	r30, 0x55	; 85
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	81 60       	ori	r24, 0x01	; 1
     efc:	8c 93       	st	X, r24
     efe:	a5 e5       	ldi	r26, 0x55	; 85
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e5 e5       	ldi	r30, 0x55	; 85
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	82 60       	ori	r24, 0x02	; 2
     f0a:	8c 93       	st	X, r24
#endif
}
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <INT0_SetCallBack>:

INT0_Err INT0_SetCallBack(void (*INT0CB)(void)){
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	00 d0       	rcall	.+0      	; 0xf18 <INT0_SetCallBack+0x6>
     f18:	0f 92       	push	r0
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	9a 83       	std	Y+2, r25	; 0x02
     f20:	89 83       	std	Y+1, r24	; 0x01
if(INT0CB != Null){
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	9a 81       	ldd	r25, Y+2	; 0x02
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	49 f0       	breq	.+18     	; 0xf3c <INT0_SetCallBack+0x2a>
	INT0CB=INT0_CallbackAddress;
     f2a:	80 91 a2 00 	lds	r24, 0x00A2
     f2e:	90 91 a3 00 	lds	r25, 0x00A3
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
	}
else{
	return INT0_PTR_NULL;
}
return INT0_PTR_OK;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	8b 83       	std	Y+3, r24	; 0x03
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <INT0_SetCallBack+0x2e>
INT0_Err INT0_SetCallBack(void (*INT0CB)(void)){
if(INT0CB != Null){
	INT0CB=INT0_CallbackAddress;
	}
else{
	return INT0_PTR_NULL;
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	8b 83       	std	Y+3, r24	; 0x03
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
}
return INT0_PTR_OK;
}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <__vector_1>:

void __vector_1(void) __attribute__((signal));
void __vector_1(void){
     f4e:	1f 92       	push	r1
     f50:	0f 92       	push	r0
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	0f 92       	push	r0
     f56:	11 24       	eor	r1, r1
     f58:	2f 93       	push	r18
     f5a:	3f 93       	push	r19
     f5c:	4f 93       	push	r20
     f5e:	5f 93       	push	r21
     f60:	6f 93       	push	r22
     f62:	7f 93       	push	r23
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
     f68:	af 93       	push	r26
     f6a:	bf 93       	push	r27
     f6c:	ef 93       	push	r30
     f6e:	ff 93       	push	r31
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62

	if(INT0_CallbackAddress!=Null){
     f78:	80 91 a2 00 	lds	r24, 0x00A2
     f7c:	90 91 a3 00 	lds	r25, 0x00A3
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	29 f0       	breq	.+10     	; 0xf8e <__vector_1+0x40>
		INT0_CallbackAddress();
     f84:	e0 91 a2 00 	lds	r30, 0x00A2
     f88:	f0 91 a3 00 	lds	r31, 0x00A3
     f8c:	09 95       	icall
	}
	else{
		//nothing
	}
}
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	ff 91       	pop	r31
     f94:	ef 91       	pop	r30
     f96:	bf 91       	pop	r27
     f98:	af 91       	pop	r26
     f9a:	9f 91       	pop	r25
     f9c:	8f 91       	pop	r24
     f9e:	7f 91       	pop	r23
     fa0:	6f 91       	pop	r22
     fa2:	5f 91       	pop	r21
     fa4:	4f 91       	pop	r20
     fa6:	3f 91       	pop	r19
     fa8:	2f 91       	pop	r18
     faa:	0f 90       	pop	r0
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	0f 90       	pop	r0
     fb0:	1f 90       	pop	r1
     fb2:	18 95       	reti

00000fb4 <EnableGlobalInterrupt>:
 *
 *  Created on: Apr 4, 2023
 *      Author: Mazen
 */
#include "Global_Interrupt_Enable.h"
void EnableGlobalInterrupt(void){
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	ENABLEINT0_SREG;
     fbc:	af e5       	ldi	r26, 0x5F	; 95
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	ef e5       	ldi	r30, 0x5F	; 95
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	80 68       	ori	r24, 0x80	; 128
     fc8:	8c 93       	st	X, r24
}
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <DIO_ErrStateSetPinDirection>:
 *      Author: Mazen
 */

#include "DIO_Interface.h"

DIO_Err DIO_ErrStateSetPinDirection(PORT_Name port,PIN_Number pin,Direction direction){
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	28 97       	sbiw	r28, 0x08	; 8
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	89 83       	std	Y+1, r24	; 0x01
     fe6:	6a 83       	std	Y+2, r22	; 0x02
     fe8:	4b 83       	std	Y+3, r20	; 0x03
	if(pin>=0 && pin<=7)
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	88 30       	cpi	r24, 0x08	; 8
     fee:	08 f0       	brcs	.+2      	; 0xff2 <DIO_ErrStateSetPinDirection+0x22>
     ff0:	f8 c0       	rjmp	.+496    	; 0x11e2 <DIO_ErrStateSetPinDirection+0x212>
		{
			if(direction == DIO_OUT)
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	09 f0       	breq	.+2      	; 0xffa <DIO_ErrStateSetPinDirection+0x2a>
     ff8:	73 c0       	rjmp	.+230    	; 0x10e0 <DIO_ErrStateSetPinDirection+0x110>
			{
				switch(port)
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	38 87       	std	Y+8, r19	; 0x08
    1002:	2f 83       	std	Y+7, r18	; 0x07
    1004:	8f 81       	ldd	r24, Y+7	; 0x07
    1006:	98 85       	ldd	r25, Y+8	; 0x08
    1008:	82 34       	cpi	r24, 0x42	; 66
    100a:	91 05       	cpc	r25, r1
    100c:	51 f1       	breq	.+84     	; 0x1062 <DIO_ErrStateSetPinDirection+0x92>
    100e:	2f 81       	ldd	r18, Y+7	; 0x07
    1010:	38 85       	ldd	r19, Y+8	; 0x08
    1012:	23 34       	cpi	r18, 0x43	; 67
    1014:	31 05       	cpc	r19, r1
    1016:	34 f4       	brge	.+12     	; 0x1024 <DIO_ErrStateSetPinDirection+0x54>
    1018:	8f 81       	ldd	r24, Y+7	; 0x07
    101a:	98 85       	ldd	r25, Y+8	; 0x08
    101c:	81 34       	cpi	r24, 0x41	; 65
    101e:	91 05       	cpc	r25, r1
    1020:	61 f0       	breq	.+24     	; 0x103a <DIO_ErrStateSetPinDirection+0x6a>
    1022:	5b c0       	rjmp	.+182    	; 0x10da <DIO_ErrStateSetPinDirection+0x10a>
    1024:	2f 81       	ldd	r18, Y+7	; 0x07
    1026:	38 85       	ldd	r19, Y+8	; 0x08
    1028:	23 34       	cpi	r18, 0x43	; 67
    102a:	31 05       	cpc	r19, r1
    102c:	71 f1       	breq	.+92     	; 0x108a <DIO_ErrStateSetPinDirection+0xba>
    102e:	8f 81       	ldd	r24, Y+7	; 0x07
    1030:	98 85       	ldd	r25, Y+8	; 0x08
    1032:	84 34       	cpi	r24, 0x44	; 68
    1034:	91 05       	cpc	r25, r1
    1036:	e9 f1       	breq	.+122    	; 0x10b2 <DIO_ErrStateSetPinDirection+0xe2>
    1038:	50 c0       	rjmp	.+160    	; 0x10da <DIO_ErrStateSetPinDirection+0x10a>
				{
				case 'A': SET_BIT(DDRA_ITI,pin); break;
    103a:	aa e3       	ldi	r26, 0x3A	; 58
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	ea e3       	ldi	r30, 0x3A	; 58
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_ErrStateSetPinDirection+0x88>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_ErrStateSetPinDirection+0x84>
    105c:	84 2b       	or	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	be c0       	rjmp	.+380    	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				case 'B': SET_BIT(DDRB_ITI,pin); break;
    1062:	a7 e3       	ldi	r26, 0x37	; 55
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e7 e3       	ldi	r30, 0x37	; 55
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_ErrStateSetPinDirection+0xb0>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_ErrStateSetPinDirection+0xac>
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	aa c0       	rjmp	.+340    	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				case 'C': SET_BIT(DDRC_ITI,pin); break;
    108a:	a4 e3       	ldi	r26, 0x34	; 52
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e4 e3       	ldi	r30, 0x34	; 52
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <DIO_ErrStateSetPinDirection+0xd8>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <DIO_ErrStateSetPinDirection+0xd4>
    10ac:	84 2b       	or	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	96 c0       	rjmp	.+300    	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				case 'D': SET_BIT(DDRD_ITI,pin); break;
    10b2:	a1 e3       	ldi	r26, 0x31	; 49
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e1 e3       	ldi	r30, 0x31	; 49
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 2e       	mov	r0, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_ErrStateSetPinDirection+0x100>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_ErrStateSetPinDirection+0xfc>
    10d4:	84 2b       	or	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	82 c0       	rjmp	.+260    	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				default: return DIO_ERROR_PORT;
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	83 c0       	rjmp	.+262    	; 0x11e6 <DIO_ErrStateSetPinDirection+0x216>
				}

			}
			else if(direction == DIO_IN)
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	88 23       	and	r24, r24
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <DIO_ErrStateSetPinDirection+0x118>
    10e6:	78 c0       	rjmp	.+240    	; 0x11d8 <DIO_ErrStateSetPinDirection+0x208>
			{
				switch(port)
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	3d 83       	std	Y+5, r19	; 0x05
    10f0:	2c 83       	std	Y+4, r18	; 0x04
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	9d 81       	ldd	r25, Y+5	; 0x05
    10f6:	82 34       	cpi	r24, 0x42	; 66
    10f8:	91 05       	cpc	r25, r1
    10fa:	61 f1       	breq	.+88     	; 0x1154 <DIO_ErrStateSetPinDirection+0x184>
    10fc:	2c 81       	ldd	r18, Y+4	; 0x04
    10fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1100:	23 34       	cpi	r18, 0x43	; 67
    1102:	31 05       	cpc	r19, r1
    1104:	34 f4       	brge	.+12     	; 0x1112 <DIO_ErrStateSetPinDirection+0x142>
    1106:	8c 81       	ldd	r24, Y+4	; 0x04
    1108:	9d 81       	ldd	r25, Y+5	; 0x05
    110a:	81 34       	cpi	r24, 0x41	; 65
    110c:	91 05       	cpc	r25, r1
    110e:	69 f0       	breq	.+26     	; 0x112a <DIO_ErrStateSetPinDirection+0x15a>
    1110:	60 c0       	rjmp	.+192    	; 0x11d2 <DIO_ErrStateSetPinDirection+0x202>
    1112:	2c 81       	ldd	r18, Y+4	; 0x04
    1114:	3d 81       	ldd	r19, Y+5	; 0x05
    1116:	23 34       	cpi	r18, 0x43	; 67
    1118:	31 05       	cpc	r19, r1
    111a:	89 f1       	breq	.+98     	; 0x117e <DIO_ErrStateSetPinDirection+0x1ae>
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	9d 81       	ldd	r25, Y+5	; 0x05
    1120:	84 34       	cpi	r24, 0x44	; 68
    1122:	91 05       	cpc	r25, r1
    1124:	09 f4       	brne	.+2      	; 0x1128 <DIO_ErrStateSetPinDirection+0x158>
    1126:	40 c0       	rjmp	.+128    	; 0x11a8 <DIO_ErrStateSetPinDirection+0x1d8>
    1128:	54 c0       	rjmp	.+168    	; 0x11d2 <DIO_ErrStateSetPinDirection+0x202>
				{
				case 'A': CLEAR_BIT(DDRA_ITI,pin); break;
    112a:	aa e3       	ldi	r26, 0x3A	; 58
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	ea e3       	ldi	r30, 0x3A	; 58
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <DIO_ErrStateSetPinDirection+0x178>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <DIO_ErrStateSetPinDirection+0x174>
    114c:	80 95       	com	r24
    114e:	84 23       	and	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	45 c0       	rjmp	.+138    	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				case 'B': CLEAR_BIT(DDRB_ITI,pin); break;
    1154:	a7 e3       	ldi	r26, 0x37	; 55
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e7 e3       	ldi	r30, 0x37	; 55
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_ErrStateSetPinDirection+0x1a2>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_ErrStateSetPinDirection+0x19e>
    1176:	80 95       	com	r24
    1178:	84 23       	and	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	30 c0       	rjmp	.+96     	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				case 'C': CLEAR_BIT(DDRC_ITI,pin); break;
    117e:	a4 e3       	ldi	r26, 0x34	; 52
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e4 e3       	ldi	r30, 0x34	; 52
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_ErrStateSetPinDirection+0x1cc>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_ErrStateSetPinDirection+0x1c8>
    11a0:	80 95       	com	r24
    11a2:	84 23       	and	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	1b c0       	rjmp	.+54     	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				case 'D': CLEAR_BIT(DDRD_ITI,pin); break;
    11a8:	a1 e3       	ldi	r26, 0x31	; 49
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e1 e3       	ldi	r30, 0x31	; 49
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_ErrStateSetPinDirection+0x1f6>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_ErrStateSetPinDirection+0x1f2>
    11ca:	80 95       	com	r24
    11cc:	84 23       	and	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	06 c0       	rjmp	.+12     	; 0x11de <DIO_ErrStateSetPinDirection+0x20e>
				default: return DIO_ERROR_PORT;				}
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	9e 83       	std	Y+6, r25	; 0x06
    11d6:	07 c0       	rjmp	.+14     	; 0x11e6 <DIO_ErrStateSetPinDirection+0x216>
			}
			else
				return DIO_ERROR_Direction;
    11d8:	23 e0       	ldi	r18, 0x03	; 3
    11da:	2e 83       	std	Y+6, r18	; 0x06
    11dc:	04 c0       	rjmp	.+8      	; 0x11e6 <DIO_ErrStateSetPinDirection+0x216>
		}
	else
		return DIO_ERROR_PIN;
	return DIO_OK;
    11de:	1e 82       	std	Y+6, r1	; 0x06
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <DIO_ErrStateSetPinDirection+0x216>
			}
			else
				return DIO_ERROR_Direction;
		}
	else
		return DIO_ERROR_PIN;
    11e2:	32 e0       	ldi	r19, 0x02	; 2
    11e4:	3e 83       	std	Y+6, r19	; 0x06
    11e6:	8e 81       	ldd	r24, Y+6	; 0x06
	return DIO_OK;
}
    11e8:	28 96       	adiw	r28, 0x08	; 8
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <DIO_ErrStateSetPinValue>:
DIO_Err DIO_ErrStateSetPinValue(PORT_Name port,PIN_Number pin,Volt val){
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	28 97       	sbiw	r28, 0x08	; 8
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	6a 83       	std	Y+2, r22	; 0x02
    1212:	4b 83       	std	Y+3, r20	; 0x03
	if(pin>=0 && pin<=7)
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	88 30       	cpi	r24, 0x08	; 8
    1218:	08 f0       	brcs	.+2      	; 0x121c <DIO_ErrStateSetPinValue+0x22>
    121a:	f8 c0       	rjmp	.+496    	; 0x140c <DIO_ErrStateSetPinValue+0x212>
			{
				if(val == DIO_HIGH)
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	09 f0       	breq	.+2      	; 0x1224 <DIO_ErrStateSetPinValue+0x2a>
    1222:	73 c0       	rjmp	.+230    	; 0x130a <DIO_ErrStateSetPinValue+0x110>
				{
					switch(port)
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	38 87       	std	Y+8, r19	; 0x08
    122c:	2f 83       	std	Y+7, r18	; 0x07
    122e:	8f 81       	ldd	r24, Y+7	; 0x07
    1230:	98 85       	ldd	r25, Y+8	; 0x08
    1232:	82 34       	cpi	r24, 0x42	; 66
    1234:	91 05       	cpc	r25, r1
    1236:	51 f1       	breq	.+84     	; 0x128c <DIO_ErrStateSetPinValue+0x92>
    1238:	2f 81       	ldd	r18, Y+7	; 0x07
    123a:	38 85       	ldd	r19, Y+8	; 0x08
    123c:	23 34       	cpi	r18, 0x43	; 67
    123e:	31 05       	cpc	r19, r1
    1240:	34 f4       	brge	.+12     	; 0x124e <DIO_ErrStateSetPinValue+0x54>
    1242:	8f 81       	ldd	r24, Y+7	; 0x07
    1244:	98 85       	ldd	r25, Y+8	; 0x08
    1246:	81 34       	cpi	r24, 0x41	; 65
    1248:	91 05       	cpc	r25, r1
    124a:	61 f0       	breq	.+24     	; 0x1264 <DIO_ErrStateSetPinValue+0x6a>
    124c:	5b c0       	rjmp	.+182    	; 0x1304 <DIO_ErrStateSetPinValue+0x10a>
    124e:	2f 81       	ldd	r18, Y+7	; 0x07
    1250:	38 85       	ldd	r19, Y+8	; 0x08
    1252:	23 34       	cpi	r18, 0x43	; 67
    1254:	31 05       	cpc	r19, r1
    1256:	71 f1       	breq	.+92     	; 0x12b4 <DIO_ErrStateSetPinValue+0xba>
    1258:	8f 81       	ldd	r24, Y+7	; 0x07
    125a:	98 85       	ldd	r25, Y+8	; 0x08
    125c:	84 34       	cpi	r24, 0x44	; 68
    125e:	91 05       	cpc	r25, r1
    1260:	e9 f1       	breq	.+122    	; 0x12dc <DIO_ErrStateSetPinValue+0xe2>
    1262:	50 c0       	rjmp	.+160    	; 0x1304 <DIO_ErrStateSetPinValue+0x10a>
					{
					case 'A': SET_BIT(PORTA_ITI,pin); break;
    1264:	ab e3       	ldi	r26, 0x3B	; 59
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	eb e3       	ldi	r30, 0x3B	; 59
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <DIO_ErrStateSetPinValue+0x88>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <DIO_ErrStateSetPinValue+0x84>
    1286:	84 2b       	or	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	be c0       	rjmp	.+380    	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					case 'B': SET_BIT(PORTB_ITI,pin); break;
    128c:	a8 e3       	ldi	r26, 0x38	; 56
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e8 e3       	ldi	r30, 0x38	; 56
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_ErrStateSetPinValue+0xb0>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_ErrStateSetPinValue+0xac>
    12ae:	84 2b       	or	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	aa c0       	rjmp	.+340    	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					case 'C': SET_BIT(PORTC_ITI,pin); break;
    12b4:	a5 e3       	ldi	r26, 0x35	; 53
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e5 e3       	ldi	r30, 0x35	; 53
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_ErrStateSetPinValue+0xd8>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_ErrStateSetPinValue+0xd4>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	96 c0       	rjmp	.+300    	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					case 'D': SET_BIT(PORTD_ITI,pin); break;
    12dc:	a2 e3       	ldi	r26, 0x32	; 50
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e2 e3       	ldi	r30, 0x32	; 50
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_ErrStateSetPinValue+0x100>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_ErrStateSetPinValue+0xfc>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	82 c0       	rjmp	.+260    	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					default: return DIO_ERROR_PORT;
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	9e 83       	std	Y+6, r25	; 0x06
    1308:	83 c0       	rjmp	.+262    	; 0x1410 <DIO_ErrStateSetPinValue+0x216>
					}
				}
				else if(val == DIO_LOW)
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	88 23       	and	r24, r24
    130e:	09 f0       	breq	.+2      	; 0x1312 <DIO_ErrStateSetPinValue+0x118>
    1310:	78 c0       	rjmp	.+240    	; 0x1402 <DIO_ErrStateSetPinValue+0x208>
				{
					switch(port)
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	3d 83       	std	Y+5, r19	; 0x05
    131a:	2c 83       	std	Y+4, r18	; 0x04
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	9d 81       	ldd	r25, Y+5	; 0x05
    1320:	82 34       	cpi	r24, 0x42	; 66
    1322:	91 05       	cpc	r25, r1
    1324:	61 f1       	breq	.+88     	; 0x137e <DIO_ErrStateSetPinValue+0x184>
    1326:	2c 81       	ldd	r18, Y+4	; 0x04
    1328:	3d 81       	ldd	r19, Y+5	; 0x05
    132a:	23 34       	cpi	r18, 0x43	; 67
    132c:	31 05       	cpc	r19, r1
    132e:	34 f4       	brge	.+12     	; 0x133c <DIO_ErrStateSetPinValue+0x142>
    1330:	8c 81       	ldd	r24, Y+4	; 0x04
    1332:	9d 81       	ldd	r25, Y+5	; 0x05
    1334:	81 34       	cpi	r24, 0x41	; 65
    1336:	91 05       	cpc	r25, r1
    1338:	69 f0       	breq	.+26     	; 0x1354 <DIO_ErrStateSetPinValue+0x15a>
    133a:	60 c0       	rjmp	.+192    	; 0x13fc <DIO_ErrStateSetPinValue+0x202>
    133c:	2c 81       	ldd	r18, Y+4	; 0x04
    133e:	3d 81       	ldd	r19, Y+5	; 0x05
    1340:	23 34       	cpi	r18, 0x43	; 67
    1342:	31 05       	cpc	r19, r1
    1344:	89 f1       	breq	.+98     	; 0x13a8 <DIO_ErrStateSetPinValue+0x1ae>
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	84 34       	cpi	r24, 0x44	; 68
    134c:	91 05       	cpc	r25, r1
    134e:	09 f4       	brne	.+2      	; 0x1352 <DIO_ErrStateSetPinValue+0x158>
    1350:	40 c0       	rjmp	.+128    	; 0x13d2 <DIO_ErrStateSetPinValue+0x1d8>
    1352:	54 c0       	rjmp	.+168    	; 0x13fc <DIO_ErrStateSetPinValue+0x202>
					{
					case 'A': CLEAR_BIT(PORTA_ITI,pin); break;
    1354:	ab e3       	ldi	r26, 0x3B	; 59
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	eb e3       	ldi	r30, 0x3B	; 59
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_ErrStateSetPinValue+0x178>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_ErrStateSetPinValue+0x174>
    1376:	80 95       	com	r24
    1378:	84 23       	and	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	45 c0       	rjmp	.+138    	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					case 'B': CLEAR_BIT(PORTB_ITI,pin); break;
    137e:	a8 e3       	ldi	r26, 0x38	; 56
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e8 e3       	ldi	r30, 0x38	; 56
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_ErrStateSetPinValue+0x1a2>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <DIO_ErrStateSetPinValue+0x19e>
    13a0:	80 95       	com	r24
    13a2:	84 23       	and	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	30 c0       	rjmp	.+96     	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					case 'C': CLEAR_BIT(PORTC_ITI,pin); break;
    13a8:	a5 e3       	ldi	r26, 0x35	; 53
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e5 e3       	ldi	r30, 0x35	; 53
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_ErrStateSetPinValue+0x1cc>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_ErrStateSetPinValue+0x1c8>
    13ca:	80 95       	com	r24
    13cc:	84 23       	and	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	1b c0       	rjmp	.+54     	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					case 'D': CLEAR_BIT(PORTD_ITI,pin); break;
    13d2:	a2 e3       	ldi	r26, 0x32	; 50
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e2 e3       	ldi	r30, 0x32	; 50
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_ErrStateSetPinValue+0x1f6>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_ErrStateSetPinValue+0x1f2>
    13f4:	80 95       	com	r24
    13f6:	84 23       	and	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	06 c0       	rjmp	.+12     	; 0x1408 <DIO_ErrStateSetPinValue+0x20e>
					default: return DIO_ERROR_PORT;					}
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	9e 83       	std	Y+6, r25	; 0x06
    1400:	07 c0       	rjmp	.+14     	; 0x1410 <DIO_ErrStateSetPinValue+0x216>
				}
				else
					return DIO_ERROR_VALUE;
    1402:	24 e0       	ldi	r18, 0x04	; 4
    1404:	2e 83       	std	Y+6, r18	; 0x06
    1406:	04 c0       	rjmp	.+8      	; 0x1410 <DIO_ErrStateSetPinValue+0x216>
			}
		else
			return DIO_ERROR_PIN;
		return DIO_OK;
    1408:	1e 82       	std	Y+6, r1	; 0x06
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_ErrStateSetPinValue+0x216>
				}
				else
					return DIO_ERROR_VALUE;
			}
		else
			return DIO_ERROR_PIN;
    140c:	32 e0       	ldi	r19, 0x02	; 2
    140e:	3e 83       	std	Y+6, r19	; 0x06
    1410:	8e 81       	ldd	r24, Y+6	; 0x06
		return DIO_OK;
}
    1412:	28 96       	adiw	r28, 0x08	; 8
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <DIO_ErrStateReadPinValue>:
DIO_Err DIO_ErrStateReadPinValue(PORT_Name port,PIN_Number pin,u8 *value){
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	27 97       	sbiw	r28, 0x07	; 7
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	6a 83       	std	Y+2, r22	; 0x02
    143c:	5c 83       	std	Y+4, r21	; 0x04
    143e:	4b 83       	std	Y+3, r20	; 0x03
	if(pin>=0 && pin<=7)
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	88 30       	cpi	r24, 0x08	; 8
    1444:	08 f0       	brcs	.+2      	; 0x1448 <DIO_ErrStateReadPinValue+0x24>
    1446:	76 c0       	rjmp	.+236    	; 0x1534 <DIO_ErrStateReadPinValue+0x110>
				{
						switch(port)
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	3f 83       	std	Y+7, r19	; 0x07
    1450:	2e 83       	std	Y+6, r18	; 0x06
    1452:	4e 81       	ldd	r20, Y+6	; 0x06
    1454:	5f 81       	ldd	r21, Y+7	; 0x07
    1456:	42 34       	cpi	r20, 0x42	; 66
    1458:	51 05       	cpc	r21, r1
    145a:	59 f1       	breq	.+86     	; 0x14b2 <DIO_ErrStateReadPinValue+0x8e>
    145c:	8e 81       	ldd	r24, Y+6	; 0x06
    145e:	9f 81       	ldd	r25, Y+7	; 0x07
    1460:	83 34       	cpi	r24, 0x43	; 67
    1462:	91 05       	cpc	r25, r1
    1464:	34 f4       	brge	.+12     	; 0x1472 <DIO_ErrStateReadPinValue+0x4e>
    1466:	2e 81       	ldd	r18, Y+6	; 0x06
    1468:	3f 81       	ldd	r19, Y+7	; 0x07
    146a:	21 34       	cpi	r18, 0x41	; 65
    146c:	31 05       	cpc	r19, r1
    146e:	69 f0       	breq	.+26     	; 0x148a <DIO_ErrStateReadPinValue+0x66>
    1470:	5c c0       	rjmp	.+184    	; 0x152a <DIO_ErrStateReadPinValue+0x106>
    1472:	4e 81       	ldd	r20, Y+6	; 0x06
    1474:	5f 81       	ldd	r21, Y+7	; 0x07
    1476:	43 34       	cpi	r20, 0x43	; 67
    1478:	51 05       	cpc	r21, r1
    147a:	79 f1       	breq	.+94     	; 0x14da <DIO_ErrStateReadPinValue+0xb6>
    147c:	8e 81       	ldd	r24, Y+6	; 0x06
    147e:	9f 81       	ldd	r25, Y+7	; 0x07
    1480:	84 34       	cpi	r24, 0x44	; 68
    1482:	91 05       	cpc	r25, r1
    1484:	09 f4       	brne	.+2      	; 0x1488 <DIO_ErrStateReadPinValue+0x64>
    1486:	3d c0       	rjmp	.+122    	; 0x1502 <DIO_ErrStateReadPinValue+0xde>
    1488:	50 c0       	rjmp	.+160    	; 0x152a <DIO_ErrStateReadPinValue+0x106>
						{
						case 'A':*value= GET_BIT(PINA_ITI,pin); break;
    148a:	e9 e3       	ldi	r30, 0x39	; 57
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	88 2f       	mov	r24, r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	a9 01       	movw	r20, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_ErrStateReadPinValue+0x7e>
    149e:	55 95       	asr	r21
    14a0:	47 95       	ror	r20
    14a2:	8a 95       	dec	r24
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_ErrStateReadPinValue+0x7a>
    14a6:	ca 01       	movw	r24, r20
    14a8:	81 70       	andi	r24, 0x01	; 1
    14aa:	eb 81       	ldd	r30, Y+3	; 0x03
    14ac:	fc 81       	ldd	r31, Y+4	; 0x04
    14ae:	80 83       	st	Z, r24
    14b0:	3f c0       	rjmp	.+126    	; 0x1530 <DIO_ErrStateReadPinValue+0x10c>
						case 'B':*value= GET_BIT(PINB_ITI,pin); break;
    14b2:	e6 e3       	ldi	r30, 0x36	; 54
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	a9 01       	movw	r20, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <DIO_ErrStateReadPinValue+0xa6>
    14c6:	55 95       	asr	r21
    14c8:	47 95       	ror	r20
    14ca:	8a 95       	dec	r24
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <DIO_ErrStateReadPinValue+0xa2>
    14ce:	ca 01       	movw	r24, r20
    14d0:	81 70       	andi	r24, 0x01	; 1
    14d2:	eb 81       	ldd	r30, Y+3	; 0x03
    14d4:	fc 81       	ldd	r31, Y+4	; 0x04
    14d6:	80 83       	st	Z, r24
    14d8:	2b c0       	rjmp	.+86     	; 0x1530 <DIO_ErrStateReadPinValue+0x10c>
						case 'C':*value= GET_BIT(PINC_ITI,pin); break;
    14da:	e3 e3       	ldi	r30, 0x33	; 51
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	88 2f       	mov	r24, r24
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	a9 01       	movw	r20, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <DIO_ErrStateReadPinValue+0xce>
    14ee:	55 95       	asr	r21
    14f0:	47 95       	ror	r20
    14f2:	8a 95       	dec	r24
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <DIO_ErrStateReadPinValue+0xca>
    14f6:	ca 01       	movw	r24, r20
    14f8:	81 70       	andi	r24, 0x01	; 1
    14fa:	eb 81       	ldd	r30, Y+3	; 0x03
    14fc:	fc 81       	ldd	r31, Y+4	; 0x04
    14fe:	80 83       	st	Z, r24
    1500:	17 c0       	rjmp	.+46     	; 0x1530 <DIO_ErrStateReadPinValue+0x10c>
						case 'D':*value= GET_BIT(PIND_ITI,pin); break;
    1502:	e0 e3       	ldi	r30, 0x30	; 48
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a9 01       	movw	r20, r18
    1514:	02 c0       	rjmp	.+4      	; 0x151a <DIO_ErrStateReadPinValue+0xf6>
    1516:	55 95       	asr	r21
    1518:	47 95       	ror	r20
    151a:	8a 95       	dec	r24
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <DIO_ErrStateReadPinValue+0xf2>
    151e:	ca 01       	movw	r24, r20
    1520:	81 70       	andi	r24, 0x01	; 1
    1522:	eb 81       	ldd	r30, Y+3	; 0x03
    1524:	fc 81       	ldd	r31, Y+4	; 0x04
    1526:	80 83       	st	Z, r24
    1528:	03 c0       	rjmp	.+6      	; 0x1530 <DIO_ErrStateReadPinValue+0x10c>
						default: return DIO_ERROR_PORT;
    152a:	51 e0       	ldi	r21, 0x01	; 1
    152c:	5d 83       	std	Y+5, r21	; 0x05
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <DIO_ErrStateReadPinValue+0x114>
						}

				}
			else
				return DIO_ERROR_PIN;
			return DIO_OK;
    1530:	1d 82       	std	Y+5, r1	; 0x05
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <DIO_ErrStateReadPinValue+0x114>
						default: return DIO_ERROR_PORT;
						}

				}
			else
				return DIO_ERROR_PIN;
    1534:	82 e0       	ldi	r24, 0x02	; 2
    1536:	8d 83       	std	Y+5, r24	; 0x05
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
			return DIO_OK;
}
    153a:	27 96       	adiw	r28, 0x07	; 7
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	de bf       	out	0x3e, r29	; 62
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	cd bf       	out	0x3d, r28	; 61
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <DIO_ErrStateSetGroupDirection>:

DIO_Err  DIO_ErrStateSetGroupDirection(PORT_Name port ,Direction direction)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	00 d0       	rcall	.+0      	; 0x1552 <DIO_ErrStateSetGroupDirection+0x6>
    1552:	00 d0       	rcall	.+0      	; 0x1554 <DIO_ErrStateSetGroupDirection+0x8>
    1554:	0f 92       	push	r0
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	89 83       	std	Y+1, r24	; 0x01
    155c:	6a 83       	std	Y+2, r22	; 0x02
	if (direction <= 0xff && direction>=0x00)
	{
		switch(port)
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	3d 83       	std	Y+5, r19	; 0x05
    1566:	2c 83       	std	Y+4, r18	; 0x04
    1568:	8c 81       	ldd	r24, Y+4	; 0x04
    156a:	9d 81       	ldd	r25, Y+5	; 0x05
    156c:	82 34       	cpi	r24, 0x42	; 66
    156e:	91 05       	cpc	r25, r1
    1570:	d9 f0       	breq	.+54     	; 0x15a8 <DIO_ErrStateSetGroupDirection+0x5c>
    1572:	2c 81       	ldd	r18, Y+4	; 0x04
    1574:	3d 81       	ldd	r19, Y+5	; 0x05
    1576:	23 34       	cpi	r18, 0x43	; 67
    1578:	31 05       	cpc	r19, r1
    157a:	34 f4       	brge	.+12     	; 0x1588 <DIO_ErrStateSetGroupDirection+0x3c>
    157c:	8c 81       	ldd	r24, Y+4	; 0x04
    157e:	9d 81       	ldd	r25, Y+5	; 0x05
    1580:	81 34       	cpi	r24, 0x41	; 65
    1582:	91 05       	cpc	r25, r1
    1584:	61 f0       	breq	.+24     	; 0x159e <DIO_ErrStateSetGroupDirection+0x52>
    1586:	1f c0       	rjmp	.+62     	; 0x15c6 <DIO_ErrStateSetGroupDirection+0x7a>
    1588:	2c 81       	ldd	r18, Y+4	; 0x04
    158a:	3d 81       	ldd	r19, Y+5	; 0x05
    158c:	23 34       	cpi	r18, 0x43	; 67
    158e:	31 05       	cpc	r19, r1
    1590:	81 f0       	breq	.+32     	; 0x15b2 <DIO_ErrStateSetGroupDirection+0x66>
    1592:	8c 81       	ldd	r24, Y+4	; 0x04
    1594:	9d 81       	ldd	r25, Y+5	; 0x05
    1596:	84 34       	cpi	r24, 0x44	; 68
    1598:	91 05       	cpc	r25, r1
    159a:	81 f0       	breq	.+32     	; 0x15bc <DIO_ErrStateSetGroupDirection+0x70>
    159c:	14 c0       	rjmp	.+40     	; 0x15c6 <DIO_ErrStateSetGroupDirection+0x7a>
		{
		case 'A': DDRA_ITI =   direction ;break ;
    159e:	ea e3       	ldi	r30, 0x3A	; 58
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	80 83       	st	Z, r24
    15a6:	12 c0       	rjmp	.+36     	; 0x15cc <DIO_ErrStateSetGroupDirection+0x80>
		case 'B': DDRB_ITI =   direction ;break ;
    15a8:	e7 e3       	ldi	r30, 0x37	; 55
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	80 83       	st	Z, r24
    15b0:	0d c0       	rjmp	.+26     	; 0x15cc <DIO_ErrStateSetGroupDirection+0x80>
		case 'C': DDRC_ITI =   direction ;break ;
    15b2:	e4 e3       	ldi	r30, 0x34	; 52
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	80 83       	st	Z, r24
    15ba:	08 c0       	rjmp	.+16     	; 0x15cc <DIO_ErrStateSetGroupDirection+0x80>
		case 'D': DDRD_ITI =   direction ;break ;
    15bc:	e1 e3       	ldi	r30, 0x31	; 49
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	80 83       	st	Z, r24
    15c4:	03 c0       	rjmp	.+6      	; 0x15cc <DIO_ErrStateSetGroupDirection+0x80>
		default :
			return DIO_ERROR_PORT ;
    15c6:	91 e0       	ldi	r25, 0x01	; 1
    15c8:	9b 83       	std	Y+3, r25	; 0x03
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <DIO_ErrStateSetGroupDirection+0x82>
		}
		return DIO_OK ;
    15cc:	1b 82       	std	Y+3, r1	; 0x03
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	else
	{
		return DIO_ERROR_Direction;
	}
}
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <DIO_ErrStateSetPortValue>:
DIO_Err  DIO_ErrStateSetPortValue(PORT_Name port,Volt val)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <DIO_ErrStateSetPortValue+0x6>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <DIO_ErrStateSetPortValue+0x8>
    15e8:	0f 92       	push	r0
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	6a 83       	std	Y+2, r22	; 0x02
	if (val <= 0xff && val>=0x00)
	{
		switch(port)
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	3d 83       	std	Y+5, r19	; 0x05
    15fa:	2c 83       	std	Y+4, r18	; 0x04
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1600:	82 34       	cpi	r24, 0x42	; 66
    1602:	91 05       	cpc	r25, r1
    1604:	d9 f0       	breq	.+54     	; 0x163c <DIO_ErrStateSetPortValue+0x5c>
    1606:	2c 81       	ldd	r18, Y+4	; 0x04
    1608:	3d 81       	ldd	r19, Y+5	; 0x05
    160a:	23 34       	cpi	r18, 0x43	; 67
    160c:	31 05       	cpc	r19, r1
    160e:	34 f4       	brge	.+12     	; 0x161c <DIO_ErrStateSetPortValue+0x3c>
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	9d 81       	ldd	r25, Y+5	; 0x05
    1614:	81 34       	cpi	r24, 0x41	; 65
    1616:	91 05       	cpc	r25, r1
    1618:	61 f0       	breq	.+24     	; 0x1632 <DIO_ErrStateSetPortValue+0x52>
    161a:	1f c0       	rjmp	.+62     	; 0x165a <DIO_ErrStateSetPortValue+0x7a>
    161c:	2c 81       	ldd	r18, Y+4	; 0x04
    161e:	3d 81       	ldd	r19, Y+5	; 0x05
    1620:	23 34       	cpi	r18, 0x43	; 67
    1622:	31 05       	cpc	r19, r1
    1624:	81 f0       	breq	.+32     	; 0x1646 <DIO_ErrStateSetPortValue+0x66>
    1626:	8c 81       	ldd	r24, Y+4	; 0x04
    1628:	9d 81       	ldd	r25, Y+5	; 0x05
    162a:	84 34       	cpi	r24, 0x44	; 68
    162c:	91 05       	cpc	r25, r1
    162e:	81 f0       	breq	.+32     	; 0x1650 <DIO_ErrStateSetPortValue+0x70>
    1630:	14 c0       	rjmp	.+40     	; 0x165a <DIO_ErrStateSetPortValue+0x7a>
		{
		case 'A':  PORTA_ITI =  val ;break ;
    1632:	eb e3       	ldi	r30, 0x3B	; 59
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	80 83       	st	Z, r24
    163a:	12 c0       	rjmp	.+36     	; 0x1660 <DIO_ErrStateSetPortValue+0x80>
		case 'B':  PORTB_ITI =  val ;break ;
    163c:	e8 e3       	ldi	r30, 0x38	; 56
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	80 83       	st	Z, r24
    1644:	0d c0       	rjmp	.+26     	; 0x1660 <DIO_ErrStateSetPortValue+0x80>
		case 'C':  PORTC_ITI =  val ;break ;
    1646:	e5 e3       	ldi	r30, 0x35	; 53
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	80 83       	st	Z, r24
    164e:	08 c0       	rjmp	.+16     	; 0x1660 <DIO_ErrStateSetPortValue+0x80>
		case 'D':  PORTD_ITI =  val ;break ;
    1650:	e2 e3       	ldi	r30, 0x32	; 50
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	80 83       	st	Z, r24
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <DIO_ErrStateSetPortValue+0x80>
		default :
			return DIO_ERROR_PORT ;
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	9b 83       	std	Y+3, r25	; 0x03
    165e:	01 c0       	rjmp	.+2      	; 0x1662 <DIO_ErrStateSetPortValue+0x82>
		}
		return DIO_OK ;
    1660:	1b 82       	std	Y+3, r1	; 0x03
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
	else
	{
		return DIO_ERROR_VALUE;
	}

}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <DIO_ErrStateReadGroupValue>:
DIO_Err  DIO_ErrStateReadGroupValue(PORT_Name port ,u8 *value)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <DIO_ErrStateReadGroupValue+0x6>
    167a:	00 d0       	rcall	.+0      	; 0x167c <DIO_ErrStateReadGroupValue+0x8>
    167c:	00 d0       	rcall	.+0      	; 0x167e <DIO_ErrStateReadGroupValue+0xa>
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	7b 83       	std	Y+3, r23	; 0x03
    1686:	6a 83       	std	Y+2, r22	; 0x02
	if(value!=Null)
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	9b 81       	ldd	r25, Y+3	; 0x03
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	09 f4       	brne	.+2      	; 0x1692 <DIO_ErrStateReadGroupValue+0x1e>
    1690:	41 c0       	rjmp	.+130    	; 0x1714 <DIO_ErrStateReadGroupValue+0xa0>
	{
		switch(port)
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	3e 83       	std	Y+6, r19	; 0x06
    169a:	2d 83       	std	Y+5, r18	; 0x05
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
    169e:	9e 81       	ldd	r25, Y+6	; 0x06
    16a0:	82 34       	cpi	r24, 0x42	; 66
    16a2:	91 05       	cpc	r25, r1
    16a4:	e9 f0       	breq	.+58     	; 0x16e0 <DIO_ErrStateReadGroupValue+0x6c>
    16a6:	2d 81       	ldd	r18, Y+5	; 0x05
    16a8:	3e 81       	ldd	r19, Y+6	; 0x06
    16aa:	23 34       	cpi	r18, 0x43	; 67
    16ac:	31 05       	cpc	r19, r1
    16ae:	34 f4       	brge	.+12     	; 0x16bc <DIO_ErrStateReadGroupValue+0x48>
    16b0:	8d 81       	ldd	r24, Y+5	; 0x05
    16b2:	9e 81       	ldd	r25, Y+6	; 0x06
    16b4:	81 34       	cpi	r24, 0x41	; 65
    16b6:	91 05       	cpc	r25, r1
    16b8:	61 f0       	breq	.+24     	; 0x16d2 <DIO_ErrStateReadGroupValue+0x5e>
    16ba:	27 c0       	rjmp	.+78     	; 0x170a <DIO_ErrStateReadGroupValue+0x96>
    16bc:	2d 81       	ldd	r18, Y+5	; 0x05
    16be:	3e 81       	ldd	r19, Y+6	; 0x06
    16c0:	23 34       	cpi	r18, 0x43	; 67
    16c2:	31 05       	cpc	r19, r1
    16c4:	a1 f0       	breq	.+40     	; 0x16ee <DIO_ErrStateReadGroupValue+0x7a>
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ca:	84 34       	cpi	r24, 0x44	; 68
    16cc:	91 05       	cpc	r25, r1
    16ce:	b1 f0       	breq	.+44     	; 0x16fc <DIO_ErrStateReadGroupValue+0x88>
    16d0:	1c c0       	rjmp	.+56     	; 0x170a <DIO_ErrStateReadGroupValue+0x96>
		{
		case 'A':  *value = PINA_ITI ; break ;
    16d2:	e9 e3       	ldi	r30, 0x39	; 57
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	ea 81       	ldd	r30, Y+2	; 0x02
    16da:	fb 81       	ldd	r31, Y+3	; 0x03
    16dc:	80 83       	st	Z, r24
    16de:	18 c0       	rjmp	.+48     	; 0x1710 <DIO_ErrStateReadGroupValue+0x9c>
		case 'B':  *value = PINB_ITI ; break ;
    16e0:	e6 e3       	ldi	r30, 0x36	; 54
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	ea 81       	ldd	r30, Y+2	; 0x02
    16e8:	fb 81       	ldd	r31, Y+3	; 0x03
    16ea:	80 83       	st	Z, r24
    16ec:	11 c0       	rjmp	.+34     	; 0x1710 <DIO_ErrStateReadGroupValue+0x9c>
		case 'C':  *value = PINC_ITI ; break ;
    16ee:	e3 e3       	ldi	r30, 0x33	; 51
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	ea 81       	ldd	r30, Y+2	; 0x02
    16f6:	fb 81       	ldd	r31, Y+3	; 0x03
    16f8:	80 83       	st	Z, r24
    16fa:	0a c0       	rjmp	.+20     	; 0x1710 <DIO_ErrStateReadGroupValue+0x9c>
		case 'D':  *value = PIND_ITI ; break ;
    16fc:	e0 e3       	ldi	r30, 0x30	; 48
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	ea 81       	ldd	r30, Y+2	; 0x02
    1704:	fb 81       	ldd	r31, Y+3	; 0x03
    1706:	80 83       	st	Z, r24
    1708:	03 c0       	rjmp	.+6      	; 0x1710 <DIO_ErrStateReadGroupValue+0x9c>
		default :
			return DIO_ERROR_PORT ;
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	9c 83       	std	Y+4, r25	; 0x04
    170e:	04 c0       	rjmp	.+8      	; 0x1718 <DIO_ErrStateReadGroupValue+0xa4>
		}
		return DIO_OK ;
    1710:	1c 82       	std	Y+4, r1	; 0x04
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <DIO_ErrStateReadGroupValue+0xa4>
	}
	else
	{
		return AddressError;
    1714:	25 e0       	ldi	r18, 0x05	; 5
    1716:	2c 83       	std	Y+4, r18	; 0x04
    1718:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    171a:	26 96       	adiw	r28, 0x06	; 6
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <ADC_ErrStateInit>:

#include "ADC_Interface.h"
static u16 * ADC_pu8Readibg = Null;
static void (*ADC_pvCallBackNotifFunc)(void)=Null;
static u8 ADC_State=ADC_IDLE;
ADC_ErrState ADC_ErrStateInit(void){
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62

	//AVCC With External Cap
	CLEAR_BIT(ADMUX_Reg,REFS0);
    1734:	a7 e2       	ldi	r26, 0x27	; 39
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e7 e2       	ldi	r30, 0x27	; 39
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	8f 7b       	andi	r24, 0xBF	; 191
    1740:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX_Reg,REFS1);
    1742:	a7 e2       	ldi	r26, 0x27	; 39
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e7 e2       	ldi	r30, 0x27	; 39
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	8f 77       	andi	r24, 0x7F	; 127
    174e:	8c 93       	st	X, r24

	//Left Adjust
	SET_BIT(ADMUX_Reg,ADLAR);
    1750:	a7 e2       	ldi	r26, 0x27	; 39
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e7 e2       	ldi	r30, 0x27	; 39
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	80 62       	ori	r24, 0x20	; 32
    175c:	8c 93       	st	X, r24

	ADCSRA_Reg&=ADC_PRESC_MASK;
    175e:	a6 e2       	ldi	r26, 0x26	; 38
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e6 e2       	ldi	r30, 0x26	; 38
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	88 7f       	andi	r24, 0xF8	; 248
    176a:	8c 93       	st	X, r24
	//Setting Prescale in Config file
	ADCSRA_Reg|=PRESC;
    176c:	a6 e2       	ldi	r26, 0x26	; 38
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e6 e2       	ldi	r30, 0x26	; 38
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	82 60       	ori	r24, 0x02	; 2
    1778:	8c 93       	st	X, r24
	//Enable
	SET_BIT(ADCSRA_Reg,ADEN);
    177a:	a6 e2       	ldi	r26, 0x26	; 38
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e6 e2       	ldi	r30, 0x26	; 38
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	80 68       	ori	r24, 0x80	; 128
    1786:	8c 93       	st	X, r24
	return ADC_Init_Ok;
    1788:	80 e0       	ldi	r24, 0x00	; 0
}
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <ADC_ErrStateConversionSynch>:
ADC_ErrState ADC_ErrStateConversionSynch(u8 PIN,u16 *Val){
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	28 97       	sbiw	r28, 0x08	; 8
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	8e 83       	std	Y+6, r24	; 0x06
    17a6:	78 87       	std	Y+8, r23	; 0x08
    17a8:	6f 83       	std	Y+7, r22	; 0x07
	u8 Adc_ErrReturn;
	if(ADC_State==ADC_IDLE){
    17aa:	80 91 6b 00 	lds	r24, 0x006B
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <ADC_ErrStateConversionSynch+0x24>
    17b2:	5d c0       	rjmp	.+186    	; 0x186e <ADC_ErrStateConversionSynch+0xde>
		ADC_State=ADC_BUSY;
    17b4:	10 92 6b 00 	sts	0x006B, r1
		u32 ADC_Local_Counter;
		ADMUX_Reg&=0b11100000;
    17b8:	a7 e2       	ldi	r26, 0x27	; 39
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e7 e2       	ldi	r30, 0x27	; 39
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	80 7e       	andi	r24, 0xE0	; 224
    17c4:	8c 93       	st	X, r24
		ADMUX_Reg|=PIN;
    17c6:	a7 e2       	ldi	r26, 0x27	; 39
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e7 e2       	ldi	r30, 0x27	; 39
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	90 81       	ld	r25, Z
    17d0:	8e 81       	ldd	r24, Y+6	; 0x06
    17d2:	89 2b       	or	r24, r25
    17d4:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_Reg,ADSC);
    17d6:	a6 e2       	ldi	r26, 0x26	; 38
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e6 e2       	ldi	r30, 0x26	; 38
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	80 64       	ori	r24, 0x40	; 64
    17e2:	8c 93       	st	X, r24
    17e4:	0b c0       	rjmp	.+22     	; 0x17fc <ADC_ErrStateConversionSynch+0x6c>
		while(((GET_BIT(ADCSRA_Reg,ADIF))==0)&&(ADC_Local_Counter!=ADC_u32Timeout)){
			ADC_Local_Counter++;
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ea:	ab 81       	ldd	r26, Y+3	; 0x03
    17ec:	bc 81       	ldd	r27, Y+4	; 0x04
    17ee:	01 96       	adiw	r24, 0x01	; 1
    17f0:	a1 1d       	adc	r26, r1
    17f2:	b1 1d       	adc	r27, r1
    17f4:	89 83       	std	Y+1, r24	; 0x01
    17f6:	9a 83       	std	Y+2, r25	; 0x02
    17f8:	ab 83       	std	Y+3, r26	; 0x03
    17fa:	bc 83       	std	Y+4, r27	; 0x04
		ADC_State=ADC_BUSY;
		u32 ADC_Local_Counter;
		ADMUX_Reg&=0b11100000;
		ADMUX_Reg|=PIN;
		SET_BIT(ADCSRA_Reg,ADSC);
		while(((GET_BIT(ADCSRA_Reg,ADIF))==0)&&(ADC_Local_Counter!=ADC_u32Timeout)){
    17fc:	e6 e2       	ldi	r30, 0x26	; 38
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	82 95       	swap	r24
    1804:	8f 70       	andi	r24, 0x0F	; 15
    1806:	88 2f       	mov	r24, r24
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	81 70       	andi	r24, 0x01	; 1
    180c:	90 70       	andi	r25, 0x00	; 0
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	61 f4       	brne	.+24     	; 0x182a <ADC_ErrStateConversionSynch+0x9a>
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	9a 81       	ldd	r25, Y+2	; 0x02
    1816:	ab 81       	ldd	r26, Y+3	; 0x03
    1818:	bc 81       	ldd	r27, Y+4	; 0x04
    181a:	88 38       	cpi	r24, 0x88	; 136
    181c:	23 e1       	ldi	r18, 0x13	; 19
    181e:	92 07       	cpc	r25, r18
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	a2 07       	cpc	r26, r18
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	b2 07       	cpc	r27, r18
    1828:	f1 f6       	brne	.-68     	; 0x17e6 <ADC_ErrStateConversionSynch+0x56>
			ADC_Local_Counter++;
		}
		if(ADC_Local_Counter==ADC_u32Timeout){
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	9a 81       	ldd	r25, Y+2	; 0x02
    182e:	ab 81       	ldd	r26, Y+3	; 0x03
    1830:	bc 81       	ldd	r27, Y+4	; 0x04
    1832:	88 38       	cpi	r24, 0x88	; 136
    1834:	23 e1       	ldi	r18, 0x13	; 19
    1836:	92 07       	cpc	r25, r18
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	a2 07       	cpc	r26, r18
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	b2 07       	cpc	r27, r18
    1840:	19 f4       	brne	.+6      	; 0x1848 <ADC_ErrStateConversionSynch+0xb8>
			Adc_ErrReturn= ADC_SynchError;
    1842:	85 e0       	ldi	r24, 0x05	; 5
    1844:	8d 83       	std	Y+5, r24	; 0x05
    1846:	15 c0       	rjmp	.+42     	; 0x1872 <ADC_ErrStateConversionSynch+0xe2>
		}
		else
		{

			SET_BIT(ADCSRA_Reg,ADIF);
    1848:	a6 e2       	ldi	r26, 0x26	; 38
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e6 e2       	ldi	r30, 0x26	; 38
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	80 61       	ori	r24, 0x10	; 16
    1854:	8c 93       	st	X, r24
			*Val=ADCH_Reg;
    1856:	e5 e2       	ldi	r30, 0x25	; 37
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	88 2f       	mov	r24, r24
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	ef 81       	ldd	r30, Y+7	; 0x07
    1862:	f8 85       	ldd	r31, Y+8	; 0x08
    1864:	91 83       	std	Z+1, r25	; 0x01
    1866:	80 83       	st	Z, r24
			Adc_ErrReturn=ADC_Synch_Ok;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	8d 83       	std	Y+5, r24	; 0x05
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <ADC_ErrStateConversionSynch+0xe2>
		}
	}
	else{
		Adc_ErrReturn=ADC_Synch_Busy;
    186e:	83 e0       	ldi	r24, 0x03	; 3
    1870:	8d 83       	std	Y+5, r24	; 0x05
	}
	ADC_State=ADC_IDLE;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	80 93 6b 00 	sts	0x006B, r24
	return Adc_ErrReturn;
    1878:	8d 81       	ldd	r24, Y+5	; 0x05
}
    187a:	28 96       	adiw	r28, 0x08	; 8
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <ADC_ErrStateConversionASynch>:
ADC_ErrState ADC_ErrStateConversionASynch(u8 PIN,u16 *Val,void (*ADC_pvNotifFunc)(void)){
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	00 d0       	rcall	.+0      	; 0x1892 <ADC_ErrStateConversionASynch+0x6>
    1892:	00 d0       	rcall	.+0      	; 0x1894 <ADC_ErrStateConversionASynch+0x8>
    1894:	00 d0       	rcall	.+0      	; 0x1896 <ADC_ErrStateConversionASynch+0xa>
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	8a 83       	std	Y+2, r24	; 0x02
    189c:	7c 83       	std	Y+4, r23	; 0x04
    189e:	6b 83       	std	Y+3, r22	; 0x03
    18a0:	5e 83       	std	Y+6, r21	; 0x06
    18a2:	4d 83       	std	Y+5, r20	; 0x05
	u8 Adc_ErrReturn;
	if(ADC_State==ADC_IDLE){
    18a4:	80 91 6b 00 	lds	r24, 0x006B
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	c9 f5       	brne	.+114    	; 0x191e <ADC_ErrStateConversionASynch+0x92>

		if(Val==Null || ADC_pvNotifFunc==Null){
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	9c 81       	ldd	r25, Y+4	; 0x04
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	21 f0       	breq	.+8      	; 0x18bc <ADC_ErrStateConversionASynch+0x30>
    18b4:	8d 81       	ldd	r24, Y+5	; 0x05
    18b6:	9e 81       	ldd	r25, Y+6	; 0x06
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	19 f4       	brne	.+6      	; 0x18c2 <ADC_ErrStateConversionASynch+0x36>
			Adc_ErrReturn=ADC_ASynchError;
    18bc:	86 e0       	ldi	r24, 0x06	; 6
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	30 c0       	rjmp	.+96     	; 0x1922 <ADC_ErrStateConversionASynch+0x96>
		}
		else
		{
			ADC_State=ADC_BUSY;
    18c2:	10 92 6b 00 	sts	0x006B, r1
			ADC_pu8Readibg=Val;
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	90 93 a5 00 	sts	0x00A5, r25
    18ce:	80 93 a4 00 	sts	0x00A4, r24
			ADC_pvCallBackNotifFunc=ADC_pvNotifFunc;
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	90 93 a7 00 	sts	0x00A7, r25
    18da:	80 93 a6 00 	sts	0x00A6, r24
			/* Clear MUX Register */
			ADMUX_Reg&=0b11100000;
    18de:	a7 e2       	ldi	r26, 0x27	; 39
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e7 e2       	ldi	r30, 0x27	; 39
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	80 7e       	andi	r24, 0xE0	; 224
    18ea:	8c 93       	st	X, r24
			/* Set the required channel into MUX bits */
			ADMUX_Reg|=PIN;
    18ec:	a7 e2       	ldi	r26, 0x27	; 39
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e7 e2       	ldi	r30, 0x27	; 39
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	90 81       	ld	r25, Z
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	89 2b       	or	r24, r25
    18fa:	8c 93       	st	X, r24
			/* Start Conversion */
			SET_BIT(ADCSRA_Reg,ADSC);
    18fc:	a6 e2       	ldi	r26, 0x26	; 38
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e6 e2       	ldi	r30, 0x26	; 38
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	80 64       	ori	r24, 0x40	; 64
    1908:	8c 93       	st	X, r24
			/* Enable ADC Interrupt */
			SET_BIT(ADCSRA_Reg,ADIE);
    190a:	a6 e2       	ldi	r26, 0x26	; 38
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e6 e2       	ldi	r30, 0x26	; 38
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	88 60       	ori	r24, 0x08	; 8
    1916:	8c 93       	st	X, r24
			Adc_ErrReturn=ADC_ASynch_Ok;
    1918:	82 e0       	ldi	r24, 0x02	; 2
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <ADC_ErrStateConversionASynch+0x96>
		}
	}
	else{
		Adc_ErrReturn=ADC_ASynch_Busy;
    191e:	84 e0       	ldi	r24, 0x04	; 4
    1920:	89 83       	std	Y+1, r24	; 0x01
	}
	return Adc_ErrReturn;
    1922:	89 81       	ldd	r24, Y+1	; 0x01
}
    1924:	26 96       	adiw	r28, 0x06	; 6
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <__vector_16>:
void __vector_16(void) __attribute__((signal));
void __vector_16(void){
    1936:	1f 92       	push	r1
    1938:	0f 92       	push	r0
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	0f 92       	push	r0
    193e:	11 24       	eor	r1, r1
    1940:	2f 93       	push	r18
    1942:	3f 93       	push	r19
    1944:	4f 93       	push	r20
    1946:	5f 93       	push	r21
    1948:	6f 93       	push	r22
    194a:	7f 93       	push	r23
    194c:	8f 93       	push	r24
    194e:	9f 93       	push	r25
    1950:	af 93       	push	r26
    1952:	bf 93       	push	r27
    1954:	ef 93       	push	r30
    1956:	ff 93       	push	r31
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
	/* Read adc result */
	*ADC_pu8Readibg= ADCH_Reg;
    1960:	a0 91 a4 00 	lds	r26, 0x00A4
    1964:	b0 91 a5 00 	lds	r27, 0x00A5
    1968:	e5 e2       	ldi	r30, 0x25	; 37
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	88 2f       	mov	r24, r24
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	8d 93       	st	X+, r24
    1974:	9c 93       	st	X, r25
	/* Invoke Callback NotiFun */
	ADC_pvCallBackNotifFunc();
    1976:	e0 91 a6 00 	lds	r30, 0x00A6
    197a:	f0 91 a7 00 	lds	r31, 0x00A7
    197e:	09 95       	icall
	/* Disable ADC Conversion */
	CLEAR_BIT(ADCSRA_Reg,ADIE);
    1980:	a6 e2       	ldi	r26, 0x26	; 38
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e6 e2       	ldi	r30, 0x26	; 38
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	87 7f       	andi	r24, 0xF7	; 247
    198c:	8c 93       	st	X, r24
	ADC_State=ADC_IDLE;
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	80 93 6b 00 	sts	0x006B, r24
}
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	ff 91       	pop	r31
    199a:	ef 91       	pop	r30
    199c:	bf 91       	pop	r27
    199e:	af 91       	pop	r26
    19a0:	9f 91       	pop	r25
    19a2:	8f 91       	pop	r24
    19a4:	7f 91       	pop	r23
    19a6:	6f 91       	pop	r22
    19a8:	5f 91       	pop	r21
    19aa:	4f 91       	pop	r20
    19ac:	3f 91       	pop	r19
    19ae:	2f 91       	pop	r18
    19b0:	0f 90       	pop	r0
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	0f 90       	pop	r0
    19b6:	1f 90       	pop	r1
    19b8:	18 95       	reti

000019ba <SW_SwitchErrStateGetState>:
 *  Created on: Mar 24, 2023
 *      Author: hisha
 */

#include "Switch_Interface.h"
SwitchErrState  SW_SwitchErrStateGetState(Switch_Info * Switch ,u8 * Result){
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	29 97       	sbiw	r28, 0x09	; 9
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	9d 83       	std	Y+5, r25	; 0x05
    19d0:	8c 83       	std	Y+4, r24	; 0x04
    19d2:	7f 83       	std	Y+7, r23	; 0x07
    19d4:	6e 83       	std	Y+6, r22	; 0x06
	u8 read_val;
	Result=&read_val;
    19d6:	ce 01       	movw	r24, r28
    19d8:	03 96       	adiw	r24, 0x03	; 3
    19da:	9f 83       	std	Y+7, r25	; 0x07
    19dc:	8e 83       	std	Y+6, r24	; 0x06
	u8 Switch_ErrDirectionReturn;
	u8 Switch_ErrValueReturn;
	if(Switch->ConnectionType==InternalPullUp){
    19de:	ec 81       	ldd	r30, Y+4	; 0x04
    19e0:	fd 81       	ldd	r31, Y+5	; 0x05
    19e2:	82 81       	ldd	r24, Z+2	; 0x02
    19e4:	88 23       	and	r24, r24
    19e6:	d1 f5       	brne	.+116    	; 0x1a5c <SW_SwitchErrStateGetState+0xa2>
		Switch_ErrDirectionReturn=DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_IN);
    19e8:	ec 81       	ldd	r30, Y+4	; 0x04
    19ea:	fd 81       	ldd	r31, Y+5	; 0x05
    19ec:	80 81       	ld	r24, Z
    19ee:	ec 81       	ldd	r30, Y+4	; 0x04
    19f0:	fd 81       	ldd	r31, Y+5	; 0x05
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	69 2f       	mov	r22, r25
    19f6:	40 e0       	ldi	r20, 0x00	; 0
    19f8:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    19fc:	8a 83       	std	Y+2, r24	; 0x02
		if(Switch_ErrDirectionReturn==DIO_ERROR_PORT||Switch_ErrDirectionReturn==DIO_ERROR_Direction||Switch_ErrDirectionReturn==DIO_ERROR_PIN){
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	81 30       	cpi	r24, 0x01	; 1
    1a02:	31 f0       	breq	.+12     	; 0x1a10 <SW_SwitchErrStateGetState+0x56>
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	83 30       	cpi	r24, 0x03	; 3
    1a08:	19 f0       	breq	.+6      	; 0x1a10 <SW_SwitchErrStateGetState+0x56>
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	82 30       	cpi	r24, 0x02	; 2
    1a0e:	11 f4       	brne	.+4      	; 0x1a14 <SW_SwitchErrStateGetState+0x5a>
			return Switch_Init_Error;
    1a10:	18 86       	std	Y+8, r1	; 0x08
    1a12:	79 c0       	rjmp	.+242    	; 0x1b06 <SW_SwitchErrStateGetState+0x14c>
		}
		else{
			DIO_ErrStateSetPinValue(Switch->SW_Group,Switch->SW_Pin,DIO_HIGH);
    1a14:	ec 81       	ldd	r30, Y+4	; 0x04
    1a16:	fd 81       	ldd	r31, Y+5	; 0x05
    1a18:	80 81       	ld	r24, Z
    1a1a:	ec 81       	ldd	r30, Y+4	; 0x04
    1a1c:	fd 81       	ldd	r31, Y+5	; 0x05
    1a1e:	91 81       	ldd	r25, Z+1	; 0x01
    1a20:	69 2f       	mov	r22, r25
    1a22:	41 e0       	ldi	r20, 0x01	; 1
    1a24:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
			Switch_ErrValueReturn=DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,&read_val);
    1a28:	ec 81       	ldd	r30, Y+4	; 0x04
    1a2a:	fd 81       	ldd	r31, Y+5	; 0x05
    1a2c:	80 81       	ld	r24, Z
    1a2e:	ec 81       	ldd	r30, Y+4	; 0x04
    1a30:	fd 81       	ldd	r31, Y+5	; 0x05
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	9e 01       	movw	r18, r28
    1a36:	2d 5f       	subi	r18, 0xFD	; 253
    1a38:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3a:	69 2f       	mov	r22, r25
    1a3c:	a9 01       	movw	r20, r18
    1a3e:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_ErrStateReadPinValue>
    1a42:	89 83       	std	Y+1, r24	; 0x01
			if(Switch_ErrValueReturn==DIO_ERROR_PIN||Switch_ErrValueReturn==DIO_ERROR_PORT){
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	82 30       	cpi	r24, 0x02	; 2
    1a48:	19 f0       	breq	.+6      	; 0x1a50 <SW_SwitchErrStateGetState+0x96>
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	19 f4       	brne	.+6      	; 0x1a56 <SW_SwitchErrStateGetState+0x9c>
				return Switch_Value_Error;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	88 87       	std	Y+8, r24	; 0x08
    1a54:	58 c0       	rjmp	.+176    	; 0x1b06 <SW_SwitchErrStateGetState+0x14c>
			}
			else
				return Switch_Ok;
    1a56:	82 e0       	ldi	r24, 0x02	; 2
    1a58:	88 87       	std	Y+8, r24	; 0x08
    1a5a:	55 c0       	rjmp	.+170    	; 0x1b06 <SW_SwitchErrStateGetState+0x14c>
		}
	}
	else if(Switch->ConnectionType==ExternalPullUp){
    1a5c:	ec 81       	ldd	r30, Y+4	; 0x04
    1a5e:	fd 81       	ldd	r31, Y+5	; 0x05
    1a60:	82 81       	ldd	r24, Z+2	; 0x02
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	29 f5       	brne	.+74     	; 0x1ab0 <SW_SwitchErrStateGetState+0xf6>
		Switch_ErrDirectionReturn=DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_IN);
    1a66:	ec 81       	ldd	r30, Y+4	; 0x04
    1a68:	fd 81       	ldd	r31, Y+5	; 0x05
    1a6a:	80 81       	ld	r24, Z
    1a6c:	ec 81       	ldd	r30, Y+4	; 0x04
    1a6e:	fd 81       	ldd	r31, Y+5	; 0x05
    1a70:	91 81       	ldd	r25, Z+1	; 0x01
    1a72:	69 2f       	mov	r22, r25
    1a74:	40 e0       	ldi	r20, 0x00	; 0
    1a76:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    1a7a:	8a 83       	std	Y+2, r24	; 0x02
		Switch_ErrValueReturn=DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,&read_val);
    1a7c:	ec 81       	ldd	r30, Y+4	; 0x04
    1a7e:	fd 81       	ldd	r31, Y+5	; 0x05
    1a80:	80 81       	ld	r24, Z
    1a82:	ec 81       	ldd	r30, Y+4	; 0x04
    1a84:	fd 81       	ldd	r31, Y+5	; 0x05
    1a86:	91 81       	ldd	r25, Z+1	; 0x01
    1a88:	9e 01       	movw	r18, r28
    1a8a:	2d 5f       	subi	r18, 0xFD	; 253
    1a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8e:	69 2f       	mov	r22, r25
    1a90:	a9 01       	movw	r20, r18
    1a92:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_ErrStateReadPinValue>
    1a96:	89 83       	std	Y+1, r24	; 0x01
		if(Switch_ErrValueReturn==DIO_ERROR_PIN||Switch_ErrValueReturn==DIO_ERROR_PORT){
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	82 30       	cpi	r24, 0x02	; 2
    1a9c:	19 f0       	breq	.+6      	; 0x1aa4 <SW_SwitchErrStateGetState+0xea>
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	19 f4       	brne	.+6      	; 0x1aaa <SW_SwitchErrStateGetState+0xf0>
			return Switch_Value_Error;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	88 87       	std	Y+8, r24	; 0x08
    1aa8:	2e c0       	rjmp	.+92     	; 0x1b06 <SW_SwitchErrStateGetState+0x14c>
		}
		else
			return Switch_Ok;
    1aaa:	82 e0       	ldi	r24, 0x02	; 2
    1aac:	88 87       	std	Y+8, r24	; 0x08
    1aae:	2b c0       	rjmp	.+86     	; 0x1b06 <SW_SwitchErrStateGetState+0x14c>
	}

	else if(Switch->ConnectionType==ExternalPullDown){
    1ab0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ab2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ab4:	82 81       	ldd	r24, Z+2	; 0x02
    1ab6:	82 30       	cpi	r24, 0x02	; 2
    1ab8:	29 f5       	brne	.+74     	; 0x1b04 <SW_SwitchErrStateGetState+0x14a>
		Switch_ErrDirectionReturn=DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_IN);
    1aba:	ec 81       	ldd	r30, Y+4	; 0x04
    1abc:	fd 81       	ldd	r31, Y+5	; 0x05
    1abe:	80 81       	ld	r24, Z
    1ac0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ac2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ac4:	91 81       	ldd	r25, Z+1	; 0x01
    1ac6:	69 2f       	mov	r22, r25
    1ac8:	40 e0       	ldi	r20, 0x00	; 0
    1aca:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    1ace:	8a 83       	std	Y+2, r24	; 0x02
		Switch_ErrValueReturn=DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,&read_val);
    1ad0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ad2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ad4:	80 81       	ld	r24, Z
    1ad6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ad8:	fd 81       	ldd	r31, Y+5	; 0x05
    1ada:	91 81       	ldd	r25, Z+1	; 0x01
    1adc:	9e 01       	movw	r18, r28
    1ade:	2d 5f       	subi	r18, 0xFD	; 253
    1ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae2:	69 2f       	mov	r22, r25
    1ae4:	a9 01       	movw	r20, r18
    1ae6:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_ErrStateReadPinValue>
    1aea:	89 83       	std	Y+1, r24	; 0x01
		if(Switch_ErrValueReturn==DIO_ERROR_PIN||Switch_ErrValueReturn==DIO_ERROR_PORT){
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	82 30       	cpi	r24, 0x02	; 2
    1af0:	19 f0       	breq	.+6      	; 0x1af8 <SW_SwitchErrStateGetState+0x13e>
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	81 30       	cpi	r24, 0x01	; 1
    1af6:	19 f4       	brne	.+6      	; 0x1afe <SW_SwitchErrStateGetState+0x144>
			return Switch_Value_Error;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	88 87       	std	Y+8, r24	; 0x08
    1afc:	04 c0       	rjmp	.+8      	; 0x1b06 <SW_SwitchErrStateGetState+0x14c>
		}
		else
			return Switch_Ok;
    1afe:	82 e0       	ldi	r24, 0x02	; 2
    1b00:	88 87       	std	Y+8, r24	; 0x08
    1b02:	01 c0       	rjmp	.+2      	; 0x1b06 <SW_SwitchErrStateGetState+0x14c>
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <SW_SwitchErrStateGetState+0x150>
	}

}
    1b06:	88 85       	ldd	r24, Y+8	; 0x08
    1b08:	89 87       	std	Y+9, r24	; 0x09
    1b0a:	89 85       	ldd	r24, Y+9	; 0x09
    1b0c:	29 96       	adiw	r28, 0x09	; 9
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <SevSeg_SevErrStateSetNumber>:
		SevSegCC_6 ,
		SevSegCC_7 ,
		SevSegCC_8 ,
		SevSegCC_9
};
SevErrState SevSeg_SevErrStateSetNumber(u8 INPUT_NUMBER , SevSeg_info * SevenSegment1){
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <SevSeg_SevErrStateSetNumber+0x6>
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <SevSeg_SevErrStateSetNumber+0x8>
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <SevSeg_SevErrStateSetNumber+0xa>
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	8b 83       	std	Y+3, r24	; 0x03
    1b2e:	7d 83       	std	Y+5, r23	; 0x05
    1b30:	6c 83       	std	Y+4, r22	; 0x04
	u8 ErrStateDirection,ErrStateValue; // anode 1 // cathode 0 Enable
	ErrStateDirection=DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,DIO_OUT);
    1b32:	ec 81       	ldd	r30, Y+4	; 0x04
    1b34:	fd 81       	ldd	r31, Y+5	; 0x05
    1b36:	81 81       	ldd	r24, Z+1	; 0x01
    1b38:	61 e0       	ldi	r22, 0x01	; 1
    1b3a:	0e 94 a6 0a 	call	0x154c	; 0x154c <DIO_ErrStateSetGroupDirection>
    1b3e:	8a 83       	std	Y+2, r24	; 0x02
	if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction)
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	81 30       	cpi	r24, 0x01	; 1
    1b44:	19 f0       	breq	.+6      	; 0x1b4c <SevSeg_SevErrStateSetNumber+0x2e>
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	83 30       	cpi	r24, 0x03	; 3
    1b4a:	19 f4       	brne	.+6      	; 0x1b52 <SevSeg_SevErrStateSetNumber+0x34>
	{
		return Group_ERROR;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	8e 83       	std	Y+6, r24	; 0x06
    1b50:	8c c0       	rjmp	.+280    	; 0x1c6a <SevSeg_SevErrStateSetNumber+0x14c>
	}
	else{
		if(SevenSegment1->SevSeg_Type==CA){
    1b52:	ec 81       	ldd	r30, Y+4	; 0x04
    1b54:	fd 81       	ldd	r31, Y+5	; 0x05
    1b56:	80 81       	ld	r24, Z
    1b58:	88 23       	and	r24, r24
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <SevSeg_SevErrStateSetNumber+0x40>
    1b5c:	3f c0       	rjmp	.+126    	; 0x1bdc <SevSeg_SevErrStateSetNumber+0xbe>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    1b5e:	ec 81       	ldd	r30, Y+4	; 0x04
    1b60:	fd 81       	ldd	r31, Y+5	; 0x05
    1b62:	82 81       	ldd	r24, Z+2	; 0x02
    1b64:	ec 81       	ldd	r30, Y+4	; 0x04
    1b66:	fd 81       	ldd	r31, Y+5	; 0x05
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	69 2f       	mov	r22, r25
    1b6c:	41 e0       	ldi	r20, 0x01	; 1
    1b6e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    1b72:	8a 83       	std	Y+2, r24	; 0x02
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	81 30       	cpi	r24, 0x01	; 1
    1b78:	31 f0       	breq	.+12     	; 0x1b86 <SevSeg_SevErrStateSetNumber+0x68>
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	83 30       	cpi	r24, 0x03	; 3
    1b7e:	19 f0       	breq	.+6      	; 0x1b86 <SevSeg_SevErrStateSetNumber+0x68>
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	82 30       	cpi	r24, 0x02	; 2
    1b84:	19 f4       	brne	.+6      	; 0x1b8c <SevSeg_SevErrStateSetNumber+0x6e>
				return Group_ERROR;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	8e 83       	std	Y+6, r24	; 0x06
    1b8a:	6f c0       	rjmp	.+222    	; 0x1c6a <SevSeg_SevErrStateSetNumber+0x14c>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
    1b8c:	ec 81       	ldd	r30, Y+4	; 0x04
    1b8e:	fd 81       	ldd	r31, Y+5	; 0x05
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	ec 81       	ldd	r30, Y+4	; 0x04
    1b94:	fd 81       	ldd	r31, Y+5	; 0x05
    1b96:	93 81       	ldd	r25, Z+3	; 0x03
    1b98:	69 2f       	mov	r22, r25
    1b9a:	41 e0       	ldi	r20, 0x01	; 1
    1b9c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    1ba0:	89 83       	std	Y+1, r24	; 0x01
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	31 f0       	breq	.+12     	; 0x1bb4 <SevSeg_SevErrStateSetNumber+0x96>
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	84 30       	cpi	r24, 0x04	; 4
    1bac:	19 f0       	breq	.+6      	; 0x1bb4 <SevSeg_SevErrStateSetNumber+0x96>
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	82 30       	cpi	r24, 0x02	; 2
    1bb2:	11 f4       	brne	.+4      	; 0x1bb8 <SevSeg_SevErrStateSetNumber+0x9a>
					return Number_Error;
    1bb4:	1e 82       	std	Y+6, r1	; 0x06
    1bb6:	59 c0       	rjmp	.+178    	; 0x1c6a <SevSeg_SevErrStateSetNumber+0x14c>
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[INPUT_NUMBER]);
    1bb8:	ec 81       	ldd	r30, Y+4	; 0x04
    1bba:	fd 81       	ldd	r31, Y+5	; 0x05
    1bbc:	21 81       	ldd	r18, Z+1	; 0x01
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	88 2f       	mov	r24, r24
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	e4 59       	subi	r30, 0x94	; 148
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	90 81       	ld	r25, Z
    1bcc:	82 2f       	mov	r24, r18
    1bce:	69 2f       	mov	r22, r25
    1bd0:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    1bd4:	89 83       	std	Y+1, r24	; 0x01
					if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((INPUT_NUMBER <0 )&&(INPUT_NUMBER>9))){
						return Number_Error;
					}
					else
						return Seven_OK;
    1bd6:	82 e0       	ldi	r24, 0x02	; 2
    1bd8:	8e 83       	std	Y+6, r24	; 0x06
    1bda:	47 c0       	rjmp	.+142    	; 0x1c6a <SevSeg_SevErrStateSetNumber+0x14c>
				}
			}
		}
		else if(SevenSegment1->SevSeg_Type==CC){
    1bdc:	ec 81       	ldd	r30, Y+4	; 0x04
    1bde:	fd 81       	ldd	r31, Y+5	; 0x05
    1be0:	80 81       	ld	r24, Z
    1be2:	81 30       	cpi	r24, 0x01	; 1
    1be4:	09 f0       	breq	.+2      	; 0x1be8 <SevSeg_SevErrStateSetNumber+0xca>
    1be6:	3f c0       	rjmp	.+126    	; 0x1c66 <SevSeg_SevErrStateSetNumber+0x148>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    1be8:	ec 81       	ldd	r30, Y+4	; 0x04
    1bea:	fd 81       	ldd	r31, Y+5	; 0x05
    1bec:	82 81       	ldd	r24, Z+2	; 0x02
    1bee:	ec 81       	ldd	r30, Y+4	; 0x04
    1bf0:	fd 81       	ldd	r31, Y+5	; 0x05
    1bf2:	93 81       	ldd	r25, Z+3	; 0x03
    1bf4:	69 2f       	mov	r22, r25
    1bf6:	41 e0       	ldi	r20, 0x01	; 1
    1bf8:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    1bfc:	8a 83       	std	Y+2, r24	; 0x02
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	81 30       	cpi	r24, 0x01	; 1
    1c02:	31 f0       	breq	.+12     	; 0x1c10 <SevSeg_SevErrStateSetNumber+0xf2>
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	83 30       	cpi	r24, 0x03	; 3
    1c08:	19 f0       	breq	.+6      	; 0x1c10 <SevSeg_SevErrStateSetNumber+0xf2>
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	82 30       	cpi	r24, 0x02	; 2
    1c0e:	19 f4       	brne	.+6      	; 0x1c16 <SevSeg_SevErrStateSetNumber+0xf8>
				return Group_ERROR;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	8e 83       	std	Y+6, r24	; 0x06
    1c14:	2a c0       	rjmp	.+84     	; 0x1c6a <SevSeg_SevErrStateSetNumber+0x14c>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
    1c16:	ec 81       	ldd	r30, Y+4	; 0x04
    1c18:	fd 81       	ldd	r31, Y+5	; 0x05
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	ec 81       	ldd	r30, Y+4	; 0x04
    1c1e:	fd 81       	ldd	r31, Y+5	; 0x05
    1c20:	93 81       	ldd	r25, Z+3	; 0x03
    1c22:	69 2f       	mov	r22, r25
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    1c2a:	89 83       	std	Y+1, r24	; 0x01
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	81 30       	cpi	r24, 0x01	; 1
    1c30:	31 f0       	breq	.+12     	; 0x1c3e <SevSeg_SevErrStateSetNumber+0x120>
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	84 30       	cpi	r24, 0x04	; 4
    1c36:	19 f0       	breq	.+6      	; 0x1c3e <SevSeg_SevErrStateSetNumber+0x120>
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	82 30       	cpi	r24, 0x02	; 2
    1c3c:	11 f4       	brne	.+4      	; 0x1c42 <SevSeg_SevErrStateSetNumber+0x124>
					return Number_Error;
    1c3e:	1e 82       	std	Y+6, r1	; 0x06
    1c40:	14 c0       	rjmp	.+40     	; 0x1c6a <SevSeg_SevErrStateSetNumber+0x14c>
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[INPUT_NUMBER]);
    1c42:	ec 81       	ldd	r30, Y+4	; 0x04
    1c44:	fd 81       	ldd	r31, Y+5	; 0x05
    1c46:	21 81       	ldd	r18, Z+1	; 0x01
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	88 2f       	mov	r24, r24
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	fc 01       	movw	r30, r24
    1c50:	ea 58       	subi	r30, 0x8A	; 138
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	90 81       	ld	r25, Z
    1c56:	82 2f       	mov	r24, r18
    1c58:	69 2f       	mov	r22, r25
    1c5a:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    1c5e:	89 83       	std	Y+1, r24	; 0x01
					if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((INPUT_NUMBER <0) &&(INPUT_NUMBER>9))){
						return Number_Error;
					}
					else
						return Seven_OK;
    1c60:	82 e0       	ldi	r24, 0x02	; 2
    1c62:	8e 83       	std	Y+6, r24	; 0x06
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <SevSeg_SevErrStateSetNumber+0x14c>
				}
			}
		}
	}
	return Seven_OK;
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	8e 83       	std	Y+6, r24	; 0x06
    1c6a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1c6c:	26 96       	adiw	r28, 0x06	; 6
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <SevSeg_SevErrStateDisplayRange>:

SevErrState    SevSeg_SevErrStateDisplayRange(SevSeg_info * SevenSegment1 , u8 Copy_start , u8 Copy_End ){
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	ef 97       	sbiw	r28, 0x3f	; 63
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	9c af       	std	Y+60, r25	; 0x3c
    1c94:	8b af       	std	Y+59, r24	; 0x3b
    1c96:	6d af       	std	Y+61, r22	; 0x3d
    1c98:	4e af       	std	Y+62, r20	; 0x3e
	u8 ErrStateDirection,ErrStateValue;
	DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,DIO_OUT);
    1c9a:	eb ad       	ldd	r30, Y+59	; 0x3b
    1c9c:	fc ad       	ldd	r31, Y+60	; 0x3c
    1c9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ca0:	61 e0       	ldi	r22, 0x01	; 1
    1ca2:	0e 94 a6 0a 	call	0x154c	; 0x154c <DIO_ErrStateSetGroupDirection>
	if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction)
    1ca6:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	19 f0       	breq	.+6      	; 0x1cb2 <SevSeg_SevErrStateDisplayRange+0x34>
    1cac:	8a ad       	ldd	r24, Y+58	; 0x3a
    1cae:	83 30       	cpi	r24, 0x03	; 3
    1cb0:	19 f4       	brne	.+6      	; 0x1cb8 <SevSeg_SevErrStateDisplayRange+0x3a>
	{
		return Group_ERROR;
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	8f af       	std	Y+63, r24	; 0x3f
    1cb6:	57 c2       	rjmp	.+1198   	; 0x2166 <SevSeg_SevErrStateDisplayRange+0x4e8>
	}
	else{
		if(SevenSegment1->SevSeg_Type==CA){
    1cb8:	eb ad       	ldd	r30, Y+59	; 0x3b
    1cba:	fc ad       	ldd	r31, Y+60	; 0x3c
    1cbc:	80 81       	ld	r24, Z
    1cbe:	88 23       	and	r24, r24
    1cc0:	09 f0       	breq	.+2      	; 0x1cc4 <SevSeg_SevErrStateDisplayRange+0x46>
    1cc2:	25 c1       	rjmp	.+586    	; 0x1f0e <SevSeg_SevErrStateDisplayRange+0x290>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    1cc4:	eb ad       	ldd	r30, Y+59	; 0x3b
    1cc6:	fc ad       	ldd	r31, Y+60	; 0x3c
    1cc8:	82 81       	ldd	r24, Z+2	; 0x02
    1cca:	eb ad       	ldd	r30, Y+59	; 0x3b
    1ccc:	fc ad       	ldd	r31, Y+60	; 0x3c
    1cce:	93 81       	ldd	r25, Z+3	; 0x03
    1cd0:	69 2f       	mov	r22, r25
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    1cd8:	8a af       	std	Y+58, r24	; 0x3a
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    1cda:	8a ad       	ldd	r24, Y+58	; 0x3a
    1cdc:	81 30       	cpi	r24, 0x01	; 1
    1cde:	31 f0       	breq	.+12     	; 0x1cec <SevSeg_SevErrStateDisplayRange+0x6e>
    1ce0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ce2:	83 30       	cpi	r24, 0x03	; 3
    1ce4:	19 f0       	breq	.+6      	; 0x1cec <SevSeg_SevErrStateDisplayRange+0x6e>
    1ce6:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ce8:	82 30       	cpi	r24, 0x02	; 2
    1cea:	19 f4       	brne	.+6      	; 0x1cf2 <SevSeg_SevErrStateDisplayRange+0x74>
				return Group_ERROR;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	8f af       	std	Y+63, r24	; 0x3f
    1cf0:	3a c2       	rjmp	.+1140   	; 0x2166 <SevSeg_SevErrStateDisplayRange+0x4e8>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
    1cf2:	eb ad       	ldd	r30, Y+59	; 0x3b
    1cf4:	fc ad       	ldd	r31, Y+60	; 0x3c
    1cf6:	82 81       	ldd	r24, Z+2	; 0x02
    1cf8:	eb ad       	ldd	r30, Y+59	; 0x3b
    1cfa:	fc ad       	ldd	r31, Y+60	; 0x3c
    1cfc:	93 81       	ldd	r25, Z+3	; 0x03
    1cfe:	69 2f       	mov	r22, r25
    1d00:	41 e0       	ldi	r20, 0x01	; 1
    1d02:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    1d06:	89 af       	std	Y+57, r24	; 0x39
				if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((Copy_start <0) &&(Copy_End>9))){
					return Number_Error;
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[Copy_start]);
    1d08:	eb ad       	ldd	r30, Y+59	; 0x3b
    1d0a:	fc ad       	ldd	r31, Y+60	; 0x3c
    1d0c:	21 81       	ldd	r18, Z+1	; 0x01
    1d0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d10:	88 2f       	mov	r24, r24
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	fc 01       	movw	r30, r24
    1d16:	e4 59       	subi	r30, 0x94	; 148
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	90 81       	ld	r25, Z
    1d1c:	82 2f       	mov	r24, r18
    1d1e:	69 2f       	mov	r22, r25
    1d20:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    1d24:	89 af       	std	Y+57, r24	; 0x39
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	aa ef       	ldi	r26, 0xFA	; 250
    1d2c:	b3 e4       	ldi	r27, 0x43	; 67
    1d2e:	8d ab       	std	Y+53, r24	; 0x35
    1d30:	9e ab       	std	Y+54, r25	; 0x36
    1d32:	af ab       	std	Y+55, r26	; 0x37
    1d34:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d36:	6d a9       	ldd	r22, Y+53	; 0x35
    1d38:	7e a9       	ldd	r23, Y+54	; 0x36
    1d3a:	8f a9       	ldd	r24, Y+55	; 0x37
    1d3c:	98 ad       	ldd	r25, Y+56	; 0x38
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	4a ef       	ldi	r20, 0xFA	; 250
    1d44:	54 e4       	ldi	r21, 0x44	; 68
    1d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	89 ab       	std	Y+49, r24	; 0x31
    1d50:	9a ab       	std	Y+50, r25	; 0x32
    1d52:	ab ab       	std	Y+51, r26	; 0x33
    1d54:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d56:	69 a9       	ldd	r22, Y+49	; 0x31
    1d58:	7a a9       	ldd	r23, Y+50	; 0x32
    1d5a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d5c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e8       	ldi	r20, 0x80	; 128
    1d64:	5f e3       	ldi	r21, 0x3F	; 63
    1d66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d6a:	88 23       	and	r24, r24
    1d6c:	2c f4       	brge	.+10     	; 0x1d78 <SevSeg_SevErrStateDisplayRange+0xfa>
		__ticks = 1;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	98 ab       	std	Y+48, r25	; 0x30
    1d74:	8f a7       	std	Y+47, r24	; 0x2f
    1d76:	3f c0       	rjmp	.+126    	; 0x1df6 <SevSeg_SevErrStateDisplayRange+0x178>
	else if (__tmp > 65535)
    1d78:	69 a9       	ldd	r22, Y+49	; 0x31
    1d7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	3f ef       	ldi	r19, 0xFF	; 255
    1d84:	4f e7       	ldi	r20, 0x7F	; 127
    1d86:	57 e4       	ldi	r21, 0x47	; 71
    1d88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d8c:	18 16       	cp	r1, r24
    1d8e:	4c f5       	brge	.+82     	; 0x1de2 <SevSeg_SevErrStateDisplayRange+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d90:	6d a9       	ldd	r22, Y+53	; 0x35
    1d92:	7e a9       	ldd	r23, Y+54	; 0x36
    1d94:	8f a9       	ldd	r24, Y+55	; 0x37
    1d96:	98 ad       	ldd	r25, Y+56	; 0x38
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e2       	ldi	r20, 0x20	; 32
    1d9e:	51 e4       	ldi	r21, 0x41	; 65
    1da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	bc 01       	movw	r22, r24
    1daa:	cd 01       	movw	r24, r26
    1dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	98 ab       	std	Y+48, r25	; 0x30
    1db6:	8f a7       	std	Y+47, r24	; 0x2f
    1db8:	0f c0       	rjmp	.+30     	; 0x1dd8 <SevSeg_SevErrStateDisplayRange+0x15a>
    1dba:	88 ec       	ldi	r24, 0xC8	; 200
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9e a7       	std	Y+46, r25	; 0x2e
    1dc0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dc2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dc4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	f1 f7       	brne	.-4      	; 0x1dc6 <SevSeg_SevErrStateDisplayRange+0x148>
    1dca:	9e a7       	std	Y+46, r25	; 0x2e
    1dcc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dce:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dd0:	98 a9       	ldd	r25, Y+48	; 0x30
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	98 ab       	std	Y+48, r25	; 0x30
    1dd6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dda:	98 a9       	ldd	r25, Y+48	; 0x30
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	69 f7       	brne	.-38     	; 0x1dba <SevSeg_SevErrStateDisplayRange+0x13c>
    1de0:	14 c0       	rjmp	.+40     	; 0x1e0a <SevSeg_SevErrStateDisplayRange+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de2:	69 a9       	ldd	r22, Y+49	; 0x31
    1de4:	7a a9       	ldd	r23, Y+50	; 0x32
    1de6:	8b a9       	ldd	r24, Y+51	; 0x33
    1de8:	9c a9       	ldd	r25, Y+52	; 0x34
    1dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	98 ab       	std	Y+48, r25	; 0x30
    1df4:	8f a7       	std	Y+47, r24	; 0x2f
    1df6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df8:	98 a9       	ldd	r25, Y+48	; 0x30
    1dfa:	9c a7       	std	Y+44, r25	; 0x2c
    1dfc:	8b a7       	std	Y+43, r24	; 0x2b
    1dfe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e00:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <SevSeg_SevErrStateDisplayRange+0x184>
    1e06:	9c a7       	std	Y+44, r25	; 0x2c
    1e08:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(500);
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[Copy_End]);
    1e0a:	eb ad       	ldd	r30, Y+59	; 0x3b
    1e0c:	fc ad       	ldd	r31, Y+60	; 0x3c
    1e0e:	21 81       	ldd	r18, Z+1	; 0x01
    1e10:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e12:	88 2f       	mov	r24, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	fc 01       	movw	r30, r24
    1e18:	e4 59       	subi	r30, 0x94	; 148
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	90 81       	ld	r25, Z
    1e1e:	82 2f       	mov	r24, r18
    1e20:	69 2f       	mov	r22, r25
    1e22:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    1e26:	89 af       	std	Y+57, r24	; 0x39
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	aa ef       	ldi	r26, 0xFA	; 250
    1e2e:	b3 e4       	ldi	r27, 0x43	; 67
    1e30:	8f a3       	std	Y+39, r24	; 0x27
    1e32:	98 a7       	std	Y+40, r25	; 0x28
    1e34:	a9 a7       	std	Y+41, r26	; 0x29
    1e36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e38:	6f a1       	ldd	r22, Y+39	; 0x27
    1e3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	4a ef       	ldi	r20, 0xFA	; 250
    1e46:	54 e4       	ldi	r21, 0x44	; 68
    1e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	8b a3       	std	Y+35, r24	; 0x23
    1e52:	9c a3       	std	Y+36, r25	; 0x24
    1e54:	ad a3       	std	Y+37, r26	; 0x25
    1e56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e58:	6b a1       	ldd	r22, Y+35	; 0x23
    1e5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e8       	ldi	r20, 0x80	; 128
    1e66:	5f e3       	ldi	r21, 0x3F	; 63
    1e68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e6c:	88 23       	and	r24, r24
    1e6e:	2c f4       	brge	.+10     	; 0x1e7a <SevSeg_SevErrStateDisplayRange+0x1fc>
		__ticks = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	9a a3       	std	Y+34, r25	; 0x22
    1e76:	89 a3       	std	Y+33, r24	; 0x21
    1e78:	3f c0       	rjmp	.+126    	; 0x1ef8 <SevSeg_SevErrStateDisplayRange+0x27a>
	else if (__tmp > 65535)
    1e7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e80:	9e a1       	ldd	r25, Y+38	; 0x26
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	3f ef       	ldi	r19, 0xFF	; 255
    1e86:	4f e7       	ldi	r20, 0x7F	; 127
    1e88:	57 e4       	ldi	r21, 0x47	; 71
    1e8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e8e:	18 16       	cp	r1, r24
    1e90:	4c f5       	brge	.+82     	; 0x1ee4 <SevSeg_SevErrStateDisplayRange+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e92:	6f a1       	ldd	r22, Y+39	; 0x27
    1e94:	78 a5       	ldd	r23, Y+40	; 0x28
    1e96:	89 a5       	ldd	r24, Y+41	; 0x29
    1e98:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	51 e4       	ldi	r21, 0x41	; 65
    1ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	bc 01       	movw	r22, r24
    1eac:	cd 01       	movw	r24, r26
    1eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9a a3       	std	Y+34, r25	; 0x22
    1eb8:	89 a3       	std	Y+33, r24	; 0x21
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <SevSeg_SevErrStateDisplayRange+0x25c>
    1ebc:	88 ec       	ldi	r24, 0xC8	; 200
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	98 a3       	std	Y+32, r25	; 0x20
    1ec2:	8f 8f       	std	Y+31, r24	; 0x1f
    1ec4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ec6:	98 a1       	ldd	r25, Y+32	; 0x20
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <SevSeg_SevErrStateDisplayRange+0x24a>
    1ecc:	98 a3       	std	Y+32, r25	; 0x20
    1ece:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	9a a3       	std	Y+34, r25	; 0x22
    1ed8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eda:	89 a1       	ldd	r24, Y+33	; 0x21
    1edc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	69 f7       	brne	.-38     	; 0x1ebc <SevSeg_SevErrStateDisplayRange+0x23e>
    1ee2:	3f c1       	rjmp	.+638    	; 0x2162 <SevSeg_SevErrStateDisplayRange+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eea:	9e a1       	ldd	r25, Y+38	; 0x26
    1eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	9a a3       	std	Y+34, r25	; 0x22
    1ef6:	89 a3       	std	Y+33, r24	; 0x21
    1ef8:	89 a1       	ldd	r24, Y+33	; 0x21
    1efa:	9a a1       	ldd	r25, Y+34	; 0x22
    1efc:	9e 8f       	std	Y+30, r25	; 0x1e
    1efe:	8d 8f       	std	Y+29, r24	; 0x1d
    1f00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <SevSeg_SevErrStateDisplayRange+0x286>
    1f08:	9e 8f       	std	Y+30, r25	; 0x1e
    1f0a:	8d 8f       	std	Y+29, r24	; 0x1d
    1f0c:	2a c1       	rjmp	.+596    	; 0x2162 <SevSeg_SevErrStateDisplayRange+0x4e4>
					_delay_ms(500);
				}
			}
		}
		else if(SevenSegment1->SevSeg_Type==CC){
    1f0e:	eb ad       	ldd	r30, Y+59	; 0x3b
    1f10:	fc ad       	ldd	r31, Y+60	; 0x3c
    1f12:	80 81       	ld	r24, Z
    1f14:	81 30       	cpi	r24, 0x01	; 1
    1f16:	09 f0       	breq	.+2      	; 0x1f1a <SevSeg_SevErrStateDisplayRange+0x29c>
    1f18:	24 c1       	rjmp	.+584    	; 0x2162 <SevSeg_SevErrStateDisplayRange+0x4e4>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    1f1a:	eb ad       	ldd	r30, Y+59	; 0x3b
    1f1c:	fc ad       	ldd	r31, Y+60	; 0x3c
    1f1e:	82 81       	ldd	r24, Z+2	; 0x02
    1f20:	eb ad       	ldd	r30, Y+59	; 0x3b
    1f22:	fc ad       	ldd	r31, Y+60	; 0x3c
    1f24:	93 81       	ldd	r25, Z+3	; 0x03
    1f26:	69 2f       	mov	r22, r25
    1f28:	41 e0       	ldi	r20, 0x01	; 1
    1f2a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    1f2e:	8a af       	std	Y+58, r24	; 0x3a
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    1f30:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f32:	81 30       	cpi	r24, 0x01	; 1
    1f34:	31 f0       	breq	.+12     	; 0x1f42 <SevSeg_SevErrStateDisplayRange+0x2c4>
    1f36:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f38:	83 30       	cpi	r24, 0x03	; 3
    1f3a:	19 f0       	breq	.+6      	; 0x1f42 <SevSeg_SevErrStateDisplayRange+0x2c4>
    1f3c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f3e:	82 30       	cpi	r24, 0x02	; 2
    1f40:	19 f4       	brne	.+6      	; 0x1f48 <SevSeg_SevErrStateDisplayRange+0x2ca>
				return Group_ERROR;
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	8f af       	std	Y+63, r24	; 0x3f
    1f46:	0f c1       	rjmp	.+542    	; 0x2166 <SevSeg_SevErrStateDisplayRange+0x4e8>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
    1f48:	eb ad       	ldd	r30, Y+59	; 0x3b
    1f4a:	fc ad       	ldd	r31, Y+60	; 0x3c
    1f4c:	82 81       	ldd	r24, Z+2	; 0x02
    1f4e:	eb ad       	ldd	r30, Y+59	; 0x3b
    1f50:	fc ad       	ldd	r31, Y+60	; 0x3c
    1f52:	93 81       	ldd	r25, Z+3	; 0x03
    1f54:	69 2f       	mov	r22, r25
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    1f5c:	89 af       	std	Y+57, r24	; 0x39
				if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((Copy_start <0) &&(Copy_End>9))){
					return Number_Error;
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[Copy_start]);
    1f5e:	eb ad       	ldd	r30, Y+59	; 0x3b
    1f60:	fc ad       	ldd	r31, Y+60	; 0x3c
    1f62:	21 81       	ldd	r18, Z+1	; 0x01
    1f64:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f66:	88 2f       	mov	r24, r24
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	ea 58       	subi	r30, 0x8A	; 138
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	90 81       	ld	r25, Z
    1f72:	82 2f       	mov	r24, r18
    1f74:	69 2f       	mov	r22, r25
    1f76:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    1f7a:	89 af       	std	Y+57, r24	; 0x39
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	aa ef       	ldi	r26, 0xFA	; 250
    1f82:	b3 e4       	ldi	r27, 0x43	; 67
    1f84:	89 8f       	std	Y+25, r24	; 0x19
    1f86:	9a 8f       	std	Y+26, r25	; 0x1a
    1f88:	ab 8f       	std	Y+27, r26	; 0x1b
    1f8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	4a ef       	ldi	r20, 0xFA	; 250
    1f9a:	54 e4       	ldi	r21, 0x44	; 68
    1f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	8d 8b       	std	Y+21, r24	; 0x15
    1fa6:	9e 8b       	std	Y+22, r25	; 0x16
    1fa8:	af 8b       	std	Y+23, r26	; 0x17
    1faa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fac:	6d 89       	ldd	r22, Y+21	; 0x15
    1fae:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e8       	ldi	r20, 0x80	; 128
    1fba:	5f e3       	ldi	r21, 0x3F	; 63
    1fbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc0:	88 23       	and	r24, r24
    1fc2:	2c f4       	brge	.+10     	; 0x1fce <SevSeg_SevErrStateDisplayRange+0x350>
		__ticks = 1;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	9c 8b       	std	Y+20, r25	; 0x14
    1fca:	8b 8b       	std	Y+19, r24	; 0x13
    1fcc:	3f c0       	rjmp	.+126    	; 0x204c <SevSeg_SevErrStateDisplayRange+0x3ce>
	else if (__tmp > 65535)
    1fce:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	3f ef       	ldi	r19, 0xFF	; 255
    1fda:	4f e7       	ldi	r20, 0x7F	; 127
    1fdc:	57 e4       	ldi	r21, 0x47	; 71
    1fde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe2:	18 16       	cp	r1, r24
    1fe4:	4c f5       	brge	.+82     	; 0x2038 <SevSeg_SevErrStateDisplayRange+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fe8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e2       	ldi	r20, 0x20	; 32
    1ff4:	51 e4       	ldi	r21, 0x41	; 65
    1ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	bc 01       	movw	r22, r24
    2000:	cd 01       	movw	r24, r26
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9c 8b       	std	Y+20, r25	; 0x14
    200c:	8b 8b       	std	Y+19, r24	; 0x13
    200e:	0f c0       	rjmp	.+30     	; 0x202e <SevSeg_SevErrStateDisplayRange+0x3b0>
    2010:	88 ec       	ldi	r24, 0xC8	; 200
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	9a 8b       	std	Y+18, r25	; 0x12
    2016:	89 8b       	std	Y+17, r24	; 0x11
    2018:	89 89       	ldd	r24, Y+17	; 0x11
    201a:	9a 89       	ldd	r25, Y+18	; 0x12
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <SevSeg_SevErrStateDisplayRange+0x39e>
    2020:	9a 8b       	std	Y+18, r25	; 0x12
    2022:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2024:	8b 89       	ldd	r24, Y+19	; 0x13
    2026:	9c 89       	ldd	r25, Y+20	; 0x14
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	9c 8b       	std	Y+20, r25	; 0x14
    202c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202e:	8b 89       	ldd	r24, Y+19	; 0x13
    2030:	9c 89       	ldd	r25, Y+20	; 0x14
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	69 f7       	brne	.-38     	; 0x2010 <SevSeg_SevErrStateDisplayRange+0x392>
    2036:	14 c0       	rjmp	.+40     	; 0x2060 <SevSeg_SevErrStateDisplayRange+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2038:	6d 89       	ldd	r22, Y+21	; 0x15
    203a:	7e 89       	ldd	r23, Y+22	; 0x16
    203c:	8f 89       	ldd	r24, Y+23	; 0x17
    203e:	98 8d       	ldd	r25, Y+24	; 0x18
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	9c 8b       	std	Y+20, r25	; 0x14
    204a:	8b 8b       	std	Y+19, r24	; 0x13
    204c:	8b 89       	ldd	r24, Y+19	; 0x13
    204e:	9c 89       	ldd	r25, Y+20	; 0x14
    2050:	98 8b       	std	Y+16, r25	; 0x10
    2052:	8f 87       	std	Y+15, r24	; 0x0f
    2054:	8f 85       	ldd	r24, Y+15	; 0x0f
    2056:	98 89       	ldd	r25, Y+16	; 0x10
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <SevSeg_SevErrStateDisplayRange+0x3da>
    205c:	98 8b       	std	Y+16, r25	; 0x10
    205e:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[Copy_End]);
    2060:	eb ad       	ldd	r30, Y+59	; 0x3b
    2062:	fc ad       	ldd	r31, Y+60	; 0x3c
    2064:	21 81       	ldd	r18, Z+1	; 0x01
    2066:	8e ad       	ldd	r24, Y+62	; 0x3e
    2068:	88 2f       	mov	r24, r24
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	fc 01       	movw	r30, r24
    206e:	ea 58       	subi	r30, 0x8A	; 138
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	90 81       	ld	r25, Z
    2074:	82 2f       	mov	r24, r18
    2076:	69 2f       	mov	r22, r25
    2078:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    207c:	89 af       	std	Y+57, r24	; 0x39
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	aa ef       	ldi	r26, 0xFA	; 250
    2084:	b3 e4       	ldi	r27, 0x43	; 67
    2086:	8b 87       	std	Y+11, r24	; 0x0b
    2088:	9c 87       	std	Y+12, r25	; 0x0c
    208a:	ad 87       	std	Y+13, r26	; 0x0d
    208c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2090:	7c 85       	ldd	r23, Y+12	; 0x0c
    2092:	8d 85       	ldd	r24, Y+13	; 0x0d
    2094:	9e 85       	ldd	r25, Y+14	; 0x0e
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	4a ef       	ldi	r20, 0xFA	; 250
    209c:	54 e4       	ldi	r21, 0x44	; 68
    209e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	8f 83       	std	Y+7, r24	; 0x07
    20a8:	98 87       	std	Y+8, r25	; 0x08
    20aa:	a9 87       	std	Y+9, r26	; 0x09
    20ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ae:	6f 81       	ldd	r22, Y+7	; 0x07
    20b0:	78 85       	ldd	r23, Y+8	; 0x08
    20b2:	89 85       	ldd	r24, Y+9	; 0x09
    20b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e8       	ldi	r20, 0x80	; 128
    20bc:	5f e3       	ldi	r21, 0x3F	; 63
    20be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c2:	88 23       	and	r24, r24
    20c4:	2c f4       	brge	.+10     	; 0x20d0 <SevSeg_SevErrStateDisplayRange+0x452>
		__ticks = 1;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	9e 83       	std	Y+6, r25	; 0x06
    20cc:	8d 83       	std	Y+5, r24	; 0x05
    20ce:	3f c0       	rjmp	.+126    	; 0x214e <SevSeg_SevErrStateDisplayRange+0x4d0>
	else if (__tmp > 65535)
    20d0:	6f 81       	ldd	r22, Y+7	; 0x07
    20d2:	78 85       	ldd	r23, Y+8	; 0x08
    20d4:	89 85       	ldd	r24, Y+9	; 0x09
    20d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	3f ef       	ldi	r19, 0xFF	; 255
    20dc:	4f e7       	ldi	r20, 0x7F	; 127
    20de:	57 e4       	ldi	r21, 0x47	; 71
    20e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e4:	18 16       	cp	r1, r24
    20e6:	4c f5       	brge	.+82     	; 0x213a <SevSeg_SevErrStateDisplayRange+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e2       	ldi	r20, 0x20	; 32
    20f6:	51 e4       	ldi	r21, 0x41	; 65
    20f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	bc 01       	movw	r22, r24
    2102:	cd 01       	movw	r24, r26
    2104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	9e 83       	std	Y+6, r25	; 0x06
    210e:	8d 83       	std	Y+5, r24	; 0x05
    2110:	0f c0       	rjmp	.+30     	; 0x2130 <SevSeg_SevErrStateDisplayRange+0x4b2>
    2112:	88 ec       	ldi	r24, 0xC8	; 200
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	9c 83       	std	Y+4, r25	; 0x04
    2118:	8b 83       	std	Y+3, r24	; 0x03
    211a:	8b 81       	ldd	r24, Y+3	; 0x03
    211c:	9c 81       	ldd	r25, Y+4	; 0x04
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <SevSeg_SevErrStateDisplayRange+0x4a0>
    2122:	9c 83       	std	Y+4, r25	; 0x04
    2124:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2126:	8d 81       	ldd	r24, Y+5	; 0x05
    2128:	9e 81       	ldd	r25, Y+6	; 0x06
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	9e 83       	std	Y+6, r25	; 0x06
    212e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2130:	8d 81       	ldd	r24, Y+5	; 0x05
    2132:	9e 81       	ldd	r25, Y+6	; 0x06
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	69 f7       	brne	.-38     	; 0x2112 <SevSeg_SevErrStateDisplayRange+0x494>
    2138:	14 c0       	rjmp	.+40     	; 0x2162 <SevSeg_SevErrStateDisplayRange+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213a:	6f 81       	ldd	r22, Y+7	; 0x07
    213c:	78 85       	ldd	r23, Y+8	; 0x08
    213e:	89 85       	ldd	r24, Y+9	; 0x09
    2140:	9a 85       	ldd	r25, Y+10	; 0x0a
    2142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	8d 83       	std	Y+5, r24	; 0x05
    214e:	8d 81       	ldd	r24, Y+5	; 0x05
    2150:	9e 81       	ldd	r25, Y+6	; 0x06
    2152:	9a 83       	std	Y+2, r25	; 0x02
    2154:	89 83       	std	Y+1, r24	; 0x01
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	9a 81       	ldd	r25, Y+2	; 0x02
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <SevSeg_SevErrStateDisplayRange+0x4dc>
    215e:	9a 83       	std	Y+2, r25	; 0x02
    2160:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(500);
				}
			}
		}
	}
	return Seven_OK;
    2162:	82 e0       	ldi	r24, 0x02	; 2
    2164:	8f af       	std	Y+63, r24	; 0x3f
    2166:	8f ad       	ldd	r24, Y+63	; 0x3f

}
    2168:	ef 96       	adiw	r28, 0x3f	; 63
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <SevSeg_SevErrStateDisplayMax>:

SevErrState SevSeg_SevErrStateDisplayMax(SevSeg_info * SevenSegment1){
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	a3 97       	sbiw	r28, 0x23	; 35
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	9a a3       	std	Y+34, r25	; 0x22
    2190:	89 a3       	std	Y+33, r24	; 0x21
	u8 ErrStateDirection,ErrStateValue; // anode 1 // cathode 0 Enable
	ErrStateDirection=DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,DIO_OUT);
    2192:	e9 a1       	ldd	r30, Y+33	; 0x21
    2194:	fa a1       	ldd	r31, Y+34	; 0x22
    2196:	81 81       	ldd	r24, Z+1	; 0x01
    2198:	61 e0       	ldi	r22, 0x01	; 1
    219a:	0e 94 a6 0a 	call	0x154c	; 0x154c <DIO_ErrStateSetGroupDirection>
    219e:	88 a3       	std	Y+32, r24	; 0x20
	if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction)
    21a0:	88 a1       	ldd	r24, Y+32	; 0x20
    21a2:	81 30       	cpi	r24, 0x01	; 1
    21a4:	19 f0       	breq	.+6      	; 0x21ac <SevSeg_SevErrStateDisplayMax+0x32>
    21a6:	88 a1       	ldd	r24, Y+32	; 0x20
    21a8:	83 30       	cpi	r24, 0x03	; 3
    21aa:	19 f4       	brne	.+6      	; 0x21b2 <SevSeg_SevErrStateDisplayMax+0x38>
	{
		return Group_ERROR;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	8b a3       	std	Y+35, r24	; 0x23
    21b0:	92 c1       	rjmp	.+804    	; 0x24d6 <SevSeg_SevErrStateDisplayMax+0x35c>
	}
	else{
		if(SevenSegment1->SevSeg_Type==CA){
    21b2:	e9 a1       	ldd	r30, Y+33	; 0x21
    21b4:	fa a1       	ldd	r31, Y+34	; 0x22
    21b6:	80 81       	ld	r24, Z
    21b8:	88 23       	and	r24, r24
    21ba:	09 f0       	breq	.+2      	; 0x21be <SevSeg_SevErrStateDisplayMax+0x44>
    21bc:	c2 c0       	rjmp	.+388    	; 0x2342 <SevSeg_SevErrStateDisplayMax+0x1c8>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    21be:	e9 a1       	ldd	r30, Y+33	; 0x21
    21c0:	fa a1       	ldd	r31, Y+34	; 0x22
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	e9 a1       	ldd	r30, Y+33	; 0x21
    21c6:	fa a1       	ldd	r31, Y+34	; 0x22
    21c8:	93 81       	ldd	r25, Z+3	; 0x03
    21ca:	69 2f       	mov	r22, r25
    21cc:	41 e0       	ldi	r20, 0x01	; 1
    21ce:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    21d2:	88 a3       	std	Y+32, r24	; 0x20
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    21d4:	88 a1       	ldd	r24, Y+32	; 0x20
    21d6:	81 30       	cpi	r24, 0x01	; 1
    21d8:	31 f0       	breq	.+12     	; 0x21e6 <SevSeg_SevErrStateDisplayMax+0x6c>
    21da:	88 a1       	ldd	r24, Y+32	; 0x20
    21dc:	83 30       	cpi	r24, 0x03	; 3
    21de:	19 f0       	breq	.+6      	; 0x21e6 <SevSeg_SevErrStateDisplayMax+0x6c>
    21e0:	88 a1       	ldd	r24, Y+32	; 0x20
    21e2:	82 30       	cpi	r24, 0x02	; 2
    21e4:	19 f4       	brne	.+6      	; 0x21ec <SevSeg_SevErrStateDisplayMax+0x72>
				return Group_ERROR;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	8b a3       	std	Y+35, r24	; 0x23
    21ea:	75 c1       	rjmp	.+746    	; 0x24d6 <SevSeg_SevErrStateDisplayMax+0x35c>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
    21ec:	e9 a1       	ldd	r30, Y+33	; 0x21
    21ee:	fa a1       	ldd	r31, Y+34	; 0x22
    21f0:	82 81       	ldd	r24, Z+2	; 0x02
    21f2:	e9 a1       	ldd	r30, Y+33	; 0x21
    21f4:	fa a1       	ldd	r31, Y+34	; 0x22
    21f6:	93 81       	ldd	r25, Z+3	; 0x03
    21f8:	69 2f       	mov	r22, r25
    21fa:	41 e0       	ldi	r20, 0x01	; 1
    21fc:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2200:	8f 8f       	std	Y+31, r24	; 0x1f
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    2202:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2204:	81 30       	cpi	r24, 0x01	; 1
    2206:	31 f0       	breq	.+12     	; 0x2214 <SevSeg_SevErrStateDisplayMax+0x9a>
    2208:	8f 8d       	ldd	r24, Y+31	; 0x1f
    220a:	84 30       	cpi	r24, 0x04	; 4
    220c:	19 f0       	breq	.+6      	; 0x2214 <SevSeg_SevErrStateDisplayMax+0x9a>
    220e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2210:	82 30       	cpi	r24, 0x02	; 2
    2212:	11 f4       	brne	.+4      	; 0x2218 <SevSeg_SevErrStateDisplayMax+0x9e>
					return Number_Error;
    2214:	1b a2       	std	Y+35, r1	; 0x23
    2216:	5f c1       	rjmp	.+702    	; 0x24d6 <SevSeg_SevErrStateDisplayMax+0x35c>
				}
				else{
					for(u8 i=0;i<10;i++){
    2218:	1e 8e       	std	Y+30, r1	; 0x1e
    221a:	84 c0       	rjmp	.+264    	; 0x2324 <SevSeg_SevErrStateDisplayMax+0x1aa>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[i]);
    221c:	e9 a1       	ldd	r30, Y+33	; 0x21
    221e:	fa a1       	ldd	r31, Y+34	; 0x22
    2220:	21 81       	ldd	r18, Z+1	; 0x01
    2222:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2224:	88 2f       	mov	r24, r24
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	fc 01       	movw	r30, r24
    222a:	e4 59       	subi	r30, 0x94	; 148
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	90 81       	ld	r25, Z
    2230:	82 2f       	mov	r24, r18
    2232:	69 2f       	mov	r22, r25
    2234:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    2238:	8f 8f       	std	Y+31, r24	; 0x1f
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	a6 e1       	ldi	r26, 0x16	; 22
    2240:	b3 e4       	ldi	r27, 0x43	; 67
    2242:	89 8f       	std	Y+25, r24	; 0x19
    2244:	9a 8f       	std	Y+26, r25	; 0x1a
    2246:	ab 8f       	std	Y+27, r26	; 0x1b
    2248:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224a:	69 8d       	ldd	r22, Y+25	; 0x19
    224c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    224e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2250:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	4a ef       	ldi	r20, 0xFA	; 250
    2258:	54 e4       	ldi	r21, 0x44	; 68
    225a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	8d 8b       	std	Y+21, r24	; 0x15
    2264:	9e 8b       	std	Y+22, r25	; 0x16
    2266:	af 8b       	std	Y+23, r26	; 0x17
    2268:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    226a:	6d 89       	ldd	r22, Y+21	; 0x15
    226c:	7e 89       	ldd	r23, Y+22	; 0x16
    226e:	8f 89       	ldd	r24, Y+23	; 0x17
    2270:	98 8d       	ldd	r25, Y+24	; 0x18
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e8       	ldi	r20, 0x80	; 128
    2278:	5f e3       	ldi	r21, 0x3F	; 63
    227a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    227e:	88 23       	and	r24, r24
    2280:	2c f4       	brge	.+10     	; 0x228c <SevSeg_SevErrStateDisplayMax+0x112>
		__ticks = 1;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9c 8b       	std	Y+20, r25	; 0x14
    2288:	8b 8b       	std	Y+19, r24	; 0x13
    228a:	3f c0       	rjmp	.+126    	; 0x230a <SevSeg_SevErrStateDisplayMax+0x190>
	else if (__tmp > 65535)
    228c:	6d 89       	ldd	r22, Y+21	; 0x15
    228e:	7e 89       	ldd	r23, Y+22	; 0x16
    2290:	8f 89       	ldd	r24, Y+23	; 0x17
    2292:	98 8d       	ldd	r25, Y+24	; 0x18
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	3f ef       	ldi	r19, 0xFF	; 255
    2298:	4f e7       	ldi	r20, 0x7F	; 127
    229a:	57 e4       	ldi	r21, 0x47	; 71
    229c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a0:	18 16       	cp	r1, r24
    22a2:	4c f5       	brge	.+82     	; 0x22f6 <SevSeg_SevErrStateDisplayMax+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a4:	69 8d       	ldd	r22, Y+25	; 0x19
    22a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e2       	ldi	r20, 0x20	; 32
    22b2:	51 e4       	ldi	r21, 0x41	; 65
    22b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	bc 01       	movw	r22, r24
    22be:	cd 01       	movw	r24, r26
    22c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	9c 8b       	std	Y+20, r25	; 0x14
    22ca:	8b 8b       	std	Y+19, r24	; 0x13
    22cc:	0f c0       	rjmp	.+30     	; 0x22ec <SevSeg_SevErrStateDisplayMax+0x172>
    22ce:	88 ec       	ldi	r24, 0xC8	; 200
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9a 8b       	std	Y+18, r25	; 0x12
    22d4:	89 8b       	std	Y+17, r24	; 0x11
    22d6:	89 89       	ldd	r24, Y+17	; 0x11
    22d8:	9a 89       	ldd	r25, Y+18	; 0x12
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <SevSeg_SevErrStateDisplayMax+0x160>
    22de:	9a 8b       	std	Y+18, r25	; 0x12
    22e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e2:	8b 89       	ldd	r24, Y+19	; 0x13
    22e4:	9c 89       	ldd	r25, Y+20	; 0x14
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	9c 8b       	std	Y+20, r25	; 0x14
    22ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ec:	8b 89       	ldd	r24, Y+19	; 0x13
    22ee:	9c 89       	ldd	r25, Y+20	; 0x14
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	69 f7       	brne	.-38     	; 0x22ce <SevSeg_SevErrStateDisplayMax+0x154>
    22f4:	14 c0       	rjmp	.+40     	; 0x231e <SevSeg_SevErrStateDisplayMax+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f6:	6d 89       	ldd	r22, Y+21	; 0x15
    22f8:	7e 89       	ldd	r23, Y+22	; 0x16
    22fa:	8f 89       	ldd	r24, Y+23	; 0x17
    22fc:	98 8d       	ldd	r25, Y+24	; 0x18
    22fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	9c 8b       	std	Y+20, r25	; 0x14
    2308:	8b 8b       	std	Y+19, r24	; 0x13
    230a:	8b 89       	ldd	r24, Y+19	; 0x13
    230c:	9c 89       	ldd	r25, Y+20	; 0x14
    230e:	98 8b       	std	Y+16, r25	; 0x10
    2310:	8f 87       	std	Y+15, r24	; 0x0f
    2312:	8f 85       	ldd	r24, Y+15	; 0x0f
    2314:	98 89       	ldd	r25, Y+16	; 0x10
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <SevSeg_SevErrStateDisplayMax+0x19c>
    231a:	98 8b       	std	Y+16, r25	; 0x10
    231c:	8f 87       	std	Y+15, r24	; 0x0f
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
					return Number_Error;
				}
				else{
					for(u8 i=0;i<10;i++){
    231e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2320:	8f 5f       	subi	r24, 0xFF	; 255
    2322:	8e 8f       	std	Y+30, r24	; 0x1e
    2324:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2326:	8a 30       	cpi	r24, 0x0A	; 10
    2328:	08 f4       	brcc	.+2      	; 0x232c <SevSeg_SevErrStateDisplayMax+0x1b2>
    232a:	78 cf       	rjmp	.-272    	; 0x221c <SevSeg_SevErrStateDisplayMax+0xa2>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[i]);
						_delay_ms(150);
					}
					if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE){
    232c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    232e:	81 30       	cpi	r24, 0x01	; 1
    2330:	19 f0       	breq	.+6      	; 0x2338 <SevSeg_SevErrStateDisplayMax+0x1be>
    2332:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2334:	84 30       	cpi	r24, 0x04	; 4
    2336:	11 f4       	brne	.+4      	; 0x233c <SevSeg_SevErrStateDisplayMax+0x1c2>
						return Number_Error;
    2338:	1b a2       	std	Y+35, r1	; 0x23
    233a:	cd c0       	rjmp	.+410    	; 0x24d6 <SevSeg_SevErrStateDisplayMax+0x35c>
					}
					else
						return Seven_OK;
    233c:	82 e0       	ldi	r24, 0x02	; 2
    233e:	8b a3       	std	Y+35, r24	; 0x23
    2340:	ca c0       	rjmp	.+404    	; 0x24d6 <SevSeg_SevErrStateDisplayMax+0x35c>
				}
			}
		}
		else if(SevenSegment1->SevSeg_Type==CC){
    2342:	e9 a1       	ldd	r30, Y+33	; 0x21
    2344:	fa a1       	ldd	r31, Y+34	; 0x22
    2346:	80 81       	ld	r24, Z
    2348:	81 30       	cpi	r24, 0x01	; 1
    234a:	09 f0       	breq	.+2      	; 0x234e <SevSeg_SevErrStateDisplayMax+0x1d4>
    234c:	c2 c0       	rjmp	.+388    	; 0x24d2 <SevSeg_SevErrStateDisplayMax+0x358>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    234e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2350:	fa a1       	ldd	r31, Y+34	; 0x22
    2352:	82 81       	ldd	r24, Z+2	; 0x02
    2354:	e9 a1       	ldd	r30, Y+33	; 0x21
    2356:	fa a1       	ldd	r31, Y+34	; 0x22
    2358:	93 81       	ldd	r25, Z+3	; 0x03
    235a:	69 2f       	mov	r22, r25
    235c:	41 e0       	ldi	r20, 0x01	; 1
    235e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    2362:	88 a3       	std	Y+32, r24	; 0x20
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    2364:	88 a1       	ldd	r24, Y+32	; 0x20
    2366:	81 30       	cpi	r24, 0x01	; 1
    2368:	31 f0       	breq	.+12     	; 0x2376 <SevSeg_SevErrStateDisplayMax+0x1fc>
    236a:	88 a1       	ldd	r24, Y+32	; 0x20
    236c:	83 30       	cpi	r24, 0x03	; 3
    236e:	19 f0       	breq	.+6      	; 0x2376 <SevSeg_SevErrStateDisplayMax+0x1fc>
    2370:	88 a1       	ldd	r24, Y+32	; 0x20
    2372:	82 30       	cpi	r24, 0x02	; 2
    2374:	19 f4       	brne	.+6      	; 0x237c <SevSeg_SevErrStateDisplayMax+0x202>
				return Group_ERROR;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	8b a3       	std	Y+35, r24	; 0x23
    237a:	ad c0       	rjmp	.+346    	; 0x24d6 <SevSeg_SevErrStateDisplayMax+0x35c>
			}
			else
				{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
    237c:	e9 a1       	ldd	r30, Y+33	; 0x21
    237e:	fa a1       	ldd	r31, Y+34	; 0x22
    2380:	82 81       	ldd	r24, Z+2	; 0x02
    2382:	e9 a1       	ldd	r30, Y+33	; 0x21
    2384:	fa a1       	ldd	r31, Y+34	; 0x22
    2386:	93 81       	ldd	r25, Z+3	; 0x03
    2388:	69 2f       	mov	r22, r25
    238a:	40 e0       	ldi	r20, 0x00	; 0
    238c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2390:	8f 8f       	std	Y+31, r24	; 0x1f
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    2392:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2394:	81 30       	cpi	r24, 0x01	; 1
    2396:	31 f0       	breq	.+12     	; 0x23a4 <SevSeg_SevErrStateDisplayMax+0x22a>
    2398:	8f 8d       	ldd	r24, Y+31	; 0x1f
    239a:	84 30       	cpi	r24, 0x04	; 4
    239c:	19 f0       	breq	.+6      	; 0x23a4 <SevSeg_SevErrStateDisplayMax+0x22a>
    239e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23a0:	82 30       	cpi	r24, 0x02	; 2
    23a2:	11 f4       	brne	.+4      	; 0x23a8 <SevSeg_SevErrStateDisplayMax+0x22e>
					return Number_Error;
    23a4:	1b a2       	std	Y+35, r1	; 0x23
    23a6:	97 c0       	rjmp	.+302    	; 0x24d6 <SevSeg_SevErrStateDisplayMax+0x35c>
				}
				else{
					for(u8 i=0;i<10;i++){
    23a8:	1d 8e       	std	Y+29, r1	; 0x1d
    23aa:	84 c0       	rjmp	.+264    	; 0x24b4 <SevSeg_SevErrStateDisplayMax+0x33a>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[i]);
    23ac:	e9 a1       	ldd	r30, Y+33	; 0x21
    23ae:	fa a1       	ldd	r31, Y+34	; 0x22
    23b0:	21 81       	ldd	r18, Z+1	; 0x01
    23b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23b4:	88 2f       	mov	r24, r24
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	fc 01       	movw	r30, r24
    23ba:	ea 58       	subi	r30, 0x8A	; 138
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	90 81       	ld	r25, Z
    23c0:	82 2f       	mov	r24, r18
    23c2:	69 2f       	mov	r22, r25
    23c4:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
    23c8:	8f 8f       	std	Y+31, r24	; 0x1f
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	a6 e1       	ldi	r26, 0x16	; 22
    23d0:	b3 e4       	ldi	r27, 0x43	; 67
    23d2:	8b 87       	std	Y+11, r24	; 0x0b
    23d4:	9c 87       	std	Y+12, r25	; 0x0c
    23d6:	ad 87       	std	Y+13, r26	; 0x0d
    23d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23da:	6b 85       	ldd	r22, Y+11	; 0x0b
    23dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23de:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	4a ef       	ldi	r20, 0xFA	; 250
    23e8:	54 e4       	ldi	r21, 0x44	; 68
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	8f 83       	std	Y+7, r24	; 0x07
    23f4:	98 87       	std	Y+8, r25	; 0x08
    23f6:	a9 87       	std	Y+9, r26	; 0x09
    23f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23fa:	6f 81       	ldd	r22, Y+7	; 0x07
    23fc:	78 85       	ldd	r23, Y+8	; 0x08
    23fe:	89 85       	ldd	r24, Y+9	; 0x09
    2400:	9a 85       	ldd	r25, Y+10	; 0x0a
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    240e:	88 23       	and	r24, r24
    2410:	2c f4       	brge	.+10     	; 0x241c <SevSeg_SevErrStateDisplayMax+0x2a2>
		__ticks = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9e 83       	std	Y+6, r25	; 0x06
    2418:	8d 83       	std	Y+5, r24	; 0x05
    241a:	3f c0       	rjmp	.+126    	; 0x249a <SevSeg_SevErrStateDisplayMax+0x320>
	else if (__tmp > 65535)
    241c:	6f 81       	ldd	r22, Y+7	; 0x07
    241e:	78 85       	ldd	r23, Y+8	; 0x08
    2420:	89 85       	ldd	r24, Y+9	; 0x09
    2422:	9a 85       	ldd	r25, Y+10	; 0x0a
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	3f ef       	ldi	r19, 0xFF	; 255
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	57 e4       	ldi	r21, 0x47	; 71
    242c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2430:	18 16       	cp	r1, r24
    2432:	4c f5       	brge	.+82     	; 0x2486 <SevSeg_SevErrStateDisplayMax+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2434:	6b 85       	ldd	r22, Y+11	; 0x0b
    2436:	7c 85       	ldd	r23, Y+12	; 0x0c
    2438:	8d 85       	ldd	r24, Y+13	; 0x0d
    243a:	9e 85       	ldd	r25, Y+14	; 0x0e
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
    245c:	0f c0       	rjmp	.+30     	; 0x247c <SevSeg_SevErrStateDisplayMax+0x302>
    245e:	88 ec       	ldi	r24, 0xC8	; 200
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9c 83       	std	Y+4, r25	; 0x04
    2464:	8b 83       	std	Y+3, r24	; 0x03
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	9c 81       	ldd	r25, Y+4	; 0x04
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <SevSeg_SevErrStateDisplayMax+0x2f0>
    246e:	9c 83       	std	Y+4, r25	; 0x04
    2470:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2472:	8d 81       	ldd	r24, Y+5	; 0x05
    2474:	9e 81       	ldd	r25, Y+6	; 0x06
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	9e 83       	std	Y+6, r25	; 0x06
    247a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247c:	8d 81       	ldd	r24, Y+5	; 0x05
    247e:	9e 81       	ldd	r25, Y+6	; 0x06
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	69 f7       	brne	.-38     	; 0x245e <SevSeg_SevErrStateDisplayMax+0x2e4>
    2484:	14 c0       	rjmp	.+40     	; 0x24ae <SevSeg_SevErrStateDisplayMax+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2486:	6f 81       	ldd	r22, Y+7	; 0x07
    2488:	78 85       	ldd	r23, Y+8	; 0x08
    248a:	89 85       	ldd	r24, Y+9	; 0x09
    248c:	9a 85       	ldd	r25, Y+10	; 0x0a
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	8d 83       	std	Y+5, r24	; 0x05
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	9e 81       	ldd	r25, Y+6	; 0x06
    249e:	9a 83       	std	Y+2, r25	; 0x02
    24a0:	89 83       	std	Y+1, r24	; 0x01
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	9a 81       	ldd	r25, Y+2	; 0x02
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <SevSeg_SevErrStateDisplayMax+0x32c>
    24aa:	9a 83       	std	Y+2, r25	; 0x02
    24ac:	89 83       	std	Y+1, r24	; 0x01
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
					return Number_Error;
				}
				else{
					for(u8 i=0;i<10;i++){
    24ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b0:	8f 5f       	subi	r24, 0xFF	; 255
    24b2:	8d 8f       	std	Y+29, r24	; 0x1d
    24b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b6:	8a 30       	cpi	r24, 0x0A	; 10
    24b8:	08 f4       	brcc	.+2      	; 0x24bc <SevSeg_SevErrStateDisplayMax+0x342>
    24ba:	78 cf       	rjmp	.-272    	; 0x23ac <SevSeg_SevErrStateDisplayMax+0x232>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[i]);
						_delay_ms(150);
					}
					if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE){
    24bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24be:	81 30       	cpi	r24, 0x01	; 1
    24c0:	19 f0       	breq	.+6      	; 0x24c8 <SevSeg_SevErrStateDisplayMax+0x34e>
    24c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24c4:	84 30       	cpi	r24, 0x04	; 4
    24c6:	11 f4       	brne	.+4      	; 0x24cc <SevSeg_SevErrStateDisplayMax+0x352>
						return Number_Error;
    24c8:	1b a2       	std	Y+35, r1	; 0x23
    24ca:	05 c0       	rjmp	.+10     	; 0x24d6 <SevSeg_SevErrStateDisplayMax+0x35c>
					}
					else
						return Seven_OK;
    24cc:	82 e0       	ldi	r24, 0x02	; 2
    24ce:	8b a3       	std	Y+35, r24	; 0x23
    24d0:	02 c0       	rjmp	.+4      	; 0x24d6 <SevSeg_SevErrStateDisplayMax+0x35c>
				}
			}
		}
	}
	return Seven_OK;
    24d2:	82 e0       	ldi	r24, 0x02	; 2
    24d4:	8b a3       	std	Y+35, r24	; 0x23
    24d6:	8b a1       	ldd	r24, Y+35	; 0x23
}
    24d8:	a3 96       	adiw	r28, 0x23	; 35
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	f8 94       	cli
    24de:	de bf       	out	0x3e, r29	; 62
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	cd bf       	out	0x3d, r28	; 61
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <Led_LedErrStateTurnOn>:
 */
#include "../../Common/Definition.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "Led_Interface.h"

LedErrState	Led_LedErrStateTurnOn(Led_info *Led){
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	00 d0       	rcall	.+0      	; 0x24f0 <Led_LedErrStateTurnOn+0x6>
    24f0:	00 d0       	rcall	.+0      	; 0x24f2 <Led_LedErrStateTurnOn+0x8>
    24f2:	0f 92       	push	r0
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
    24f8:	9c 83       	std	Y+4, r25	; 0x04
    24fa:	8b 83       	std	Y+3, r24	; 0x03
	u8 SetPinErrReturn;
	u8 SetValueErrReturnON;

	SetPinErrReturn=DIO_ErrStateSetPinDirection(Led->Led_Group,Led->Led_Pin,DIO_OUT);
    24fc:	eb 81       	ldd	r30, Y+3	; 0x03
    24fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2500:	80 81       	ld	r24, Z
    2502:	eb 81       	ldd	r30, Y+3	; 0x03
    2504:	fc 81       	ldd	r31, Y+4	; 0x04
    2506:	91 81       	ldd	r25, Z+1	; 0x01
    2508:	69 2f       	mov	r22, r25
    250a:	41 e0       	ldi	r20, 0x01	; 1
    250c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
    2510:	8a 83       	std	Y+2, r24	; 0x02
	if(SetPinErrReturn==DIO_ERROR_PORT||SetPinErrReturn==DIO_ERROR_Direction||SetPinErrReturn==DIO_ERROR_PIN){
    2512:	8a 81       	ldd	r24, Y+2	; 0x02
    2514:	81 30       	cpi	r24, 0x01	; 1
    2516:	31 f0       	breq	.+12     	; 0x2524 <Led_LedErrStateTurnOn+0x3a>
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	83 30       	cpi	r24, 0x03	; 3
    251c:	19 f0       	breq	.+6      	; 0x2524 <Led_LedErrStateTurnOn+0x3a>
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	82 30       	cpi	r24, 0x02	; 2
    2522:	19 f4       	brne	.+6      	; 0x252a <Led_LedErrStateTurnOn+0x40>
		return LED_INIT_Error;
    2524:	86 e0       	ldi	r24, 0x06	; 6
    2526:	8d 83       	std	Y+5, r24	; 0x05
    2528:	3e c0       	rjmp	.+124    	; 0x25a6 <Led_LedErrStateTurnOn+0xbc>
	}
	else{
		if(Led->ConnectionType==Source_Connection){
    252a:	eb 81       	ldd	r30, Y+3	; 0x03
    252c:	fc 81       	ldd	r31, Y+4	; 0x04
    252e:	82 81       	ldd	r24, Z+2	; 0x02
    2530:	88 23       	and	r24, r24
    2532:	c9 f4       	brne	.+50     	; 0x2566 <Led_LedErrStateTurnOn+0x7c>
			// HIGH = ON
			SetValueErrReturnON=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_HIGH);
    2534:	eb 81       	ldd	r30, Y+3	; 0x03
    2536:	fc 81       	ldd	r31, Y+4	; 0x04
    2538:	80 81       	ld	r24, Z
    253a:	eb 81       	ldd	r30, Y+3	; 0x03
    253c:	fc 81       	ldd	r31, Y+4	; 0x04
    253e:	91 81       	ldd	r25, Z+1	; 0x01
    2540:	69 2f       	mov	r22, r25
    2542:	41 e0       	ldi	r20, 0x01	; 1
    2544:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2548:	89 83       	std	Y+1, r24	; 0x01
			if(SetValueErrReturnON==DIO_ERROR_PORT||SetValueErrReturnON==DIO_ERROR_VALUE||SetValueErrReturnON==DIO_ERROR_PIN){
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	81 30       	cpi	r24, 0x01	; 1
    254e:	31 f0       	breq	.+12     	; 0x255c <Led_LedErrStateTurnOn+0x72>
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	84 30       	cpi	r24, 0x04	; 4
    2554:	19 f0       	breq	.+6      	; 0x255c <Led_LedErrStateTurnOn+0x72>
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	82 30       	cpi	r24, 0x02	; 2
    255a:	19 f4       	brne	.+6      	; 0x2562 <Led_LedErrStateTurnOn+0x78>
				return LED_ON_Error;
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	8d 83       	std	Y+5, r24	; 0x05
    2560:	22 c0       	rjmp	.+68     	; 0x25a6 <Led_LedErrStateTurnOn+0xbc>
			}
			else
				return LED_ON_OK;
    2562:	1d 82       	std	Y+5, r1	; 0x05
    2564:	20 c0       	rjmp	.+64     	; 0x25a6 <Led_LedErrStateTurnOn+0xbc>
		}
		else if(Led->ConnectionType==Sink_Connection){
    2566:	eb 81       	ldd	r30, Y+3	; 0x03
    2568:	fc 81       	ldd	r31, Y+4	; 0x04
    256a:	82 81       	ldd	r24, Z+2	; 0x02
    256c:	81 30       	cpi	r24, 0x01	; 1
    256e:	c9 f4       	brne	.+50     	; 0x25a2 <Led_LedErrStateTurnOn+0xb8>
			// LOW = ON
			SetValueErrReturnON=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_LOW);
    2570:	eb 81       	ldd	r30, Y+3	; 0x03
    2572:	fc 81       	ldd	r31, Y+4	; 0x04
    2574:	80 81       	ld	r24, Z
    2576:	eb 81       	ldd	r30, Y+3	; 0x03
    2578:	fc 81       	ldd	r31, Y+4	; 0x04
    257a:	91 81       	ldd	r25, Z+1	; 0x01
    257c:	69 2f       	mov	r22, r25
    257e:	40 e0       	ldi	r20, 0x00	; 0
    2580:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2584:	89 83       	std	Y+1, r24	; 0x01
			if(SetValueErrReturnON==DIO_ERROR_PORT||SetValueErrReturnON==DIO_ERROR_VALUE||SetValueErrReturnON==DIO_ERROR_PIN){
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	81 30       	cpi	r24, 0x01	; 1
    258a:	31 f0       	breq	.+12     	; 0x2598 <Led_LedErrStateTurnOn+0xae>
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	84 30       	cpi	r24, 0x04	; 4
    2590:	19 f0       	breq	.+6      	; 0x2598 <Led_LedErrStateTurnOn+0xae>
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	82 30       	cpi	r24, 0x02	; 2
    2596:	19 f4       	brne	.+6      	; 0x259e <Led_LedErrStateTurnOn+0xb4>
				return LED_ON_Error;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	8d 83       	std	Y+5, r24	; 0x05
    259c:	04 c0       	rjmp	.+8      	; 0x25a6 <Led_LedErrStateTurnOn+0xbc>
			}
			else
				return LED_ON_OK;
    259e:	1d 82       	std	Y+5, r1	; 0x05
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <Led_LedErrStateTurnOn+0xbc>
		}
		else
			return LED_Connection_Error;
    25a2:	84 e0       	ldi	r24, 0x04	; 4
    25a4:	8d 83       	std	Y+5, r24	; 0x05
    25a6:	8d 81       	ldd	r24, Y+5	; 0x05

	}
}
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <Led_LedErrStateTurnOff>:


LedErrState	Led_LedErrStateTurnOff(Led_info *Led){
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	00 d0       	rcall	.+0      	; 0x25be <Led_LedErrStateTurnOff+0x6>
    25be:	00 d0       	rcall	.+0      	; 0x25c0 <Led_LedErrStateTurnOff+0x8>
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	9b 83       	std	Y+3, r25	; 0x03
    25c6:	8a 83       	std	Y+2, r24	; 0x02
	u8 SetValueErrReturnOFF;
	if(Led->ConnectionType==Source_Connection){
    25c8:	ea 81       	ldd	r30, Y+2	; 0x02
    25ca:	fb 81       	ldd	r31, Y+3	; 0x03
    25cc:	82 81       	ldd	r24, Z+2	; 0x02
    25ce:	88 23       	and	r24, r24
    25d0:	d1 f4       	brne	.+52     	; 0x2606 <Led_LedErrStateTurnOff+0x4e>
		// HIGH = ON
		SetValueErrReturnOFF=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_LOW);
    25d2:	ea 81       	ldd	r30, Y+2	; 0x02
    25d4:	fb 81       	ldd	r31, Y+3	; 0x03
    25d6:	80 81       	ld	r24, Z
    25d8:	ea 81       	ldd	r30, Y+2	; 0x02
    25da:	fb 81       	ldd	r31, Y+3	; 0x03
    25dc:	91 81       	ldd	r25, Z+1	; 0x01
    25de:	69 2f       	mov	r22, r25
    25e0:	40 e0       	ldi	r20, 0x00	; 0
    25e2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    25e6:	89 83       	std	Y+1, r24	; 0x01
		if(SetValueErrReturnOFF==DIO_ERROR_PORT||SetValueErrReturnOFF==DIO_ERROR_VALUE||SetValueErrReturnOFF==DIO_ERROR_PIN){
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	81 30       	cpi	r24, 0x01	; 1
    25ec:	31 f0       	breq	.+12     	; 0x25fa <Led_LedErrStateTurnOff+0x42>
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	84 30       	cpi	r24, 0x04	; 4
    25f2:	19 f0       	breq	.+6      	; 0x25fa <Led_LedErrStateTurnOff+0x42>
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	82 30       	cpi	r24, 0x02	; 2
    25f8:	19 f4       	brne	.+6      	; 0x2600 <Led_LedErrStateTurnOff+0x48>
			return LED_OFF_Error;
    25fa:	83 e0       	ldi	r24, 0x03	; 3
    25fc:	8c 83       	std	Y+4, r24	; 0x04
    25fe:	24 c0       	rjmp	.+72     	; 0x2648 <Led_LedErrStateTurnOff+0x90>
		}
		else
			return LED_OFF_OK;
    2600:	82 e0       	ldi	r24, 0x02	; 2
    2602:	8c 83       	std	Y+4, r24	; 0x04
    2604:	21 c0       	rjmp	.+66     	; 0x2648 <Led_LedErrStateTurnOff+0x90>
	}
else if(Led->ConnectionType==Sink_Connection){
    2606:	ea 81       	ldd	r30, Y+2	; 0x02
    2608:	fb 81       	ldd	r31, Y+3	; 0x03
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	81 30       	cpi	r24, 0x01	; 1
    260e:	d1 f4       	brne	.+52     	; 0x2644 <Led_LedErrStateTurnOff+0x8c>
	// LOW = ON
	SetValueErrReturnOFF=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_HIGH);
    2610:	ea 81       	ldd	r30, Y+2	; 0x02
    2612:	fb 81       	ldd	r31, Y+3	; 0x03
    2614:	80 81       	ld	r24, Z
    2616:	ea 81       	ldd	r30, Y+2	; 0x02
    2618:	fb 81       	ldd	r31, Y+3	; 0x03
    261a:	91 81       	ldd	r25, Z+1	; 0x01
    261c:	69 2f       	mov	r22, r25
    261e:	41 e0       	ldi	r20, 0x01	; 1
    2620:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2624:	89 83       	std	Y+1, r24	; 0x01
	if(SetValueErrReturnOFF==DIO_ERROR_PORT||SetValueErrReturnOFF==DIO_ERROR_VALUE||SetValueErrReturnOFF==DIO_ERROR_PIN){
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	81 30       	cpi	r24, 0x01	; 1
    262a:	31 f0       	breq	.+12     	; 0x2638 <Led_LedErrStateTurnOff+0x80>
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	84 30       	cpi	r24, 0x04	; 4
    2630:	19 f0       	breq	.+6      	; 0x2638 <Led_LedErrStateTurnOff+0x80>
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	82 30       	cpi	r24, 0x02	; 2
    2636:	19 f4       	brne	.+6      	; 0x263e <Led_LedErrStateTurnOff+0x86>
		return LED_OFF_Error;
    2638:	83 e0       	ldi	r24, 0x03	; 3
    263a:	8c 83       	std	Y+4, r24	; 0x04
    263c:	05 c0       	rjmp	.+10     	; 0x2648 <Led_LedErrStateTurnOff+0x90>
	}
	else
		return LED_OFF_OK;
    263e:	82 e0       	ldi	r24, 0x02	; 2
    2640:	8c 83       	std	Y+4, r24	; 0x04
    2642:	02 c0       	rjmp	.+4      	; 0x2648 <Led_LedErrStateTurnOff+0x90>
}
else
	return LED_Connection_Error;
    2644:	84 e0       	ldi	r24, 0x04	; 4
    2646:	8c 83       	std	Y+4, r24	; 0x04
    2648:	8c 81       	ldd	r24, Y+4	; 0x04

}
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <LCD_VoidSendCommand>:
 */
#include"../../MCAL/DIO/DIO_Interface.h"
#include "LCD_Interface.h"
#include <stdlib.h>

void LCD_VoidSendCommand(u8 Local_Command,LCD_Info *lcd){
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	6f 97       	sbiw	r28, 0x1f	; 31
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	f8 94       	cli
    2666:	de bf       	out	0x3e, r29	; 62
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	cd bf       	out	0x3d, r28	; 61
    266c:	8d 8f       	std	Y+29, r24	; 0x1d
    266e:	7f 8f       	std	Y+31, r23	; 0x1f
    2670:	6e 8f       	std	Y+30, r22	; 0x1e
	/*RS->LOw*/
	DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_LOW);
    2672:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2674:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2676:	80 81       	ld	r24, Z
    2678:	ee 8d       	ldd	r30, Y+30	; 0x1e
    267a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    267c:	91 81       	ldd	r25, Z+1	; 0x01
    267e:	69 2f       	mov	r22, r25
    2680:	40 e0       	ldi	r20, 0x00	; 0
    2682:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
	/*RW-> LOW*/
	DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    2686:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2688:	ff 8d       	ldd	r31, Y+31	; 0x1f
    268a:	82 81       	ldd	r24, Z+2	; 0x02
    268c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    268e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2690:	93 81       	ldd	r25, Z+3	; 0x03
    2692:	69 2f       	mov	r22, r25
    2694:	40 e0       	ldi	r20, 0x00	; 0
    2696:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
	/*Group = Command*/
	DIO_ErrStateSetPortValue(lcd->Data_group,Local_Command);
    269a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    269c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    269e:	86 81       	ldd	r24, Z+6	; 0x06
    26a0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    26a2:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
	/*Enable*/
	DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    26a6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    26a8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    26aa:	84 81       	ldd	r24, Z+4	; 0x04
    26ac:	ee 8d       	ldd	r30, Y+30	; 0x1e
    26ae:	ff 8d       	ldd	r31, Y+31	; 0x1f
    26b0:	95 81       	ldd	r25, Z+5	; 0x05
    26b2:	69 2f       	mov	r22, r25
    26b4:	41 e0       	ldi	r20, 0x01	; 1
    26b6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	a0 e8       	ldi	r26, 0x80	; 128
    26c0:	bf e3       	ldi	r27, 0x3F	; 63
    26c2:	89 8f       	std	Y+25, r24	; 0x19
    26c4:	9a 8f       	std	Y+26, r25	; 0x1a
    26c6:	ab 8f       	std	Y+27, r26	; 0x1b
    26c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ca:	69 8d       	ldd	r22, Y+25	; 0x19
    26cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	4a ef       	ldi	r20, 0xFA	; 250
    26d8:	54 e4       	ldi	r21, 0x44	; 68
    26da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	8d 8b       	std	Y+21, r24	; 0x15
    26e4:	9e 8b       	std	Y+22, r25	; 0x16
    26e6:	af 8b       	std	Y+23, r26	; 0x17
    26e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26ea:	6d 89       	ldd	r22, Y+21	; 0x15
    26ec:	7e 89       	ldd	r23, Y+22	; 0x16
    26ee:	8f 89       	ldd	r24, Y+23	; 0x17
    26f0:	98 8d       	ldd	r25, Y+24	; 0x18
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	40 e8       	ldi	r20, 0x80	; 128
    26f8:	5f e3       	ldi	r21, 0x3F	; 63
    26fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26fe:	88 23       	and	r24, r24
    2700:	2c f4       	brge	.+10     	; 0x270c <LCD_VoidSendCommand+0xb4>
		__ticks = 1;
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	9c 8b       	std	Y+20, r25	; 0x14
    2708:	8b 8b       	std	Y+19, r24	; 0x13
    270a:	3f c0       	rjmp	.+126    	; 0x278a <LCD_VoidSendCommand+0x132>
	else if (__tmp > 65535)
    270c:	6d 89       	ldd	r22, Y+21	; 0x15
    270e:	7e 89       	ldd	r23, Y+22	; 0x16
    2710:	8f 89       	ldd	r24, Y+23	; 0x17
    2712:	98 8d       	ldd	r25, Y+24	; 0x18
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	3f ef       	ldi	r19, 0xFF	; 255
    2718:	4f e7       	ldi	r20, 0x7F	; 127
    271a:	57 e4       	ldi	r21, 0x47	; 71
    271c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2720:	18 16       	cp	r1, r24
    2722:	4c f5       	brge	.+82     	; 0x2776 <LCD_VoidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2724:	69 8d       	ldd	r22, Y+25	; 0x19
    2726:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2728:	8b 8d       	ldd	r24, Y+27	; 0x1b
    272a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e2       	ldi	r20, 0x20	; 32
    2732:	51 e4       	ldi	r21, 0x41	; 65
    2734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	bc 01       	movw	r22, r24
    273e:	cd 01       	movw	r24, r26
    2740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	9c 8b       	std	Y+20, r25	; 0x14
    274a:	8b 8b       	std	Y+19, r24	; 0x13
    274c:	0f c0       	rjmp	.+30     	; 0x276c <LCD_VoidSendCommand+0x114>
    274e:	88 ec       	ldi	r24, 0xC8	; 200
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	9a 8b       	std	Y+18, r25	; 0x12
    2754:	89 8b       	std	Y+17, r24	; 0x11
    2756:	89 89       	ldd	r24, Y+17	; 0x11
    2758:	9a 89       	ldd	r25, Y+18	; 0x12
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	f1 f7       	brne	.-4      	; 0x275a <LCD_VoidSendCommand+0x102>
    275e:	9a 8b       	std	Y+18, r25	; 0x12
    2760:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2762:	8b 89       	ldd	r24, Y+19	; 0x13
    2764:	9c 89       	ldd	r25, Y+20	; 0x14
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	9c 8b       	std	Y+20, r25	; 0x14
    276a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    276c:	8b 89       	ldd	r24, Y+19	; 0x13
    276e:	9c 89       	ldd	r25, Y+20	; 0x14
    2770:	00 97       	sbiw	r24, 0x00	; 0
    2772:	69 f7       	brne	.-38     	; 0x274e <LCD_VoidSendCommand+0xf6>
    2774:	14 c0       	rjmp	.+40     	; 0x279e <LCD_VoidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2776:	6d 89       	ldd	r22, Y+21	; 0x15
    2778:	7e 89       	ldd	r23, Y+22	; 0x16
    277a:	8f 89       	ldd	r24, Y+23	; 0x17
    277c:	98 8d       	ldd	r25, Y+24	; 0x18
    277e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	9c 8b       	std	Y+20, r25	; 0x14
    2788:	8b 8b       	std	Y+19, r24	; 0x13
    278a:	8b 89       	ldd	r24, Y+19	; 0x13
    278c:	9c 89       	ldd	r25, Y+20	; 0x14
    278e:	98 8b       	std	Y+16, r25	; 0x10
    2790:	8f 87       	std	Y+15, r24	; 0x0f
    2792:	8f 85       	ldd	r24, Y+15	; 0x0f
    2794:	98 89       	ldd	r25, Y+16	; 0x10
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	f1 f7       	brne	.-4      	; 0x2796 <LCD_VoidSendCommand+0x13e>
    279a:	98 8b       	std	Y+16, r25	; 0x10
    279c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    279e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    27a0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    27a2:	84 81       	ldd	r24, Z+4	; 0x04
    27a4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    27a6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    27a8:	95 81       	ldd	r25, Z+5	; 0x05
    27aa:	69 2f       	mov	r22, r25
    27ac:	40 e0       	ldi	r20, 0x00	; 0
    27ae:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	a0 e8       	ldi	r26, 0x80	; 128
    27b8:	bf e3       	ldi	r27, 0x3F	; 63
    27ba:	8b 87       	std	Y+11, r24	; 0x0b
    27bc:	9c 87       	std	Y+12, r25	; 0x0c
    27be:	ad 87       	std	Y+13, r26	; 0x0d
    27c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	4a ef       	ldi	r20, 0xFA	; 250
    27d0:	54 e4       	ldi	r21, 0x44	; 68
    27d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	8f 83       	std	Y+7, r24	; 0x07
    27dc:	98 87       	std	Y+8, r25	; 0x08
    27de:	a9 87       	std	Y+9, r26	; 0x09
    27e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27e2:	6f 81       	ldd	r22, Y+7	; 0x07
    27e4:	78 85       	ldd	r23, Y+8	; 0x08
    27e6:	89 85       	ldd	r24, Y+9	; 0x09
    27e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	40 e8       	ldi	r20, 0x80	; 128
    27f0:	5f e3       	ldi	r21, 0x3F	; 63
    27f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27f6:	88 23       	and	r24, r24
    27f8:	2c f4       	brge	.+10     	; 0x2804 <LCD_VoidSendCommand+0x1ac>
		__ticks = 1;
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	9e 83       	std	Y+6, r25	; 0x06
    2800:	8d 83       	std	Y+5, r24	; 0x05
    2802:	3f c0       	rjmp	.+126    	; 0x2882 <LCD_VoidSendCommand+0x22a>
	else if (__tmp > 65535)
    2804:	6f 81       	ldd	r22, Y+7	; 0x07
    2806:	78 85       	ldd	r23, Y+8	; 0x08
    2808:	89 85       	ldd	r24, Y+9	; 0x09
    280a:	9a 85       	ldd	r25, Y+10	; 0x0a
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	3f ef       	ldi	r19, 0xFF	; 255
    2810:	4f e7       	ldi	r20, 0x7F	; 127
    2812:	57 e4       	ldi	r21, 0x47	; 71
    2814:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2818:	18 16       	cp	r1, r24
    281a:	4c f5       	brge	.+82     	; 0x286e <LCD_VoidSendCommand+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    281c:	6b 85       	ldd	r22, Y+11	; 0x0b
    281e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2820:	8d 85       	ldd	r24, Y+13	; 0x0d
    2822:	9e 85       	ldd	r25, Y+14	; 0x0e
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e2       	ldi	r20, 0x20	; 32
    282a:	51 e4       	ldi	r21, 0x41	; 65
    282c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	bc 01       	movw	r22, r24
    2836:	cd 01       	movw	r24, r26
    2838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	9e 83       	std	Y+6, r25	; 0x06
    2842:	8d 83       	std	Y+5, r24	; 0x05
    2844:	0f c0       	rjmp	.+30     	; 0x2864 <LCD_VoidSendCommand+0x20c>
    2846:	88 ec       	ldi	r24, 0xC8	; 200
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	9c 83       	std	Y+4, r25	; 0x04
    284c:	8b 83       	std	Y+3, r24	; 0x03
    284e:	8b 81       	ldd	r24, Y+3	; 0x03
    2850:	9c 81       	ldd	r25, Y+4	; 0x04
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	f1 f7       	brne	.-4      	; 0x2852 <LCD_VoidSendCommand+0x1fa>
    2856:	9c 83       	std	Y+4, r25	; 0x04
    2858:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285a:	8d 81       	ldd	r24, Y+5	; 0x05
    285c:	9e 81       	ldd	r25, Y+6	; 0x06
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	9e 83       	std	Y+6, r25	; 0x06
    2862:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2864:	8d 81       	ldd	r24, Y+5	; 0x05
    2866:	9e 81       	ldd	r25, Y+6	; 0x06
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	69 f7       	brne	.-38     	; 0x2846 <LCD_VoidSendCommand+0x1ee>
    286c:	14 c0       	rjmp	.+40     	; 0x2896 <LCD_VoidSendCommand+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    286e:	6f 81       	ldd	r22, Y+7	; 0x07
    2870:	78 85       	ldd	r23, Y+8	; 0x08
    2872:	89 85       	ldd	r24, Y+9	; 0x09
    2874:	9a 85       	ldd	r25, Y+10	; 0x0a
    2876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	9e 83       	std	Y+6, r25	; 0x06
    2880:	8d 83       	std	Y+5, r24	; 0x05
    2882:	8d 81       	ldd	r24, Y+5	; 0x05
    2884:	9e 81       	ldd	r25, Y+6	; 0x06
    2886:	9a 83       	std	Y+2, r25	; 0x02
    2888:	89 83       	std	Y+1, r24	; 0x01
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	9a 81       	ldd	r25, Y+2	; 0x02
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	f1 f7       	brne	.-4      	; 0x288e <LCD_VoidSendCommand+0x236>
    2892:	9a 83       	std	Y+2, r25	; 0x02
    2894:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	if(Local_Command==0x01)
    2896:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2898:	81 30       	cpi	r24, 0x01	; 1
    289a:	39 f4       	brne	.+14     	; 0x28aa <LCD_VoidSendCommand+0x252>
		LCD_VoidGoToXY(0,0,lcd);
    289c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    289e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	a9 01       	movw	r20, r18
    28a6:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_VoidGoToXY>
}
    28aa:	6f 96       	adiw	r28, 0x1f	; 31
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	f8 94       	cli
    28b0:	de bf       	out	0x3e, r29	; 62
    28b2:	0f be       	out	0x3f, r0	; 63
    28b4:	cd bf       	out	0x3d, r28	; 61
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	08 95       	ret

000028bc <LCD_VoidSendChar>:

u8 LCD_VoidSendChar(u8 Local_Char,LCD_Info *lcd,LCD_Line_Info *Type)
{
    28bc:	0f 93       	push	r16
    28be:	1f 93       	push	r17
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	c9 55       	subi	r28, 0x59	; 89
    28ca:	d0 40       	sbci	r29, 0x00	; 0
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	fe 01       	movw	r30, r28
    28d8:	eb 5a       	subi	r30, 0xAB	; 171
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	80 83       	st	Z, r24
    28de:	fe 01       	movw	r30, r28
    28e0:	ea 5a       	subi	r30, 0xAA	; 170
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	71 83       	std	Z+1, r23	; 0x01
    28e6:	60 83       	st	Z, r22
    28e8:	fe 01       	movw	r30, r28
    28ea:	e8 5a       	subi	r30, 0xA8	; 168
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	51 83       	std	Z+1, r21	; 0x01
    28f0:	40 83       	st	Z, r20
	static u8 SwitchingCounter;
	static u8 SecondLineCounter,FirstLineCounter;

	if(Type->OneLine==NO&&Type->TwoLines==YES){
    28f2:	fe 01       	movw	r30, r28
    28f4:	e8 5a       	subi	r30, 0xA8	; 168
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	01 90       	ld	r0, Z+
    28fa:	f0 81       	ld	r31, Z
    28fc:	e0 2d       	mov	r30, r0
    28fe:	80 81       	ld	r24, Z
    2900:	84 31       	cpi	r24, 0x14	; 20
    2902:	09 f0       	breq	.+2      	; 0x2906 <LCD_VoidSendChar+0x4a>
    2904:	1b c3       	rjmp	.+1590   	; 0x2f3c <LCD_VoidSendChar+0x680>
    2906:	fe 01       	movw	r30, r28
    2908:	e8 5a       	subi	r30, 0xA8	; 168
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	01 90       	ld	r0, Z+
    290e:	f0 81       	ld	r31, Z
    2910:	e0 2d       	mov	r30, r0
    2912:	81 81       	ldd	r24, Z+1	; 0x01
    2914:	8a 30       	cpi	r24, 0x0A	; 10
    2916:	09 f0       	breq	.+2      	; 0x291a <LCD_VoidSendChar+0x5e>
    2918:	11 c3       	rjmp	.+1570   	; 0x2f3c <LCD_VoidSendChar+0x680>
		if(SwitchingCounter<16){
    291a:	80 91 aa 00 	lds	r24, 0x00AA
    291e:	80 31       	cpi	r24, 0x10	; 16
    2920:	08 f0       	brcs	.+2      	; 0x2924 <LCD_VoidSendChar+0x68>
    2922:	a3 c1       	rjmp	.+838    	; 0x2c6a <LCD_VoidSendChar+0x3ae>
			LCD_VoidGoToXY(FirstLineCounter,0,lcd);
    2924:	80 91 a8 00 	lds	r24, 0x00A8
    2928:	fe 01       	movw	r30, r28
    292a:	ea 5a       	subi	r30, 0xAA	; 170
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	20 81       	ld	r18, Z
    2930:	31 81       	ldd	r19, Z+1	; 0x01
    2932:	60 e0       	ldi	r22, 0x00	; 0
    2934:	a9 01       	movw	r20, r18
    2936:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_VoidGoToXY>
			/*RS->LOw*/
			DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    293a:	fe 01       	movw	r30, r28
    293c:	ea 5a       	subi	r30, 0xAA	; 170
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	01 90       	ld	r0, Z+
    2942:	f0 81       	ld	r31, Z
    2944:	e0 2d       	mov	r30, r0
    2946:	80 81       	ld	r24, Z
    2948:	fe 01       	movw	r30, r28
    294a:	ea 5a       	subi	r30, 0xAA	; 170
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	01 90       	ld	r0, Z+
    2950:	f0 81       	ld	r31, Z
    2952:	e0 2d       	mov	r30, r0
    2954:	91 81       	ldd	r25, Z+1	; 0x01
    2956:	69 2f       	mov	r22, r25
    2958:	41 e0       	ldi	r20, 0x01	; 1
    295a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
			/*RW-> LOW*/
			DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    295e:	fe 01       	movw	r30, r28
    2960:	ea 5a       	subi	r30, 0xAA	; 170
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	01 90       	ld	r0, Z+
    2966:	f0 81       	ld	r31, Z
    2968:	e0 2d       	mov	r30, r0
    296a:	82 81       	ldd	r24, Z+2	; 0x02
    296c:	fe 01       	movw	r30, r28
    296e:	ea 5a       	subi	r30, 0xAA	; 170
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	01 90       	ld	r0, Z+
    2974:	f0 81       	ld	r31, Z
    2976:	e0 2d       	mov	r30, r0
    2978:	93 81       	ldd	r25, Z+3	; 0x03
    297a:	69 2f       	mov	r22, r25
    297c:	40 e0       	ldi	r20, 0x00	; 0
    297e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
			/*Group = Command*/
			DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    2982:	fe 01       	movw	r30, r28
    2984:	ea 5a       	subi	r30, 0xAA	; 170
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	01 90       	ld	r0, Z+
    298a:	f0 81       	ld	r31, Z
    298c:	e0 2d       	mov	r30, r0
    298e:	86 81       	ldd	r24, Z+6	; 0x06
    2990:	fe 01       	movw	r30, r28
    2992:	eb 5a       	subi	r30, 0xAB	; 171
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	60 81       	ld	r22, Z
    2998:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
			/*Enable*/
			DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    299c:	fe 01       	movw	r30, r28
    299e:	ea 5a       	subi	r30, 0xAA	; 170
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	01 90       	ld	r0, Z+
    29a4:	f0 81       	ld	r31, Z
    29a6:	e0 2d       	mov	r30, r0
    29a8:	84 81       	ldd	r24, Z+4	; 0x04
    29aa:	fe 01       	movw	r30, r28
    29ac:	ea 5a       	subi	r30, 0xAA	; 170
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	01 90       	ld	r0, Z+
    29b2:	f0 81       	ld	r31, Z
    29b4:	e0 2d       	mov	r30, r0
    29b6:	95 81       	ldd	r25, Z+5	; 0x05
    29b8:	69 2f       	mov	r22, r25
    29ba:	41 e0       	ldi	r20, 0x01	; 1
    29bc:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    29c0:	fe 01       	movw	r30, r28
    29c2:	ef 5a       	subi	r30, 0xAF	; 175
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	a0 e8       	ldi	r26, 0x80	; 128
    29cc:	bf e3       	ldi	r27, 0x3F	; 63
    29ce:	80 83       	st	Z, r24
    29d0:	91 83       	std	Z+1, r25	; 0x01
    29d2:	a2 83       	std	Z+2, r26	; 0x02
    29d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d6:	8e 01       	movw	r16, r28
    29d8:	03 5b       	subi	r16, 0xB3	; 179
    29da:	1f 4f       	sbci	r17, 0xFF	; 255
    29dc:	fe 01       	movw	r30, r28
    29de:	ef 5a       	subi	r30, 0xAF	; 175
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	60 81       	ld	r22, Z
    29e4:	71 81       	ldd	r23, Z+1	; 0x01
    29e6:	82 81       	ldd	r24, Z+2	; 0x02
    29e8:	93 81       	ldd	r25, Z+3	; 0x03
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	4a ef       	ldi	r20, 0xFA	; 250
    29f0:	54 e4       	ldi	r21, 0x44	; 68
    29f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	f8 01       	movw	r30, r16
    29fc:	80 83       	st	Z, r24
    29fe:	91 83       	std	Z+1, r25	; 0x01
    2a00:	a2 83       	std	Z+2, r26	; 0x02
    2a02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a04:	fe 01       	movw	r30, r28
    2a06:	e3 5b       	subi	r30, 0xB3	; 179
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	60 81       	ld	r22, Z
    2a0c:	71 81       	ldd	r23, Z+1	; 0x01
    2a0e:	82 81       	ldd	r24, Z+2	; 0x02
    2a10:	93 81       	ldd	r25, Z+3	; 0x03
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	40 e8       	ldi	r20, 0x80	; 128
    2a18:	5f e3       	ldi	r21, 0x3F	; 63
    2a1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a1e:	88 23       	and	r24, r24
    2a20:	44 f4       	brge	.+16     	; 0x2a32 <LCD_VoidSendChar+0x176>
		__ticks = 1;
    2a22:	fe 01       	movw	r30, r28
    2a24:	e5 5b       	subi	r30, 0xB5	; 181
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	91 83       	std	Z+1, r25	; 0x01
    2a2e:	80 83       	st	Z, r24
    2a30:	64 c0       	rjmp	.+200    	; 0x2afa <LCD_VoidSendChar+0x23e>
	else if (__tmp > 65535)
    2a32:	fe 01       	movw	r30, r28
    2a34:	e3 5b       	subi	r30, 0xB3	; 179
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	60 81       	ld	r22, Z
    2a3a:	71 81       	ldd	r23, Z+1	; 0x01
    2a3c:	82 81       	ldd	r24, Z+2	; 0x02
    2a3e:	93 81       	ldd	r25, Z+3	; 0x03
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	3f ef       	ldi	r19, 0xFF	; 255
    2a44:	4f e7       	ldi	r20, 0x7F	; 127
    2a46:	57 e4       	ldi	r21, 0x47	; 71
    2a48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a4c:	18 16       	cp	r1, r24
    2a4e:	0c f0       	brlt	.+2      	; 0x2a52 <LCD_VoidSendChar+0x196>
    2a50:	43 c0       	rjmp	.+134    	; 0x2ad8 <LCD_VoidSendChar+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a52:	fe 01       	movw	r30, r28
    2a54:	ef 5a       	subi	r30, 0xAF	; 175
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	60 81       	ld	r22, Z
    2a5a:	71 81       	ldd	r23, Z+1	; 0x01
    2a5c:	82 81       	ldd	r24, Z+2	; 0x02
    2a5e:	93 81       	ldd	r25, Z+3	; 0x03
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	40 e2       	ldi	r20, 0x20	; 32
    2a66:	51 e4       	ldi	r21, 0x41	; 65
    2a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	8e 01       	movw	r16, r28
    2a72:	05 5b       	subi	r16, 0xB5	; 181
    2a74:	1f 4f       	sbci	r17, 0xFF	; 255
    2a76:	bc 01       	movw	r22, r24
    2a78:	cd 01       	movw	r24, r26
    2a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	f8 01       	movw	r30, r16
    2a84:	91 83       	std	Z+1, r25	; 0x01
    2a86:	80 83       	st	Z, r24
    2a88:	1f c0       	rjmp	.+62     	; 0x2ac8 <LCD_VoidSendChar+0x20c>
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	e7 5b       	subi	r30, 0xB7	; 183
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	88 ec       	ldi	r24, 0xC8	; 200
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	80 83       	st	Z, r24
    2a98:	fe 01       	movw	r30, r28
    2a9a:	e7 5b       	subi	r30, 0xB7	; 183
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	80 81       	ld	r24, Z
    2aa0:	91 81       	ldd	r25, Z+1	; 0x01
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <LCD_VoidSendChar+0x1e6>
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	e7 5b       	subi	r30, 0xB7	; 183
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	91 83       	std	Z+1, r25	; 0x01
    2aae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab0:	de 01       	movw	r26, r28
    2ab2:	a5 5b       	subi	r26, 0xB5	; 181
    2ab4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e5 5b       	subi	r30, 0xB5	; 181
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	80 81       	ld	r24, Z
    2abe:	91 81       	ldd	r25, Z+1	; 0x01
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	11 96       	adiw	r26, 0x01	; 1
    2ac4:	9c 93       	st	X, r25
    2ac6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac8:	fe 01       	movw	r30, r28
    2aca:	e5 5b       	subi	r30, 0xB5	; 181
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	80 81       	ld	r24, Z
    2ad0:	91 81       	ldd	r25, Z+1	; 0x01
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	d1 f6       	brne	.-76     	; 0x2a8a <LCD_VoidSendChar+0x1ce>
    2ad6:	27 c0       	rjmp	.+78     	; 0x2b26 <LCD_VoidSendChar+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad8:	8e 01       	movw	r16, r28
    2ada:	05 5b       	subi	r16, 0xB5	; 181
    2adc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ade:	fe 01       	movw	r30, r28
    2ae0:	e3 5b       	subi	r30, 0xB3	; 179
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	60 81       	ld	r22, Z
    2ae6:	71 81       	ldd	r23, Z+1	; 0x01
    2ae8:	82 81       	ldd	r24, Z+2	; 0x02
    2aea:	93 81       	ldd	r25, Z+3	; 0x03
    2aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	f8 01       	movw	r30, r16
    2af6:	91 83       	std	Z+1, r25	; 0x01
    2af8:	80 83       	st	Z, r24
    2afa:	de 01       	movw	r26, r28
    2afc:	a9 5b       	subi	r26, 0xB9	; 185
    2afe:	bf 4f       	sbci	r27, 0xFF	; 255
    2b00:	fe 01       	movw	r30, r28
    2b02:	e5 5b       	subi	r30, 0xB5	; 181
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	80 81       	ld	r24, Z
    2b08:	91 81       	ldd	r25, Z+1	; 0x01
    2b0a:	8d 93       	st	X+, r24
    2b0c:	9c 93       	st	X, r25
    2b0e:	fe 01       	movw	r30, r28
    2b10:	e9 5b       	subi	r30, 0xB9	; 185
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	80 81       	ld	r24, Z
    2b16:	91 81       	ldd	r25, Z+1	; 0x01
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	f1 f7       	brne	.-4      	; 0x2b18 <LCD_VoidSendChar+0x25c>
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	e9 5b       	subi	r30, 0xB9	; 185
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	91 83       	std	Z+1, r25	; 0x01
    2b24:	80 83       	st	Z, r24
			_delay_ms(1);
			DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    2b26:	fe 01       	movw	r30, r28
    2b28:	ea 5a       	subi	r30, 0xAA	; 170
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	01 90       	ld	r0, Z+
    2b2e:	f0 81       	ld	r31, Z
    2b30:	e0 2d       	mov	r30, r0
    2b32:	84 81       	ldd	r24, Z+4	; 0x04
    2b34:	fe 01       	movw	r30, r28
    2b36:	ea 5a       	subi	r30, 0xAA	; 170
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	01 90       	ld	r0, Z+
    2b3c:	f0 81       	ld	r31, Z
    2b3e:	e0 2d       	mov	r30, r0
    2b40:	95 81       	ldd	r25, Z+5	; 0x05
    2b42:	69 2f       	mov	r22, r25
    2b44:	40 e0       	ldi	r20, 0x00	; 0
    2b46:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	ed 5b       	subi	r30, 0xBD	; 189
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	a0 e8       	ldi	r26, 0x80	; 128
    2b56:	bf e3       	ldi	r27, 0x3F	; 63
    2b58:	80 83       	st	Z, r24
    2b5a:	91 83       	std	Z+1, r25	; 0x01
    2b5c:	a2 83       	std	Z+2, r26	; 0x02
    2b5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b60:	8e 01       	movw	r16, r28
    2b62:	01 5c       	subi	r16, 0xC1	; 193
    2b64:	1f 4f       	sbci	r17, 0xFF	; 255
    2b66:	fe 01       	movw	r30, r28
    2b68:	ed 5b       	subi	r30, 0xBD	; 189
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	60 81       	ld	r22, Z
    2b6e:	71 81       	ldd	r23, Z+1	; 0x01
    2b70:	82 81       	ldd	r24, Z+2	; 0x02
    2b72:	93 81       	ldd	r25, Z+3	; 0x03
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	4a ef       	ldi	r20, 0xFA	; 250
    2b7a:	54 e4       	ldi	r21, 0x44	; 68
    2b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	f8 01       	movw	r30, r16
    2b86:	80 83       	st	Z, r24
    2b88:	91 83       	std	Z+1, r25	; 0x01
    2b8a:	a2 83       	std	Z+2, r26	; 0x02
    2b8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b8e:	fe 01       	movw	r30, r28
    2b90:	ff 96       	adiw	r30, 0x3f	; 63
    2b92:	60 81       	ld	r22, Z
    2b94:	71 81       	ldd	r23, Z+1	; 0x01
    2b96:	82 81       	ldd	r24, Z+2	; 0x02
    2b98:	93 81       	ldd	r25, Z+3	; 0x03
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	40 e8       	ldi	r20, 0x80	; 128
    2ba0:	5f e3       	ldi	r21, 0x3F	; 63
    2ba2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ba6:	88 23       	and	r24, r24
    2ba8:	2c f4       	brge	.+10     	; 0x2bb4 <LCD_VoidSendChar+0x2f8>
		__ticks = 1;
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	9e af       	std	Y+62, r25	; 0x3e
    2bb0:	8d af       	std	Y+61, r24	; 0x3d
    2bb2:	46 c0       	rjmp	.+140    	; 0x2c40 <LCD_VoidSendChar+0x384>
	else if (__tmp > 65535)
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	ff 96       	adiw	r30, 0x3f	; 63
    2bb8:	60 81       	ld	r22, Z
    2bba:	71 81       	ldd	r23, Z+1	; 0x01
    2bbc:	82 81       	ldd	r24, Z+2	; 0x02
    2bbe:	93 81       	ldd	r25, Z+3	; 0x03
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	3f ef       	ldi	r19, 0xFF	; 255
    2bc4:	4f e7       	ldi	r20, 0x7F	; 127
    2bc6:	57 e4       	ldi	r21, 0x47	; 71
    2bc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bcc:	18 16       	cp	r1, r24
    2bce:	64 f5       	brge	.+88     	; 0x2c28 <LCD_VoidSendChar+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	ed 5b       	subi	r30, 0xBD	; 189
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	60 81       	ld	r22, Z
    2bd8:	71 81       	ldd	r23, Z+1	; 0x01
    2bda:	82 81       	ldd	r24, Z+2	; 0x02
    2bdc:	93 81       	ldd	r25, Z+3	; 0x03
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e2       	ldi	r20, 0x20	; 32
    2be4:	51 e4       	ldi	r21, 0x41	; 65
    2be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	bc 01       	movw	r22, r24
    2bf0:	cd 01       	movw	r24, r26
    2bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	9e af       	std	Y+62, r25	; 0x3e
    2bfc:	8d af       	std	Y+61, r24	; 0x3d
    2bfe:	0f c0       	rjmp	.+30     	; 0x2c1e <LCD_VoidSendChar+0x362>
    2c00:	88 ec       	ldi	r24, 0xC8	; 200
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	9c af       	std	Y+60, r25	; 0x3c
    2c06:	8b af       	std	Y+59, r24	; 0x3b
    2c08:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c0a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	f1 f7       	brne	.-4      	; 0x2c0c <LCD_VoidSendChar+0x350>
    2c10:	9c af       	std	Y+60, r25	; 0x3c
    2c12:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c14:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c16:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	9e af       	std	Y+62, r25	; 0x3e
    2c1c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c20:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	69 f7       	brne	.-38     	; 0x2c00 <LCD_VoidSendChar+0x344>
    2c26:	16 c0       	rjmp	.+44     	; 0x2c54 <LCD_VoidSendChar+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c28:	fe 01       	movw	r30, r28
    2c2a:	ff 96       	adiw	r30, 0x3f	; 63
    2c2c:	60 81       	ld	r22, Z
    2c2e:	71 81       	ldd	r23, Z+1	; 0x01
    2c30:	82 81       	ldd	r24, Z+2	; 0x02
    2c32:	93 81       	ldd	r25, Z+3	; 0x03
    2c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	9e af       	std	Y+62, r25	; 0x3e
    2c3e:	8d af       	std	Y+61, r24	; 0x3d
    2c40:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c42:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c44:	9a af       	std	Y+58, r25	; 0x3a
    2c46:	89 af       	std	Y+57, r24	; 0x39
    2c48:	89 ad       	ldd	r24, Y+57	; 0x39
    2c4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <LCD_VoidSendChar+0x390>
    2c50:	9a af       	std	Y+58, r25	; 0x3a
    2c52:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1);
			SwitchingCounter++;
    2c54:	80 91 aa 00 	lds	r24, 0x00AA
    2c58:	8f 5f       	subi	r24, 0xFF	; 255
    2c5a:	80 93 aa 00 	sts	0x00AA, r24
			FirstLineCounter++;
    2c5e:	80 91 a8 00 	lds	r24, 0x00A8
    2c62:	8f 5f       	subi	r24, 0xFF	; 255
    2c64:	80 93 a8 00 	sts	0x00A8, r24
    2c68:	dc c2       	rjmp	.+1464   	; 0x3222 <LCD_VoidSendChar+0x966>
		}
		else if(SwitchingCounter>15&&SwitchingCounter<32){
    2c6a:	80 91 aa 00 	lds	r24, 0x00AA
    2c6e:	80 31       	cpi	r24, 0x10	; 16
    2c70:	08 f4       	brcc	.+2      	; 0x2c74 <LCD_VoidSendChar+0x3b8>
    2c72:	54 c1       	rjmp	.+680    	; 0x2f1c <LCD_VoidSendChar+0x660>
    2c74:	80 91 aa 00 	lds	r24, 0x00AA
    2c78:	80 32       	cpi	r24, 0x20	; 32
    2c7a:	08 f0       	brcs	.+2      	; 0x2c7e <LCD_VoidSendChar+0x3c2>
    2c7c:	4f c1       	rjmp	.+670    	; 0x2f1c <LCD_VoidSendChar+0x660>
			LCD_VoidGoToXY(SecondLineCounter,1,lcd);
    2c7e:	80 91 a9 00 	lds	r24, 0x00A9
    2c82:	fe 01       	movw	r30, r28
    2c84:	ea 5a       	subi	r30, 0xAA	; 170
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	20 81       	ld	r18, Z
    2c8a:	31 81       	ldd	r19, Z+1	; 0x01
    2c8c:	61 e0       	ldi	r22, 0x01	; 1
    2c8e:	a9 01       	movw	r20, r18
    2c90:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_VoidGoToXY>
			/*RS->LOw*/
			DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    2c94:	fe 01       	movw	r30, r28
    2c96:	ea 5a       	subi	r30, 0xAA	; 170
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	01 90       	ld	r0, Z+
    2c9c:	f0 81       	ld	r31, Z
    2c9e:	e0 2d       	mov	r30, r0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	ea 5a       	subi	r30, 0xAA	; 170
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	01 90       	ld	r0, Z+
    2caa:	f0 81       	ld	r31, Z
    2cac:	e0 2d       	mov	r30, r0
    2cae:	91 81       	ldd	r25, Z+1	; 0x01
    2cb0:	69 2f       	mov	r22, r25
    2cb2:	41 e0       	ldi	r20, 0x01	; 1
    2cb4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
			/*RW-> LOW*/
			DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    2cb8:	fe 01       	movw	r30, r28
    2cba:	ea 5a       	subi	r30, 0xAA	; 170
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	01 90       	ld	r0, Z+
    2cc0:	f0 81       	ld	r31, Z
    2cc2:	e0 2d       	mov	r30, r0
    2cc4:	82 81       	ldd	r24, Z+2	; 0x02
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	ea 5a       	subi	r30, 0xAA	; 170
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	01 90       	ld	r0, Z+
    2cce:	f0 81       	ld	r31, Z
    2cd0:	e0 2d       	mov	r30, r0
    2cd2:	93 81       	ldd	r25, Z+3	; 0x03
    2cd4:	69 2f       	mov	r22, r25
    2cd6:	40 e0       	ldi	r20, 0x00	; 0
    2cd8:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
			/*Group = Command*/
			DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    2cdc:	fe 01       	movw	r30, r28
    2cde:	ea 5a       	subi	r30, 0xAA	; 170
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	01 90       	ld	r0, Z+
    2ce4:	f0 81       	ld	r31, Z
    2ce6:	e0 2d       	mov	r30, r0
    2ce8:	86 81       	ldd	r24, Z+6	; 0x06
    2cea:	fe 01       	movw	r30, r28
    2cec:	eb 5a       	subi	r30, 0xAB	; 171
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	60 81       	ld	r22, Z
    2cf2:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
			/*Enable*/
			DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	ea 5a       	subi	r30, 0xAA	; 170
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	01 90       	ld	r0, Z+
    2cfe:	f0 81       	ld	r31, Z
    2d00:	e0 2d       	mov	r30, r0
    2d02:	84 81       	ldd	r24, Z+4	; 0x04
    2d04:	fe 01       	movw	r30, r28
    2d06:	ea 5a       	subi	r30, 0xAA	; 170
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	01 90       	ld	r0, Z+
    2d0c:	f0 81       	ld	r31, Z
    2d0e:	e0 2d       	mov	r30, r0
    2d10:	95 81       	ldd	r25, Z+5	; 0x05
    2d12:	69 2f       	mov	r22, r25
    2d14:	41 e0       	ldi	r20, 0x01	; 1
    2d16:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	a0 e8       	ldi	r26, 0x80	; 128
    2d20:	bf e3       	ldi	r27, 0x3F	; 63
    2d22:	8d ab       	std	Y+53, r24	; 0x35
    2d24:	9e ab       	std	Y+54, r25	; 0x36
    2d26:	af ab       	std	Y+55, r26	; 0x37
    2d28:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d2a:	6d a9       	ldd	r22, Y+53	; 0x35
    2d2c:	7e a9       	ldd	r23, Y+54	; 0x36
    2d2e:	8f a9       	ldd	r24, Y+55	; 0x37
    2d30:	98 ad       	ldd	r25, Y+56	; 0x38
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	4a ef       	ldi	r20, 0xFA	; 250
    2d38:	54 e4       	ldi	r21, 0x44	; 68
    2d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	89 ab       	std	Y+49, r24	; 0x31
    2d44:	9a ab       	std	Y+50, r25	; 0x32
    2d46:	ab ab       	std	Y+51, r26	; 0x33
    2d48:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d4a:	69 a9       	ldd	r22, Y+49	; 0x31
    2d4c:	7a a9       	ldd	r23, Y+50	; 0x32
    2d4e:	8b a9       	ldd	r24, Y+51	; 0x33
    2d50:	9c a9       	ldd	r25, Y+52	; 0x34
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	40 e8       	ldi	r20, 0x80	; 128
    2d58:	5f e3       	ldi	r21, 0x3F	; 63
    2d5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d5e:	88 23       	and	r24, r24
    2d60:	2c f4       	brge	.+10     	; 0x2d6c <LCD_VoidSendChar+0x4b0>
		__ticks = 1;
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	98 ab       	std	Y+48, r25	; 0x30
    2d68:	8f a7       	std	Y+47, r24	; 0x2f
    2d6a:	3f c0       	rjmp	.+126    	; 0x2dea <LCD_VoidSendChar+0x52e>
	else if (__tmp > 65535)
    2d6c:	69 a9       	ldd	r22, Y+49	; 0x31
    2d6e:	7a a9       	ldd	r23, Y+50	; 0x32
    2d70:	8b a9       	ldd	r24, Y+51	; 0x33
    2d72:	9c a9       	ldd	r25, Y+52	; 0x34
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	3f ef       	ldi	r19, 0xFF	; 255
    2d78:	4f e7       	ldi	r20, 0x7F	; 127
    2d7a:	57 e4       	ldi	r21, 0x47	; 71
    2d7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d80:	18 16       	cp	r1, r24
    2d82:	4c f5       	brge	.+82     	; 0x2dd6 <LCD_VoidSendChar+0x51a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d84:	6d a9       	ldd	r22, Y+53	; 0x35
    2d86:	7e a9       	ldd	r23, Y+54	; 0x36
    2d88:	8f a9       	ldd	r24, Y+55	; 0x37
    2d8a:	98 ad       	ldd	r25, Y+56	; 0x38
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	40 e2       	ldi	r20, 0x20	; 32
    2d92:	51 e4       	ldi	r21, 0x41	; 65
    2d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	bc 01       	movw	r22, r24
    2d9e:	cd 01       	movw	r24, r26
    2da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	98 ab       	std	Y+48, r25	; 0x30
    2daa:	8f a7       	std	Y+47, r24	; 0x2f
    2dac:	0f c0       	rjmp	.+30     	; 0x2dcc <LCD_VoidSendChar+0x510>
    2dae:	88 ec       	ldi	r24, 0xC8	; 200
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	9e a7       	std	Y+46, r25	; 0x2e
    2db4:	8d a7       	std	Y+45, r24	; 0x2d
    2db6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2db8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	f1 f7       	brne	.-4      	; 0x2dba <LCD_VoidSendChar+0x4fe>
    2dbe:	9e a7       	std	Y+46, r25	; 0x2e
    2dc0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dc4:	98 a9       	ldd	r25, Y+48	; 0x30
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	98 ab       	std	Y+48, r25	; 0x30
    2dca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dce:	98 a9       	ldd	r25, Y+48	; 0x30
    2dd0:	00 97       	sbiw	r24, 0x00	; 0
    2dd2:	69 f7       	brne	.-38     	; 0x2dae <LCD_VoidSendChar+0x4f2>
    2dd4:	14 c0       	rjmp	.+40     	; 0x2dfe <LCD_VoidSendChar+0x542>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd6:	69 a9       	ldd	r22, Y+49	; 0x31
    2dd8:	7a a9       	ldd	r23, Y+50	; 0x32
    2dda:	8b a9       	ldd	r24, Y+51	; 0x33
    2ddc:	9c a9       	ldd	r25, Y+52	; 0x34
    2dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	98 ab       	std	Y+48, r25	; 0x30
    2de8:	8f a7       	std	Y+47, r24	; 0x2f
    2dea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dec:	98 a9       	ldd	r25, Y+48	; 0x30
    2dee:	9c a7       	std	Y+44, r25	; 0x2c
    2df0:	8b a7       	std	Y+43, r24	; 0x2b
    2df2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2df4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	f1 f7       	brne	.-4      	; 0x2df6 <LCD_VoidSendChar+0x53a>
    2dfa:	9c a7       	std	Y+44, r25	; 0x2c
    2dfc:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    2dfe:	fe 01       	movw	r30, r28
    2e00:	ea 5a       	subi	r30, 0xAA	; 170
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	01 90       	ld	r0, Z+
    2e06:	f0 81       	ld	r31, Z
    2e08:	e0 2d       	mov	r30, r0
    2e0a:	84 81       	ldd	r24, Z+4	; 0x04
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	ea 5a       	subi	r30, 0xAA	; 170
    2e10:	ff 4f       	sbci	r31, 0xFF	; 255
    2e12:	01 90       	ld	r0, Z+
    2e14:	f0 81       	ld	r31, Z
    2e16:	e0 2d       	mov	r30, r0
    2e18:	95 81       	ldd	r25, Z+5	; 0x05
    2e1a:	69 2f       	mov	r22, r25
    2e1c:	40 e0       	ldi	r20, 0x00	; 0
    2e1e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    2e22:	80 e0       	ldi	r24, 0x00	; 0
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	a0 e8       	ldi	r26, 0x80	; 128
    2e28:	bf e3       	ldi	r27, 0x3F	; 63
    2e2a:	8f a3       	std	Y+39, r24	; 0x27
    2e2c:	98 a7       	std	Y+40, r25	; 0x28
    2e2e:	a9 a7       	std	Y+41, r26	; 0x29
    2e30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e32:	6f a1       	ldd	r22, Y+39	; 0x27
    2e34:	78 a5       	ldd	r23, Y+40	; 0x28
    2e36:	89 a5       	ldd	r24, Y+41	; 0x29
    2e38:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	4a ef       	ldi	r20, 0xFA	; 250
    2e40:	54 e4       	ldi	r21, 0x44	; 68
    2e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	8b a3       	std	Y+35, r24	; 0x23
    2e4c:	9c a3       	std	Y+36, r25	; 0x24
    2e4e:	ad a3       	std	Y+37, r26	; 0x25
    2e50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e52:	6b a1       	ldd	r22, Y+35	; 0x23
    2e54:	7c a1       	ldd	r23, Y+36	; 0x24
    2e56:	8d a1       	ldd	r24, Y+37	; 0x25
    2e58:	9e a1       	ldd	r25, Y+38	; 0x26
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	40 e8       	ldi	r20, 0x80	; 128
    2e60:	5f e3       	ldi	r21, 0x3F	; 63
    2e62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e66:	88 23       	and	r24, r24
    2e68:	2c f4       	brge	.+10     	; 0x2e74 <LCD_VoidSendChar+0x5b8>
		__ticks = 1;
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	9a a3       	std	Y+34, r25	; 0x22
    2e70:	89 a3       	std	Y+33, r24	; 0x21
    2e72:	3f c0       	rjmp	.+126    	; 0x2ef2 <LCD_VoidSendChar+0x636>
	else if (__tmp > 65535)
    2e74:	6b a1       	ldd	r22, Y+35	; 0x23
    2e76:	7c a1       	ldd	r23, Y+36	; 0x24
    2e78:	8d a1       	ldd	r24, Y+37	; 0x25
    2e7a:	9e a1       	ldd	r25, Y+38	; 0x26
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	3f ef       	ldi	r19, 0xFF	; 255
    2e80:	4f e7       	ldi	r20, 0x7F	; 127
    2e82:	57 e4       	ldi	r21, 0x47	; 71
    2e84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e88:	18 16       	cp	r1, r24
    2e8a:	4c f5       	brge	.+82     	; 0x2ede <LCD_VoidSendChar+0x622>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e8c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e8e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e90:	89 a5       	ldd	r24, Y+41	; 0x29
    2e92:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	40 e2       	ldi	r20, 0x20	; 32
    2e9a:	51 e4       	ldi	r21, 0x41	; 65
    2e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	bc 01       	movw	r22, r24
    2ea6:	cd 01       	movw	r24, r26
    2ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	9a a3       	std	Y+34, r25	; 0x22
    2eb2:	89 a3       	std	Y+33, r24	; 0x21
    2eb4:	0f c0       	rjmp	.+30     	; 0x2ed4 <LCD_VoidSendChar+0x618>
    2eb6:	88 ec       	ldi	r24, 0xC8	; 200
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	98 a3       	std	Y+32, r25	; 0x20
    2ebc:	8f 8f       	std	Y+31, r24	; 0x1f
    2ebe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ec0:	98 a1       	ldd	r25, Y+32	; 0x20
    2ec2:	01 97       	sbiw	r24, 0x01	; 1
    2ec4:	f1 f7       	brne	.-4      	; 0x2ec2 <LCD_VoidSendChar+0x606>
    2ec6:	98 a3       	std	Y+32, r25	; 0x20
    2ec8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eca:	89 a1       	ldd	r24, Y+33	; 0x21
    2ecc:	9a a1       	ldd	r25, Y+34	; 0x22
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	9a a3       	std	Y+34, r25	; 0x22
    2ed2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ed6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ed8:	00 97       	sbiw	r24, 0x00	; 0
    2eda:	69 f7       	brne	.-38     	; 0x2eb6 <LCD_VoidSendChar+0x5fa>
    2edc:	14 c0       	rjmp	.+40     	; 0x2f06 <LCD_VoidSendChar+0x64a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ede:	6b a1       	ldd	r22, Y+35	; 0x23
    2ee0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ee2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ee4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	9a a3       	std	Y+34, r25	; 0x22
    2ef0:	89 a3       	std	Y+33, r24	; 0x21
    2ef2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ef4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ef6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ef8:	8d 8f       	std	Y+29, r24	; 0x1d
    2efa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2efc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2efe:	01 97       	sbiw	r24, 0x01	; 1
    2f00:	f1 f7       	brne	.-4      	; 0x2efe <LCD_VoidSendChar+0x642>
    2f02:	9e 8f       	std	Y+30, r25	; 0x1e
    2f04:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
			SwitchingCounter++;
    2f06:	80 91 aa 00 	lds	r24, 0x00AA
    2f0a:	8f 5f       	subi	r24, 0xFF	; 255
    2f0c:	80 93 aa 00 	sts	0x00AA, r24
			SecondLineCounter++;
    2f10:	80 91 a9 00 	lds	r24, 0x00A9
    2f14:	8f 5f       	subi	r24, 0xFF	; 255
    2f16:	80 93 a9 00 	sts	0x00A9, r24
    2f1a:	83 c1       	rjmp	.+774    	; 0x3222 <LCD_VoidSendChar+0x966>
		}
		else{
			SwitchingCounter=0;
    2f1c:	10 92 aa 00 	sts	0x00AA, r1
			FirstLineCounter=0;
    2f20:	10 92 a8 00 	sts	0x00A8, r1
			SecondLineCounter=0;
    2f24:	10 92 a9 00 	sts	0x00A9, r1
			LCD_VoidSendCommand(0x01,lcd);
    2f28:	fe 01       	movw	r30, r28
    2f2a:	ea 5a       	subi	r30, 0xAA	; 170
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	20 81       	ld	r18, Z
    2f30:	31 81       	ldd	r19, Z+1	; 0x01
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	b9 01       	movw	r22, r18
    2f36:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_VoidSendCommand>
    2f3a:	73 c1       	rjmp	.+742    	; 0x3222 <LCD_VoidSendChar+0x966>
		}
	}
	else if(Type->OneLine==YES&&Type->TwoLines==NO){
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	e8 5a       	subi	r30, 0xA8	; 168
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	01 90       	ld	r0, Z+
    2f44:	f0 81       	ld	r31, Z
    2f46:	e0 2d       	mov	r30, r0
    2f48:	80 81       	ld	r24, Z
    2f4a:	8a 30       	cpi	r24, 0x0A	; 10
    2f4c:	09 f0       	breq	.+2      	; 0x2f50 <LCD_VoidSendChar+0x694>
    2f4e:	69 c1       	rjmp	.+722    	; 0x3222 <LCD_VoidSendChar+0x966>
    2f50:	fe 01       	movw	r30, r28
    2f52:	e8 5a       	subi	r30, 0xA8	; 168
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	01 90       	ld	r0, Z+
    2f58:	f0 81       	ld	r31, Z
    2f5a:	e0 2d       	mov	r30, r0
    2f5c:	81 81       	ldd	r24, Z+1	; 0x01
    2f5e:	84 31       	cpi	r24, 0x14	; 20
    2f60:	09 f0       	breq	.+2      	; 0x2f64 <LCD_VoidSendChar+0x6a8>
    2f62:	5f c1       	rjmp	.+702    	; 0x3222 <LCD_VoidSendChar+0x966>
			if(SwitchingCounter<16&&Local_Char!='\0'){
    2f64:	80 91 aa 00 	lds	r24, 0x00AA
    2f68:	80 31       	cpi	r24, 0x10	; 16
    2f6a:	08 f0       	brcs	.+2      	; 0x2f6e <LCD_VoidSendChar+0x6b2>
    2f6c:	56 c1       	rjmp	.+684    	; 0x321a <LCD_VoidSendChar+0x95e>
    2f6e:	fe 01       	movw	r30, r28
    2f70:	eb 5a       	subi	r30, 0xAB	; 171
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	80 81       	ld	r24, Z
    2f76:	88 23       	and	r24, r24
    2f78:	09 f4       	brne	.+2      	; 0x2f7c <LCD_VoidSendChar+0x6c0>
    2f7a:	4f c1       	rjmp	.+670    	; 0x321a <LCD_VoidSendChar+0x95e>
				LCD_VoidGoToXY(FirstLineCounter,0,lcd);
    2f7c:	80 91 a8 00 	lds	r24, 0x00A8
    2f80:	fe 01       	movw	r30, r28
    2f82:	ea 5a       	subi	r30, 0xAA	; 170
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	20 81       	ld	r18, Z
    2f88:	31 81       	ldd	r19, Z+1	; 0x01
    2f8a:	60 e0       	ldi	r22, 0x00	; 0
    2f8c:	a9 01       	movw	r20, r18
    2f8e:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_VoidGoToXY>
				/*RS->LOw*/
				DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    2f92:	fe 01       	movw	r30, r28
    2f94:	ea 5a       	subi	r30, 0xAA	; 170
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	01 90       	ld	r0, Z+
    2f9a:	f0 81       	ld	r31, Z
    2f9c:	e0 2d       	mov	r30, r0
    2f9e:	80 81       	ld	r24, Z
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	ea 5a       	subi	r30, 0xAA	; 170
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	01 90       	ld	r0, Z+
    2fa8:	f0 81       	ld	r31, Z
    2faa:	e0 2d       	mov	r30, r0
    2fac:	91 81       	ldd	r25, Z+1	; 0x01
    2fae:	69 2f       	mov	r22, r25
    2fb0:	41 e0       	ldi	r20, 0x01	; 1
    2fb2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
				/*RW-> LOW*/
				DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	ea 5a       	subi	r30, 0xAA	; 170
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	01 90       	ld	r0, Z+
    2fbe:	f0 81       	ld	r31, Z
    2fc0:	e0 2d       	mov	r30, r0
    2fc2:	82 81       	ldd	r24, Z+2	; 0x02
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	ea 5a       	subi	r30, 0xAA	; 170
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	01 90       	ld	r0, Z+
    2fcc:	f0 81       	ld	r31, Z
    2fce:	e0 2d       	mov	r30, r0
    2fd0:	93 81       	ldd	r25, Z+3	; 0x03
    2fd2:	69 2f       	mov	r22, r25
    2fd4:	40 e0       	ldi	r20, 0x00	; 0
    2fd6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
				/*Group = Command*/
				DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    2fda:	fe 01       	movw	r30, r28
    2fdc:	ea 5a       	subi	r30, 0xAA	; 170
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	01 90       	ld	r0, Z+
    2fe2:	f0 81       	ld	r31, Z
    2fe4:	e0 2d       	mov	r30, r0
    2fe6:	86 81       	ldd	r24, Z+6	; 0x06
    2fe8:	fe 01       	movw	r30, r28
    2fea:	eb 5a       	subi	r30, 0xAB	; 171
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	60 81       	ld	r22, Z
    2ff0:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_ErrStateSetPortValue>
				/*Enable*/
				DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	ea 5a       	subi	r30, 0xAA	; 170
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	01 90       	ld	r0, Z+
    2ffc:	f0 81       	ld	r31, Z
    2ffe:	e0 2d       	mov	r30, r0
    3000:	84 81       	ldd	r24, Z+4	; 0x04
    3002:	fe 01       	movw	r30, r28
    3004:	ea 5a       	subi	r30, 0xAA	; 170
    3006:	ff 4f       	sbci	r31, 0xFF	; 255
    3008:	01 90       	ld	r0, Z+
    300a:	f0 81       	ld	r31, Z
    300c:	e0 2d       	mov	r30, r0
    300e:	95 81       	ldd	r25, Z+5	; 0x05
    3010:	69 2f       	mov	r22, r25
    3012:	41 e0       	ldi	r20, 0x01	; 1
    3014:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	a0 e8       	ldi	r26, 0x80	; 128
    301e:	bf e3       	ldi	r27, 0x3F	; 63
    3020:	89 8f       	std	Y+25, r24	; 0x19
    3022:	9a 8f       	std	Y+26, r25	; 0x1a
    3024:	ab 8f       	std	Y+27, r26	; 0x1b
    3026:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3028:	69 8d       	ldd	r22, Y+25	; 0x19
    302a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    302c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    302e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	4a ef       	ldi	r20, 0xFA	; 250
    3036:	54 e4       	ldi	r21, 0x44	; 68
    3038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	8d 8b       	std	Y+21, r24	; 0x15
    3042:	9e 8b       	std	Y+22, r25	; 0x16
    3044:	af 8b       	std	Y+23, r26	; 0x17
    3046:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3048:	6d 89       	ldd	r22, Y+21	; 0x15
    304a:	7e 89       	ldd	r23, Y+22	; 0x16
    304c:	8f 89       	ldd	r24, Y+23	; 0x17
    304e:	98 8d       	ldd	r25, Y+24	; 0x18
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	40 e8       	ldi	r20, 0x80	; 128
    3056:	5f e3       	ldi	r21, 0x3F	; 63
    3058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    305c:	88 23       	and	r24, r24
    305e:	2c f4       	brge	.+10     	; 0x306a <LCD_VoidSendChar+0x7ae>
		__ticks = 1;
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	9c 8b       	std	Y+20, r25	; 0x14
    3066:	8b 8b       	std	Y+19, r24	; 0x13
    3068:	3f c0       	rjmp	.+126    	; 0x30e8 <LCD_VoidSendChar+0x82c>
	else if (__tmp > 65535)
    306a:	6d 89       	ldd	r22, Y+21	; 0x15
    306c:	7e 89       	ldd	r23, Y+22	; 0x16
    306e:	8f 89       	ldd	r24, Y+23	; 0x17
    3070:	98 8d       	ldd	r25, Y+24	; 0x18
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	3f ef       	ldi	r19, 0xFF	; 255
    3076:	4f e7       	ldi	r20, 0x7F	; 127
    3078:	57 e4       	ldi	r21, 0x47	; 71
    307a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    307e:	18 16       	cp	r1, r24
    3080:	4c f5       	brge	.+82     	; 0x30d4 <LCD_VoidSendChar+0x818>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3082:	69 8d       	ldd	r22, Y+25	; 0x19
    3084:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3086:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3088:	9c 8d       	ldd	r25, Y+28	; 0x1c
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e2       	ldi	r20, 0x20	; 32
    3090:	51 e4       	ldi	r21, 0x41	; 65
    3092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	bc 01       	movw	r22, r24
    309c:	cd 01       	movw	r24, r26
    309e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	9c 8b       	std	Y+20, r25	; 0x14
    30a8:	8b 8b       	std	Y+19, r24	; 0x13
    30aa:	0f c0       	rjmp	.+30     	; 0x30ca <LCD_VoidSendChar+0x80e>
    30ac:	88 ec       	ldi	r24, 0xC8	; 200
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	9a 8b       	std	Y+18, r25	; 0x12
    30b2:	89 8b       	std	Y+17, r24	; 0x11
    30b4:	89 89       	ldd	r24, Y+17	; 0x11
    30b6:	9a 89       	ldd	r25, Y+18	; 0x12
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	f1 f7       	brne	.-4      	; 0x30b8 <LCD_VoidSendChar+0x7fc>
    30bc:	9a 8b       	std	Y+18, r25	; 0x12
    30be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c0:	8b 89       	ldd	r24, Y+19	; 0x13
    30c2:	9c 89       	ldd	r25, Y+20	; 0x14
    30c4:	01 97       	sbiw	r24, 0x01	; 1
    30c6:	9c 8b       	std	Y+20, r25	; 0x14
    30c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ca:	8b 89       	ldd	r24, Y+19	; 0x13
    30cc:	9c 89       	ldd	r25, Y+20	; 0x14
    30ce:	00 97       	sbiw	r24, 0x00	; 0
    30d0:	69 f7       	brne	.-38     	; 0x30ac <LCD_VoidSendChar+0x7f0>
    30d2:	14 c0       	rjmp	.+40     	; 0x30fc <LCD_VoidSendChar+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d4:	6d 89       	ldd	r22, Y+21	; 0x15
    30d6:	7e 89       	ldd	r23, Y+22	; 0x16
    30d8:	8f 89       	ldd	r24, Y+23	; 0x17
    30da:	98 8d       	ldd	r25, Y+24	; 0x18
    30dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	9c 8b       	std	Y+20, r25	; 0x14
    30e6:	8b 8b       	std	Y+19, r24	; 0x13
    30e8:	8b 89       	ldd	r24, Y+19	; 0x13
    30ea:	9c 89       	ldd	r25, Y+20	; 0x14
    30ec:	98 8b       	std	Y+16, r25	; 0x10
    30ee:	8f 87       	std	Y+15, r24	; 0x0f
    30f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    30f2:	98 89       	ldd	r25, Y+16	; 0x10
    30f4:	01 97       	sbiw	r24, 0x01	; 1
    30f6:	f1 f7       	brne	.-4      	; 0x30f4 <LCD_VoidSendChar+0x838>
    30f8:	98 8b       	std	Y+16, r25	; 0x10
    30fa:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1);
				DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    30fc:	fe 01       	movw	r30, r28
    30fe:	ea 5a       	subi	r30, 0xAA	; 170
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	01 90       	ld	r0, Z+
    3104:	f0 81       	ld	r31, Z
    3106:	e0 2d       	mov	r30, r0
    3108:	84 81       	ldd	r24, Z+4	; 0x04
    310a:	fe 01       	movw	r30, r28
    310c:	ea 5a       	subi	r30, 0xAA	; 170
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	01 90       	ld	r0, Z+
    3112:	f0 81       	ld	r31, Z
    3114:	e0 2d       	mov	r30, r0
    3116:	95 81       	ldd	r25, Z+5	; 0x05
    3118:	69 2f       	mov	r22, r25
    311a:	40 e0       	ldi	r20, 0x00	; 0
    311c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	a0 e8       	ldi	r26, 0x80	; 128
    3126:	bf e3       	ldi	r27, 0x3F	; 63
    3128:	8b 87       	std	Y+11, r24	; 0x0b
    312a:	9c 87       	std	Y+12, r25	; 0x0c
    312c:	ad 87       	std	Y+13, r26	; 0x0d
    312e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3130:	6b 85       	ldd	r22, Y+11	; 0x0b
    3132:	7c 85       	ldd	r23, Y+12	; 0x0c
    3134:	8d 85       	ldd	r24, Y+13	; 0x0d
    3136:	9e 85       	ldd	r25, Y+14	; 0x0e
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	4a ef       	ldi	r20, 0xFA	; 250
    313e:	54 e4       	ldi	r21, 0x44	; 68
    3140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3144:	dc 01       	movw	r26, r24
    3146:	cb 01       	movw	r24, r22
    3148:	8f 83       	std	Y+7, r24	; 0x07
    314a:	98 87       	std	Y+8, r25	; 0x08
    314c:	a9 87       	std	Y+9, r26	; 0x09
    314e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3150:	6f 81       	ldd	r22, Y+7	; 0x07
    3152:	78 85       	ldd	r23, Y+8	; 0x08
    3154:	89 85       	ldd	r24, Y+9	; 0x09
    3156:	9a 85       	ldd	r25, Y+10	; 0x0a
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	40 e8       	ldi	r20, 0x80	; 128
    315e:	5f e3       	ldi	r21, 0x3F	; 63
    3160:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3164:	88 23       	and	r24, r24
    3166:	2c f4       	brge	.+10     	; 0x3172 <LCD_VoidSendChar+0x8b6>
		__ticks = 1;
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	9e 83       	std	Y+6, r25	; 0x06
    316e:	8d 83       	std	Y+5, r24	; 0x05
    3170:	3f c0       	rjmp	.+126    	; 0x31f0 <LCD_VoidSendChar+0x934>
	else if (__tmp > 65535)
    3172:	6f 81       	ldd	r22, Y+7	; 0x07
    3174:	78 85       	ldd	r23, Y+8	; 0x08
    3176:	89 85       	ldd	r24, Y+9	; 0x09
    3178:	9a 85       	ldd	r25, Y+10	; 0x0a
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	3f ef       	ldi	r19, 0xFF	; 255
    317e:	4f e7       	ldi	r20, 0x7F	; 127
    3180:	57 e4       	ldi	r21, 0x47	; 71
    3182:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3186:	18 16       	cp	r1, r24
    3188:	4c f5       	brge	.+82     	; 0x31dc <LCD_VoidSendChar+0x920>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    318a:	6b 85       	ldd	r22, Y+11	; 0x0b
    318c:	7c 85       	ldd	r23, Y+12	; 0x0c
    318e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3190:	9e 85       	ldd	r25, Y+14	; 0x0e
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	40 e2       	ldi	r20, 0x20	; 32
    3198:	51 e4       	ldi	r21, 0x41	; 65
    319a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319e:	dc 01       	movw	r26, r24
    31a0:	cb 01       	movw	r24, r22
    31a2:	bc 01       	movw	r22, r24
    31a4:	cd 01       	movw	r24, r26
    31a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	9e 83       	std	Y+6, r25	; 0x06
    31b0:	8d 83       	std	Y+5, r24	; 0x05
    31b2:	0f c0       	rjmp	.+30     	; 0x31d2 <LCD_VoidSendChar+0x916>
    31b4:	88 ec       	ldi	r24, 0xC8	; 200
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	9c 83       	std	Y+4, r25	; 0x04
    31ba:	8b 83       	std	Y+3, r24	; 0x03
    31bc:	8b 81       	ldd	r24, Y+3	; 0x03
    31be:	9c 81       	ldd	r25, Y+4	; 0x04
    31c0:	01 97       	sbiw	r24, 0x01	; 1
    31c2:	f1 f7       	brne	.-4      	; 0x31c0 <LCD_VoidSendChar+0x904>
    31c4:	9c 83       	std	Y+4, r25	; 0x04
    31c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ca:	9e 81       	ldd	r25, Y+6	; 0x06
    31cc:	01 97       	sbiw	r24, 0x01	; 1
    31ce:	9e 83       	std	Y+6, r25	; 0x06
    31d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d2:	8d 81       	ldd	r24, Y+5	; 0x05
    31d4:	9e 81       	ldd	r25, Y+6	; 0x06
    31d6:	00 97       	sbiw	r24, 0x00	; 0
    31d8:	69 f7       	brne	.-38     	; 0x31b4 <LCD_VoidSendChar+0x8f8>
    31da:	14 c0       	rjmp	.+40     	; 0x3204 <LCD_VoidSendChar+0x948>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31dc:	6f 81       	ldd	r22, Y+7	; 0x07
    31de:	78 85       	ldd	r23, Y+8	; 0x08
    31e0:	89 85       	ldd	r24, Y+9	; 0x09
    31e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	9e 83       	std	Y+6, r25	; 0x06
    31ee:	8d 83       	std	Y+5, r24	; 0x05
    31f0:	8d 81       	ldd	r24, Y+5	; 0x05
    31f2:	9e 81       	ldd	r25, Y+6	; 0x06
    31f4:	9a 83       	std	Y+2, r25	; 0x02
    31f6:	89 83       	std	Y+1, r24	; 0x01
    31f8:	89 81       	ldd	r24, Y+1	; 0x01
    31fa:	9a 81       	ldd	r25, Y+2	; 0x02
    31fc:	01 97       	sbiw	r24, 0x01	; 1
    31fe:	f1 f7       	brne	.-4      	; 0x31fc <LCD_VoidSendChar+0x940>
    3200:	9a 83       	std	Y+2, r25	; 0x02
    3202:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1);
				SwitchingCounter++;
    3204:	80 91 aa 00 	lds	r24, 0x00AA
    3208:	8f 5f       	subi	r24, 0xFF	; 255
    320a:	80 93 aa 00 	sts	0x00AA, r24
				FirstLineCounter++;
    320e:	80 91 a8 00 	lds	r24, 0x00A8
    3212:	8f 5f       	subi	r24, 0xFF	; 255
    3214:	80 93 a8 00 	sts	0x00A8, r24
    3218:	04 c0       	rjmp	.+8      	; 0x3222 <LCD_VoidSendChar+0x966>
			}
			else{
				FirstLineCounter=0;
    321a:	10 92 a8 00 	sts	0x00A8, r1
				SwitchingCounter=0;
    321e:	10 92 aa 00 	sts	0x00AA, r1
				//LCD_VoidSendCommand(0x01,lcd);
			}
		}
	return 0;
    3222:	80 e0       	ldi	r24, 0x00	; 0

}
    3224:	c7 5a       	subi	r28, 0xA7	; 167
    3226:	df 4f       	sbci	r29, 0xFF	; 255
    3228:	0f b6       	in	r0, 0x3f	; 63
    322a:	f8 94       	cli
    322c:	de bf       	out	0x3e, r29	; 62
    322e:	0f be       	out	0x3f, r0	; 63
    3230:	cd bf       	out	0x3d, r28	; 61
    3232:	cf 91       	pop	r28
    3234:	df 91       	pop	r29
    3236:	1f 91       	pop	r17
    3238:	0f 91       	pop	r16
    323a:	08 95       	ret

0000323c <LCD_VoidInit>:
void LCD_VoidInit(LCD_Info *lcd){
    323c:	df 93       	push	r29
    323e:	cf 93       	push	r28
    3240:	cd b7       	in	r28, 0x3d	; 61
    3242:	de b7       	in	r29, 0x3e	; 62
    3244:	ea 97       	sbiw	r28, 0x3a	; 58
    3246:	0f b6       	in	r0, 0x3f	; 63
    3248:	f8 94       	cli
    324a:	de bf       	out	0x3e, r29	; 62
    324c:	0f be       	out	0x3f, r0	; 63
    324e:	cd bf       	out	0x3d, r28	; 61
    3250:	9a af       	std	Y+58, r25	; 0x3a
    3252:	89 af       	std	Y+57, r24	; 0x39
	/*Set Directions*/
	DIO_ErrStateSetPinDirection(lcd->RS_group,lcd->RS_pin,DIO_OUT);
    3254:	e9 ad       	ldd	r30, Y+57	; 0x39
    3256:	fa ad       	ldd	r31, Y+58	; 0x3a
    3258:	80 81       	ld	r24, Z
    325a:	e9 ad       	ldd	r30, Y+57	; 0x39
    325c:	fa ad       	ldd	r31, Y+58	; 0x3a
    325e:	91 81       	ldd	r25, Z+1	; 0x01
    3260:	69 2f       	mov	r22, r25
    3262:	41 e0       	ldi	r20, 0x01	; 1
    3264:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->RW_group,lcd->RW_pin,DIO_OUT);
    3268:	e9 ad       	ldd	r30, Y+57	; 0x39
    326a:	fa ad       	ldd	r31, Y+58	; 0x3a
    326c:	82 81       	ldd	r24, Z+2	; 0x02
    326e:	e9 ad       	ldd	r30, Y+57	; 0x39
    3270:	fa ad       	ldd	r31, Y+58	; 0x3a
    3272:	93 81       	ldd	r25, Z+3	; 0x03
    3274:	69 2f       	mov	r22, r25
    3276:	41 e0       	ldi	r20, 0x01	; 1
    3278:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->E_group,lcd->E_pin,DIO_OUT);
    327c:	e9 ad       	ldd	r30, Y+57	; 0x39
    327e:	fa ad       	ldd	r31, Y+58	; 0x3a
    3280:	84 81       	ldd	r24, Z+4	; 0x04
    3282:	e9 ad       	ldd	r30, Y+57	; 0x39
    3284:	fa ad       	ldd	r31, Y+58	; 0x3a
    3286:	95 81       	ldd	r25, Z+5	; 0x05
    3288:	69 2f       	mov	r22, r25
    328a:	41 e0       	ldi	r20, 0x01	; 1
    328c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetGroupDirection(lcd->Data_group,0xFF);
    3290:	e9 ad       	ldd	r30, Y+57	; 0x39
    3292:	fa ad       	ldd	r31, Y+58	; 0x3a
    3294:	86 81       	ldd	r24, Z+6	; 0x06
    3296:	6f ef       	ldi	r22, 0xFF	; 255
    3298:	0e 94 a6 0a 	call	0x154c	; 0x154c <DIO_ErrStateSetGroupDirection>
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	a0 e2       	ldi	r26, 0x20	; 32
    32a2:	b2 e4       	ldi	r27, 0x42	; 66
    32a4:	8d ab       	std	Y+53, r24	; 0x35
    32a6:	9e ab       	std	Y+54, r25	; 0x36
    32a8:	af ab       	std	Y+55, r26	; 0x37
    32aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ac:	6d a9       	ldd	r22, Y+53	; 0x35
    32ae:	7e a9       	ldd	r23, Y+54	; 0x36
    32b0:	8f a9       	ldd	r24, Y+55	; 0x37
    32b2:	98 ad       	ldd	r25, Y+56	; 0x38
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	4a ef       	ldi	r20, 0xFA	; 250
    32ba:	54 e4       	ldi	r21, 0x44	; 68
    32bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	89 ab       	std	Y+49, r24	; 0x31
    32c6:	9a ab       	std	Y+50, r25	; 0x32
    32c8:	ab ab       	std	Y+51, r26	; 0x33
    32ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32cc:	69 a9       	ldd	r22, Y+49	; 0x31
    32ce:	7a a9       	ldd	r23, Y+50	; 0x32
    32d0:	8b a9       	ldd	r24, Y+51	; 0x33
    32d2:	9c a9       	ldd	r25, Y+52	; 0x34
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	40 e8       	ldi	r20, 0x80	; 128
    32da:	5f e3       	ldi	r21, 0x3F	; 63
    32dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32e0:	88 23       	and	r24, r24
    32e2:	2c f4       	brge	.+10     	; 0x32ee <LCD_VoidInit+0xb2>
		__ticks = 1;
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	98 ab       	std	Y+48, r25	; 0x30
    32ea:	8f a7       	std	Y+47, r24	; 0x2f
    32ec:	3f c0       	rjmp	.+126    	; 0x336c <LCD_VoidInit+0x130>
	else if (__tmp > 65535)
    32ee:	69 a9       	ldd	r22, Y+49	; 0x31
    32f0:	7a a9       	ldd	r23, Y+50	; 0x32
    32f2:	8b a9       	ldd	r24, Y+51	; 0x33
    32f4:	9c a9       	ldd	r25, Y+52	; 0x34
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	3f ef       	ldi	r19, 0xFF	; 255
    32fa:	4f e7       	ldi	r20, 0x7F	; 127
    32fc:	57 e4       	ldi	r21, 0x47	; 71
    32fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3302:	18 16       	cp	r1, r24
    3304:	4c f5       	brge	.+82     	; 0x3358 <LCD_VoidInit+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3306:	6d a9       	ldd	r22, Y+53	; 0x35
    3308:	7e a9       	ldd	r23, Y+54	; 0x36
    330a:	8f a9       	ldd	r24, Y+55	; 0x37
    330c:	98 ad       	ldd	r25, Y+56	; 0x38
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	40 e2       	ldi	r20, 0x20	; 32
    3314:	51 e4       	ldi	r21, 0x41	; 65
    3316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	bc 01       	movw	r22, r24
    3320:	cd 01       	movw	r24, r26
    3322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	98 ab       	std	Y+48, r25	; 0x30
    332c:	8f a7       	std	Y+47, r24	; 0x2f
    332e:	0f c0       	rjmp	.+30     	; 0x334e <LCD_VoidInit+0x112>
    3330:	88 ec       	ldi	r24, 0xC8	; 200
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	9e a7       	std	Y+46, r25	; 0x2e
    3336:	8d a7       	std	Y+45, r24	; 0x2d
    3338:	8d a5       	ldd	r24, Y+45	; 0x2d
    333a:	9e a5       	ldd	r25, Y+46	; 0x2e
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	f1 f7       	brne	.-4      	; 0x333c <LCD_VoidInit+0x100>
    3340:	9e a7       	std	Y+46, r25	; 0x2e
    3342:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3344:	8f a5       	ldd	r24, Y+47	; 0x2f
    3346:	98 a9       	ldd	r25, Y+48	; 0x30
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	98 ab       	std	Y+48, r25	; 0x30
    334c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    334e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3350:	98 a9       	ldd	r25, Y+48	; 0x30
    3352:	00 97       	sbiw	r24, 0x00	; 0
    3354:	69 f7       	brne	.-38     	; 0x3330 <LCD_VoidInit+0xf4>
    3356:	14 c0       	rjmp	.+40     	; 0x3380 <LCD_VoidInit+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3358:	69 a9       	ldd	r22, Y+49	; 0x31
    335a:	7a a9       	ldd	r23, Y+50	; 0x32
    335c:	8b a9       	ldd	r24, Y+51	; 0x33
    335e:	9c a9       	ldd	r25, Y+52	; 0x34
    3360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	98 ab       	std	Y+48, r25	; 0x30
    336a:	8f a7       	std	Y+47, r24	; 0x2f
    336c:	8f a5       	ldd	r24, Y+47	; 0x2f
    336e:	98 a9       	ldd	r25, Y+48	; 0x30
    3370:	9c a7       	std	Y+44, r25	; 0x2c
    3372:	8b a7       	std	Y+43, r24	; 0x2b
    3374:	8b a5       	ldd	r24, Y+43	; 0x2b
    3376:	9c a5       	ldd	r25, Y+44	; 0x2c
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	f1 f7       	brne	.-4      	; 0x3378 <LCD_VoidInit+0x13c>
    337c:	9c a7       	std	Y+44, r25	; 0x2c
    337e:	8b a7       	std	Y+43, r24	; 0x2b
	/*Wait more than 30 ms*/
	_delay_ms(40);
	/*Sent function set*/
	LCD_VoidSendCommand(LCD_Set8Bit2Line5x8,lcd);
    3380:	29 ad       	ldd	r18, Y+57	; 0x39
    3382:	3a ad       	ldd	r19, Y+58	; 0x3a
    3384:	88 e3       	ldi	r24, 0x38	; 56
    3386:	b9 01       	movw	r22, r18
    3388:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_VoidSendCommand>
    338c:	80 e0       	ldi	r24, 0x00	; 0
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	a0 e8       	ldi	r26, 0x80	; 128
    3392:	bf e3       	ldi	r27, 0x3F	; 63
    3394:	8f a3       	std	Y+39, r24	; 0x27
    3396:	98 a7       	std	Y+40, r25	; 0x28
    3398:	a9 a7       	std	Y+41, r26	; 0x29
    339a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    339c:	6f a1       	ldd	r22, Y+39	; 0x27
    339e:	78 a5       	ldd	r23, Y+40	; 0x28
    33a0:	89 a5       	ldd	r24, Y+41	; 0x29
    33a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	4a ef       	ldi	r20, 0xFA	; 250
    33aa:	54 e4       	ldi	r21, 0x44	; 68
    33ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b0:	dc 01       	movw	r26, r24
    33b2:	cb 01       	movw	r24, r22
    33b4:	8b a3       	std	Y+35, r24	; 0x23
    33b6:	9c a3       	std	Y+36, r25	; 0x24
    33b8:	ad a3       	std	Y+37, r26	; 0x25
    33ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33bc:	6b a1       	ldd	r22, Y+35	; 0x23
    33be:	7c a1       	ldd	r23, Y+36	; 0x24
    33c0:	8d a1       	ldd	r24, Y+37	; 0x25
    33c2:	9e a1       	ldd	r25, Y+38	; 0x26
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	40 e8       	ldi	r20, 0x80	; 128
    33ca:	5f e3       	ldi	r21, 0x3F	; 63
    33cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33d0:	88 23       	and	r24, r24
    33d2:	2c f4       	brge	.+10     	; 0x33de <LCD_VoidInit+0x1a2>
		__ticks = 1;
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	9a a3       	std	Y+34, r25	; 0x22
    33da:	89 a3       	std	Y+33, r24	; 0x21
    33dc:	3f c0       	rjmp	.+126    	; 0x345c <LCD_VoidInit+0x220>
	else if (__tmp > 65535)
    33de:	6b a1       	ldd	r22, Y+35	; 0x23
    33e0:	7c a1       	ldd	r23, Y+36	; 0x24
    33e2:	8d a1       	ldd	r24, Y+37	; 0x25
    33e4:	9e a1       	ldd	r25, Y+38	; 0x26
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	3f ef       	ldi	r19, 0xFF	; 255
    33ea:	4f e7       	ldi	r20, 0x7F	; 127
    33ec:	57 e4       	ldi	r21, 0x47	; 71
    33ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33f2:	18 16       	cp	r1, r24
    33f4:	4c f5       	brge	.+82     	; 0x3448 <LCD_VoidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f6:	6f a1       	ldd	r22, Y+39	; 0x27
    33f8:	78 a5       	ldd	r23, Y+40	; 0x28
    33fa:	89 a5       	ldd	r24, Y+41	; 0x29
    33fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	40 e2       	ldi	r20, 0x20	; 32
    3404:	51 e4       	ldi	r21, 0x41	; 65
    3406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	bc 01       	movw	r22, r24
    3410:	cd 01       	movw	r24, r26
    3412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	9a a3       	std	Y+34, r25	; 0x22
    341c:	89 a3       	std	Y+33, r24	; 0x21
    341e:	0f c0       	rjmp	.+30     	; 0x343e <LCD_VoidInit+0x202>
    3420:	88 ec       	ldi	r24, 0xC8	; 200
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	98 a3       	std	Y+32, r25	; 0x20
    3426:	8f 8f       	std	Y+31, r24	; 0x1f
    3428:	8f 8d       	ldd	r24, Y+31	; 0x1f
    342a:	98 a1       	ldd	r25, Y+32	; 0x20
    342c:	01 97       	sbiw	r24, 0x01	; 1
    342e:	f1 f7       	brne	.-4      	; 0x342c <LCD_VoidInit+0x1f0>
    3430:	98 a3       	std	Y+32, r25	; 0x20
    3432:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3434:	89 a1       	ldd	r24, Y+33	; 0x21
    3436:	9a a1       	ldd	r25, Y+34	; 0x22
    3438:	01 97       	sbiw	r24, 0x01	; 1
    343a:	9a a3       	std	Y+34, r25	; 0x22
    343c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    343e:	89 a1       	ldd	r24, Y+33	; 0x21
    3440:	9a a1       	ldd	r25, Y+34	; 0x22
    3442:	00 97       	sbiw	r24, 0x00	; 0
    3444:	69 f7       	brne	.-38     	; 0x3420 <LCD_VoidInit+0x1e4>
    3446:	14 c0       	rjmp	.+40     	; 0x3470 <LCD_VoidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3448:	6b a1       	ldd	r22, Y+35	; 0x23
    344a:	7c a1       	ldd	r23, Y+36	; 0x24
    344c:	8d a1       	ldd	r24, Y+37	; 0x25
    344e:	9e a1       	ldd	r25, Y+38	; 0x26
    3450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	9a a3       	std	Y+34, r25	; 0x22
    345a:	89 a3       	std	Y+33, r24	; 0x21
    345c:	89 a1       	ldd	r24, Y+33	; 0x21
    345e:	9a a1       	ldd	r25, Y+34	; 0x22
    3460:	9e 8f       	std	Y+30, r25	; 0x1e
    3462:	8d 8f       	std	Y+29, r24	; 0x1d
    3464:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3466:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	f1 f7       	brne	.-4      	; 0x3468 <LCD_VoidInit+0x22c>
    346c:	9e 8f       	std	Y+30, r25	; 0x1e
    346e:	8d 8f       	std	Y+29, r24	; 0x1d
	/*WAIT 39us*/
	_delay_ms(1);
	LCD_VoidSendCommand(LCD_CursorON,lcd);
    3470:	29 ad       	ldd	r18, Y+57	; 0x39
    3472:	3a ad       	ldd	r19, Y+58	; 0x3a
    3474:	8e e0       	ldi	r24, 0x0E	; 14
    3476:	b9 01       	movw	r22, r18
    3478:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_VoidSendCommand>
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	a0 e8       	ldi	r26, 0x80	; 128
    3482:	bf e3       	ldi	r27, 0x3F	; 63
    3484:	89 8f       	std	Y+25, r24	; 0x19
    3486:	9a 8f       	std	Y+26, r25	; 0x1a
    3488:	ab 8f       	std	Y+27, r26	; 0x1b
    348a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    348c:	69 8d       	ldd	r22, Y+25	; 0x19
    348e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3490:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3492:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	4a ef       	ldi	r20, 0xFA	; 250
    349a:	54 e4       	ldi	r21, 0x44	; 68
    349c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	8d 8b       	std	Y+21, r24	; 0x15
    34a6:	9e 8b       	std	Y+22, r25	; 0x16
    34a8:	af 8b       	std	Y+23, r26	; 0x17
    34aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34ac:	6d 89       	ldd	r22, Y+21	; 0x15
    34ae:	7e 89       	ldd	r23, Y+22	; 0x16
    34b0:	8f 89       	ldd	r24, Y+23	; 0x17
    34b2:	98 8d       	ldd	r25, Y+24	; 0x18
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	40 e8       	ldi	r20, 0x80	; 128
    34ba:	5f e3       	ldi	r21, 0x3F	; 63
    34bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34c0:	88 23       	and	r24, r24
    34c2:	2c f4       	brge	.+10     	; 0x34ce <LCD_VoidInit+0x292>
		__ticks = 1;
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	9c 8b       	std	Y+20, r25	; 0x14
    34ca:	8b 8b       	std	Y+19, r24	; 0x13
    34cc:	3f c0       	rjmp	.+126    	; 0x354c <LCD_VoidInit+0x310>
	else if (__tmp > 65535)
    34ce:	6d 89       	ldd	r22, Y+21	; 0x15
    34d0:	7e 89       	ldd	r23, Y+22	; 0x16
    34d2:	8f 89       	ldd	r24, Y+23	; 0x17
    34d4:	98 8d       	ldd	r25, Y+24	; 0x18
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	3f ef       	ldi	r19, 0xFF	; 255
    34da:	4f e7       	ldi	r20, 0x7F	; 127
    34dc:	57 e4       	ldi	r21, 0x47	; 71
    34de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34e2:	18 16       	cp	r1, r24
    34e4:	4c f5       	brge	.+82     	; 0x3538 <LCD_VoidInit+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e6:	69 8d       	ldd	r22, Y+25	; 0x19
    34e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	40 e2       	ldi	r20, 0x20	; 32
    34f4:	51 e4       	ldi	r21, 0x41	; 65
    34f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	bc 01       	movw	r22, r24
    3500:	cd 01       	movw	r24, r26
    3502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	9c 8b       	std	Y+20, r25	; 0x14
    350c:	8b 8b       	std	Y+19, r24	; 0x13
    350e:	0f c0       	rjmp	.+30     	; 0x352e <LCD_VoidInit+0x2f2>
    3510:	88 ec       	ldi	r24, 0xC8	; 200
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	9a 8b       	std	Y+18, r25	; 0x12
    3516:	89 8b       	std	Y+17, r24	; 0x11
    3518:	89 89       	ldd	r24, Y+17	; 0x11
    351a:	9a 89       	ldd	r25, Y+18	; 0x12
    351c:	01 97       	sbiw	r24, 0x01	; 1
    351e:	f1 f7       	brne	.-4      	; 0x351c <LCD_VoidInit+0x2e0>
    3520:	9a 8b       	std	Y+18, r25	; 0x12
    3522:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3524:	8b 89       	ldd	r24, Y+19	; 0x13
    3526:	9c 89       	ldd	r25, Y+20	; 0x14
    3528:	01 97       	sbiw	r24, 0x01	; 1
    352a:	9c 8b       	std	Y+20, r25	; 0x14
    352c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    352e:	8b 89       	ldd	r24, Y+19	; 0x13
    3530:	9c 89       	ldd	r25, Y+20	; 0x14
    3532:	00 97       	sbiw	r24, 0x00	; 0
    3534:	69 f7       	brne	.-38     	; 0x3510 <LCD_VoidInit+0x2d4>
    3536:	14 c0       	rjmp	.+40     	; 0x3560 <LCD_VoidInit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3538:	6d 89       	ldd	r22, Y+21	; 0x15
    353a:	7e 89       	ldd	r23, Y+22	; 0x16
    353c:	8f 89       	ldd	r24, Y+23	; 0x17
    353e:	98 8d       	ldd	r25, Y+24	; 0x18
    3540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3544:	dc 01       	movw	r26, r24
    3546:	cb 01       	movw	r24, r22
    3548:	9c 8b       	std	Y+20, r25	; 0x14
    354a:	8b 8b       	std	Y+19, r24	; 0x13
    354c:	8b 89       	ldd	r24, Y+19	; 0x13
    354e:	9c 89       	ldd	r25, Y+20	; 0x14
    3550:	98 8b       	std	Y+16, r25	; 0x10
    3552:	8f 87       	std	Y+15, r24	; 0x0f
    3554:	8f 85       	ldd	r24, Y+15	; 0x0f
    3556:	98 89       	ldd	r25, Y+16	; 0x10
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	f1 f7       	brne	.-4      	; 0x3558 <LCD_VoidInit+0x31c>
    355c:	98 8b       	std	Y+16, r25	; 0x10
    355e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*LCD Clear Display*/
	LCD_VoidSendCommand(LCD_ClearDisplay,lcd);
    3560:	29 ad       	ldd	r18, Y+57	; 0x39
    3562:	3a ad       	ldd	r19, Y+58	; 0x3a
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	b9 01       	movw	r22, r18
    3568:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_VoidSendCommand>
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	a0 e8       	ldi	r26, 0x80	; 128
    3572:	bf e3       	ldi	r27, 0x3F	; 63
    3574:	8b 87       	std	Y+11, r24	; 0x0b
    3576:	9c 87       	std	Y+12, r25	; 0x0c
    3578:	ad 87       	std	Y+13, r26	; 0x0d
    357a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    357c:	6b 85       	ldd	r22, Y+11	; 0x0b
    357e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3580:	8d 85       	ldd	r24, Y+13	; 0x0d
    3582:	9e 85       	ldd	r25, Y+14	; 0x0e
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	4a ef       	ldi	r20, 0xFA	; 250
    358a:	54 e4       	ldi	r21, 0x44	; 68
    358c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	8f 83       	std	Y+7, r24	; 0x07
    3596:	98 87       	std	Y+8, r25	; 0x08
    3598:	a9 87       	std	Y+9, r26	; 0x09
    359a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    359c:	6f 81       	ldd	r22, Y+7	; 0x07
    359e:	78 85       	ldd	r23, Y+8	; 0x08
    35a0:	89 85       	ldd	r24, Y+9	; 0x09
    35a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	40 e8       	ldi	r20, 0x80	; 128
    35aa:	5f e3       	ldi	r21, 0x3F	; 63
    35ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35b0:	88 23       	and	r24, r24
    35b2:	2c f4       	brge	.+10     	; 0x35be <LCD_VoidInit+0x382>
		__ticks = 1;
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	9e 83       	std	Y+6, r25	; 0x06
    35ba:	8d 83       	std	Y+5, r24	; 0x05
    35bc:	3f c0       	rjmp	.+126    	; 0x363c <LCD_VoidInit+0x400>
	else if (__tmp > 65535)
    35be:	6f 81       	ldd	r22, Y+7	; 0x07
    35c0:	78 85       	ldd	r23, Y+8	; 0x08
    35c2:	89 85       	ldd	r24, Y+9	; 0x09
    35c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c6:	20 e0       	ldi	r18, 0x00	; 0
    35c8:	3f ef       	ldi	r19, 0xFF	; 255
    35ca:	4f e7       	ldi	r20, 0x7F	; 127
    35cc:	57 e4       	ldi	r21, 0x47	; 71
    35ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35d2:	18 16       	cp	r1, r24
    35d4:	4c f5       	brge	.+82     	; 0x3628 <LCD_VoidInit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    35d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    35da:	8d 85       	ldd	r24, Y+13	; 0x0d
    35dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	40 e2       	ldi	r20, 0x20	; 32
    35e4:	51 e4       	ldi	r21, 0x41	; 65
    35e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ea:	dc 01       	movw	r26, r24
    35ec:	cb 01       	movw	r24, r22
    35ee:	bc 01       	movw	r22, r24
    35f0:	cd 01       	movw	r24, r26
    35f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	9e 83       	std	Y+6, r25	; 0x06
    35fc:	8d 83       	std	Y+5, r24	; 0x05
    35fe:	0f c0       	rjmp	.+30     	; 0x361e <LCD_VoidInit+0x3e2>
    3600:	88 ec       	ldi	r24, 0xC8	; 200
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	9c 83       	std	Y+4, r25	; 0x04
    3606:	8b 83       	std	Y+3, r24	; 0x03
    3608:	8b 81       	ldd	r24, Y+3	; 0x03
    360a:	9c 81       	ldd	r25, Y+4	; 0x04
    360c:	01 97       	sbiw	r24, 0x01	; 1
    360e:	f1 f7       	brne	.-4      	; 0x360c <LCD_VoidInit+0x3d0>
    3610:	9c 83       	std	Y+4, r25	; 0x04
    3612:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3614:	8d 81       	ldd	r24, Y+5	; 0x05
    3616:	9e 81       	ldd	r25, Y+6	; 0x06
    3618:	01 97       	sbiw	r24, 0x01	; 1
    361a:	9e 83       	std	Y+6, r25	; 0x06
    361c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    361e:	8d 81       	ldd	r24, Y+5	; 0x05
    3620:	9e 81       	ldd	r25, Y+6	; 0x06
    3622:	00 97       	sbiw	r24, 0x00	; 0
    3624:	69 f7       	brne	.-38     	; 0x3600 <LCD_VoidInit+0x3c4>
    3626:	14 c0       	rjmp	.+40     	; 0x3650 <LCD_VoidInit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3628:	6f 81       	ldd	r22, Y+7	; 0x07
    362a:	78 85       	ldd	r23, Y+8	; 0x08
    362c:	89 85       	ldd	r24, Y+9	; 0x09
    362e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	9e 83       	std	Y+6, r25	; 0x06
    363a:	8d 83       	std	Y+5, r24	; 0x05
    363c:	8d 81       	ldd	r24, Y+5	; 0x05
    363e:	9e 81       	ldd	r25, Y+6	; 0x06
    3640:	9a 83       	std	Y+2, r25	; 0x02
    3642:	89 83       	std	Y+1, r24	; 0x01
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	9a 81       	ldd	r25, Y+2	; 0x02
    3648:	01 97       	sbiw	r24, 0x01	; 1
    364a:	f1 f7       	brne	.-4      	; 0x3648 <LCD_VoidInit+0x40c>
    364c:	9a 83       	std	Y+2, r25	; 0x02
    364e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    3650:	ea 96       	adiw	r28, 0x3a	; 58
    3652:	0f b6       	in	r0, 0x3f	; 63
    3654:	f8 94       	cli
    3656:	de bf       	out	0x3e, r29	; 62
    3658:	0f be       	out	0x3f, r0	; 63
    365a:	cd bf       	out	0x3d, r28	; 61
    365c:	cf 91       	pop	r28
    365e:	df 91       	pop	r29
    3660:	08 95       	ret

00003662 <LCD_VoidSendString>:

void LCD_VoidSendString(u8 *Address_String,LCD_Info *lcd,LCD_Line_Info *Type){
    3662:	df 93       	push	r29
    3664:	cf 93       	push	r28
    3666:	00 d0       	rcall	.+0      	; 0x3668 <LCD_VoidSendString+0x6>
    3668:	00 d0       	rcall	.+0      	; 0x366a <LCD_VoidSendString+0x8>
    366a:	00 d0       	rcall	.+0      	; 0x366c <LCD_VoidSendString+0xa>
    366c:	cd b7       	in	r28, 0x3d	; 61
    366e:	de b7       	in	r29, 0x3e	; 62
    3670:	9a 83       	std	Y+2, r25	; 0x02
    3672:	89 83       	std	Y+1, r24	; 0x01
    3674:	7c 83       	std	Y+4, r23	; 0x04
    3676:	6b 83       	std	Y+3, r22	; 0x03
    3678:	5e 83       	std	Y+6, r21	; 0x06
    367a:	4d 83       	std	Y+5, r20	; 0x05
    367c:	0f c0       	rjmp	.+30     	; 0x369c <LCD_VoidSendString+0x3a>

	while (*Address_String != '\0') {
		// Send the current character to the LCD
		LCD_VoidSendChar(*Address_String, lcd,Type);
    367e:	e9 81       	ldd	r30, Y+1	; 0x01
    3680:	fa 81       	ldd	r31, Y+2	; 0x02
    3682:	80 81       	ld	r24, Z
    3684:	2b 81       	ldd	r18, Y+3	; 0x03
    3686:	3c 81       	ldd	r19, Y+4	; 0x04
    3688:	4d 81       	ldd	r20, Y+5	; 0x05
    368a:	5e 81       	ldd	r21, Y+6	; 0x06
    368c:	b9 01       	movw	r22, r18
    368e:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_VoidSendChar>
		Address_String++; // Move to the next character
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	9a 81       	ldd	r25, Y+2	; 0x02
    3696:	01 96       	adiw	r24, 0x01	; 1
    3698:	9a 83       	std	Y+2, r25	; 0x02
    369a:	89 83       	std	Y+1, r24	; 0x01

}

void LCD_VoidSendString(u8 *Address_String,LCD_Info *lcd,LCD_Line_Info *Type){

	while (*Address_String != '\0') {
    369c:	e9 81       	ldd	r30, Y+1	; 0x01
    369e:	fa 81       	ldd	r31, Y+2	; 0x02
    36a0:	80 81       	ld	r24, Z
    36a2:	88 23       	and	r24, r24
    36a4:	61 f7       	brne	.-40     	; 0x367e <LCD_VoidSendString+0x1c>
		// Send the current character to the LCD
		LCD_VoidSendChar(*Address_String, lcd,Type);
		Address_String++; // Move to the next character
	}
}
    36a6:	26 96       	adiw	r28, 0x06	; 6
    36a8:	0f b6       	in	r0, 0x3f	; 63
    36aa:	f8 94       	cli
    36ac:	de bf       	out	0x3e, r29	; 62
    36ae:	0f be       	out	0x3f, r0	; 63
    36b0:	cd bf       	out	0x3d, r28	; 61
    36b2:	cf 91       	pop	r28
    36b4:	df 91       	pop	r29
    36b6:	08 95       	ret

000036b8 <LCD_VoidGoToXY>:
void LCD_VoidGoToXY(u8 Local_XPosition,u8 Local_YPosition, LCD_Info *lcd) {
    36b8:	df 93       	push	r29
    36ba:	cf 93       	push	r28
    36bc:	00 d0       	rcall	.+0      	; 0x36be <LCD_VoidGoToXY+0x6>
    36be:	00 d0       	rcall	.+0      	; 0x36c0 <LCD_VoidGoToXY+0x8>
    36c0:	0f 92       	push	r0
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
    36c6:	8a 83       	std	Y+2, r24	; 0x02
    36c8:	6b 83       	std	Y+3, r22	; 0x03
    36ca:	5d 83       	std	Y+5, r21	; 0x05
    36cc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Address = 0;
    36ce:	19 82       	std	Y+1, r1	; 0x01
	/* Calculate the DDRAM address based on the row and column */
	if(Local_YPosition == 0) {
    36d0:	8b 81       	ldd	r24, Y+3	; 0x03
    36d2:	88 23       	and	r24, r24
    36d4:	19 f4       	brne	.+6      	; 0x36dc <LCD_VoidGoToXY+0x24>
		Address = LCD_FirstLine + Local_XPosition;
    36d6:	8a 81       	ldd	r24, Y+2	; 0x02
    36d8:	89 83       	std	Y+1, r24	; 0x01
    36da:	03 c0       	rjmp	.+6      	; 0x36e2 <LCD_VoidGoToXY+0x2a>
	} else {
		Address = LCD_SecoundLine + Local_XPosition;
    36dc:	8a 81       	ldd	r24, Y+2	; 0x02
    36de:	80 5c       	subi	r24, 0xC0	; 192
    36e0:	89 83       	std	Y+1, r24	; 0x01
	}
	/* Send the command to set the DDRAM address */
	LCD_VoidSendCommand(LCD_SetAddressDDRAM | Address, lcd);
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
    36e4:	80 68       	ori	r24, 0x80	; 128
    36e6:	2c 81       	ldd	r18, Y+4	; 0x04
    36e8:	3d 81       	ldd	r19, Y+5	; 0x05
    36ea:	b9 01       	movw	r22, r18
    36ec:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_VoidSendCommand>
}
    36f0:	0f 90       	pop	r0
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	cf 91       	pop	r28
    36fc:	df 91       	pop	r29
    36fe:	08 95       	ret

00003700 <LCD_VoidSpecialCharacter>:

void LCD_VoidSpecialCharacter(u8 *pattern,u8 location, LCD_Info *lcd,LCD_Line_Info *Type){
    3700:	df 93       	push	r29
    3702:	cf 93       	push	r28
    3704:	cd b7       	in	r28, 0x3d	; 61
    3706:	de b7       	in	r29, 0x3e	; 62
    3708:	28 97       	sbiw	r28, 0x08	; 8
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	f8 94       	cli
    370e:	de bf       	out	0x3e, r29	; 62
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	cd bf       	out	0x3d, r28	; 61
    3714:	9b 83       	std	Y+3, r25	; 0x03
    3716:	8a 83       	std	Y+2, r24	; 0x02
    3718:	6c 83       	std	Y+4, r22	; 0x04
    371a:	5e 83       	std	Y+6, r21	; 0x06
    371c:	4d 83       	std	Y+5, r20	; 0x05
    371e:	38 87       	std	Y+8, r19	; 0x08
    3720:	2f 83       	std	Y+7, r18	; 0x07
	LCD_VoidSendCommand(LCD_SetAddressCGRAM+(location*8),lcd);
    3722:	8c 81       	ldd	r24, Y+4	; 0x04
    3724:	88 2f       	mov	r24, r24
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	08 96       	adiw	r24, 0x08	; 8
    372a:	88 0f       	add	r24, r24
    372c:	99 1f       	adc	r25, r25
    372e:	88 0f       	add	r24, r24
    3730:	99 1f       	adc	r25, r25
    3732:	88 0f       	add	r24, r24
    3734:	99 1f       	adc	r25, r25
    3736:	2d 81       	ldd	r18, Y+5	; 0x05
    3738:	3e 81       	ldd	r19, Y+6	; 0x06
    373a:	b9 01       	movw	r22, r18
    373c:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_VoidSendCommand>
	/* Sending the bitmap to CGRAM */
	for(u8 i=0;i<8;i++){
    3740:	19 82       	std	Y+1, r1	; 0x01
    3742:	13 c0       	rjmp	.+38     	; 0x376a <LCD_VoidSpecialCharacter+0x6a>
		LCD_VoidSendChar(pattern[i],lcd,Type);
    3744:	89 81       	ldd	r24, Y+1	; 0x01
    3746:	28 2f       	mov	r18, r24
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	8a 81       	ldd	r24, Y+2	; 0x02
    374c:	9b 81       	ldd	r25, Y+3	; 0x03
    374e:	fc 01       	movw	r30, r24
    3750:	e2 0f       	add	r30, r18
    3752:	f3 1f       	adc	r31, r19
    3754:	80 81       	ld	r24, Z
    3756:	2d 81       	ldd	r18, Y+5	; 0x05
    3758:	3e 81       	ldd	r19, Y+6	; 0x06
    375a:	4f 81       	ldd	r20, Y+7	; 0x07
    375c:	58 85       	ldd	r21, Y+8	; 0x08
    375e:	b9 01       	movw	r22, r18
    3760:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_VoidSendChar>
}

void LCD_VoidSpecialCharacter(u8 *pattern,u8 location, LCD_Info *lcd,LCD_Line_Info *Type){
	LCD_VoidSendCommand(LCD_SetAddressCGRAM+(location*8),lcd);
	/* Sending the bitmap to CGRAM */
	for(u8 i=0;i<8;i++){
    3764:	89 81       	ldd	r24, Y+1	; 0x01
    3766:	8f 5f       	subi	r24, 0xFF	; 255
    3768:	89 83       	std	Y+1, r24	; 0x01
    376a:	89 81       	ldd	r24, Y+1	; 0x01
    376c:	88 30       	cpi	r24, 0x08	; 8
    376e:	50 f3       	brcs	.-44     	; 0x3744 <LCD_VoidSpecialCharacter+0x44>
		LCD_VoidSendChar(pattern[i],lcd,Type);
	}
	/*	Send the cursor to DDRAM + choose location */
	LCD_VoidGoToXY(1,1,lcd);
    3770:	2d 81       	ldd	r18, Y+5	; 0x05
    3772:	3e 81       	ldd	r19, Y+6	; 0x06
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	61 e0       	ldi	r22, 0x01	; 1
    3778:	a9 01       	movw	r20, r18
    377a:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <LCD_VoidGoToXY>
	LCD_VoidSendChar(location,lcd,Type);
    377e:	2d 81       	ldd	r18, Y+5	; 0x05
    3780:	3e 81       	ldd	r19, Y+6	; 0x06
    3782:	4f 81       	ldd	r20, Y+7	; 0x07
    3784:	58 85       	ldd	r21, Y+8	; 0x08
    3786:	8c 81       	ldd	r24, Y+4	; 0x04
    3788:	b9 01       	movw	r22, r18
    378a:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_VoidSendChar>
}
    378e:	28 96       	adiw	r28, 0x08	; 8
    3790:	0f b6       	in	r0, 0x3f	; 63
    3792:	f8 94       	cli
    3794:	de bf       	out	0x3e, r29	; 62
    3796:	0f be       	out	0x3f, r0	; 63
    3798:	cd bf       	out	0x3d, r28	; 61
    379a:	cf 91       	pop	r28
    379c:	df 91       	pop	r29
    379e:	08 95       	ret

000037a0 <LCD_VoidSendInt>:
void LCD_VoidSendInt(u32 Recieved_Number,LCD_Info *lcd,LCD_Line_Info *Type){
    37a0:	df 93       	push	r29
    37a2:	cf 93       	push	r28
    37a4:	cd b7       	in	r28, 0x3d	; 61
    37a6:	de b7       	in	r29, 0x3e	; 62
    37a8:	6c 97       	sbiw	r28, 0x1c	; 28
    37aa:	0f b6       	in	r0, 0x3f	; 63
    37ac:	f8 94       	cli
    37ae:	de bf       	out	0x3e, r29	; 62
    37b0:	0f be       	out	0x3f, r0	; 63
    37b2:	cd bf       	out	0x3d, r28	; 61
    37b4:	6d 8b       	std	Y+21, r22	; 0x15
    37b6:	7e 8b       	std	Y+22, r23	; 0x16
    37b8:	8f 8b       	std	Y+23, r24	; 0x17
    37ba:	98 8f       	std	Y+24, r25	; 0x18
    37bc:	5a 8f       	std	Y+26, r21	; 0x1a
    37be:	49 8f       	std	Y+25, r20	; 0x19
    37c0:	3c 8f       	std	Y+28, r19	; 0x1c
    37c2:	2b 8f       	std	Y+27, r18	; 0x1b
	u8 NumAsString[LCD_StringMax]={' '};
    37c4:	8a e0       	ldi	r24, 0x0A	; 10
    37c6:	fe 01       	movw	r30, r28
    37c8:	3b 96       	adiw	r30, 0x0b	; 11
    37ca:	df 01       	movw	r26, r30
    37cc:	98 2f       	mov	r25, r24
    37ce:	1d 92       	st	X+, r1
    37d0:	9a 95       	dec	r25
    37d2:	e9 f7       	brne	.-6      	; 0x37ce <LCD_VoidSendInt+0x2e>
    37d4:	80 e2       	ldi	r24, 0x20	; 32
    37d6:	8b 87       	std	Y+11, r24	; 0x0b
	s32 LCD_StringCounter=0,FORCOUNTER;
    37d8:	1f 82       	std	Y+7, r1	; 0x07
    37da:	18 86       	std	Y+8, r1	; 0x08
    37dc:	19 86       	std	Y+9, r1	; 0x09
    37de:	1a 86       	std	Y+10, r1	; 0x0a
	u8 temp,Err=1;
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	89 83       	std	Y+1, r24	; 0x01

	if(Recieved_Number==0){
    37e4:	8d 89       	ldd	r24, Y+21	; 0x15
    37e6:	9e 89       	ldd	r25, Y+22	; 0x16
    37e8:	af 89       	ldd	r26, Y+23	; 0x17
    37ea:	b8 8d       	ldd	r27, Y+24	; 0x18
    37ec:	00 97       	sbiw	r24, 0x00	; 0
    37ee:	a1 05       	cpc	r26, r1
    37f0:	b1 05       	cpc	r27, r1
    37f2:	09 f0       	breq	.+2      	; 0x37f6 <LCD_VoidSendInt+0x56>
    37f4:	52 c0       	rjmp	.+164    	; 0x389a <LCD_VoidSendInt+0xfa>
		LCD_VoidSendChar('0',lcd,Type);
    37f6:	29 8d       	ldd	r18, Y+25	; 0x19
    37f8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    37fa:	4b 8d       	ldd	r20, Y+27	; 0x1b
    37fc:	5c 8d       	ldd	r21, Y+28	; 0x1c
    37fe:	80 e3       	ldi	r24, 0x30	; 48
    3800:	b9 01       	movw	r22, r18
    3802:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_VoidSendChar>
    3806:	52 c0       	rjmp	.+164    	; 0x38ac <LCD_VoidSendInt+0x10c>
	}
	else{
		while(Recieved_Number!=0)
		{
			temp=Recieved_Number%10;
    3808:	8d 89       	ldd	r24, Y+21	; 0x15
    380a:	9e 89       	ldd	r25, Y+22	; 0x16
    380c:	af 89       	ldd	r26, Y+23	; 0x17
    380e:	b8 8d       	ldd	r27, Y+24	; 0x18
    3810:	2a e0       	ldi	r18, 0x0A	; 10
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	40 e0       	ldi	r20, 0x00	; 0
    3816:	50 e0       	ldi	r21, 0x00	; 0
    3818:	bc 01       	movw	r22, r24
    381a:	cd 01       	movw	r24, r26
    381c:	0e 94 29 20 	call	0x4052	; 0x4052 <__udivmodsi4>
    3820:	dc 01       	movw	r26, r24
    3822:	cb 01       	movw	r24, r22
    3824:	8a 83       	std	Y+2, r24	; 0x02
			Recieved_Number=Recieved_Number-temp;
    3826:	8a 81       	ldd	r24, Y+2	; 0x02
    3828:	28 2f       	mov	r18, r24
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	40 e0       	ldi	r20, 0x00	; 0
    382e:	50 e0       	ldi	r21, 0x00	; 0
    3830:	8d 89       	ldd	r24, Y+21	; 0x15
    3832:	9e 89       	ldd	r25, Y+22	; 0x16
    3834:	af 89       	ldd	r26, Y+23	; 0x17
    3836:	b8 8d       	ldd	r27, Y+24	; 0x18
    3838:	82 1b       	sub	r24, r18
    383a:	93 0b       	sbc	r25, r19
    383c:	a4 0b       	sbc	r26, r20
    383e:	b5 0b       	sbc	r27, r21
    3840:	8d 8b       	std	Y+21, r24	; 0x15
    3842:	9e 8b       	std	Y+22, r25	; 0x16
    3844:	af 8b       	std	Y+23, r26	; 0x17
    3846:	b8 8f       	std	Y+24, r27	; 0x18
			NumAsString[LCD_StringCounter]=temp;
    3848:	8f 81       	ldd	r24, Y+7	; 0x07
    384a:	98 85       	ldd	r25, Y+8	; 0x08
    384c:	a9 85       	ldd	r26, Y+9	; 0x09
    384e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3850:	9e 01       	movw	r18, r28
    3852:	25 5f       	subi	r18, 0xF5	; 245
    3854:	3f 4f       	sbci	r19, 0xFF	; 255
    3856:	f9 01       	movw	r30, r18
    3858:	e8 0f       	add	r30, r24
    385a:	f9 1f       	adc	r31, r25
    385c:	8a 81       	ldd	r24, Y+2	; 0x02
    385e:	80 83       	st	Z, r24
			Recieved_Number=Recieved_Number/10;
    3860:	8d 89       	ldd	r24, Y+21	; 0x15
    3862:	9e 89       	ldd	r25, Y+22	; 0x16
    3864:	af 89       	ldd	r26, Y+23	; 0x17
    3866:	b8 8d       	ldd	r27, Y+24	; 0x18
    3868:	2a e0       	ldi	r18, 0x0A	; 10
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	40 e0       	ldi	r20, 0x00	; 0
    386e:	50 e0       	ldi	r21, 0x00	; 0
    3870:	bc 01       	movw	r22, r24
    3872:	cd 01       	movw	r24, r26
    3874:	0e 94 29 20 	call	0x4052	; 0x4052 <__udivmodsi4>
    3878:	da 01       	movw	r26, r20
    387a:	c9 01       	movw	r24, r18
    387c:	8d 8b       	std	Y+21, r24	; 0x15
    387e:	9e 8b       	std	Y+22, r25	; 0x16
    3880:	af 8b       	std	Y+23, r26	; 0x17
    3882:	b8 8f       	std	Y+24, r27	; 0x18
			LCD_StringCounter++;
    3884:	8f 81       	ldd	r24, Y+7	; 0x07
    3886:	98 85       	ldd	r25, Y+8	; 0x08
    3888:	a9 85       	ldd	r26, Y+9	; 0x09
    388a:	ba 85       	ldd	r27, Y+10	; 0x0a
    388c:	01 96       	adiw	r24, 0x01	; 1
    388e:	a1 1d       	adc	r26, r1
    3890:	b1 1d       	adc	r27, r1
    3892:	8f 83       	std	Y+7, r24	; 0x07
    3894:	98 87       	std	Y+8, r25	; 0x08
    3896:	a9 87       	std	Y+9, r26	; 0x09
    3898:	ba 87       	std	Y+10, r27	; 0x0a

	if(Recieved_Number==0){
		LCD_VoidSendChar('0',lcd,Type);
	}
	else{
		while(Recieved_Number!=0)
    389a:	8d 89       	ldd	r24, Y+21	; 0x15
    389c:	9e 89       	ldd	r25, Y+22	; 0x16
    389e:	af 89       	ldd	r26, Y+23	; 0x17
    38a0:	b8 8d       	ldd	r27, Y+24	; 0x18
    38a2:	00 97       	sbiw	r24, 0x00	; 0
    38a4:	a1 05       	cpc	r26, r1
    38a6:	b1 05       	cpc	r27, r1
    38a8:	09 f0       	breq	.+2      	; 0x38ac <LCD_VoidSendInt+0x10c>
    38aa:	ae cf       	rjmp	.-164    	; 0x3808 <LCD_VoidSendInt+0x68>
			Recieved_Number=Recieved_Number/10;
			LCD_StringCounter++;

		}
	}
	for(FORCOUNTER=(LCD_StringCounter-1);FORCOUNTER>=0;FORCOUNTER--){
    38ac:	8f 81       	ldd	r24, Y+7	; 0x07
    38ae:	98 85       	ldd	r25, Y+8	; 0x08
    38b0:	a9 85       	ldd	r26, Y+9	; 0x09
    38b2:	ba 85       	ldd	r27, Y+10	; 0x0a
    38b4:	01 97       	sbiw	r24, 0x01	; 1
    38b6:	a1 09       	sbc	r26, r1
    38b8:	b1 09       	sbc	r27, r1
    38ba:	8b 83       	std	Y+3, r24	; 0x03
    38bc:	9c 83       	std	Y+4, r25	; 0x04
    38be:	ad 83       	std	Y+5, r26	; 0x05
    38c0:	be 83       	std	Y+6, r27	; 0x06
    38c2:	1f c0       	rjmp	.+62     	; 0x3902 <LCD_VoidSendInt+0x162>
		Err=LCD_VoidSendChar((NumAsString[FORCOUNTER]+48),lcd,Type);
    38c4:	8b 81       	ldd	r24, Y+3	; 0x03
    38c6:	9c 81       	ldd	r25, Y+4	; 0x04
    38c8:	ad 81       	ldd	r26, Y+5	; 0x05
    38ca:	be 81       	ldd	r27, Y+6	; 0x06
    38cc:	9e 01       	movw	r18, r28
    38ce:	25 5f       	subi	r18, 0xF5	; 245
    38d0:	3f 4f       	sbci	r19, 0xFF	; 255
    38d2:	f9 01       	movw	r30, r18
    38d4:	e8 0f       	add	r30, r24
    38d6:	f9 1f       	adc	r31, r25
    38d8:	80 81       	ld	r24, Z
    38da:	80 5d       	subi	r24, 0xD0	; 208
    38dc:	29 8d       	ldd	r18, Y+25	; 0x19
    38de:	3a 8d       	ldd	r19, Y+26	; 0x1a
    38e0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    38e2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    38e4:	b9 01       	movw	r22, r18
    38e6:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_VoidSendChar>
    38ea:	89 83       	std	Y+1, r24	; 0x01
			Recieved_Number=Recieved_Number/10;
			LCD_StringCounter++;

		}
	}
	for(FORCOUNTER=(LCD_StringCounter-1);FORCOUNTER>=0;FORCOUNTER--){
    38ec:	8b 81       	ldd	r24, Y+3	; 0x03
    38ee:	9c 81       	ldd	r25, Y+4	; 0x04
    38f0:	ad 81       	ldd	r26, Y+5	; 0x05
    38f2:	be 81       	ldd	r27, Y+6	; 0x06
    38f4:	01 97       	sbiw	r24, 0x01	; 1
    38f6:	a1 09       	sbc	r26, r1
    38f8:	b1 09       	sbc	r27, r1
    38fa:	8b 83       	std	Y+3, r24	; 0x03
    38fc:	9c 83       	std	Y+4, r25	; 0x04
    38fe:	ad 83       	std	Y+5, r26	; 0x05
    3900:	be 83       	std	Y+6, r27	; 0x06
    3902:	8b 81       	ldd	r24, Y+3	; 0x03
    3904:	9c 81       	ldd	r25, Y+4	; 0x04
    3906:	ad 81       	ldd	r26, Y+5	; 0x05
    3908:	be 81       	ldd	r27, Y+6	; 0x06
    390a:	bb 23       	and	r27, r27
    390c:	dc f6       	brge	.-74     	; 0x38c4 <LCD_VoidSendInt+0x124>
		Err=LCD_VoidSendChar((NumAsString[FORCOUNTER]+48),lcd,Type);

	}
	//LCD_VoidSendChar('\0',lcd,Type);

}
    390e:	6c 96       	adiw	r28, 0x1c	; 28
    3910:	0f b6       	in	r0, 0x3f	; 63
    3912:	f8 94       	cli
    3914:	de bf       	out	0x3e, r29	; 62
    3916:	0f be       	out	0x3f, r0	; 63
    3918:	cd bf       	out	0x3d, r28	; 61
    391a:	cf 91       	pop	r28
    391c:	df 91       	pop	r29
    391e:	08 95       	ret

00003920 <KP_ErrStateInit>:
		{'7','8','9','/'},
		{'4','5','6','*'},
		{'1','2','3','-'},
		{'C','0','=','+'}
};
void KP_ErrStateInit(KeypadRow_PORT_PIN *KP_RPP_INFO,KeypadCol_PORT_PIN *KP_CPP_INFO){
    3920:	df 93       	push	r29
    3922:	cf 93       	push	r28
    3924:	00 d0       	rcall	.+0      	; 0x3926 <KP_ErrStateInit+0x6>
    3926:	00 d0       	rcall	.+0      	; 0x3928 <KP_ErrStateInit+0x8>
    3928:	cd b7       	in	r28, 0x3d	; 61
    392a:	de b7       	in	r29, 0x3e	; 62
    392c:	9a 83       	std	Y+2, r25	; 0x02
    392e:	89 83       	std	Y+1, r24	; 0x01
    3930:	7c 83       	std	Y+4, r23	; 0x04
    3932:	6b 83       	std	Y+3, r22	; 0x03
	//u8 ROW,COL,ReadPin;
	//KPRPORT ROWP=KP_ROW_PORT1;
	//KPCPORT COLP=KP_COL_PORT1;
		DIO_ErrStateSetPinDirection(PORT_C,KP_RPP_INFO->ROW_PIN1,DIO_OUT);
    3934:	e9 81       	ldd	r30, Y+1	; 0x01
    3936:	fa 81       	ldd	r31, Y+2	; 0x02
    3938:	91 81       	ldd	r25, Z+1	; 0x01
    393a:	83 e4       	ldi	r24, 0x43	; 67
    393c:	69 2f       	mov	r22, r25
    393e:	41 e0       	ldi	r20, 0x01	; 1
    3940:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_RPP_INFO->ROW_PIN2,DIO_OUT);
    3944:	e9 81       	ldd	r30, Y+1	; 0x01
    3946:	fa 81       	ldd	r31, Y+2	; 0x02
    3948:	93 81       	ldd	r25, Z+3	; 0x03
    394a:	83 e4       	ldi	r24, 0x43	; 67
    394c:	69 2f       	mov	r22, r25
    394e:	41 e0       	ldi	r20, 0x01	; 1
    3950:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_RPP_INFO->ROW_PIN3,DIO_OUT);
    3954:	e9 81       	ldd	r30, Y+1	; 0x01
    3956:	fa 81       	ldd	r31, Y+2	; 0x02
    3958:	95 81       	ldd	r25, Z+5	; 0x05
    395a:	83 e4       	ldi	r24, 0x43	; 67
    395c:	69 2f       	mov	r22, r25
    395e:	41 e0       	ldi	r20, 0x01	; 1
    3960:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_RPP_INFO->ROW_PIN4,DIO_OUT);
    3964:	e9 81       	ldd	r30, Y+1	; 0x01
    3966:	fa 81       	ldd	r31, Y+2	; 0x02
    3968:	97 81       	ldd	r25, Z+7	; 0x07
    396a:	83 e4       	ldi	r24, 0x43	; 67
    396c:	69 2f       	mov	r22, r25
    396e:	41 e0       	ldi	r20, 0x01	; 1
    3970:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_CPP_INFO->COL_PIN1,DIO_IN);
    3974:	eb 81       	ldd	r30, Y+3	; 0x03
    3976:	fc 81       	ldd	r31, Y+4	; 0x04
    3978:	91 81       	ldd	r25, Z+1	; 0x01
    397a:	83 e4       	ldi	r24, 0x43	; 67
    397c:	69 2f       	mov	r22, r25
    397e:	40 e0       	ldi	r20, 0x00	; 0
    3980:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_CPP_INFO->COL_PIN2,DIO_IN);
    3984:	eb 81       	ldd	r30, Y+3	; 0x03
    3986:	fc 81       	ldd	r31, Y+4	; 0x04
    3988:	93 81       	ldd	r25, Z+3	; 0x03
    398a:	83 e4       	ldi	r24, 0x43	; 67
    398c:	69 2f       	mov	r22, r25
    398e:	40 e0       	ldi	r20, 0x00	; 0
    3990:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_CPP_INFO->COL_PIN3,DIO_IN);
    3994:	eb 81       	ldd	r30, Y+3	; 0x03
    3996:	fc 81       	ldd	r31, Y+4	; 0x04
    3998:	95 81       	ldd	r25, Z+5	; 0x05
    399a:	83 e4       	ldi	r24, 0x43	; 67
    399c:	69 2f       	mov	r22, r25
    399e:	40 e0       	ldi	r20, 0x00	; 0
    39a0:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_CPP_INFO->COL_PIN4,DIO_IN);
    39a4:	eb 81       	ldd	r30, Y+3	; 0x03
    39a6:	fc 81       	ldd	r31, Y+4	; 0x04
    39a8:	97 81       	ldd	r25, Z+7	; 0x07
    39aa:	83 e4       	ldi	r24, 0x43	; 67
    39ac:	69 2f       	mov	r22, r25
    39ae:	40 e0       	ldi	r20, 0x00	; 0
    39b0:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinValue(PORT_C,KP_RPP_INFO->ROW_PIN1,DIO_HIGH);
    39b4:	e9 81       	ldd	r30, Y+1	; 0x01
    39b6:	fa 81       	ldd	r31, Y+2	; 0x02
    39b8:	91 81       	ldd	r25, Z+1	; 0x01
    39ba:	83 e4       	ldi	r24, 0x43	; 67
    39bc:	69 2f       	mov	r22, r25
    39be:	41 e0       	ldi	r20, 0x01	; 1
    39c0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_RPP_INFO->ROW_PIN2,DIO_HIGH);
    39c4:	e9 81       	ldd	r30, Y+1	; 0x01
    39c6:	fa 81       	ldd	r31, Y+2	; 0x02
    39c8:	93 81       	ldd	r25, Z+3	; 0x03
    39ca:	83 e4       	ldi	r24, 0x43	; 67
    39cc:	69 2f       	mov	r22, r25
    39ce:	41 e0       	ldi	r20, 0x01	; 1
    39d0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_RPP_INFO->ROW_PIN3,DIO_HIGH);
    39d4:	e9 81       	ldd	r30, Y+1	; 0x01
    39d6:	fa 81       	ldd	r31, Y+2	; 0x02
    39d8:	95 81       	ldd	r25, Z+5	; 0x05
    39da:	83 e4       	ldi	r24, 0x43	; 67
    39dc:	69 2f       	mov	r22, r25
    39de:	41 e0       	ldi	r20, 0x01	; 1
    39e0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_RPP_INFO->ROW_PIN4,DIO_HIGH);
    39e4:	e9 81       	ldd	r30, Y+1	; 0x01
    39e6:	fa 81       	ldd	r31, Y+2	; 0x02
    39e8:	97 81       	ldd	r25, Z+7	; 0x07
    39ea:	83 e4       	ldi	r24, 0x43	; 67
    39ec:	69 2f       	mov	r22, r25
    39ee:	41 e0       	ldi	r20, 0x01	; 1
    39f0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_CPP_INFO->COL_PIN1,DIO_HIGH);
    39f4:	eb 81       	ldd	r30, Y+3	; 0x03
    39f6:	fc 81       	ldd	r31, Y+4	; 0x04
    39f8:	91 81       	ldd	r25, Z+1	; 0x01
    39fa:	83 e4       	ldi	r24, 0x43	; 67
    39fc:	69 2f       	mov	r22, r25
    39fe:	41 e0       	ldi	r20, 0x01	; 1
    3a00:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_CPP_INFO->COL_PIN2,DIO_HIGH);
    3a04:	eb 81       	ldd	r30, Y+3	; 0x03
    3a06:	fc 81       	ldd	r31, Y+4	; 0x04
    3a08:	93 81       	ldd	r25, Z+3	; 0x03
    3a0a:	83 e4       	ldi	r24, 0x43	; 67
    3a0c:	69 2f       	mov	r22, r25
    3a0e:	41 e0       	ldi	r20, 0x01	; 1
    3a10:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_CPP_INFO->COL_PIN3,DIO_HIGH);
    3a14:	eb 81       	ldd	r30, Y+3	; 0x03
    3a16:	fc 81       	ldd	r31, Y+4	; 0x04
    3a18:	95 81       	ldd	r25, Z+5	; 0x05
    3a1a:	83 e4       	ldi	r24, 0x43	; 67
    3a1c:	69 2f       	mov	r22, r25
    3a1e:	41 e0       	ldi	r20, 0x01	; 1
    3a20:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_CPP_INFO->COL_PIN4,DIO_HIGH);
    3a24:	eb 81       	ldd	r30, Y+3	; 0x03
    3a26:	fc 81       	ldd	r31, Y+4	; 0x04
    3a28:	97 81       	ldd	r25, Z+7	; 0x07
    3a2a:	83 e4       	ldi	r24, 0x43	; 67
    3a2c:	69 2f       	mov	r22, r25
    3a2e:	41 e0       	ldi	r20, 0x01	; 1
    3a30:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>

}
    3a34:	0f 90       	pop	r0
    3a36:	0f 90       	pop	r0
    3a38:	0f 90       	pop	r0
    3a3a:	0f 90       	pop	r0
    3a3c:	cf 91       	pop	r28
    3a3e:	df 91       	pop	r29
    3a40:	08 95       	ret

00003a42 <KP_ErrStateRead>:
KP_ErrState	KP_ErrStateRead(KeypadRow_PORT_PIN *KP_RPP_INFO,KeypadCol_PORT_PIN *KP_CPP_INFO,u8 *ReadValue){
    3a42:	df 93       	push	r29
    3a44:	cf 93       	push	r28
    3a46:	cd b7       	in	r28, 0x3d	; 61
    3a48:	de b7       	in	r29, 0x3e	; 62
    3a4a:	69 97       	sbiw	r28, 0x19	; 25
    3a4c:	0f b6       	in	r0, 0x3f	; 63
    3a4e:	f8 94       	cli
    3a50:	de bf       	out	0x3e, r29	; 62
    3a52:	0f be       	out	0x3f, r0	; 63
    3a54:	cd bf       	out	0x3d, r28	; 61
    3a56:	9c 8b       	std	Y+20, r25	; 0x14
    3a58:	8b 8b       	std	Y+19, r24	; 0x13
    3a5a:	7e 8b       	std	Y+22, r23	; 0x16
    3a5c:	6d 8b       	std	Y+21, r22	; 0x15
    3a5e:	58 8f       	std	Y+24, r21	; 0x18
    3a60:	4f 8b       	std	Y+23, r20	; 0x17
	u8 ROW,COL,ReadPin;
	u8 ErrVal;
	//_delay_ms(100);
	for(ROW=0;ROW<4;ROW++){
    3a62:	19 8a       	std	Y+17, r1	; 0x11
    3a64:	cf c0       	rjmp	.+414    	; 0x3c04 <KP_ErrStateRead+0x1c2>
		DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_LOW);
    3a66:	83 e4       	ldi	r24, 0x43	; 67
    3a68:	69 89       	ldd	r22, Y+17	; 0x11
    3a6a:	40 e0       	ldi	r20, 0x00	; 0
    3a6c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>

		for(COL=4;COL<8;COL++){
    3a70:	84 e0       	ldi	r24, 0x04	; 4
    3a72:	88 8b       	std	Y+16, r24	; 0x10
    3a74:	bb c0       	rjmp	.+374    	; 0x3bec <KP_ErrStateRead+0x1aa>
			ErrVal=DIO_ErrStateReadPinValue(PORT_C,COL,&ReadPin);
    3a76:	9e 01       	movw	r18, r28
    3a78:	2e 5e       	subi	r18, 0xEE	; 238
    3a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a7c:	83 e4       	ldi	r24, 0x43	; 67
    3a7e:	68 89       	ldd	r22, Y+16	; 0x10
    3a80:	a9 01       	movw	r20, r18
    3a82:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_ErrStateReadPinValue>
    3a86:	8f 87       	std	Y+15, r24	; 0x0f
    3a88:	80 e0       	ldi	r24, 0x00	; 0
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	a0 ef       	ldi	r26, 0xF0	; 240
    3a8e:	b1 e4       	ldi	r27, 0x41	; 65
    3a90:	8b 87       	std	Y+11, r24	; 0x0b
    3a92:	9c 87       	std	Y+12, r25	; 0x0c
    3a94:	ad 87       	std	Y+13, r26	; 0x0d
    3a96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a98:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	4a ef       	ldi	r20, 0xFA	; 250
    3aa6:	54 e4       	ldi	r21, 0x44	; 68
    3aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	8f 83       	std	Y+7, r24	; 0x07
    3ab2:	98 87       	std	Y+8, r25	; 0x08
    3ab4:	a9 87       	std	Y+9, r26	; 0x09
    3ab6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    3aba:	78 85       	ldd	r23, Y+8	; 0x08
    3abc:	89 85       	ldd	r24, Y+9	; 0x09
    3abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ac0:	20 e0       	ldi	r18, 0x00	; 0
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	40 e8       	ldi	r20, 0x80	; 128
    3ac6:	5f e3       	ldi	r21, 0x3F	; 63
    3ac8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3acc:	88 23       	and	r24, r24
    3ace:	2c f4       	brge	.+10     	; 0x3ada <KP_ErrStateRead+0x98>
		__ticks = 1;
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	9e 83       	std	Y+6, r25	; 0x06
    3ad6:	8d 83       	std	Y+5, r24	; 0x05
    3ad8:	3f c0       	rjmp	.+126    	; 0x3b58 <KP_ErrStateRead+0x116>
	else if (__tmp > 65535)
    3ada:	6f 81       	ldd	r22, Y+7	; 0x07
    3adc:	78 85       	ldd	r23, Y+8	; 0x08
    3ade:	89 85       	ldd	r24, Y+9	; 0x09
    3ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	3f ef       	ldi	r19, 0xFF	; 255
    3ae6:	4f e7       	ldi	r20, 0x7F	; 127
    3ae8:	57 e4       	ldi	r21, 0x47	; 71
    3aea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3aee:	18 16       	cp	r1, r24
    3af0:	4c f5       	brge	.+82     	; 0x3b44 <KP_ErrStateRead+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3af2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3af4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3af6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3af8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3afa:	20 e0       	ldi	r18, 0x00	; 0
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	40 e2       	ldi	r20, 0x20	; 32
    3b00:	51 e4       	ldi	r21, 0x41	; 65
    3b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b06:	dc 01       	movw	r26, r24
    3b08:	cb 01       	movw	r24, r22
    3b0a:	bc 01       	movw	r22, r24
    3b0c:	cd 01       	movw	r24, r26
    3b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b12:	dc 01       	movw	r26, r24
    3b14:	cb 01       	movw	r24, r22
    3b16:	9e 83       	std	Y+6, r25	; 0x06
    3b18:	8d 83       	std	Y+5, r24	; 0x05
    3b1a:	0f c0       	rjmp	.+30     	; 0x3b3a <KP_ErrStateRead+0xf8>
    3b1c:	88 ec       	ldi	r24, 0xC8	; 200
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	9c 83       	std	Y+4, r25	; 0x04
    3b22:	8b 83       	std	Y+3, r24	; 0x03
    3b24:	8b 81       	ldd	r24, Y+3	; 0x03
    3b26:	9c 81       	ldd	r25, Y+4	; 0x04
    3b28:	01 97       	sbiw	r24, 0x01	; 1
    3b2a:	f1 f7       	brne	.-4      	; 0x3b28 <KP_ErrStateRead+0xe6>
    3b2c:	9c 83       	std	Y+4, r25	; 0x04
    3b2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b30:	8d 81       	ldd	r24, Y+5	; 0x05
    3b32:	9e 81       	ldd	r25, Y+6	; 0x06
    3b34:	01 97       	sbiw	r24, 0x01	; 1
    3b36:	9e 83       	std	Y+6, r25	; 0x06
    3b38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b3e:	00 97       	sbiw	r24, 0x00	; 0
    3b40:	69 f7       	brne	.-38     	; 0x3b1c <KP_ErrStateRead+0xda>
    3b42:	14 c0       	rjmp	.+40     	; 0x3b6c <KP_ErrStateRead+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b44:	6f 81       	ldd	r22, Y+7	; 0x07
    3b46:	78 85       	ldd	r23, Y+8	; 0x08
    3b48:	89 85       	ldd	r24, Y+9	; 0x09
    3b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b50:	dc 01       	movw	r26, r24
    3b52:	cb 01       	movw	r24, r22
    3b54:	9e 83       	std	Y+6, r25	; 0x06
    3b56:	8d 83       	std	Y+5, r24	; 0x05
    3b58:	8d 81       	ldd	r24, Y+5	; 0x05
    3b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b5c:	9a 83       	std	Y+2, r25	; 0x02
    3b5e:	89 83       	std	Y+1, r24	; 0x01
    3b60:	89 81       	ldd	r24, Y+1	; 0x01
    3b62:	9a 81       	ldd	r25, Y+2	; 0x02
    3b64:	01 97       	sbiw	r24, 0x01	; 1
    3b66:	f1 f7       	brne	.-4      	; 0x3b64 <KP_ErrStateRead+0x122>
    3b68:	9a 83       	std	Y+2, r25	; 0x02
    3b6a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(30);
			if(ErrVal==DIO_OK&&ReadPin==0){
    3b6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b6e:	88 23       	and	r24, r24
    3b70:	d1 f5       	brne	.+116    	; 0x3be6 <KP_ErrStateRead+0x1a4>
    3b72:	8a 89       	ldd	r24, Y+18	; 0x12
    3b74:	88 23       	and	r24, r24
    3b76:	b9 f5       	brne	.+110    	; 0x3be6 <KP_ErrStateRead+0x1a4>
				DIO_ErrStateSetPinDirection(PORT_D,PIN_0,DIO_OUT);
    3b78:	84 e4       	ldi	r24, 0x44	; 68
    3b7a:	60 e0       	ldi	r22, 0x00	; 0
    3b7c:	41 e0       	ldi	r20, 0x01	; 1
    3b7e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>
				DIO_ErrStateSetPinValue(PORT_D,PIN_0,DIO_HIGH);
    3b82:	84 e4       	ldi	r24, 0x44	; 68
    3b84:	60 e0       	ldi	r22, 0x00	; 0
    3b86:	41 e0       	ldi	r20, 0x01	; 1
    3b88:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
				DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_HIGH);
    3b8c:	83 e4       	ldi	r24, 0x43	; 67
    3b8e:	69 89       	ldd	r22, Y+17	; 0x11
    3b90:	41 e0       	ldi	r20, 0x01	; 1
    3b92:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
				//_delay_ms(30);
				*ReadValue =KP_Arr[ROW][COL-4];
    3b96:	89 89       	ldd	r24, Y+17	; 0x11
    3b98:	48 2f       	mov	r20, r24
    3b9a:	50 e0       	ldi	r21, 0x00	; 0
    3b9c:	88 89       	ldd	r24, Y+16	; 0x10
    3b9e:	88 2f       	mov	r24, r24
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	9c 01       	movw	r18, r24
    3ba4:	24 50       	subi	r18, 0x04	; 4
    3ba6:	30 40       	sbci	r19, 0x00	; 0
    3ba8:	ca 01       	movw	r24, r20
    3baa:	88 0f       	add	r24, r24
    3bac:	99 1f       	adc	r25, r25
    3bae:	88 0f       	add	r24, r24
    3bb0:	99 1f       	adc	r25, r25
    3bb2:	82 0f       	add	r24, r18
    3bb4:	93 1f       	adc	r25, r19
    3bb6:	fc 01       	movw	r30, r24
    3bb8:	e0 58       	subi	r30, 0x80	; 128
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	80 81       	ld	r24, Z
    3bbe:	ef 89       	ldd	r30, Y+23	; 0x17
    3bc0:	f8 8d       	ldd	r31, Y+24	; 0x18
    3bc2:	80 83       	st	Z, r24
    3bc4:	0b c0       	rjmp	.+22     	; 0x3bdc <KP_ErrStateRead+0x19a>
				// test could be removed
				while(ReadPin==0){
					DIO_ErrStateReadPinValue(PORT_C,COL,&ReadPin);
    3bc6:	9e 01       	movw	r18, r28
    3bc8:	2e 5e       	subi	r18, 0xEE	; 238
    3bca:	3f 4f       	sbci	r19, 0xFF	; 255
    3bcc:	83 e4       	ldi	r24, 0x43	; 67
    3bce:	68 89       	ldd	r22, Y+16	; 0x10
    3bd0:	a9 01       	movw	r20, r18
    3bd2:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_ErrStateReadPinValue>
					if(ReadPin==1)
    3bd6:	8a 89       	ldd	r24, Y+18	; 0x12
    3bd8:	81 30       	cpi	r24, 0x01	; 1
    3bda:	19 f0       	breq	.+6      	; 0x3be2 <KP_ErrStateRead+0x1a0>
				DIO_ErrStateSetPinValue(PORT_D,PIN_0,DIO_HIGH);
				DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_HIGH);
				//_delay_ms(30);
				*ReadValue =KP_Arr[ROW][COL-4];
				// test could be removed
				while(ReadPin==0){
    3bdc:	8a 89       	ldd	r24, Y+18	; 0x12
    3bde:	88 23       	and	r24, r24
    3be0:	91 f3       	breq	.-28     	; 0x3bc6 <KP_ErrStateRead+0x184>
					DIO_ErrStateReadPinValue(PORT_C,COL,&ReadPin);
					if(ReadPin==1)
						break;
				}
				return OK;
    3be2:	19 8e       	std	Y+25, r1	; 0x19
    3be4:	15 c0       	rjmp	.+42     	; 0x3c10 <KP_ErrStateRead+0x1ce>
	u8 ErrVal;
	//_delay_ms(100);
	for(ROW=0;ROW<4;ROW++){
		DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_LOW);

		for(COL=4;COL<8;COL++){
    3be6:	88 89       	ldd	r24, Y+16	; 0x10
    3be8:	8f 5f       	subi	r24, 0xFF	; 255
    3bea:	88 8b       	std	Y+16, r24	; 0x10
    3bec:	88 89       	ldd	r24, Y+16	; 0x10
    3bee:	88 30       	cpi	r24, 0x08	; 8
    3bf0:	08 f4       	brcc	.+2      	; 0x3bf4 <KP_ErrStateRead+0x1b2>
    3bf2:	41 cf       	rjmp	.-382    	; 0x3a76 <KP_ErrStateRead+0x34>
						break;
				}
				return OK;
			}
		}
		DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_HIGH);
    3bf4:	83 e4       	ldi	r24, 0x43	; 67
    3bf6:	69 89       	ldd	r22, Y+17	; 0x11
    3bf8:	41 e0       	ldi	r20, 0x01	; 1
    3bfa:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
}
KP_ErrState	KP_ErrStateRead(KeypadRow_PORT_PIN *KP_RPP_INFO,KeypadCol_PORT_PIN *KP_CPP_INFO,u8 *ReadValue){
	u8 ROW,COL,ReadPin;
	u8 ErrVal;
	//_delay_ms(100);
	for(ROW=0;ROW<4;ROW++){
    3bfe:	89 89       	ldd	r24, Y+17	; 0x11
    3c00:	8f 5f       	subi	r24, 0xFF	; 255
    3c02:	89 8b       	std	Y+17, r24	; 0x11
    3c04:	89 89       	ldd	r24, Y+17	; 0x11
    3c06:	84 30       	cpi	r24, 0x04	; 4
    3c08:	08 f4       	brcc	.+2      	; 0x3c0c <KP_ErrStateRead+0x1ca>
    3c0a:	2d cf       	rjmp	.-422    	; 0x3a66 <KP_ErrStateRead+0x24>
				return OK;
			}
		}
		DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_HIGH);
	}
	return Error;
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	89 8f       	std	Y+25, r24	; 0x19
    3c10:	89 8d       	ldd	r24, Y+25	; 0x19
	//Flag=0;
}
    3c12:	69 96       	adiw	r28, 0x19	; 25
    3c14:	0f b6       	in	r0, 0x3f	; 63
    3c16:	f8 94       	cli
    3c18:	de bf       	out	0x3e, r29	; 62
    3c1a:	0f be       	out	0x3f, r0	; 63
    3c1c:	cd bf       	out	0x3d, r28	; 61
    3c1e:	cf 91       	pop	r28
    3c20:	df 91       	pop	r29
    3c22:	08 95       	ret

00003c24 <main>:
		LCD_Line_Info type = {YES,NO};
//Led_info Led={PORT_D,PIN_0,Source_Connection};
void ADCTEST(void);
//KeypadRow_PORT_PIN row={PORT_C,PIN_0,PORT_C,PIN_1,PORT_C,PIN_2,PORT_C,PIN_3};
//KeypadCol_PORT_PIN col={PORT_C,PIN_4,PORT_C,PIN_5,PORT_C,PIN_6,PORT_C,PIN_7};
void main(){
    3c24:	df 93       	push	r29
    3c26:	cf 93       	push	r28
    3c28:	cd b7       	in	r28, 0x3d	; 61
    3c2a:	de b7       	in	r29, 0x3e	; 62
    3c2c:	6c 97       	sbiw	r28, 0x1c	; 28
    3c2e:	0f b6       	in	r0, 0x3f	; 63
    3c30:	f8 94       	cli
    3c32:	de bf       	out	0x3e, r29	; 62
    3c34:	0f be       	out	0x3f, r0	; 63
    3c36:	cd bf       	out	0x3d, r28	; 61

	ADC_ErrStateInit();
    3c38:	0e 94 96 0b 	call	0x172c	; 0x172c <ADC_ErrStateInit>
DIO_ErrStateSetPinDirection(PORT_D,PIN_0,DIO_OUT);
    3c3c:	84 e4       	ldi	r24, 0x44	; 68
    3c3e:	60 e0       	ldi	r22, 0x00	; 0
    3c40:	41 e0       	ldi	r20, 0x01	; 1
    3c42:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_ErrStateSetPinDirection>


	EnableGlobalInterrupt();
    3c46:	0e 94 da 07 	call	0xfb4	; 0xfb4 <EnableGlobalInterrupt>
	while(1){//temp=0;
		//ADC_ErrStateConversionSynch(0,&ADC_Value);
		ADC_ErrStateConversionASynch(0,&ADC_Value,&ADCTEST);
    3c4a:	21 eb       	ldi	r18, 0xB1	; 177
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	4e e4       	ldi	r20, 0x4E	; 78
    3c50:	5f e1       	ldi	r21, 0x1F	; 31
    3c52:	80 e0       	ldi	r24, 0x00	; 0
    3c54:	b9 01       	movw	r22, r18
    3c56:	0e 94 46 0c 	call	0x188c	; 0x188c <ADC_ErrStateConversionASynch>
		MilliVolt= (((u32)ADC_Value*5000UL)/256UL);
    3c5a:	80 91 b1 00 	lds	r24, 0x00B1
    3c5e:	90 91 b2 00 	lds	r25, 0x00B2
    3c62:	cc 01       	movw	r24, r24
    3c64:	a0 e0       	ldi	r26, 0x00	; 0
    3c66:	b0 e0       	ldi	r27, 0x00	; 0
    3c68:	28 e8       	ldi	r18, 0x88	; 136
    3c6a:	33 e1       	ldi	r19, 0x13	; 19
    3c6c:	40 e0       	ldi	r20, 0x00	; 0
    3c6e:	50 e0       	ldi	r21, 0x00	; 0
    3c70:	bc 01       	movw	r22, r24
    3c72:	cd 01       	movw	r24, r26
    3c74:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__mulsi3>
    3c78:	dc 01       	movw	r26, r24
    3c7a:	cb 01       	movw	r24, r22
    3c7c:	89 2f       	mov	r24, r25
    3c7e:	9a 2f       	mov	r25, r26
    3c80:	ab 2f       	mov	r26, r27
    3c82:	bb 27       	eor	r27, r27
    3c84:	90 93 ac 00 	sts	0x00AC, r25
    3c88:	80 93 ab 00 	sts	0x00AB, r24
		temp=MilliVolt/10;
    3c8c:	80 91 ab 00 	lds	r24, 0x00AB
    3c90:	90 91 ac 00 	lds	r25, 0x00AC
    3c94:	2a e0       	ldi	r18, 0x0A	; 10
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	b9 01       	movw	r22, r18
    3c9a:	0e 94 15 20 	call	0x402a	; 0x402a <__udivmodhi4>
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	cc 01       	movw	r24, r24
    3ca2:	a0 e0       	ldi	r26, 0x00	; 0
    3ca4:	b0 e0       	ldi	r27, 0x00	; 0
    3ca6:	80 93 ad 00 	sts	0x00AD, r24
    3caa:	90 93 ae 00 	sts	0x00AE, r25
    3cae:	a0 93 af 00 	sts	0x00AF, r26
    3cb2:	b0 93 b0 00 	sts	0x00B0, r27
		LCD_VoidInit(&lcd);
    3cb6:	80 e9       	ldi	r24, 0x90	; 144
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	0e 94 1e 19 	call	0x323c	; 0x323c <LCD_VoidInit>
		DIO_ErrStateSetPinValue(PORT_D,PIN_0,DIO_HIGH);
    3cbe:	84 e4       	ldi	r24, 0x44	; 68
    3cc0:	60 e0       	ldi	r22, 0x00	; 0
    3cc2:	41 e0       	ldi	r20, 0x01	; 1
    3cc4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    3cc8:	80 e0       	ldi	r24, 0x00	; 0
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	aa ef       	ldi	r26, 0xFA	; 250
    3cce:	b3 e4       	ldi	r27, 0x43	; 67
    3cd0:	89 8f       	std	Y+25, r24	; 0x19
    3cd2:	9a 8f       	std	Y+26, r25	; 0x1a
    3cd4:	ab 8f       	std	Y+27, r26	; 0x1b
    3cd6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cd8:	69 8d       	ldd	r22, Y+25	; 0x19
    3cda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ce0:	20 e0       	ldi	r18, 0x00	; 0
    3ce2:	30 e0       	ldi	r19, 0x00	; 0
    3ce4:	4a ef       	ldi	r20, 0xFA	; 250
    3ce6:	54 e4       	ldi	r21, 0x44	; 68
    3ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cec:	dc 01       	movw	r26, r24
    3cee:	cb 01       	movw	r24, r22
    3cf0:	8d 8b       	std	Y+21, r24	; 0x15
    3cf2:	9e 8b       	std	Y+22, r25	; 0x16
    3cf4:	af 8b       	std	Y+23, r26	; 0x17
    3cf6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3cf8:	6d 89       	ldd	r22, Y+21	; 0x15
    3cfa:	7e 89       	ldd	r23, Y+22	; 0x16
    3cfc:	8f 89       	ldd	r24, Y+23	; 0x17
    3cfe:	98 8d       	ldd	r25, Y+24	; 0x18
    3d00:	20 e0       	ldi	r18, 0x00	; 0
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	40 e8       	ldi	r20, 0x80	; 128
    3d06:	5f e3       	ldi	r21, 0x3F	; 63
    3d08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d0c:	88 23       	and	r24, r24
    3d0e:	2c f4       	brge	.+10     	; 0x3d1a <main+0xf6>
		__ticks = 1;
    3d10:	81 e0       	ldi	r24, 0x01	; 1
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	9c 8b       	std	Y+20, r25	; 0x14
    3d16:	8b 8b       	std	Y+19, r24	; 0x13
    3d18:	3f c0       	rjmp	.+126    	; 0x3d98 <main+0x174>
	else if (__tmp > 65535)
    3d1a:	6d 89       	ldd	r22, Y+21	; 0x15
    3d1c:	7e 89       	ldd	r23, Y+22	; 0x16
    3d1e:	8f 89       	ldd	r24, Y+23	; 0x17
    3d20:	98 8d       	ldd	r25, Y+24	; 0x18
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	3f ef       	ldi	r19, 0xFF	; 255
    3d26:	4f e7       	ldi	r20, 0x7F	; 127
    3d28:	57 e4       	ldi	r21, 0x47	; 71
    3d2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d2e:	18 16       	cp	r1, r24
    3d30:	4c f5       	brge	.+82     	; 0x3d84 <main+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d32:	69 8d       	ldd	r22, Y+25	; 0x19
    3d34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d3a:	20 e0       	ldi	r18, 0x00	; 0
    3d3c:	30 e0       	ldi	r19, 0x00	; 0
    3d3e:	40 e2       	ldi	r20, 0x20	; 32
    3d40:	51 e4       	ldi	r21, 0x41	; 65
    3d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d46:	dc 01       	movw	r26, r24
    3d48:	cb 01       	movw	r24, r22
    3d4a:	bc 01       	movw	r22, r24
    3d4c:	cd 01       	movw	r24, r26
    3d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d52:	dc 01       	movw	r26, r24
    3d54:	cb 01       	movw	r24, r22
    3d56:	9c 8b       	std	Y+20, r25	; 0x14
    3d58:	8b 8b       	std	Y+19, r24	; 0x13
    3d5a:	0f c0       	rjmp	.+30     	; 0x3d7a <main+0x156>
    3d5c:	88 ec       	ldi	r24, 0xC8	; 200
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	9a 8b       	std	Y+18, r25	; 0x12
    3d62:	89 8b       	std	Y+17, r24	; 0x11
    3d64:	89 89       	ldd	r24, Y+17	; 0x11
    3d66:	9a 89       	ldd	r25, Y+18	; 0x12
    3d68:	01 97       	sbiw	r24, 0x01	; 1
    3d6a:	f1 f7       	brne	.-4      	; 0x3d68 <main+0x144>
    3d6c:	9a 8b       	std	Y+18, r25	; 0x12
    3d6e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d70:	8b 89       	ldd	r24, Y+19	; 0x13
    3d72:	9c 89       	ldd	r25, Y+20	; 0x14
    3d74:	01 97       	sbiw	r24, 0x01	; 1
    3d76:	9c 8b       	std	Y+20, r25	; 0x14
    3d78:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d7a:	8b 89       	ldd	r24, Y+19	; 0x13
    3d7c:	9c 89       	ldd	r25, Y+20	; 0x14
    3d7e:	00 97       	sbiw	r24, 0x00	; 0
    3d80:	69 f7       	brne	.-38     	; 0x3d5c <main+0x138>
    3d82:	14 c0       	rjmp	.+40     	; 0x3dac <main+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d84:	6d 89       	ldd	r22, Y+21	; 0x15
    3d86:	7e 89       	ldd	r23, Y+22	; 0x16
    3d88:	8f 89       	ldd	r24, Y+23	; 0x17
    3d8a:	98 8d       	ldd	r25, Y+24	; 0x18
    3d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d90:	dc 01       	movw	r26, r24
    3d92:	cb 01       	movw	r24, r22
    3d94:	9c 8b       	std	Y+20, r25	; 0x14
    3d96:	8b 8b       	std	Y+19, r24	; 0x13
    3d98:	8b 89       	ldd	r24, Y+19	; 0x13
    3d9a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d9c:	98 8b       	std	Y+16, r25	; 0x10
    3d9e:	8f 87       	std	Y+15, r24	; 0x0f
    3da0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3da2:	98 89       	ldd	r25, Y+16	; 0x10
    3da4:	01 97       	sbiw	r24, 0x01	; 1
    3da6:	f1 f7       	brne	.-4      	; 0x3da4 <main+0x180>
    3da8:	98 8b       	std	Y+16, r25	; 0x10
    3daa:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		DIO_ErrStateSetPinValue(PORT_D,PIN_0,DIO_LOW);
    3dac:	84 e4       	ldi	r24, 0x44	; 68
    3dae:	60 e0       	ldi	r22, 0x00	; 0
    3db0:	40 e0       	ldi	r20, 0x00	; 0
    3db2:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_ErrStateSetPinValue>
    3db6:	80 e0       	ldi	r24, 0x00	; 0
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	aa ef       	ldi	r26, 0xFA	; 250
    3dbc:	b3 e4       	ldi	r27, 0x43	; 67
    3dbe:	8b 87       	std	Y+11, r24	; 0x0b
    3dc0:	9c 87       	std	Y+12, r25	; 0x0c
    3dc2:	ad 87       	std	Y+13, r26	; 0x0d
    3dc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dca:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dce:	20 e0       	ldi	r18, 0x00	; 0
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	4a ef       	ldi	r20, 0xFA	; 250
    3dd4:	54 e4       	ldi	r21, 0x44	; 68
    3dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dda:	dc 01       	movw	r26, r24
    3ddc:	cb 01       	movw	r24, r22
    3dde:	8f 83       	std	Y+7, r24	; 0x07
    3de0:	98 87       	std	Y+8, r25	; 0x08
    3de2:	a9 87       	std	Y+9, r26	; 0x09
    3de4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3de6:	6f 81       	ldd	r22, Y+7	; 0x07
    3de8:	78 85       	ldd	r23, Y+8	; 0x08
    3dea:	89 85       	ldd	r24, Y+9	; 0x09
    3dec:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dee:	20 e0       	ldi	r18, 0x00	; 0
    3df0:	30 e0       	ldi	r19, 0x00	; 0
    3df2:	40 e8       	ldi	r20, 0x80	; 128
    3df4:	5f e3       	ldi	r21, 0x3F	; 63
    3df6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dfa:	88 23       	and	r24, r24
    3dfc:	2c f4       	brge	.+10     	; 0x3e08 <main+0x1e4>
		__ticks = 1;
    3dfe:	81 e0       	ldi	r24, 0x01	; 1
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	9e 83       	std	Y+6, r25	; 0x06
    3e04:	8d 83       	std	Y+5, r24	; 0x05
    3e06:	3f c0       	rjmp	.+126    	; 0x3e86 <main+0x262>
	else if (__tmp > 65535)
    3e08:	6f 81       	ldd	r22, Y+7	; 0x07
    3e0a:	78 85       	ldd	r23, Y+8	; 0x08
    3e0c:	89 85       	ldd	r24, Y+9	; 0x09
    3e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e10:	20 e0       	ldi	r18, 0x00	; 0
    3e12:	3f ef       	ldi	r19, 0xFF	; 255
    3e14:	4f e7       	ldi	r20, 0x7F	; 127
    3e16:	57 e4       	ldi	r21, 0x47	; 71
    3e18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e1c:	18 16       	cp	r1, r24
    3e1e:	4c f5       	brge	.+82     	; 0x3e72 <main+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e20:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e22:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e24:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e26:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	40 e2       	ldi	r20, 0x20	; 32
    3e2e:	51 e4       	ldi	r21, 0x41	; 65
    3e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e34:	dc 01       	movw	r26, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	bc 01       	movw	r22, r24
    3e3a:	cd 01       	movw	r24, r26
    3e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e40:	dc 01       	movw	r26, r24
    3e42:	cb 01       	movw	r24, r22
    3e44:	9e 83       	std	Y+6, r25	; 0x06
    3e46:	8d 83       	std	Y+5, r24	; 0x05
    3e48:	0f c0       	rjmp	.+30     	; 0x3e68 <main+0x244>
    3e4a:	88 ec       	ldi	r24, 0xC8	; 200
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	9c 83       	std	Y+4, r25	; 0x04
    3e50:	8b 83       	std	Y+3, r24	; 0x03
    3e52:	8b 81       	ldd	r24, Y+3	; 0x03
    3e54:	9c 81       	ldd	r25, Y+4	; 0x04
    3e56:	01 97       	sbiw	r24, 0x01	; 1
    3e58:	f1 f7       	brne	.-4      	; 0x3e56 <main+0x232>
    3e5a:	9c 83       	std	Y+4, r25	; 0x04
    3e5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e60:	9e 81       	ldd	r25, Y+6	; 0x06
    3e62:	01 97       	sbiw	r24, 0x01	; 1
    3e64:	9e 83       	std	Y+6, r25	; 0x06
    3e66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e68:	8d 81       	ldd	r24, Y+5	; 0x05
    3e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e6c:	00 97       	sbiw	r24, 0x00	; 0
    3e6e:	69 f7       	brne	.-38     	; 0x3e4a <main+0x226>
    3e70:	ec ce       	rjmp	.-552    	; 0x3c4a <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e72:	6f 81       	ldd	r22, Y+7	; 0x07
    3e74:	78 85       	ldd	r23, Y+8	; 0x08
    3e76:	89 85       	ldd	r24, Y+9	; 0x09
    3e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e7e:	dc 01       	movw	r26, r24
    3e80:	cb 01       	movw	r24, r22
    3e82:	9e 83       	std	Y+6, r25	; 0x06
    3e84:	8d 83       	std	Y+5, r24	; 0x05
    3e86:	8d 81       	ldd	r24, Y+5	; 0x05
    3e88:	9e 81       	ldd	r25, Y+6	; 0x06
    3e8a:	9a 83       	std	Y+2, r25	; 0x02
    3e8c:	89 83       	std	Y+1, r24	; 0x01
    3e8e:	89 81       	ldd	r24, Y+1	; 0x01
    3e90:	9a 81       	ldd	r25, Y+2	; 0x02
    3e92:	01 97       	sbiw	r24, 0x01	; 1
    3e94:	f1 f7       	brne	.-4      	; 0x3e92 <main+0x26e>
    3e96:	9a 83       	std	Y+2, r25	; 0x02
    3e98:	89 83       	std	Y+1, r24	; 0x01
    3e9a:	d7 ce       	rjmp	.-594    	; 0x3c4a <main+0x26>

00003e9c <ADCTEST>:
		//LCD_VoidSendCommand(0x01,&lcd);
	}

}

void ADCTEST(void){
    3e9c:	df 93       	push	r29
    3e9e:	cf 93       	push	r28
    3ea0:	cd b7       	in	r28, 0x3d	; 61
    3ea2:	de b7       	in	r29, 0x3e	; 62
    3ea4:	2e 97       	sbiw	r28, 0x0e	; 14
    3ea6:	0f b6       	in	r0, 0x3f	; 63
    3ea8:	f8 94       	cli
    3eaa:	de bf       	out	0x3e, r29	; 62
    3eac:	0f be       	out	0x3f, r0	; 63
    3eae:	cd bf       	out	0x3d, r28	; 61
	LCD_VoidSendInt(temp,&lcd,&type);
    3eb0:	80 91 ad 00 	lds	r24, 0x00AD
    3eb4:	90 91 ae 00 	lds	r25, 0x00AE
    3eb8:	a0 91 af 00 	lds	r26, 0x00AF
    3ebc:	b0 91 b0 00 	lds	r27, 0x00B0
    3ec0:	20 e9       	ldi	r18, 0x90	; 144
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	e7 e9       	ldi	r30, 0x97	; 151
    3ec6:	f0 e0       	ldi	r31, 0x00	; 0
    3ec8:	bc 01       	movw	r22, r24
    3eca:	cd 01       	movw	r24, r26
    3ecc:	a9 01       	movw	r20, r18
    3ece:	9f 01       	movw	r18, r30
    3ed0:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <LCD_VoidSendInt>
	LCD_VoidSendString(" C",&lcd,&type);
    3ed4:	80 e6       	ldi	r24, 0x60	; 96
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	20 e9       	ldi	r18, 0x90	; 144
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	47 e9       	ldi	r20, 0x97	; 151
    3ede:	50 e0       	ldi	r21, 0x00	; 0
    3ee0:	b9 01       	movw	r22, r18
    3ee2:	0e 94 31 1b 	call	0x3662	; 0x3662 <LCD_VoidSendString>
	LCD_VoidSendChar('\0',&lcd,&type);
    3ee6:	20 e9       	ldi	r18, 0x90	; 144
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	47 e9       	ldi	r20, 0x97	; 151
    3eec:	50 e0       	ldi	r21, 0x00	; 0
    3eee:	80 e0       	ldi	r24, 0x00	; 0
    3ef0:	b9 01       	movw	r22, r18
    3ef2:	0e 94 5e 14 	call	0x28bc	; 0x28bc <LCD_VoidSendChar>
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	aa ef       	ldi	r26, 0xFA	; 250
    3efc:	b3 e4       	ldi	r27, 0x43	; 67
    3efe:	8b 87       	std	Y+11, r24	; 0x0b
    3f00:	9c 87       	std	Y+12, r25	; 0x0c
    3f02:	ad 87       	std	Y+13, r26	; 0x0d
    3f04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f06:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f08:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f0e:	20 e0       	ldi	r18, 0x00	; 0
    3f10:	30 e0       	ldi	r19, 0x00	; 0
    3f12:	4a ef       	ldi	r20, 0xFA	; 250
    3f14:	54 e4       	ldi	r21, 0x44	; 68
    3f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f1a:	dc 01       	movw	r26, r24
    3f1c:	cb 01       	movw	r24, r22
    3f1e:	8f 83       	std	Y+7, r24	; 0x07
    3f20:	98 87       	std	Y+8, r25	; 0x08
    3f22:	a9 87       	std	Y+9, r26	; 0x09
    3f24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f26:	6f 81       	ldd	r22, Y+7	; 0x07
    3f28:	78 85       	ldd	r23, Y+8	; 0x08
    3f2a:	89 85       	ldd	r24, Y+9	; 0x09
    3f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	40 e8       	ldi	r20, 0x80	; 128
    3f34:	5f e3       	ldi	r21, 0x3F	; 63
    3f36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f3a:	88 23       	and	r24, r24
    3f3c:	2c f4       	brge	.+10     	; 0x3f48 <ADCTEST+0xac>
		__ticks = 1;
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	9e 83       	std	Y+6, r25	; 0x06
    3f44:	8d 83       	std	Y+5, r24	; 0x05
    3f46:	3f c0       	rjmp	.+126    	; 0x3fc6 <ADCTEST+0x12a>
	else if (__tmp > 65535)
    3f48:	6f 81       	ldd	r22, Y+7	; 0x07
    3f4a:	78 85       	ldd	r23, Y+8	; 0x08
    3f4c:	89 85       	ldd	r24, Y+9	; 0x09
    3f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	3f ef       	ldi	r19, 0xFF	; 255
    3f54:	4f e7       	ldi	r20, 0x7F	; 127
    3f56:	57 e4       	ldi	r21, 0x47	; 71
    3f58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f5c:	18 16       	cp	r1, r24
    3f5e:	4c f5       	brge	.+82     	; 0x3fb2 <ADCTEST+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f60:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f62:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f64:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f66:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f68:	20 e0       	ldi	r18, 0x00	; 0
    3f6a:	30 e0       	ldi	r19, 0x00	; 0
    3f6c:	40 e2       	ldi	r20, 0x20	; 32
    3f6e:	51 e4       	ldi	r21, 0x41	; 65
    3f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f74:	dc 01       	movw	r26, r24
    3f76:	cb 01       	movw	r24, r22
    3f78:	bc 01       	movw	r22, r24
    3f7a:	cd 01       	movw	r24, r26
    3f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	9e 83       	std	Y+6, r25	; 0x06
    3f86:	8d 83       	std	Y+5, r24	; 0x05
    3f88:	0f c0       	rjmp	.+30     	; 0x3fa8 <ADCTEST+0x10c>
    3f8a:	88 ec       	ldi	r24, 0xC8	; 200
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	9c 83       	std	Y+4, r25	; 0x04
    3f90:	8b 83       	std	Y+3, r24	; 0x03
    3f92:	8b 81       	ldd	r24, Y+3	; 0x03
    3f94:	9c 81       	ldd	r25, Y+4	; 0x04
    3f96:	01 97       	sbiw	r24, 0x01	; 1
    3f98:	f1 f7       	brne	.-4      	; 0x3f96 <ADCTEST+0xfa>
    3f9a:	9c 83       	std	Y+4, r25	; 0x04
    3f9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fa2:	01 97       	sbiw	r24, 0x01	; 1
    3fa4:	9e 83       	std	Y+6, r25	; 0x06
    3fa6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    3faa:	9e 81       	ldd	r25, Y+6	; 0x06
    3fac:	00 97       	sbiw	r24, 0x00	; 0
    3fae:	69 f7       	brne	.-38     	; 0x3f8a <ADCTEST+0xee>
    3fb0:	14 c0       	rjmp	.+40     	; 0x3fda <ADCTEST+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    3fb4:	78 85       	ldd	r23, Y+8	; 0x08
    3fb6:	89 85       	ldd	r24, Y+9	; 0x09
    3fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fbe:	dc 01       	movw	r26, r24
    3fc0:	cb 01       	movw	r24, r22
    3fc2:	9e 83       	std	Y+6, r25	; 0x06
    3fc4:	8d 83       	std	Y+5, r24	; 0x05
    3fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fca:	9a 83       	std	Y+2, r25	; 0x02
    3fcc:	89 83       	std	Y+1, r24	; 0x01
    3fce:	89 81       	ldd	r24, Y+1	; 0x01
    3fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fd2:	01 97       	sbiw	r24, 0x01	; 1
    3fd4:	f1 f7       	brne	.-4      	; 0x3fd2 <ADCTEST+0x136>
    3fd6:	9a 83       	std	Y+2, r25	; 0x02
    3fd8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

}
    3fda:	2e 96       	adiw	r28, 0x0e	; 14
    3fdc:	0f b6       	in	r0, 0x3f	; 63
    3fde:	f8 94       	cli
    3fe0:	de bf       	out	0x3e, r29	; 62
    3fe2:	0f be       	out	0x3f, r0	; 63
    3fe4:	cd bf       	out	0x3d, r28	; 61
    3fe6:	cf 91       	pop	r28
    3fe8:	df 91       	pop	r29
    3fea:	08 95       	ret

00003fec <__mulsi3>:
    3fec:	62 9f       	mul	r22, r18
    3fee:	d0 01       	movw	r26, r0
    3ff0:	73 9f       	mul	r23, r19
    3ff2:	f0 01       	movw	r30, r0
    3ff4:	82 9f       	mul	r24, r18
    3ff6:	e0 0d       	add	r30, r0
    3ff8:	f1 1d       	adc	r31, r1
    3ffa:	64 9f       	mul	r22, r20
    3ffc:	e0 0d       	add	r30, r0
    3ffe:	f1 1d       	adc	r31, r1
    4000:	92 9f       	mul	r25, r18
    4002:	f0 0d       	add	r31, r0
    4004:	83 9f       	mul	r24, r19
    4006:	f0 0d       	add	r31, r0
    4008:	74 9f       	mul	r23, r20
    400a:	f0 0d       	add	r31, r0
    400c:	65 9f       	mul	r22, r21
    400e:	f0 0d       	add	r31, r0
    4010:	99 27       	eor	r25, r25
    4012:	72 9f       	mul	r23, r18
    4014:	b0 0d       	add	r27, r0
    4016:	e1 1d       	adc	r30, r1
    4018:	f9 1f       	adc	r31, r25
    401a:	63 9f       	mul	r22, r19
    401c:	b0 0d       	add	r27, r0
    401e:	e1 1d       	adc	r30, r1
    4020:	f9 1f       	adc	r31, r25
    4022:	bd 01       	movw	r22, r26
    4024:	cf 01       	movw	r24, r30
    4026:	11 24       	eor	r1, r1
    4028:	08 95       	ret

0000402a <__udivmodhi4>:
    402a:	aa 1b       	sub	r26, r26
    402c:	bb 1b       	sub	r27, r27
    402e:	51 e1       	ldi	r21, 0x11	; 17
    4030:	07 c0       	rjmp	.+14     	; 0x4040 <__udivmodhi4_ep>

00004032 <__udivmodhi4_loop>:
    4032:	aa 1f       	adc	r26, r26
    4034:	bb 1f       	adc	r27, r27
    4036:	a6 17       	cp	r26, r22
    4038:	b7 07       	cpc	r27, r23
    403a:	10 f0       	brcs	.+4      	; 0x4040 <__udivmodhi4_ep>
    403c:	a6 1b       	sub	r26, r22
    403e:	b7 0b       	sbc	r27, r23

00004040 <__udivmodhi4_ep>:
    4040:	88 1f       	adc	r24, r24
    4042:	99 1f       	adc	r25, r25
    4044:	5a 95       	dec	r21
    4046:	a9 f7       	brne	.-22     	; 0x4032 <__udivmodhi4_loop>
    4048:	80 95       	com	r24
    404a:	90 95       	com	r25
    404c:	bc 01       	movw	r22, r24
    404e:	cd 01       	movw	r24, r26
    4050:	08 95       	ret

00004052 <__udivmodsi4>:
    4052:	a1 e2       	ldi	r26, 0x21	; 33
    4054:	1a 2e       	mov	r1, r26
    4056:	aa 1b       	sub	r26, r26
    4058:	bb 1b       	sub	r27, r27
    405a:	fd 01       	movw	r30, r26
    405c:	0d c0       	rjmp	.+26     	; 0x4078 <__udivmodsi4_ep>

0000405e <__udivmodsi4_loop>:
    405e:	aa 1f       	adc	r26, r26
    4060:	bb 1f       	adc	r27, r27
    4062:	ee 1f       	adc	r30, r30
    4064:	ff 1f       	adc	r31, r31
    4066:	a2 17       	cp	r26, r18
    4068:	b3 07       	cpc	r27, r19
    406a:	e4 07       	cpc	r30, r20
    406c:	f5 07       	cpc	r31, r21
    406e:	20 f0       	brcs	.+8      	; 0x4078 <__udivmodsi4_ep>
    4070:	a2 1b       	sub	r26, r18
    4072:	b3 0b       	sbc	r27, r19
    4074:	e4 0b       	sbc	r30, r20
    4076:	f5 0b       	sbc	r31, r21

00004078 <__udivmodsi4_ep>:
    4078:	66 1f       	adc	r22, r22
    407a:	77 1f       	adc	r23, r23
    407c:	88 1f       	adc	r24, r24
    407e:	99 1f       	adc	r25, r25
    4080:	1a 94       	dec	r1
    4082:	69 f7       	brne	.-38     	; 0x405e <__udivmodsi4_loop>
    4084:	60 95       	com	r22
    4086:	70 95       	com	r23
    4088:	80 95       	com	r24
    408a:	90 95       	com	r25
    408c:	9b 01       	movw	r18, r22
    408e:	ac 01       	movw	r20, r24
    4090:	bd 01       	movw	r22, r26
    4092:	cf 01       	movw	r24, r30
    4094:	08 95       	ret

00004096 <__prologue_saves__>:
    4096:	2f 92       	push	r2
    4098:	3f 92       	push	r3
    409a:	4f 92       	push	r4
    409c:	5f 92       	push	r5
    409e:	6f 92       	push	r6
    40a0:	7f 92       	push	r7
    40a2:	8f 92       	push	r8
    40a4:	9f 92       	push	r9
    40a6:	af 92       	push	r10
    40a8:	bf 92       	push	r11
    40aa:	cf 92       	push	r12
    40ac:	df 92       	push	r13
    40ae:	ef 92       	push	r14
    40b0:	ff 92       	push	r15
    40b2:	0f 93       	push	r16
    40b4:	1f 93       	push	r17
    40b6:	cf 93       	push	r28
    40b8:	df 93       	push	r29
    40ba:	cd b7       	in	r28, 0x3d	; 61
    40bc:	de b7       	in	r29, 0x3e	; 62
    40be:	ca 1b       	sub	r28, r26
    40c0:	db 0b       	sbc	r29, r27
    40c2:	0f b6       	in	r0, 0x3f	; 63
    40c4:	f8 94       	cli
    40c6:	de bf       	out	0x3e, r29	; 62
    40c8:	0f be       	out	0x3f, r0	; 63
    40ca:	cd bf       	out	0x3d, r28	; 61
    40cc:	09 94       	ijmp

000040ce <__epilogue_restores__>:
    40ce:	2a 88       	ldd	r2, Y+18	; 0x12
    40d0:	39 88       	ldd	r3, Y+17	; 0x11
    40d2:	48 88       	ldd	r4, Y+16	; 0x10
    40d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    40d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    40d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    40da:	8c 84       	ldd	r8, Y+12	; 0x0c
    40dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    40de:	aa 84       	ldd	r10, Y+10	; 0x0a
    40e0:	b9 84       	ldd	r11, Y+9	; 0x09
    40e2:	c8 84       	ldd	r12, Y+8	; 0x08
    40e4:	df 80       	ldd	r13, Y+7	; 0x07
    40e6:	ee 80       	ldd	r14, Y+6	; 0x06
    40e8:	fd 80       	ldd	r15, Y+5	; 0x05
    40ea:	0c 81       	ldd	r16, Y+4	; 0x04
    40ec:	1b 81       	ldd	r17, Y+3	; 0x03
    40ee:	aa 81       	ldd	r26, Y+2	; 0x02
    40f0:	b9 81       	ldd	r27, Y+1	; 0x01
    40f2:	ce 0f       	add	r28, r30
    40f4:	d1 1d       	adc	r29, r1
    40f6:	0f b6       	in	r0, 0x3f	; 63
    40f8:	f8 94       	cli
    40fa:	de bf       	out	0x3e, r29	; 62
    40fc:	0f be       	out	0x3f, r0	; 63
    40fe:	cd bf       	out	0x3d, r28	; 61
    4100:	ed 01       	movw	r28, r26
    4102:	08 95       	ret

00004104 <_exit>:
    4104:	f8 94       	cli

00004106 <__stop_program>:
    4106:	ff cf       	rjmp	.-2      	; 0x4106 <__stop_program>
